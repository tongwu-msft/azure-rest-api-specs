### YamlMime:RESTOperation
uid: api.iotcentral.1.2-previewdataplane.devicetemplates.create
name: Create
service: IoT Central
groupName: Device Templates
apiVersion: 1.2-preview
summary: Publish a new device template. Default views will be automatically generated for new device templates created this way.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://{subdomain}.{baseDomain}/api/deviceTemplates/{deviceTemplateId}?api-version=1.2-preview
uriParameters:
- name: subdomain
  in: path
  isRequired: true
  description: The application subdomain.
  types:
  - uid: string
- name: baseDomain
  in: path
  isRequired: true
  skipUrlEncoding: true
  description: The base domain for all Azure IoT Central service requests.
  types:
  - uid: string
- name: deviceTemplateId
  in: path
  isRequired: true
  description: Unique [Digital Twin Model Identifier](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#digital-twin-model-identifier) of the device template.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The version of the API being called.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Success
  types:
  - uid: DeviceTemplate
- name: Other Status Codes
  headers:
  - name: x-ms-error-code
    value: string
  description: An error response received from the IoT Central Service.
  types:
  - uid: Error
requestBody:
- name: default
  parameters:
  - name: '@type'
    in: body
    isRequired: true
    description: The JSON-LD types of this device template.
    types:
    - uid: string
      isArray: true
  - name: etag
    in: body
    description: ETag used to prevent conflict in device template updates.
    types:
    - uid: string
  - name: displayName
    in: body
    description: Display name of the device template.
    types:
    - uid: string
  - name: description
    in: body
    description: Detailed description of the device template.
    types:
    - uid: string
  - name: capabilityModel
    in: body
    isRequired: true
    description: The capability model utilized by this device template.
    types:
    - uid: object
  - name: deploymentManifest
    in: body
    description: Deployment manifest associated to this device template.
    types:
    - uid: object
requestHeader: []
definitions:
- name: DeviceTemplate
  description: The device template definition.
  kind: object
  properties:
  - name: '@id'
    isReadyOnly: true
    description: Unique ID of the device template.
    types:
    - uid: string
  - name: '@type'
    description: The JSON-LD types of this device template.
    types:
    - uid: string
      isArray: true
  - name: etag
    description: ETag used to prevent conflict in device template updates.
    types:
    - uid: string
  - name: displayName
    description: Display name of the device template.
    types:
    - uid: string
  - name: description
    description: Detailed description of the device template.
    types:
    - uid: string
  - name: capabilityModel
    description: The capability model utilized by this device template.
    types:
    - uid: object
  - name: deploymentManifest
    description: Deployment manifest associated to this device template.
    types:
    - uid: object
- name: Error
  description: The error model definition.
  kind: object
  properties:
  - name: error
    description: Error details for current request.
    types:
    - uid: ErrorDetails
- name: ErrorDetails
  description: The error details definition.
  kind: object
  properties:
  - name: code
    description: Error code.
    types:
    - uid: string
  - name: message
    description: Error message details.
    types:
    - uid: string
  - name: requestId
    description: Correlation Id for current request.
    types:
    - uid: string
  - name: time
    description: The time that request failed.
    types:
    - uid: string
examples:
- name: Create a device template
  request:
    uri: PUT https://appsubdomain.azureiotcentral.com/api/deviceTemplates/dtmi:contoso:testDeviceTemplate;1?api-version=1.2-preview
    body: >-
      {
        "@type": [
          "ModelDefinition",
          "DeviceModel",
          "EdgeModel"
        ],
        "displayName": "Test Definition",
        "capabilityModel": {
          "@id": "dtmi:contoso:testCapabilityModel;1",
          "@type": "Interface",
          "displayName": "Test Capability Model",
          "extends": [
            {
              "@id": "dtmi:contoso:testInterface;1",
              "@type": "Interface",
              "displayName": "Test Interface",
              "contents": [
                {
                  "@type": "Telemetry",
                  "displayName": "Test Telemetry",
                  "name": "testTelemetry",
                  "schema": "double"
                },
                {
                  "@type": [
                    "Telemetry",
                    "Event",
                    "EventValue"
                  ],
                  "displayName": "Test Event",
                  "name": "testEvent",
                  "schema": "integer",
                  "severity": "warning"
                },
                {
                  "@type": [
                    "Property",
                    "Initialized"
                  ],
                  "displayName": "Test Property",
                  "name": "testProperty",
                  "schema": "string",
                  "writable": true,
                  "initialValue": "initialValue1"
                },
                {
                  "@type": "Property",
                  "displayName": "Test Read-Only Property",
                  "name": "testReadOnly",
                  "schema": "string"
                },
                {
                  "@type": "Property",
                  "displayName": "Test Complex Property",
                  "name": "testComplex",
                  "schema": {
                    "@id": "dtmi:contoso:testComplex;1",
                    "@type": "Object",
                    "displayName": "Object",
                    "fields": [
                      {
                        "displayName": "First",
                        "name": "first",
                        "schema": "string"
                      },
                      {
                        "displayName": "Second",
                        "name": "second",
                        "schema": "string"
                      }
                    ]
                  },
                  "writable": true
                },
                {
                  "@type": "Command",
                  "commandType": "synchronous",
                  "displayName": "Test Command",
                  "name": "testCommand",
                  "request": {
                    "displayName": "Test Request",
                    "name": "testRequest",
                    "schema": "double"
                  },
                  "response": {
                    "displayName": "Test Response",
                    "name": "testResponse",
                    "schema": "geopoint"
                  }
                },
                {
                  "@type": "Property",
                  "displayName": "Test Enum",
                  "name": "testEnum",
                  "schema": {
                    "@id": "dtmi:contoso:testEnum;1",
                    "@type": "Enum",
                    "displayName": "Enum",
                    "enumValues": [
                      {
                        "displayName": "First",
                        "enumValue": 1,
                        "name": "first"
                      },
                      {
                        "displayName": "Second",
                        "enumValue": 2,
                        "name": "second"
                      }
                    ],
                    "valueSchema": "integer"
                  },
                  "writable": true
                }
              ]
            }
          ],
          "contents": [
            {
              "@type": [
                "Relationship",
                "EdgeModule"
              ],
              "displayName": "Test Module",
              "maxMultiplicity": 1,
              "name": "testModule",
              "target": [
                {
                  "@id": "dtmi:contoso:testModuleCapabilityModel;1",
                  "@type": "Interface",
                  "displayName": "Test Module Capability Model",
                  "extends": [
                    {
                      "@id": "dtmi:contoso:testModuleInterface;1",
                      "@type": "Interface",
                      "contents": [
                        {
                          "@type": "Telemetry",
                          "displayName": "Test Module Telemetry",
                          "name": "testModuleTelemetry",
                          "schema": "double"
                        },
                        {
                          "@type": "Property",
                          "displayName": "Test Module Property",
                          "name": "testModuleProperty",
                          "schema": "string",
                          "writable": true
                        }
                      ],
                      "displayName": "Test Module Interface"
                    }
                  ]
                }
              ]
            },
            {
              "@type": [
                "Cloud",
                "Property"
              ],
              "displayName": "Test Cloud Property",
              "name": "testCloudProperty",
              "schema": "dateTime"
            }
          ]
        },
        "deploymentManifest": {
          "modulesContent": {
            "$edgeAgent": {
              "properties.desired": {
                "schemaVersion": "1.1",
                "runtime": {
                  "type": "docker",
                  "settings": {
                    "minDockerVersion": "v1.25",
                    "loggingOptions": "",
                    "registryCredentials": {
                      "ContosoRegistry": {
                        "username": "myacr",
                        "password": "<password>",
                        "address": "myacr.azurecr.io"
                      }
                    }
                  }
                },
                "systemModules": {
                  "edgeAgent": {
                    "type": "docker",
                    "settings": {
                      "image": "mcr.microsoft.com/azureiotedge-agent:1.1",
                      "createOptions": "{}"
                    }
                  },
                  "edgeHub": {
                    "type": "docker",
                    "status": "running",
                    "restartPolicy": "always",
                    "startupOrder": 0,
                    "settings": {
                      "image": "mcr.microsoft.com/azureiotedge-hub:1.1",
                      "createOptions": "{\"HostConfig\":{\"PortBindings\":{\"443/tcp\":[{\"HostPort\":\"443\"}],\"5671/tcp\":[{\"HostPort\":\"5671\"}],\"8883/tcp\":[{\"HostPort\":\"8883\"}]}}}"
                    }
                  }
                },
                "modules": {
                  "SimulatedTemperatureSensor": {
                    "version": "1.0",
                    "type": "docker",
                    "status": "running",
                    "restartPolicy": "always",
                    "startupOrder": 2,
                    "settings": {
                      "image": "mcr.microsoft.com/azureiotedge-simulated-temperature-sensor:1.0",
                      "createOptions": "{}"
                    }
                  },
                  "testModule": {
                    "version": "1.0",
                    "type": "docker",
                    "status": "running",
                    "restartPolicy": "always",
                    "startupOrder": 1,
                    "env": {
                      "tempLimit": {
                        "value": "100"
                      }
                    },
                    "settings": {
                      "image": "myacr.azurecr.io/testModule:latest",
                      "createOptions": "{}"
                    }
                  }
                }
              }
            },
            "$edgeHub": {
              "properties.desired": {
                "schemaVersion": "1.1",
                "routes": {
                  "sensorToFilter": {
                    "route": "FROM /messages/modules/SimulatedTemperatureSensor/outputs/temperatureOutput INTO BrokeredEndpoint(\"/modules/testModule/inputs/input1\")",
                    "priority": 0,
                    "timeToLiveSecs": 1800
                  },
                  "filterToIoTHub": {
                    "route": "FROM /messages/modules/testModule/outputs/output1 INTO $upstream",
                    "priority": 1,
                    "timeToLiveSecs": 1800
                  }
                },
                "storeAndForwardConfiguration": {
                  "timeToLiveSecs": 100
                }
              }
            }
          }
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "@id": "dtmi:contoso:testDeviceTemplate;1",
        "@type": [
          "ModelDefinition",
          "DeviceModel",
          "EdgeModel"
        ],
        "displayName": "Test Definition",
        "etag": "\"~jbzfGhYctc9wtzNZXVmVua5JjTHO/FfjMUJvk9hqkRY=\"",
        "capabilityModel": {
          "@id": "dtmi:contoso:testCapabilityModel;1",
          "@type": "Interface",
          "displayName": "Test Capability Model",
          "extends": [
            {
              "@id": "dtmi:contoso:testInterface;1",
              "@type": "Interface",
              "displayName": "Test Interface",
              "contents": [
                {
                  "@type": "Telemetry",
                  "displayName": "Test Telemetry",
                  "name": "testTelemetry",
                  "schema": "double"
                },
                {
                  "@type": [
                    "Telemetry",
                    "Event",
                    "EventValue"
                  ],
                  "displayName": "Test Event",
                  "name": "testEvent",
                  "schema": "integer",
                  "severity": "warning"
                },
                {
                  "@type": [
                    "Property",
                    "Initialized"
                  ],
                  "displayName": "Test Property",
                  "name": "testProperty",
                  "schema": "string",
                  "writable": true,
                  "initialValue": "initialValue1"
                },
                {
                  "@type": "Property",
                  "displayName": "Test Read-Only Property",
                  "name": "testReadOnly",
                  "schema": "string"
                },
                {
                  "@type": "Property",
                  "displayName": "Test Complex Property",
                  "name": "testComplex",
                  "schema": {
                    "@id": "dtmi:contoso:testComplex;1",
                    "@type": "Object",
                    "displayName": "Object",
                    "fields": [
                      {
                        "displayName": "First",
                        "name": "first",
                        "schema": "string"
                      },
                      {
                        "displayName": "Second",
                        "name": "second",
                        "schema": "string"
                      }
                    ]
                  },
                  "writable": true
                },
                {
                  "@type": "Command",
                  "commandType": "synchronous",
                  "displayName": "Test Command",
                  "name": "testCommand",
                  "request": {
                    "displayName": "Test Request",
                    "name": "testRequest",
                    "schema": "double"
                  },
                  "response": {
                    "displayName": "Test Response",
                    "name": "testResponse",
                    "schema": "geopoint"
                  }
                },
                {
                  "@type": "Property",
                  "displayName": "Test Enum",
                  "name": "testEnum",
                  "schema": {
                    "@id": "dtmi:contoso:testEnum;1",
                    "@type": "Enum",
                    "displayName": "Enum",
                    "enumValues": [
                      {
                        "displayName": "First",
                        "enumValue": 1,
                        "name": "first"
                      },
                      {
                        "displayName": "Second",
                        "enumValue": 2,
                        "name": "second"
                      }
                    ],
                    "valueSchema": "integer"
                  },
                  "writable": true
                }
              ]
            }
          ],
          "contents": [
            {
              "@type": [
                "Relationship",
                "EdgeModule"
              ],
              "displayName": "Test Module",
              "maxMultiplicity": 1,
              "name": "testModule",
              "target": [
                {
                  "@id": "dtmi:contoso:testModuleCapabilityModel;1",
                  "@type": "Interface",
                  "displayName": "Test Module Capability Model",
                  "extends": [
                    {
                      "@id": "dtmi:contoso:testModuleInterface;1",
                      "@type": "Interface",
                      "contents": [
                        {
                          "@type": "Telemetry",
                          "displayName": "Test Module Telemetry",
                          "name": "testModuleTelemetry",
                          "schema": "double"
                        },
                        {
                          "@type": "Property",
                          "displayName": "Test Module Property",
                          "name": "testModuleProperty",
                          "schema": "string",
                          "writable": true
                        }
                      ],
                      "displayName": "Test Module Interface"
                    }
                  ]
                }
              ]
            },
            {
              "@type": [
                "Cloud",
                "Property"
              ],
              "displayName": "Test Cloud Property",
              "name": "testCloudProperty",
              "schema": "dateTime"
            }
          ]
        },
        "deploymentManifest": {
          "modulesContent": {
            "$edgeAgent": {
              "properties.desired": {
                "schemaVersion": "1.1",
                "runtime": {
                  "type": "docker",
                  "settings": {
                    "minDockerVersion": "v1.25",
                    "loggingOptions": "",
                    "registryCredentials": {
                      "ContosoRegistry": {
                        "username": "myacr",
                        "password": "<password>",
                        "address": "myacr.azurecr.io"
                      }
                    }
                  }
                },
                "systemModules": {
                  "edgeAgent": {
                    "type": "docker",
                    "settings": {
                      "image": "mcr.microsoft.com/azureiotedge-agent:1.1",
                      "createOptions": "{}"
                    }
                  },
                  "edgeHub": {
                    "type": "docker",
                    "status": "running",
                    "restartPolicy": "always",
                    "startupOrder": 0,
                    "settings": {
                      "image": "mcr.microsoft.com/azureiotedge-hub:1.1",
                      "createOptions": "{\"HostConfig\":{\"PortBindings\":{\"443/tcp\":[{\"HostPort\":\"443\"}],\"5671/tcp\":[{\"HostPort\":\"5671\"}],\"8883/tcp\":[{\"HostPort\":\"8883\"}]}}}"
                    }
                  }
                },
                "modules": {
                  "SimulatedTemperatureSensor": {
                    "version": "1.0",
                    "type": "docker",
                    "status": "running",
                    "restartPolicy": "always",
                    "startupOrder": 2,
                    "settings": {
                      "image": "mcr.microsoft.com/azureiotedge-simulated-temperature-sensor:1.0",
                      "createOptions": "{}"
                    }
                  },
                  "testModule": {
                    "version": "1.0",
                    "type": "docker",
                    "status": "running",
                    "restartPolicy": "always",
                    "startupOrder": 1,
                    "env": {
                      "tempLimit": {
                        "value": "100"
                      }
                    },
                    "settings": {
                      "image": "myacr.azurecr.io/testModule:latest",
                      "createOptions": "{}"
                    }
                  }
                }
              }
            },
            "$edgeHub": {
              "properties.desired": {
                "schemaVersion": "1.1",
                "routes": {
                  "sensorToFilter": {
                    "route": "FROM /messages/modules/SimulatedTemperatureSensor/outputs/temperatureOutput INTO BrokeredEndpoint(\"/modules/testModule/inputs/input1\")",
                    "priority": 0,
                    "timeToLiveSecs": 1800
                  },
                  "filterToIoTHub": {
                    "route": "FROM /messages/modules/testModule/outputs/output1 INTO $upstream",
                    "priority": 1,
                    "timeToLiveSecs": 1800
                  }
                },
                "storeAndForwardConfiguration": {
                  "timeToLiveSecs": 100
                }
              }
            }
          }
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Publish a new device template. Default views will be automatically generated for new device templates created this way.
errorCodes: []
