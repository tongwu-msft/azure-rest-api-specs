### YamlMime:RESTOperation
uid: synapse.data-plane.dataflow.createorupdatedataflow
name: Create Or Update Data Flow
service: Synapse
groupName: Data Flow
apiVersion: 2020-12-01
summary: Creates or updates a data flow.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT {endpoint}/dataflows/{dataFlowName}?api-version=2020-12-01
uriParameters:
- name: endpoint
  in: path
  isRequired: true
  skipUrlEncoding: true
  description: The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net.
  types:
  - uid: string
- name: dataFlowName
  in: path
  isRequired: true
  description: The data flow name.
  types:
  - uid: string
  pattern: ^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$
- name: api-version
  in: query
  isRequired: true
  description: The Synapse client API Version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK.
  types:
  - uid: DataFlowResource
- name: 202 Accepted
  description: Accepted.
- name: Other Status Codes
  description: An error response received from the Azure Synapse service.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: properties
    in: body
    isRequired: true
    description: Data flow properties.
    types:
    - uid: MappingDataFlow
    - uid: Flowlet
    typesTitle: DataFlow
requestHeader:
- name: If-Match
  in: header
  description: ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
  types:
  - uid: string
definitions:
- name: DataFlowResource
  description: Data flow resource type.
  kind: object
  properties:
  - name: properties
    description: Data flow properties.
    types:
    - uid: MappingDataFlow
    - uid: Flowlet
    typesTitle: DataFlow
  - name: etag
    isReadyOnly: true
    description: Resource Etag.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: CloudError
  description: The object that defines the structure of an Azure Synapse error response.
  kind: object
  properties:
  - name: error.code
    description: Error code.
    types:
    - uid: string
  - name: error.message
    description: Error message.
    types:
    - uid: string
  - name: error.target
    description: Property name/path in request associated with error.
    types:
    - uid: string
  - name: error.details
    description: Array with additional error details.
    types:
    - uid: CloudError
      isArray: true
- name: MappingDataFlow
  description: Mapping data flow.
  kind: object
  properties:
  - name: typeProperties.sources
    description: List of sources in data flow.
    types:
    - uid: DataFlowSource
      isArray: true
  - name: typeProperties.sinks
    description: List of sinks in data flow.
    types:
    - uid: DataFlowSink
      isArray: true
  - name: typeProperties.transformations
    description: List of transformations in data flow.
    types:
    - uid: Transformation
      isArray: true
  - name: typeProperties.script
    description: DataFlow script.
    types:
    - uid: string
  - name: typeProperties.scriptLines
    description: Data flow script lines.
    types:
    - uid: string
      isArray: true
  - name: type
    description: Type of data flow.
    types:
    - uid: MappingDataFlow
    typesTitle: string
  - name: description
    description: The description of the data flow.
    types:
    - uid: string
  - name: annotations
    description: List of tags that can be used for describing the data flow.
    types:
    - uid: object
      isArray: true
  - name: folder
    description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
    types:
    - uid: Folder
- name: Flowlet
  description: Data flow flowlet
  kind: object
  properties:
  - name: typeProperties.sources
    description: List of sources in Flowlet.
    types:
    - uid: DataFlowSource
      isArray: true
  - name: typeProperties.sinks
    description: List of sinks in Flowlet.
    types:
    - uid: DataFlowSink
      isArray: true
  - name: typeProperties.transformations
    description: List of transformations in Flowlet.
    types:
    - uid: Transformation
      isArray: true
  - name: typeProperties.script
    description: Flowlet script.
    types:
    - uid: string
  - name: typeProperties.scriptLines
    description: Flowlet script lines.
    types:
    - uid: string
      isArray: true
  - name: typeProperties.additionalProperties
    description: ''
    types:
    - uid: object
  - name: type
    description: Type of data flow.
    types:
    - uid: Flowlet
    typesTitle: string
  - name: description
    description: The description of the data flow.
    types:
    - uid: string
  - name: annotations
    description: List of tags that can be used for describing the data flow.
    types:
    - uid: object
      isArray: true
  - name: folder
    description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
    types:
    - uid: Folder
- name: DataFlowSource
  description: Transformation for data flow source.
  kind: object
  properties:
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: schemaLinkedService
    description: Schema linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
- name: DataFlowSink
  description: Transformation for data flow sink.
  kind: object
  properties:
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: schemaLinkedService
    description: Schema linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
- name: Transformation
  description: A data flow transformation.
  kind: object
  properties:
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
- name: Folder
  description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
  kind: object
  properties:
  - name: name
    description: The name of the folder that this data flow is in.
    types:
    - uid: string
- name: DatasetReference
  description: Dataset reference type.
  kind: object
  properties:
  - name: type
    description: Dataset reference type.
    types:
    - uid: DatasetReferenceType
  - name: referenceName
    description: Reference dataset name.
    types:
    - uid: string
  - name: parameters
    description: Arguments for dataset.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: object
- name: LinkedServiceReference
  description: Linked service reference type.
  kind: object
  properties:
  - name: type
    description: Linked service reference type.
    types:
    - uid: Type
  - name: referenceName
    description: Reference LinkedService name.
    types:
    - uid: string
  - name: parameters
    description: Arguments for LinkedService.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: object
- name: DataFlowReference
  description: Data flow reference type.
  kind: object
  properties:
  - name: type
    description: Data flow reference type.
    types:
    - uid: DataFlowReferenceType
  - name: referenceName
    description: Reference data flow name.
    types:
    - uid: string
  - name: datasetParameters
    description: Reference data flow parameters from dataset.
    types:
    - uid: object
  - name: parameters
    description: Data flow parameters
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: object
- name: DatasetReferenceType
  description: Dataset reference type.
  kind: enum
  properties:
  - name: DatasetReference
    types:
    - uid: string
- name: Type
  description: Linked service reference type.
  kind: enum
  properties:
  - name: LinkedServiceReference
    types:
    - uid: string
- name: DataFlowReferenceType
  description: Data flow reference type.
  kind: enum
  properties:
  - name: DataFlowReference
    types:
    - uid: string
examples:
- name: DataFlows_Create
  request:
    uri: PUT exampleWorkspace.dev.azuresynapse.net/dataflows/exampleDataFlow?api-version=2020-12-01
    body: >-
      {
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "script": "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
          }
        }
      }
  responses:
  - statusCode: "202"
    headers:
    - name: Date
      value: Sat, 16 Jun 2019 00:37:38 GMT
    - name: X-Content-Type-Options
      value: nosniff
    - name: x-ms-ratelimit-remaining-subscription-writes
      value: "1194"
    - name: x-ms-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
    - name: x-ms-correlation-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspaceName/datasets/exampleDataset",
        "name": "exampleDataFlow",
        "type": "Microsoft.Synapse/workspaces/dataflows",
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "script": "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
          }
        },
        "etag": "0a0066d4-0000-0000-0000-5b245bd20000"
      }
- name: DataFlows_Update
  request:
    uri: PUT exampleWorkspace.dev.azuresynapse.net/dataflows/exampleDataFlow?api-version=2020-12-01
    body: >-
      {
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "script": "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
          }
        }
      }
  responses:
  - statusCode: "202"
    headers:
    - name: Date
      value: Sat, 16 Jun 2019 00:37:38 GMT
    - name: X-Content-Type-Options
      value: nosniff
    - name: x-ms-ratelimit-remaining-subscription-writes
      value: "1193"
    - name: x-ms-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
    - name: x-ms-correlation-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspaceName/datasets/exampleDataset",
        "name": "exampleDataFlow",
        "type": "Microsoft.Synapse/workspaces/dataflows",
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "script": "source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\nsource(output(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as double),allowSchemaDrift: true,validateSchema: false) ~> CADSource\nUSDCurrency, CADSource union(byName: true)~> Union\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\nNewCurrencyColumn split(Country == 'USD',Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)\nConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink\nConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
          }
        },
        "etag": "0a0068d4-0000-0000-0000-5b245bd30002"
      }
security: []
metadata:
  description: Learn more about Synapse service - Creates or updates a data flow.
errorCodes: []
