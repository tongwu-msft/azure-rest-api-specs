### YamlMime:RESTOperation
uid: management.azure.com.synapse.sqlpoolblobauditingpolicies.createorupdate
name: Create Or Update
service: Synapse
groupName: Sql Pool Blob Auditing Policies
apiVersion: 2021-03-01
summary: "Creates or updates a SQL pool's blob auditing policy  \nCreates or updates a SQL pool's blob auditing policy."
consumes: []
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/auditingSettings/default?api-version=2021-03-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: workspaceName
  in: path
  isRequired: true
  description: The name of the workspace
  types:
  - uid: string
- name: sqlPoolName
  in: path
  isRequired: true
  description: SQL pool name
  types:
  - uid: string
- name: blobAuditingPolicyName
  in: path
  isRequired: true
  description: The name of the blob auditing policy.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully set the Sql pool blob auditing policy
  types:
  - uid: SqlPoolBlobAuditingPolicy
- name: Other Status Codes
  description: >-
    *** Error Responses: ***

     * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

     * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.

     * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

     * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

     * 400 BlobAuditingInvalidStorageAccountName - The provided storage account is not valid or does not exist.

     * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

     * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account or access key is not valid.

     * 400 BlobAuditingIsNotSupportedOnGeoDr - Blob auditing can be configured on primary databases only.

     * 400 InvalidBlobAuditActionsAndGroupsForDW - Unsupported audit actions or action groups for DW.

     * 400 BlobAuditingInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

     * 400 BlobAuditingStorageAccountIsDisabled - The provided storage account is disabled.

     * 400 InvalidBlobAuditActions - Invalid audit action

     * 404 SourceDatabaseNotFound - The source database does not exist.

     * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

     * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
- name: 201 Created
  description: Successfully created the Sql pool blob auditing policy.
  types:
  - uid: SqlPoolBlobAuditingPolicy
requestBody:
- name: default
  parameters:
  - name: properties.state
    in: body
    isRequired: true
    description: Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
    types:
    - uid: BlobAuditingPolicyState
  - name: properties.storageEndpoint
    in: body
    description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
    types:
    - uid: string
  - name: properties.storageAccountAccessKey
    in: body
    description: Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.
    types:
    - uid: string
  - name: properties.retentionDays
    in: body
    description: Specifies the number of days to keep in the audit logs in the storage account.
    types:
    - uid: integer
  - name: properties.auditActionsAndGroups
    in: body
    description: >-
      Specifies the Actions-Groups and Actions to audit.


      The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:


      BATCH_COMPLETED_GROUP,

      SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,

      FAILED_DATABASE_AUTHENTICATION_GROUP.


      This above combination is also the set that is configured by default when enabling auditing from the Azure portal.


      The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):


      APPLICATION_ROLE_CHANGE_PASSWORD_GROUP

      BACKUP_RESTORE_GROUP

      DATABASE_LOGOUT_GROUP

      DATABASE_OBJECT_CHANGE_GROUP

      DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP

      DATABASE_OBJECT_PERMISSION_CHANGE_GROUP

      DATABASE_OPERATION_GROUP

      DATABASE_PERMISSION_CHANGE_GROUP

      DATABASE_PRINCIPAL_CHANGE_GROUP

      DATABASE_PRINCIPAL_IMPERSONATION_GROUP

      DATABASE_ROLE_MEMBER_CHANGE_GROUP

      FAILED_DATABASE_AUTHENTICATION_GROUP

      SCHEMA_OBJECT_ACCESS_GROUP

      SCHEMA_OBJECT_CHANGE_GROUP

      SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP

      SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP

      SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP

      USER_CHANGE_PASSWORD_GROUP

      BATCH_STARTED_GROUP

      BATCH_COMPLETED_GROUP


      These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.


      For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).


      For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:

      SELECT

      UPDATE

      INSERT

      DELETE

      EXECUTE

      RECEIVE

      REFERENCES


      The general form for defining an action to be audited is:

      {action} ON {object} BY {principal}


      Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.


      For example:

      SELECT on dbo.myTable by public

      SELECT on DATABASE::myDatabase by public

      SELECT on SCHEMA::mySchema by public


      For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
    types:
    - uid: string
      isArray: true
  - name: properties.storageAccountSubscriptionId
    in: body
    description: Specifies the blob storage subscription Id.
    types:
    - uid: string
  - name: properties.isStorageSecondaryKeyInUse
    in: body
    description: Specifies whether storageAccountAccessKey value is the storage's secondary key.
    types:
    - uid: boolean
  - name: properties.isAzureMonitorTargetEnabled
    in: body
    description: "Specifies whether audit events are sent to Azure Monitor. \nIn order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.\n\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.\nNote that for server level audit you should use the 'master' database as {databaseName}.\n\nDiagnostic Settings URI format:\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\n\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r"
    types:
    - uid: boolean
requestHeader: []
definitions:
- name: SqlPoolBlobAuditingPolicy
  description: A Sql pool blob auditing policy.
  kind: object
  properties:
  - name: kind
    isReadyOnly: true
    description: Resource kind.
    types:
    - uid: string
  - name: properties.state
    description: Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
    types:
    - uid: BlobAuditingPolicyState
  - name: properties.storageEndpoint
    description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.
    types:
    - uid: string
  - name: properties.storageAccountAccessKey
    description: Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required.
    types:
    - uid: string
  - name: properties.retentionDays
    description: Specifies the number of days to keep in the audit logs in the storage account.
    types:
    - uid: integer
  - name: properties.auditActionsAndGroups
    description: >-
      Specifies the Actions-Groups and Actions to audit.


      The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:


      BATCH_COMPLETED_GROUP,

      SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,

      FAILED_DATABASE_AUTHENTICATION_GROUP.


      This above combination is also the set that is configured by default when enabling auditing from the Azure portal.


      The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):


      APPLICATION_ROLE_CHANGE_PASSWORD_GROUP

      BACKUP_RESTORE_GROUP

      DATABASE_LOGOUT_GROUP

      DATABASE_OBJECT_CHANGE_GROUP

      DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP

      DATABASE_OBJECT_PERMISSION_CHANGE_GROUP

      DATABASE_OPERATION_GROUP

      DATABASE_PERMISSION_CHANGE_GROUP

      DATABASE_PRINCIPAL_CHANGE_GROUP

      DATABASE_PRINCIPAL_IMPERSONATION_GROUP

      DATABASE_ROLE_MEMBER_CHANGE_GROUP

      FAILED_DATABASE_AUTHENTICATION_GROUP

      SCHEMA_OBJECT_ACCESS_GROUP

      SCHEMA_OBJECT_CHANGE_GROUP

      SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP

      SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP

      SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP

      USER_CHANGE_PASSWORD_GROUP

      BATCH_STARTED_GROUP

      BATCH_COMPLETED_GROUP


      These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.


      For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).


      For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:

      SELECT

      UPDATE

      INSERT

      DELETE

      EXECUTE

      RECEIVE

      REFERENCES


      The general form for defining an action to be audited is:

      {action} ON {object} BY {principal}


      Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.


      For example:

      SELECT on dbo.myTable by public

      SELECT on DATABASE::myDatabase by public

      SELECT on SCHEMA::mySchema by public


      For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
    types:
    - uid: string
      isArray: true
  - name: properties.storageAccountSubscriptionId
    description: Specifies the blob storage subscription Id.
    types:
    - uid: string
  - name: properties.isStorageSecondaryKeyInUse
    description: Specifies whether storageAccountAccessKey value is the storage's secondary key.
    types:
    - uid: boolean
  - name: properties.isAzureMonitorTargetEnabled
    description: "Specifies whether audit events are sent to Azure Monitor. \nIn order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.\n\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.\nNote that for server level audit you should use the 'master' database as {databaseName}.\n\nDiagnostic Settings URI format:\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\n\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r"
    types:
    - uid: boolean
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: BlobAuditingPolicyState
  description: Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
examples:
- name: Create or update a database's blob auditing policy with minimal parameters
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb/auditingSettings/default?api-version=2021-03-01
    body: >-
      {
        "properties": {
          "state": "Enabled",
          "storageAccountAccessKey": "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb",
        "name": "default",
        "type": "Microsoft.Synapse/workspaces/sqlPools/auditingSettings",
        "kind": "V12",
        "properties": {
          "state": "Enabled",
          "storageEndpoint": "https://mystorage.blob.core.windows.net",
          "retentionDays": 0,
          "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
          "isStorageSecondaryKeyInUse": false,
          "auditActionsAndGroups": [
            "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
            "FAILED_DATABASE_AUTHENTICATION_GROUP",
            "BATCH_COMPLETED_GROUP"
          ],
          "isAzureMonitorTargetEnabled": false
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb",
        "name": "default",
        "type": "Microsoft.Synapse/workspaces/sqlPools/auditingSettings",
        "kind": "V12",
        "properties": {
          "state": "Enabled",
          "storageEndpoint": "https://mystorage.blob.core.windows.net",
          "retentionDays": 0,
          "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
          "isStorageSecondaryKeyInUse": false,
          "auditActionsAndGroups": [
            "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
            "FAILED_DATABASE_AUTHENTICATION_GROUP",
            "BATCH_COMPLETED_GROUP"
          ],
          "isAzureMonitorTargetEnabled": false
        }
      }
- name: Create or update a database's blob auditing policy with all parameters
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb/auditingSettings/default?api-version=2021-03-01
    body: >-
      {
        "properties": {
          "state": "Enabled",
          "storageAccountAccessKey": "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          "storageEndpoint": "https://mystorage.blob.core.windows.net",
          "retentionDays": 6,
          "storageAccountSubscriptionId": "00000000-1234-0000-5678-000000000000",
          "isStorageSecondaryKeyInUse": false,
          "auditActionsAndGroups": [
            "DATABASE_LOGOUT_GROUP",
            "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
            "UPDATE on database::TestDatabaseName by public"
          ],
          "isAzureMonitorTargetEnabled": true
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb",
        "name": "default",
        "type": "Microsoft.Synapse/workspaces/sqlPools/auditingSettings",
        "kind": "V12",
        "properties": {
          "state": "Enabled",
          "storageEndpoint": "https://mystorage.blob.core.windows.net",
          "retentionDays": 0,
          "storageAccountSubscriptionId": "00000000-1234-0000-5678-000000000000",
          "isStorageSecondaryKeyInUse": false,
          "auditActionsAndGroups": [
            "DATABASE_LOGOUT_GROUP",
            "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
            "UPDATE on database::TestDatabaseName by public"
          ],
          "isAzureMonitorTargetEnabled": true
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb",
        "name": "default",
        "type": "Microsoft.Synapse/workspaces/sqlPools/auditingSettings",
        "kind": "V12",
        "properties": {
          "state": "Enabled",
          "storageEndpoint": "https://mystorage.blob.core.windows.net",
          "retentionDays": 0,
          "storageAccountSubscriptionId": "00000000-1234-0000-5678-000000000000",
          "isStorageSecondaryKeyInUse": false,
          "auditActionsAndGroups": [
            "DATABASE_LOGOUT_GROUP",
            "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
            "UPDATE on database::TestDatabaseName by public"
          ],
          "isAzureMonitorTargetEnabled": true
        }
      }
security: []
errorCodes: []
