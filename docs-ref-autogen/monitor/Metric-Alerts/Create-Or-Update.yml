### YamlMime:RESTOperation
uid: management.azure.com.monitor.metricalerts.createorupdate
name: Create Or Update
service: Monitor
groupName: Metric Alerts
apiVersion: 2018-03-01
summary: Create or update an metric alert definition.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}?api-version=2018-03-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group. The name is case insensitive.
  types:
  - uid: string
- name: ruleName
  in: path
  isRequired: true
  description: The name of the rule.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: MetricAlertResource
- name: Other Status Codes
  description: BadRequest
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: properties.description
    in: body
    description: the description of the metric alert that will be included in the alert email.
    types:
    - uid: string
  - name: properties.severity
    in: body
    isRequired: true
    description: Alert severity {0, 1, 2, 3, 4}
    types:
    - uid: integer
  - name: properties.enabled
    in: body
    isRequired: true
    description: the flag that indicates whether the metric alert is enabled.
    types:
    - uid: boolean
  - name: properties.scopes
    in: body
    isRequired: true
    description: the list of resource id's that this metric alert is scoped to.
    types:
    - uid: string
      isArray: true
  - name: properties.evaluationFrequency
    in: body
    isRequired: true
    description: how often the metric alert is evaluated represented in ISO 8601 duration format.
    types:
    - uid: string
  - name: properties.windowSize
    in: body
    isRequired: true
    description: the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
    types:
    - uid: string
  - name: properties.targetResourceType
    in: body
    description: the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
    types:
    - uid: string
  - name: properties.targetResourceRegion
    in: body
    description: the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
    types:
    - uid: string
  - name: properties.criteria
    in: body
    isRequired: true
    description: defines the specific alert criteria information.
    types:
    - uid: MetricAlertSingleResourceMultipleMetricCriteria
    - uid: WebtestLocationAvailabilityCriteria
    - uid: MetricAlertMultipleResourceMultipleMetricCriteria
    typesTitle: MetricAlertCriteria
  - name: properties.autoMitigate
    in: body
    description: the flag that indicates whether the alert should be auto resolved or not. The default is true.
    types:
    - uid: boolean
  - name: properties.actions
    in: body
    description: the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
    types:
    - uid: MetricAlertAction
      isArray: true
  - name: location
    in: body
    isRequired: true
    description: Resource location
    types:
    - uid: string
  - name: tags
    in: body
    description: Resource tags
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: MetricAlertAction
  description: An alert action.
  kind: object
  properties:
  - name: actionGroupId
    description: the id of the action group to use.
    types:
    - uid: string
  - name: webHookProperties
    description: This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: MetricAlertResource
  description: The metric alert resource.
  kind: object
  properties:
  - name: properties.description
    description: the description of the metric alert that will be included in the alert email.
    types:
    - uid: string
  - name: properties.severity
    description: Alert severity {0, 1, 2, 3, 4}
    types:
    - uid: integer
  - name: properties.enabled
    description: the flag that indicates whether the metric alert is enabled.
    types:
    - uid: boolean
  - name: properties.scopes
    description: the list of resource id's that this metric alert is scoped to.
    types:
    - uid: string
      isArray: true
  - name: properties.evaluationFrequency
    description: how often the metric alert is evaluated represented in ISO 8601 duration format.
    types:
    - uid: string
  - name: properties.windowSize
    description: the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
    types:
    - uid: string
  - name: properties.targetResourceType
    description: the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
    types:
    - uid: string
  - name: properties.targetResourceRegion
    description: the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
    types:
    - uid: string
  - name: properties.criteria
    description: defines the specific alert criteria information.
    types:
    - uid: MetricAlertSingleResourceMultipleMetricCriteria
    - uid: WebtestLocationAvailabilityCriteria
    - uid: MetricAlertMultipleResourceMultipleMetricCriteria
    typesTitle: MetricAlertCriteria
  - name: properties.autoMitigate
    description: the flag that indicates whether the alert should be auto resolved or not. The default is true.
    types:
    - uid: boolean
  - name: properties.actions
    description: the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
    types:
    - uid: MetricAlertAction
      isArray: true
  - name: properties.lastUpdatedTime
    isReadyOnly: true
    description: Last time the rule was updated in ISO8601 format.
    types:
    - uid: string
  - name: properties.isMigrated
    isReadyOnly: true
    description: the value indicating whether this alert rule is migrated.
    types:
    - uid: boolean
  - name: id
    isReadyOnly: true
    description: Azure resource Id
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Azure resource name
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Azure resource type
    types:
    - uid: string
  - name: location
    description: Resource location
    types:
    - uid: string
  - name: tags
    description: Resource tags
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: ErrorResponse
  description: Describes the format of Error response.
  kind: object
  properties:
  - name: code
    description: Error code
    types:
    - uid: string
  - name: message
    description: Error message indicating why the operation failed.
    types:
    - uid: string
- name: MetricAlertSingleResourceMultipleMetricCriteria
  description: Specifies the metric alert criteria for a single resource that has multiple metric criteria.
  kind: object
  properties:
  - name: allOf
    description: "The list of metric criteria for this 'all of' operation. "
    types:
    - uid: MetricCriteria
      isArray: true
  - name: odata.type
    description: specifies the type of the alert criteria.
    types:
    - uid: Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria
    typesTitle: string
- name: WebtestLocationAvailabilityCriteria
  description: Specifies the metric alert rule criteria for a web test resource.
  kind: object
  properties:
  - name: webTestId
    description: The Application Insights web test Id.
    types:
    - uid: string
  - name: componentId
    description: The Application Insights resource Id.
    types:
    - uid: string
  - name: failedLocationCount
    description: The number of failed locations.
    types:
    - uid: number
  - name: odata.type
    description: specifies the type of the alert criteria.
    types:
    - uid: Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria
    typesTitle: string
- name: MetricAlertMultipleResourceMultipleMetricCriteria
  description: Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
  kind: object
  properties:
  - name: allOf
    description: "the list of multiple metric criteria for this 'all of' operation. "
    types:
    - uid: MetricCriteria
      isArray: true
    - uid: DynamicMetricCriteria
      isArray: true
    typesTitle: MultiMetricCriteria[]
  - name: odata.type
    description: specifies the type of the alert criteria.
    types:
    - uid: Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria
    typesTitle: string
- name: MetricCriteria
  description: Criterion to filter metrics.
  kind: object
  properties:
  - name: operator
    description: the criteria operator.
    types:
    - uid: Operator
  - name: threshold
    description: the criteria threshold value that activates the alert.
    types:
    - uid: number
  - name: criterionType
    description: Specifies the type of threshold criteria
    types:
    - uid: StaticThresholdCriterion
    typesTitle: string
  - name: name
    description: Name of the criteria.
    types:
    - uid: string
  - name: metricName
    description: Name of the metric.
    types:
    - uid: string
  - name: metricNamespace
    description: Namespace of the metric.
    types:
    - uid: string
  - name: timeAggregation
    description: the criteria time aggregation types.
    types:
    - uid: AggregationTypeEnum
  - name: dimensions
    description: List of dimension conditions.
    types:
    - uid: MetricDimension
      isArray: true
  - name: skipMetricValidation
    description: Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
    types:
    - uid: boolean
- name: Operator
  description: the criteria operator.
  kind: enum
  properties:
  - name: Equals
    types:
    - uid: string
  - name: GreaterThan
    types:
    - uid: string
  - name: GreaterThanOrEqual
    types:
    - uid: string
  - name: LessThan
    types:
    - uid: string
  - name: LessThanOrEqual
    types:
    - uid: string
- name: AggregationTypeEnum
  description: the criteria time aggregation types.
  kind: enum
  properties:
  - name: Average
    types:
    - uid: string
  - name: Count
    types:
    - uid: string
  - name: Minimum
    types:
    - uid: string
  - name: Maximum
    types:
    - uid: string
  - name: Total
    types:
    - uid: string
- name: MetricDimension
  description: Specifies a metric dimension.
  kind: object
  properties:
  - name: name
    description: Name of the dimension.
    types:
    - uid: string
  - name: operator
    description: the dimension operator. Only 'Include' and 'Exclude' are supported
    types:
    - uid: string
  - name: values
    description: list of dimension values.
    types:
    - uid: string
      isArray: true
- name: DynamicMetricCriteria
  description: Criterion for dynamic threshold.
  kind: object
  properties:
  - name: operator
    description: The operator used to compare the metric value against the threshold.
    types:
    - uid: DynamicThresholdOperator
  - name: alertSensitivity
    description: The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
    types:
    - uid: DynamicThresholdSensitivity
  - name: failingPeriods
    description: The minimum number of violations required within the selected lookback time window required to raise an alert.
    types:
    - uid: DynamicThresholdFailingPeriods
  - name: ignoreDataBefore
    description: Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
    types:
    - uid: string
  - name: criterionType
    description: Specifies the type of threshold criteria
    types:
    - uid: DynamicThresholdCriterion
    typesTitle: string
  - name: name
    description: Name of the criteria.
    types:
    - uid: string
  - name: metricName
    description: Name of the metric.
    types:
    - uid: string
  - name: metricNamespace
    description: Namespace of the metric.
    types:
    - uid: string
  - name: timeAggregation
    description: the criteria time aggregation types.
    types:
    - uid: AggregationTypeEnum
  - name: dimensions
    description: List of dimension conditions.
    types:
    - uid: MetricDimension
      isArray: true
  - name: skipMetricValidation
    description: Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
    types:
    - uid: boolean
- name: DynamicThresholdOperator
  description: The operator used to compare the metric value against the threshold.
  kind: enum
  properties:
  - name: GreaterThan
    types:
    - uid: string
  - name: LessThan
    types:
    - uid: string
  - name: GreaterOrLessThan
    types:
    - uid: string
- name: DynamicThresholdSensitivity
  description: The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
  kind: enum
  properties:
  - name: Low
    types:
    - uid: string
  - name: Medium
    types:
    - uid: string
  - name: High
    types:
    - uid: string
- name: DynamicThresholdFailingPeriods
  description: The minimum number of violations required within the selected lookback time window required to raise an alert.
  kind: object
  properties:
  - name: numberOfEvaluationPeriods
    description: The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
    types:
    - uid: number
  - name: minFailingPeriodsToAlert
    description: The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
    types:
    - uid: number
examples:
- name: Create or update an alert rule for Single Resource
  request:
    uri: PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"
          ],
          "evaluationFrequency": "Pt1m",
          "windowSize": "Pt15m",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "\\Processor(_Total)\\% Processor Time",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"
          ],
          "evaluationFrequency": "Pt1m",
          "windowSize": "Pt15m",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "\\Processor(_Total)\\% Processor Time",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertSingleResourceMultipleMetricCriteria;
      import com.azure.resourcemanager.monitor.models.MetricCriteria;
      import com.azure.resourcemanager.monitor.models.Operator;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSingleResource.json
           */
          /**
           * Sample code: Create or update an alert rule for Single Resource.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateAnAlertRuleForSingleResource(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest",
                      "chiricutin",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"))
                          .withEvaluationFrequency(Duration.parse("Pt1m"))
                          .withWindowSize(Duration.parse("Pt15m"))
                          .withCriteria(
                              new MetricAlertSingleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new MetricCriteria()
                                                  .withName("High_CPU_80")
                                                  .withMetricName("\\Processor(_Total)\\% Processor Time")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(Arrays.asList())
                                                  .withOperator(Operator.GREATER_THAN)
                                                  .withThreshold(80.5))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSingleResource.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateAnAlertRuleForSingleResource() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest", "chiricutin", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria),
      				AllOf: []*armmonitor.MetricCriteria{
      					{
      						Name:            to.Ptr("High_CPU_80"),
      						CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
      						Dimensions:      []*armmonitor.MetricDimension{},
      						MetricName:      to.Ptr("\\Processor(_Total)\\% Processor Time"),
      						TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
      						Threshold:       to.Ptr[float64](80.5),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("Pt1m"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
      			Severity:   to.Ptr[int32](3),
      			WindowSize: to.Ptr("Pt15m"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSingleResource.json
       */
      async function createOrUpdateAnAlertRuleForSingleResource() {
        const subscriptionId = "14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7";
        const resourceGroupName = "gigtest";
        const ruleName = "chiricutin";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "High_CPU_80",
                criterionType: "StaticThresholdCriterion",
                dimensions: [],
                metricName: "Processor(_Total)% Processor Time",
                operator: "GreaterThan",
                threshold: 80.5,
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "Pt1m",
          location: "global",
          scopes: [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme",
          ],
          severity: 3,
          tags: {},
          windowSize: "Pt15m",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateAnAlertRuleForSingleResource().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"
          ],
          "evaluationFrequency": "Pt1m",
          "windowSize": "Pt15m",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "\\Processor(_Total)\\% Processor Time",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
- name: Create or update an alert rule for Multiple Resource
  request:
    uri: PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleResources?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleResources?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertMultipleResourceMultipleMetricCriteria;
      import com.azure.resourcemanager.monitor.models.MetricCriteria;
      import com.azure.resourcemanager.monitor.models.Operator;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertMultipleResource.json
           */
          /**
           * Sample code: Create or update an alert rule for Multiple Resource.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateAnAlertRuleForMultipleResource(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest",
                      "MetricAlertOnMultipleResources",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
                                      "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"))
                          .withEvaluationFrequency(Duration.parse("PT1M"))
                          .withWindowSize(Duration.parse("PT15M"))
                          .withTargetResourceType("Microsoft.Compute/virtualMachines")
                          .withTargetResourceRegion("southcentralus")
                          .withCriteria(
                              new MetricAlertMultipleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new MetricCriteria()
                                                  .withName("High_CPU_80")
                                                  .withMetricName("Percentage CPU")
                                                  .withMetricNamespace("microsoft.compute/virtualmachines")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(Arrays.asList())
                                                  .withOperator(Operator.GREATER_THAN)
                                                  .withThreshold(80.5))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertMultipleResource.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateAnAlertRuleForMultipleResource() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest", "MetricAlertOnMultipleResources", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
      				AllOf: []armmonitor.MultiMetricCriteriaClassification{
      					&armmonitor.MetricCriteria{
      						Name:            to.Ptr("High_CPU_80"),
      						CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
      						Dimensions:      []*armmonitor.MetricDimension{},
      						MetricName:      to.Ptr("Percentage CPU"),
      						MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
      						TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
      						Threshold:       to.Ptr[float64](80.5),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1M"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
      			Severity:             to.Ptr[int32](3),
      			TargetResourceRegion: to.Ptr("southcentralus"),
      			TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
      			WindowSize:           to.Ptr("PT15M"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertMultipleResource.json
       */
      async function createOrUpdateAnAlertRuleForMultipleResource() {
        const subscriptionId = "14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7";
        const resourceGroupName = "gigtest";
        const ruleName = "MetricAlertOnMultipleResources";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "High_CPU_80",
                criterionType: "StaticThresholdCriterion",
                dimensions: [],
                metricName: "Percentage CPU",
                metricNamespace: "microsoft.compute/virtualmachines",
                operator: "GreaterThan",
                threshold: 80.5,
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "PT1M",
          location: "global",
          scopes: [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2",
          ],
          severity: 3,
          tags: {},
          targetResourceRegion: "southcentralus",
          targetResourceType: "Microsoft.Compute/virtualMachines",
          windowSize: "PT15M",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateAnAlertRuleForMultipleResource().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertOnMultipleResources",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
- name: Create or update an alert rule on Resource group(s)
  request:
    uri: PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1/providers/Microsoft.Insights/metricAlerts/MetricAlertAtResourceGroupLevel?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1/providers/Microsoft.Insights/metricAlerts/MetricAlertAtResourceGroupLevel?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertMultipleResourceMultipleMetricCriteria;
      import com.azure.resourcemanager.monitor.models.MetricCriteria;
      import com.azure.resourcemanager.monitor.models.Operator;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertResourceGroup.json
           */
          /**
           * Sample code: Create or update an alert rule on Resource group(s).
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateAnAlertRuleOnResourceGroupS(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest1",
                      "MetricAlertAtResourceGroupLevel",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1",
                                      "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2"))
                          .withEvaluationFrequency(Duration.parse("PT1M"))
                          .withWindowSize(Duration.parse("PT15M"))
                          .withTargetResourceType("Microsoft.Compute/virtualMachines")
                          .withTargetResourceRegion("southcentralus")
                          .withCriteria(
                              new MetricAlertMultipleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new MetricCriteria()
                                                  .withName("High_CPU_80")
                                                  .withMetricName("Percentage CPU")
                                                  .withMetricNamespace("microsoft.compute/virtualmachines")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(Arrays.asList())
                                                  .withOperator(Operator.GREATER_THAN)
                                                  .withThreshold(80.5))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertResourceGroup.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateAnAlertRuleOnResourceGroupS() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest1", "MetricAlertAtResourceGroupLevel", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
      				AllOf: []armmonitor.MultiMetricCriteriaClassification{
      					&armmonitor.MetricCriteria{
      						Name:            to.Ptr("High_CPU_80"),
      						CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
      						Dimensions:      []*armmonitor.MetricDimension{},
      						MetricName:      to.Ptr("Percentage CPU"),
      						MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
      						TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
      						Threshold:       to.Ptr[float64](80.5),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1M"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1"),
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2")},
      			Severity:             to.Ptr[int32](3),
      			TargetResourceRegion: to.Ptr("southcentralus"),
      			TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
      			WindowSize:           to.Ptr("PT15M"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertResourceGroup.json
       */
      async function createOrUpdateAnAlertRuleOnResourceGroupS() {
        const subscriptionId = "14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7";
        const resourceGroupName = "gigtest1";
        const ruleName = "MetricAlertAtResourceGroupLevel";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "High_CPU_80",
                criterionType: "StaticThresholdCriterion",
                dimensions: [],
                metricName: "Percentage CPU",
                metricNamespace: "microsoft.compute/virtualmachines",
                operator: "GreaterThan",
                threshold: 80.5,
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "PT1M",
          location: "global",
          scopes: [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2",
          ],
          severity: 3,
          tags: {},
          targetResourceRegion: "southcentralus",
          targetResourceType: "Microsoft.Compute/virtualMachines",
          windowSize: "PT15M",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateAnAlertRuleOnResourceGroupS().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1/providers/providers/microsoft.insights/metricalerts/MetricAlertAtResourceGroupLevel",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1",
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
- name: 'Create or update an alert rule on Subscription '
  request:
    uri: PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertAtSubscriptionLevel?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertAtSubscriptionLevel?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertMultipleResourceMultipleMetricCriteria;
      import com.azure.resourcemanager.monitor.models.MetricCriteria;
      import com.azure.resourcemanager.monitor.models.Operator;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSubscription.json
           */
          /**
           * Sample code: Create or update an alert rule on Subscription.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateAnAlertRuleOnSubscription(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest",
                      "MetricAlertAtSubscriptionLevel",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(Arrays.asList("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7"))
                          .withEvaluationFrequency(Duration.parse("PT1M"))
                          .withWindowSize(Duration.parse("PT15M"))
                          .withTargetResourceType("Microsoft.Compute/virtualMachines")
                          .withTargetResourceRegion("southcentralus")
                          .withCriteria(
                              new MetricAlertMultipleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new MetricCriteria()
                                                  .withName("High_CPU_80")
                                                  .withMetricName("Percentage CPU")
                                                  .withMetricNamespace("microsoft.compute/virtualmachines")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(Arrays.asList())
                                                  .withOperator(Operator.GREATER_THAN)
                                                  .withThreshold(80.5))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSubscription.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateAnAlertRuleOnSubscription() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest", "MetricAlertAtSubscriptionLevel", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
      				AllOf: []armmonitor.MultiMetricCriteriaClassification{
      					&armmonitor.MetricCriteria{
      						Name:            to.Ptr("High_CPU_80"),
      						CriterionType:   to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
      						Dimensions:      []*armmonitor.MetricDimension{},
      						MetricName:      to.Ptr("Percentage CPU"),
      						MetricNamespace: to.Ptr("microsoft.compute/virtualmachines"),
      						TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
      						Threshold:       to.Ptr[float64](80.5),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1M"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7")},
      			Severity:             to.Ptr[int32](3),
      			TargetResourceRegion: to.Ptr("southcentralus"),
      			TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
      			WindowSize:           to.Ptr("PT15M"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertSubscription.json
       */
      async function createOrUpdateAnAlertRuleOnSubscription() {
        const subscriptionId = "14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7";
        const resourceGroupName = "gigtest";
        const ruleName = "MetricAlertAtSubscriptionLevel";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "High_CPU_80",
                criterionType: "StaticThresholdCriterion",
                dimensions: [],
                metricName: "Percentage CPU",
                metricNamespace: "microsoft.compute/virtualmachines",
                operator: "GreaterThan",
                threshold: 80.5,
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "PT1M",
          location: "global",
          scopes: ["/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7"],
          severity: 3,
          tags: {},
          targetResourceRegion: "southcentralus",
          targetResourceType: "Microsoft.Compute/virtualMachines",
          windowSize: "PT15M",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateAnAlertRuleOnSubscription().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertAtSubscriptionLevel",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "StaticThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "dimensions": [],
                "operator": "GreaterThan",
                "threshold": 80.5,
                "timeAggregation": "Average"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
- name: Create or update a dynamic alert rule for Single Resource
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "DynamicThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "operator": "GreaterOrLessThan",
                "timeAggregation": "Average",
                "dimensions": [],
                "alertSensitivity": "Medium",
                "failingPeriods": {
                  "numberOfEvaluationPeriods": 4,
                  "minFailingPeriodsToAlert": 4
                },
                "ignoreDataBefore": "2019-04-04T21:00:00.000Z"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/chiricutin?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "DynamicThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "operator": "GreaterOrLessThan",
                "timeAggregation": "Average",
                "dimensions": [],
                "alertSensitivity": "Medium",
                "failingPeriods": {
                  "numberOfEvaluationPeriods": 4,
                  "minFailingPeriodsToAlert": 4
                },
                "ignoreDataBefore": "2019-04-04T21:00:00.000Z"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.DynamicMetricCriteria;
      import com.azure.resourcemanager.monitor.models.DynamicThresholdFailingPeriods;
      import com.azure.resourcemanager.monitor.models.DynamicThresholdOperator;
      import com.azure.resourcemanager.monitor.models.DynamicThresholdSensitivity;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertMultipleResourceMultipleMetricCriteria;
      import java.time.Duration;
      import java.time.OffsetDateTime;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertSingleResource.json
           */
          /**
           * Sample code: Create or update a dynamic alert rule for Single Resource.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateADynamicAlertRuleForSingleResource(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest",
                      "chiricutin",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"))
                          .withEvaluationFrequency(Duration.parse("PT1M"))
                          .withWindowSize(Duration.parse("PT15M"))
                          .withCriteria(
                              new MetricAlertMultipleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new DynamicMetricCriteria()
                                                  .withName("High_CPU_80")
                                                  .withMetricName("Percentage CPU")
                                                  .withMetricNamespace("microsoft.compute/virtualmachines")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(Arrays.asList())
                                                  .withOperator(DynamicThresholdOperator.GREATER_OR_LESS_THAN)
                                                  .withAlertSensitivity(DynamicThresholdSensitivity.MEDIUM)
                                                  .withFailingPeriods(
                                                      new DynamicThresholdFailingPeriods()
                                                          .withNumberOfEvaluationPeriods(4f)
                                                          .withMinFailingPeriodsToAlert(4f))
                                                  .withIgnoreDataBefore(OffsetDateTime.parse("2019-04-04T21:00:00.000Z")))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertSingleResource.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateADynamicAlertRuleForSingleResource() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest", "chiricutin", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
      				AllOf: []armmonitor.MultiMetricCriteriaClassification{
      					&armmonitor.DynamicMetricCriteria{
      						Name:             to.Ptr("High_CPU_80"),
      						CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
      						Dimensions:       []*armmonitor.MetricDimension{},
      						MetricName:       to.Ptr("Percentage CPU"),
      						MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
      						TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
      						FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
      							MinFailingPeriodsToAlert:  to.Ptr[float32](4),
      							NumberOfEvaluationPeriods: to.Ptr[float32](4),
      						},
      						IgnoreDataBefore: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-04T21:00:00.000Z"); return t }()),
      						Operator:         to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1M"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme")},
      			Severity:   to.Ptr[int32](3),
      			WindowSize: to.Ptr("PT15M"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertSingleResource.json
       */
      async function createOrUpdateADynamicAlertRuleForSingleResource() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "gigtest";
        const ruleName = "chiricutin";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "High_CPU_80",
                alertSensitivity: "Medium",
                criterionType: "DynamicThresholdCriterion",
                dimensions: [],
                failingPeriods: {
                  minFailingPeriodsToAlert: 4,
                  numberOfEvaluationPeriods: 4,
                },
                ignoreDataBefore: new Date("2019-04-04T21:00:00.000Z"),
                metricName: "Percentage CPU",
                metricNamespace: "microsoft.compute/virtualmachines",
                operator: "GreaterOrLessThan",
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "PT1M",
          location: "global",
          scopes: [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme",
          ],
          severity: 3,
          tags: {},
          windowSize: "PT15M",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateADynamicAlertRuleForSingleResource().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/chiricutin",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "DynamicThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "operator": "GreaterOrLessThan",
                "timeAggregation": "Average",
                "dimensions": [],
                "alertSensitivity": "Medium",
                "failingPeriods": {
                  "numberOfEvaluationPeriods": 4,
                  "minFailingPeriodsToAlert": 4
                },
                "ignoreDataBefore": "2019-04-04T21:00:00.000Z"
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
- name: Create or update a dynamic alert rule for Multiple Resources
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleResources?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "DynamicThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "operator": "GreaterOrLessThan",
                "timeAggregation": "Average",
                "dimensions": [],
                "alertSensitivity": "Medium",
                "failingPeriods": {
                  "numberOfEvaluationPeriods": 4,
                  "minFailingPeriodsToAlert": 4
                }
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleResources?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "DynamicThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "operator": "GreaterOrLessThan",
                "timeAggregation": "Average",
                "dimensions": [],
                "alertSensitivity": "Medium",
                "failingPeriods": {
                  "numberOfEvaluationPeriods": 4,
                  "minFailingPeriodsToAlert": 4
                }
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.DynamicMetricCriteria;
      import com.azure.resourcemanager.monitor.models.DynamicThresholdFailingPeriods;
      import com.azure.resourcemanager.monitor.models.DynamicThresholdOperator;
      import com.azure.resourcemanager.monitor.models.DynamicThresholdSensitivity;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertMultipleResourceMultipleMetricCriteria;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertMultipleResource.json
           */
          /**
           * Sample code: Create or update a dynamic alert rule for Multiple Resources.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateADynamicAlertRuleForMultipleResources(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest",
                      "MetricAlertOnMultipleResources",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
                                      "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"))
                          .withEvaluationFrequency(Duration.parse("PT1M"))
                          .withWindowSize(Duration.parse("PT15M"))
                          .withTargetResourceType("Microsoft.Compute/virtualMachines")
                          .withTargetResourceRegion("southcentralus")
                          .withCriteria(
                              new MetricAlertMultipleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new DynamicMetricCriteria()
                                                  .withName("High_CPU_80")
                                                  .withMetricName("Percentage CPU")
                                                  .withMetricNamespace("microsoft.compute/virtualmachines")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(Arrays.asList())
                                                  .withOperator(DynamicThresholdOperator.GREATER_OR_LESS_THAN)
                                                  .withAlertSensitivity(DynamicThresholdSensitivity.MEDIUM)
                                                  .withFailingPeriods(
                                                      new DynamicThresholdFailingPeriods()
                                                          .withNumberOfEvaluationPeriods(4f)
                                                          .withMinFailingPeriodsToAlert(4f)))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertMultipleResource.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateADynamicAlertRuleForMultipleResources() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest", "MetricAlertOnMultipleResources", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
      				AllOf: []armmonitor.MultiMetricCriteriaClassification{
      					&armmonitor.DynamicMetricCriteria{
      						Name:             to.Ptr("High_CPU_80"),
      						CriterionType:    to.Ptr(armmonitor.CriterionTypeDynamicThresholdCriterion),
      						Dimensions:       []*armmonitor.MetricDimension{},
      						MetricName:       to.Ptr("Percentage CPU"),
      						MetricNamespace:  to.Ptr("microsoft.compute/virtualmachines"),
      						TimeAggregation:  to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						AlertSensitivity: to.Ptr(armmonitor.DynamicThresholdSensitivityMedium),
      						FailingPeriods: &armmonitor.DynamicThresholdFailingPeriods{
      							MinFailingPeriodsToAlert:  to.Ptr[float32](4),
      							NumberOfEvaluationPeriods: to.Ptr[float32](4),
      						},
      						Operator: to.Ptr(armmonitor.DynamicThresholdOperatorGreaterOrLessThan),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1M"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1"),
      				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2")},
      			Severity:             to.Ptr[int32](3),
      			TargetResourceRegion: to.Ptr("southcentralus"),
      			TargetResourceType:   to.Ptr("Microsoft.Compute/virtualMachines"),
      			WindowSize:           to.Ptr("PT15M"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateDynamicMetricAlertMultipleResource.json
       */
      async function createOrUpdateADynamicAlertRuleForMultipleResources() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "gigtest";
        const ruleName = "MetricAlertOnMultipleResources";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "High_CPU_80",
                alertSensitivity: "Medium",
                criterionType: "DynamicThresholdCriterion",
                dimensions: [],
                failingPeriods: {
                  minFailingPeriodsToAlert: 4,
                  numberOfEvaluationPeriods: 4,
                },
                metricName: "Percentage CPU",
                metricNamespace: "microsoft.compute/virtualmachines",
                operator: "GreaterOrLessThan",
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "PT1M",
          location: "global",
          scopes: [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2",
          ],
          severity: 3,
          tags: {},
          targetResourceRegion: "southcentralus",
          targetResourceType: "Microsoft.Compute/virtualMachines",
          windowSize: "PT15M",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateADynamicAlertRuleForMultipleResources().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertOnMultipleResources",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
            "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "targetResourceType": "Microsoft.Compute/virtualMachines",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "criterionType": "DynamicThresholdCriterion",
                "name": "High_CPU_80",
                "metricName": "Percentage CPU",
                "metricNamespace": "microsoft.compute/virtualmachines",
                "operator": "GreaterOrLessThan",
                "timeAggregation": "Average",
                "dimensions": [],
                "alertSensitivity": "Medium",
                "failingPeriods": {
                  "numberOfEvaluationPeriods": 4,
                  "minFailingPeriodsToAlert": 4
                }
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
- name: Create or update a web test alert rule
  request:
    uri: PUT https://management.azure.com/subscriptions/12345678-1234-1234-1234-123456789101/resourceGroups/rg-example/providers/Microsoft.Insights/metricAlerts/webtest-name-example?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example": "Resource",
          "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example": "Resource"
        },
        "properties": {
          "description": "Automatically created alert rule for availability test \"component-example\" a",
          "enabled": true,
          "severity": 4,
          "windowSize": "PT15M",
          "evaluationFrequency": "PT1M",
          "criteria": {
            "failedLocationCount": 2,
            "webTestId": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
            "componentId": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",
            "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"
          },
          "actions": [],
          "scopes": [
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/12345678-1234-1234-1234-123456789101/resourceGroups/rg-example/providers/Microsoft.Insights/metricAlerts/webtest-name-example?api-version=2018-03-01

      {
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example": "Resource",
          "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example": "Resource"
        },
        "properties": {
          "description": "Automatically created alert rule for availability test \"component-example\" a",
          "enabled": true,
          "severity": 4,
          "windowSize": "PT15M",
          "evaluationFrequency": "PT1M",
          "criteria": {
            "failedLocationCount": 2,
            "webTestId": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
            "componentId": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",
            "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"
          },
          "actions": [],
          "scopes": [
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.WebtestLocationAvailabilityCriteria;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateWebTestMetricAlert.json
           */
          /**
           * Sample code: Create or update a web test alert rule.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateAWebTestAlertRule(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "rg-example",
                      "webtest-name-example",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(
                              mapOf(
                                  "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",
                                  "Resource",
                                  "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
                                  "Resource"))
                          .withDescription("Automatically created alert rule for availability test \"component-example\" a")
                          .withSeverity(4)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
                                      "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"))
                          .withEvaluationFrequency(Duration.parse("PT1M"))
                          .withWindowSize(Duration.parse("PT15M"))
                          .withCriteria(
                              new WebtestLocationAvailabilityCriteria()
                                  .withWebTestId(
                                      "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example")
                                  .withComponentId(
                                      "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example")
                                  .withFailedLocationCount(2f))
                          .withActions(Arrays.asList()),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateWebTestMetricAlert.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateAWebTestAlertRule() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("12345678-1234-1234-1234-123456789101", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "rg-example", "webtest-name-example", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags: map[string]*string{
      			"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example": to.Ptr("Resource"),
      			"hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example":      to.Ptr("Resource"),
      		},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("Automatically created alert rule for availability test \"component-example\" a"),
      			Actions:     []*armmonitor.MetricAlertAction{},
      			Criteria: &armmonitor.WebtestLocationAvailabilityCriteria{
      				ODataType:           to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria),
      				ComponentID:         to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example"),
      				FailedLocationCount: to.Ptr[float32](2),
      				WebTestID:           to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"),
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1M"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example"),
      				to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example")},
      			Severity:   to.Ptr[int32](4),
      			WindowSize: to.Ptr("PT15M"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateWebTestMetricAlert.json
       */
      async function createOrUpdateAWebTestAlertRule() {
        const subscriptionId = "12345678-1234-1234-1234-123456789101";
        const resourceGroupName = "rg-example";
        const ruleName = "webtest-name-example";
        const parameters = {
          description: 'Automatically created alert rule for availability test "component-example" a',
          actions: [],
          criteria: {
            componentId:
              "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",
            failedLocationCount: 2,
            odataType: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
            webTestId:
              "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
          },
          enabled: true,
          evaluationFrequency: "PT1M",
          location: "global",
          scopes: [
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",
          ],
          severity: 4,
          tags: {
            "hiddenLink:/subscriptions/12345678123412341234123456789101/resourcegroups/rgExample/providers/microsoftInsights/components/webtestNameExample":
              "Resource",
            "hiddenLink:/subscriptions/12345678123412341234123456789101/resourcegroups/rgExample/providers/microsoftInsights/webtests/componentExample":
              "Resource",
          },
          windowSize: "PT15M",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateAWebTestAlertRule().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "location": "global",
        "type": "Microsoft.Insights/metricAlerts",
        "name": "webtest-name-example",
        "id": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/metricalerts/webtest-name-example",
        "tags": {
          "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example": "Resource",
          "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example": "Resource"
        },
        "properties": {
          "description": "Automatically created alert rule for availability test \"webtest-name-example\" a",
          "severity": 4,
          "enabled": true,
          "scopes": [
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example",
            "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example"
          ],
          "evaluationFrequency": "PT1M",
          "windowSize": "PT15M",
          "criteria": {
            "webTestId": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/webtest-name-example",
            "componentId": "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/component-example",
            "failedLocationCount": 2,
            "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"
          },
          "actions": []
        }
      }
- name: Create or update an alert rules with dimensions
  request:
    uri: PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleDimensions?api-version=2018-03-01
    body: >-
      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "enabled": true,
          "severity": 3,
          "windowSize": "P1D",
          "evaluationFrequency": "PT1H",
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource"
          ],
          "criteria": {
            "allOf": [
              {
                "metricName": "Availability",
                "metricNamespace": "Microsoft.KeyVault/vaults",
                "operator": "GreaterThan",
                "timeAggregation": "Average",
                "name": "Metric1",
                "dimensions": [
                  {
                    "name": "ActivityName",
                    "operator": "Include",
                    "values": [
                      "*"
                    ]
                  },
                  {
                    "name": "StatusCode",
                    "operator": "Include",
                    "values": [
                      "200"
                    ]
                  }
                ],
                "criterionType": "StaticThresholdCriterion",
                "threshold": 55
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ],
          "autoMitigate": true
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Insights/metricAlerts/MetricAlertOnMultipleDimensions?api-version=2018-03-01

      {
        "location": "global",
        "tags": {},
        "properties": {
          "description": "This is the description of the rule1",
          "enabled": true,
          "severity": 3,
          "windowSize": "P1D",
          "evaluationFrequency": "PT1H",
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource"
          ],
          "criteria": {
            "allOf": [
              {
                "metricName": "Availability",
                "metricNamespace": "Microsoft.KeyVault/vaults",
                "operator": "GreaterThan",
                "timeAggregation": "Average",
                "name": "Metric1",
                "dimensions": [
                  {
                    "name": "ActivityName",
                    "operator": "Include",
                    "values": [
                      "*"
                    ]
                  },
                  {
                    "name": "StatusCode",
                    "operator": "Include",
                    "values": [
                      "200"
                    ]
                  }
                ],
                "criterionType": "StaticThresholdCriterion",
                "threshold": 55
              }
            ],
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
          },
          "actions": [
            {
              "actionGroupId": "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ],
          "autoMitigate": true
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.monitor.fluent.models.MetricAlertResourceInner;
      import com.azure.resourcemanager.monitor.models.AggregationTypeEnum;
      import com.azure.resourcemanager.monitor.models.MetricAlertAction;
      import com.azure.resourcemanager.monitor.models.MetricAlertMultipleResourceMultipleMetricCriteria;
      import com.azure.resourcemanager.monitor.models.MetricCriteria;
      import com.azure.resourcemanager.monitor.models.MetricDimension;
      import com.azure.resourcemanager.monitor.models.Operator;
      import java.time.Duration;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for MetricAlerts CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertWithDimensions.json
           */
          /**
           * Sample code: Create or update an alert rules with dimensions.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateAnAlertRulesWithDimensions(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .diagnosticSettings()
                  .manager()
                  .serviceClient()
                  .getMetricAlerts()
                  .createOrUpdateWithResponse(
                      "gigtest",
                      "MetricAlertOnMultipleDimensions",
                      new MetricAlertResourceInner()
                          .withLocation("global")
                          .withTags(mapOf())
                          .withDescription("This is the description of the rule1")
                          .withSeverity(3)
                          .withEnabled(true)
                          .withScopes(
                              Arrays
                                  .asList(
                                      "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource"))
                          .withEvaluationFrequency(Duration.parse("PT1H"))
                          .withWindowSize(Duration.parse("P1D"))
                          .withCriteria(
                              new MetricAlertMultipleResourceMultipleMetricCriteria()
                                  .withAllOf(
                                      Arrays
                                          .asList(
                                              new MetricCriteria()
                                                  .withName("Metric1")
                                                  .withMetricName("Availability")
                                                  .withMetricNamespace("Microsoft.KeyVault/vaults")
                                                  .withTimeAggregation(AggregationTypeEnum.AVERAGE)
                                                  .withDimensions(
                                                      Arrays
                                                          .asList(
                                                              new MetricDimension()
                                                                  .withName("ActivityName")
                                                                  .withOperator("Include")
                                                                  .withValues(Arrays.asList("*")),
                                                              new MetricDimension()
                                                                  .withName("StatusCode")
                                                                  .withOperator("Include")
                                                                  .withValues(Arrays.asList("200"))))
                                                  .withOperator(Operator.GREATER_THAN)
                                                  .withThreshold(55.0))))
                          .withAutoMitigate(true)
                          .withActions(
                              Arrays
                                  .asList(
                                      new MetricAlertAction()
                                          .withActionGroupId(
                                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2")
                                          .withWebhookProperties(mapOf("key11", "value11", "key12", "value12")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.19.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmonitor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertWithDimensions.json
      func ExampleMetricAlertsClient_CreateOrUpdate_createOrUpdateAnAlertRulesWithDimensions() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmonitor.NewMetricAlertsClient("14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "gigtest", "MetricAlertOnMultipleDimensions", armmonitor.MetricAlertResource{
      		Location: to.Ptr("global"),
      		Tags:     map[string]*string{},
      		Properties: &armmonitor.MetricAlertProperties{
      			Description: to.Ptr("This is the description of the rule1"),
      			Actions: []*armmonitor.MetricAlertAction{
      				{
      					ActionGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2"),
      					WebHookProperties: map[string]*string{
      						"key11": to.Ptr("value11"),
      						"key12": to.Ptr("value12"),
      					},
      				}},
      			AutoMitigate: to.Ptr(true),
      			Criteria: &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{
      				ODataType: to.Ptr(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria),
      				AllOf: []armmonitor.MultiMetricCriteriaClassification{
      					&armmonitor.MetricCriteria{
      						Name:          to.Ptr("Metric1"),
      						CriterionType: to.Ptr(armmonitor.CriterionTypeStaticThresholdCriterion),
      						Dimensions: []*armmonitor.MetricDimension{
      							{
      								Name:     to.Ptr("ActivityName"),
      								Operator: to.Ptr("Include"),
      								Values: []*string{
      									to.Ptr("*")},
      							},
      							{
      								Name:     to.Ptr("StatusCode"),
      								Operator: to.Ptr("Include"),
      								Values: []*string{
      									to.Ptr("200")},
      							}},
      						MetricName:      to.Ptr("Availability"),
      						MetricNamespace: to.Ptr("Microsoft.KeyVault/vaults"),
      						TimeAggregation: to.Ptr(armmonitor.AggregationTypeEnumAverage),
      						Operator:        to.Ptr(armmonitor.OperatorGreaterThan),
      						Threshold:       to.Ptr[float64](55),
      					}},
      			},
      			Enabled:             to.Ptr(true),
      			EvaluationFrequency: to.Ptr("PT1H"),
      			Scopes: []*string{
      				to.Ptr("/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource")},
      			Severity:   to.Ptr[int32](3),
      			WindowSize: to.Ptr("P1D"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmonitor%2Farmmonitor%2Fv0.8.0/sdk/resourcemanager/monitor/armmonitor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { MonitorClient } = require("@azure/arm-monitor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update an metric alert definition.
       *
       * @summary Create or update an metric alert definition.
       * x-ms-original-file: specification/monitor/resource-manager/Microsoft.Insights/stable/2018-03-01/examples/createOrUpdateMetricAlertWithDimensions.json
       */
      async function createOrUpdateAnAlertRulesWithDimensions() {
        const subscriptionId = "14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7";
        const resourceGroupName = "gigtest";
        const ruleName = "MetricAlertOnMultipleDimensions";
        const parameters = {
          description: "This is the description of the rule1",
          actions: [
            {
              actionGroupId:
                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              webHookProperties: { key11: "value11", key12: "value12" },
            },
          ],
          autoMitigate: true,
          criteria: {
            allOf: [
              {
                name: "Metric1",
                criterionType: "StaticThresholdCriterion",
                dimensions: [
                  { name: "ActivityName", operator: "Include", values: ["*"] },
                  { name: "StatusCode", operator: "Include", values: ["200"] },
                ],
                metricName: "Availability",
                metricNamespace: "Microsoft.KeyVault/vaults",
                operator: "GreaterThan",
                threshold: 55,
                timeAggregation: "Average",
              },
            ],
            odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
          },
          enabled: true,
          evaluationFrequency: "PT1H",
          location: "global",
          scopes: [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource",
          ],
          severity: 3,
          tags: {},
          windowSize: "P1D",
        };
        const credential = new DefaultAzureCredential();
        const client = new MonitorClient(credential, subscriptionId);
        const result = await client.metricAlerts.createOrUpdate(resourceGroupName, ruleName, parameters);
        console.log(result);
      }

      createOrUpdateAnAlertRulesWithDimensions().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-monitor_8.0.0-beta.2/sdk/monitor/arm-monitor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/providers/microsoft.insights/metricalerts/MetricAlertWithDimensions",
        "type": "Microsoft.Insights/metricAlerts",
        "location": "global",
        "tags": {
          "hidden-link:/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/Rac46PostSwapRG/providers/Microsoft.Web/sites/leoalerttest": "Resource"
        },
        "properties": {
          "description": "This is the description of the rule1",
          "severity": 3,
          "enabled": true,
          "scopes": [
            "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.KeyVault/vaults/keyVaultResource"
          ],
          "evaluationFrequency": "PT1H",
          "windowSize": "P1D",
          "targetResourceType": "Microsoft.KeyVault/vaults",
          "targetResourceRegion": "southcentralus",
          "criteria": {
            "odata.type": "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
            "allOf": [
              {
                "metricName": "Availability",
                "metricNamespace": "Microsoft.KeyVault/vaults",
                "operator": "GreaterThan",
                "timeAggregation": "Average",
                "name": "Metric1",
                "dimensions": [
                  {
                    "name": "ActivityName",
                    "operator": "Include",
                    "values": [
                      "*"
                    ]
                  },
                  {
                    "name": "StatusCode",
                    "operator": "Include",
                    "values": [
                      "200"
                    ]
                  }
                ],
                "criterionType": "StaticThresholdCriterion",
                "threshold": 55
              }
            ]
          },
          "autoMitigate": true,
          "actions": [
            {
              "actionGroupId": "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/actiongroups/group2",
              "webHookProperties": {
                "key11": "value11",
                "key12": "value12"
              }
            }
          ]
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Monitor service - Create or update an metric alert definition.
errorCodes: []
