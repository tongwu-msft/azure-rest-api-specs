### YamlMime:RESTOperation
uid: management.azure.com.relay.wcfrelays.createorupdate
name: Create Or Update
service: Relay
groupName: WCF Relays
apiVersion: 2017-04-01
summary: Creates or updates a WCF relay. This operation is idempotent.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/wcfRelays/{relayName}?api-version=2017-04-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: Name of the Resource group within the Azure subscription.
  types:
  - uid: string
- name: namespaceName
  in: path
  isRequired: true
  description: The namespace name
  types:
  - uid: string
- name: relayName
  in: path
  isRequired: true
  description: The relay name.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Request to create WCF relay succeeded.
  types:
  - uid: WcfRelay
- name: Other Status Codes
  description: Relay error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: properties.relayType
    in: body
    description: WCF relay type.
    types:
    - uid: Relaytype
  - name: properties.requiresClientAuthorization
    in: body
    description: Returns true if client authorization is needed for this relay; otherwise, false.
    types:
    - uid: boolean
  - name: properties.requiresTransportSecurity
    in: body
    description: Returns true if transport security is needed for this relay; otherwise, false.
    types:
    - uid: boolean
  - name: properties.userMetadata
    in: body
    description: The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
    types:
    - uid: string
requestHeader: []
definitions:
- name: WcfRelay
  description: Description of the WCF relay resource.
  kind: object
  properties:
  - name: properties.isDynamic
    isReadyOnly: true
    description: Returns true if the relay is dynamic; otherwise, false.
    types:
    - uid: boolean
  - name: properties.createdAt
    isReadyOnly: true
    description: The time the WCF relay was created.
    types:
    - uid: string
  - name: properties.updatedAt
    isReadyOnly: true
    description: The time the namespace was updated.
    types:
    - uid: string
  - name: properties.listenerCount
    isReadyOnly: true
    description: The number of listeners for this relay. Note that min :1 and max:25 are supported.
    types:
    - uid: integer
  - name: properties.relayType
    description: WCF relay type.
    types:
    - uid: Relaytype
  - name: properties.requiresClientAuthorization
    description: Returns true if client authorization is needed for this relay; otherwise, false.
    types:
    - uid: boolean
  - name: properties.requiresTransportSecurity
    description: Returns true if transport security is needed for this relay; otherwise, false.
    types:
    - uid: boolean
  - name: properties.userMetadata
    description: The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
- name: ErrorResponse
  description: Error reponse indicates Relay service is not able to process the incoming request. The reason is provided in the error message.
  kind: object
  properties:
  - name: code
    description: Error code.
    types:
    - uid: string
  - name: message
    description: Error message indicating why the operation failed.
    types:
    - uid: string
- name: Relaytype
  description: WCF relay type.
  kind: enum
  properties:
  - name: NetTcp
    types:
    - uid: string
  - name: Http
    types:
    - uid: string
examples:
- name: RelayCreate
  request:
    uri: PUT https://management.azure.com/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-9953/wcfRelays/example-Relay-Wcf-1194?api-version=2017-04-01
    body: >-
      {
        "properties": {
          "relayType": "NetTcp",
          "requiresClientAuthorization": true,
          "requiresTransportSecurity": true
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-9953/wcfRelays/example-Relay-Wcf-1194?api-version=2017-04-01

      {
        "properties": {
          "relayType": "NetTcp",
          "requiresClientAuthorization": true,
          "requiresTransportSecurity": true
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.relay.models.Relaytype;

      /** Samples for WcfRelays CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayCreate.json
           */
          /**
           * Sample code: RelayCreate.
           *
           * @param manager Entry point to RelayManager.
           */
          public static void relayCreate(com.azure.resourcemanager.relay.RelayManager manager) {
              manager
                  .wcfRelays()
                  .define("example-Relay-Wcf-1194")
                  .withExistingNamespace("resourcegroup", "example-RelayNamespace-9953")
                  .withRelayType(Relaytype.NET_TCP)
                  .withRequiresClientAuthorization(true)
                  .withRequiresTransportSecurity(true)
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-relay_1.0.0-beta.2/sdk/relay/azure-resourcemanager-relay/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armrelay_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/relay/armrelay"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayCreate.json
      func ExampleWCFRelaysClient_CreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      		return
      	}
      	ctx := context.Background()
      	client, err := armrelay.NewWCFRelaysClient("<subscription-id>", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      		return
      	}
      	res, err := client.CreateOrUpdate(ctx,
      		"<resource-group-name>",
      		"<namespace-name>",
      		"<relay-name>",
      		armrelay.WcfRelay{
      			Properties: &armrelay.WcfRelayProperties{
      				RelayType:                   to.Ptr(armrelay.RelaytypeNetTCP),
      				RequiresClientAuthorization: to.Ptr(true),
      				RequiresTransportSecurity:   to.Ptr(true),
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      		return
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Frelay%2Farmrelay%2Fv0.5.0/sdk/resourcemanager/relay/armrelay/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { RelayAPI } = require("@azure/arm-relay");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a WCF relay. This operation is idempotent.
       *
       * @summary Creates or updates a WCF relay. This operation is idempotent.
       * x-ms-original-file: specification/relay/resource-manager/Microsoft.Relay/stable/2017-04-01/examples/Relay/RelayCreate.json
       */
      async function relayCreate() {
        const subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
        const resourceGroupName = "resourcegroup";
        const namespaceName = "example-RelayNamespace-9953";
        const relayName = "example-Relay-Wcf-1194";
        const parameters = {
          relayType: "NetTcp",
          requiresClientAuthorization: true,
          requiresTransportSecurity: true,
        };
        const credential = new DefaultAzureCredential();
        const client = new RelayAPI(credential, subscriptionId);
        const result = await client.wCFRelays.createOrUpdate(
          resourceGroupName,
          namespaceName,
          relayName,
          parameters
        );
        console.log(result);
      }

      relayCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-relay_3.1.0/sdk/relay/arm-relay/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/resourcegroup/providers/Microsoft.Relay/namespaces/example-RelayNamespace-9953/WcfRelays/example-Relay-Wcf-1194",
        "name": "example-Relay-Wcf-1194",
        "type": "Microsoft.Relay/WcfRelays",
        "properties": {
          "createdAt": "2017-03-16T00:26:17.5014661Z",
          "updatedAt": "2017-03-16T00:26:17.5014661Z",
          "relayType": "NetTcp",
          "requiresClientAuthorization": true,
          "requiresTransportSecurity": true,
          "isDynamic": false
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Relay service - Creates or updates a WCF relay. This operation is idempotent.
errorCodes: []
