### YamlMime:RESTOperation
uid: management.azure.com.redis.redis.forcereboot
name: Force Reboot
service: Redis Cache
groupName: Redis
apiVersion: 2021-06-01
summary: Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/forceReboot?api-version=2021-06-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: name
  in: path
  isRequired: true
  description: The name of the Redis cache.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client Api Version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Reboot operation successfully enqueued
  types:
  - uid: RedisForceRebootResponse
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: rebootType
    in: body
    description: Which Redis node(s) to reboot. Depending on this value data loss is possible.
    types:
    - uid: RebootType
  - name: shardId
    in: body
    description: If clustering is enabled, the ID of the shard to be rebooted.
    types:
    - uid: integer
  - name: ports
    in: body
    description: A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports.
    types:
    - uid: integer
      isArray: true
requestHeader: []
definitions:
- name: RedisForceRebootResponse
  description: Response to force reboot for Redis cache.
  kind: object
  properties:
  - name: message
    isReadyOnly: true
    description: Status message
    types:
    - uid: string
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: RedisRebootParameters
  description: Specifies which Redis node(s) to reboot.
  kind: object
  properties:
  - name: rebootType
    description: Which Redis node(s) to reboot. Depending on this value data loss is possible.
    types:
    - uid: RebootType
  - name: shardId
    description: If clustering is enabled, the ID of the shard to be rebooted.
    types:
    - uid: integer
  - name: ports
    description: A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports.
    types:
    - uid: integer
      isArray: true
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: RebootType
  description: Which Redis node(s) to reboot. Depending on this value data loss is possible.
  kind: enum
  properties:
  - name: PrimaryNode
    types:
    - uid: string
  - name: SecondaryNode
    types:
    - uid: string
  - name: AllNodes
    types:
    - uid: string
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: RedisCacheForceReboot
  request:
    uri: POST https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/cache1/forceReboot?api-version=2021-06-01
    body: >-
      {
        "shardId": 0,
        "rebootType": "AllNodes",
        "ports": [
          13000,
          15001
        ]
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/cache1/forceReboot?api-version=2021-06-01

      {
        "shardId": 0,
        "rebootType": "AllNodes",
        "ports": [
          13000,
          15001
        ]
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.redis.models.RebootType;
      import com.azure.resourcemanager.redis.models.RedisRebootParameters;
      import java.util.Arrays;

      /** Samples for Redis ForceReboot. */
      public final class Main {
          /*
           * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheForceReboot.json
           */
          /**
           * Sample code: RedisCacheForceReboot.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void redisCacheForceReboot(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .redisCaches()
                  .manager()
                  .serviceClient()
                  .getRedis()
                  .forceRebootWithResponse(
                      "rg1",
                      "cache1",
                      new RedisRebootParameters()
                          .withRebootType(RebootType.ALL_NODES)
                          .withShardId(0)
                          .withPorts(Arrays.asList(13000, 15001)),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armredis_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redis/armredis"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheForceReboot.json
      func ExampleClient_ForceReboot() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armredis.NewClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.ForceReboot(ctx,
      		"rg1",
      		"cache1",
      		armredis.RebootParameters{
      			Ports: []*int32{
      				to.Ptr[int32](13000),
      				to.Ptr[int32](15001)},
      			RebootType: to.Ptr(armredis.RebootTypeAllNodes),
      			ShardID:    to.Ptr[int32](0),
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fredis%2Farmredis%2Fv1.0.0/sdk/resourcemanager/redis/armredis/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { RedisManagementClient } = require("@azure/arm-rediscache");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
       *
       * @summary Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
       * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheForceReboot.json
       */
      async function redisCacheForceReboot() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const name = "cache1";
        const parameters = {
          ports: [13000, 15001],
          rebootType: "AllNodes",
          shardId: 0,
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisManagementClient(credential, subscriptionId);
        const result = await client.redis.forceReboot(resourceGroupName, name, parameters);
        console.log(result);
      }

      redisCacheForceReboot().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-rediscache_6.1.0/sdk/redis/arm-rediscache/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "message": "reboot operation enqueued"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
errorCodes: []
