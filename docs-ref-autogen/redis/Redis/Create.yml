### YamlMime:RESTOperation
uid: management.azure.com.redis.redis.create
name: Create
service: Redis Cache
groupName: Redis
apiVersion: 2021-06-01
summary: Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}?api-version=2021-06-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: name
  in: path
  isRequired: true
  description: The name of the Redis cache.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client Api Version.
  types:
  - uid: string
responses:
- name: 201 Created
  description: The new redis cache was successfully created. Check provisioningState to see detailed status.
  types:
  - uid: RedisResource
- name: 200 OK
  description: The existing redis cache was successfully updated. Check provisioningState to see detailed status.
  types:
  - uid: RedisResource
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: zones
    in: body
    description: A list of availability zones denoting where the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: location
    in: body
    isRequired: true
    description: The geo-location where the resource lives
    types:
    - uid: string
  - name: tags
    in: body
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: identity
    in: body
    description: The identity of the resource.
    types:
    - uid: ManagedServiceIdentity
  - name: properties.sku
    in: body
    isRequired: true
    description: The SKU of the Redis cache to deploy.
    types:
    - uid: Sku
  - name: properties.subnetId
    in: body
    description: 'The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1'
    types:
    - uid: string
  - name: properties.staticIP
    in: body
    description: Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
    types:
    - uid: string
  - name: properties.redisConfiguration
    in: body
    description: 'All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.'
    types:
    - uid: RedisConfiguration
  - name: properties.redisVersion
    in: body
    description: 'Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)'
    types:
    - uid: string
  - name: properties.enableNonSslPort
    in: body
    description: Specifies whether the non-ssl Redis server port (6379) is enabled.
    types:
    - uid: boolean
  - name: properties.replicasPerMaster
    in: body
    description: The number of replicas to be created per primary.
    types:
    - uid: integer
  - name: properties.replicasPerPrimary
    in: body
    description: The number of replicas to be created per primary.
    types:
    - uid: integer
  - name: properties.tenantSettings
    in: body
    description: A dictionary of tenant settings
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: properties.shardCount
    in: body
    description: The number of shards to be created on a Premium Cluster Cache.
    types:
    - uid: integer
  - name: properties.minimumTlsVersion
    in: body
    description: "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
    types:
    - uid: TlsVersion
  - name: properties.publicNetworkAccess
    in: body
    description: Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
    types:
    - uid: PublicNetworkAccess
requestHeader: []
definitions:
- name: ManagedServiceIdentity
  description: Managed service identity (system assigned and/or user assigned identities)
  kind: object
  properties:
  - name: principalId
    isReadyOnly: true
    description: The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    types:
    - uid: string
  - name: tenantId
    isReadyOnly: true
    description: The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    types:
    - uid: string
  - name: type
    description: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    types:
    - uid: ManagedServiceIdentityType
  - name: userAssignedIdentities
    description: "User-Assigned Identities  \nThe set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: UserAssignedIdentity
- name: Sku
  description: SKU parameters supplied to the create Redis operation.
  kind: object
  properties:
  - name: name
    description: 'The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)'
    types:
    - uid: SkuName
  - name: family
    description: 'The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).'
    types:
    - uid: SkuFamily
  - name: capacity
    description: 'The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).'
    types:
    - uid: integer
- name: RedisConfiguration
  description: 'All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.'
  kind: object
  properties:
  - name: rdb-backup-enabled
    description: Specifies whether the rdb backup is enabled
    types:
    - uid: string
  - name: rdb-backup-frequency
    description: Specifies the frequency for creating rdb backup
    types:
    - uid: string
  - name: rdb-backup-max-snapshot-count
    description: Specifies the maximum number of snapshots for rdb backup
    types:
    - uid: string
  - name: rdb-storage-connection-string
    description: The storage account connection string for storing rdb file
    types:
    - uid: string
  - name: aof-backup-enabled
    description: Specifies whether the aof backup is enabled
    types:
    - uid: string
  - name: aof-storage-connection-string-0
    description: First storage account connection string
    types:
    - uid: string
  - name: aof-storage-connection-string-1
    description: Second storage account connection string
    types:
    - uid: string
  - name: maxfragmentationmemory-reserved
    description: Value in megabytes reserved for fragmentation per shard
    types:
    - uid: string
  - name: maxmemory-policy
    description: The eviction strategy used when your data won't fit within its memory limit.
    types:
    - uid: string
  - name: maxmemory-reserved
    description: Value in megabytes reserved for non-cache usage per shard e.g. failover.
    types:
    - uid: string
  - name: maxmemory-delta
    description: Value in megabytes reserved for non-cache usage per shard e.g. failover.
    types:
    - uid: string
  - name: maxclients
    isReadyOnly: true
    description: The max clients config
    types:
    - uid: string
  - name: preferred-data-archive-auth-method
    isReadyOnly: true
    description: Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS
    types:
    - uid: string
  - name: preferred-data-persistence-auth-method
    isReadyOnly: true
    description: Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS
    types:
    - uid: string
  - name: zonal-configuration
    isReadyOnly: true
    description: Zonal Configuration
    types:
    - uid: string
  - name: authnotrequired
    description: Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point of view.
    types:
    - uid: string
- name: RedisResource
  description: A single Redis item in List or Get Operation.
  kind: object
  properties:
  - name: zones
    description: A list of availability zones denoting where the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: identity
    description: The identity of the resource.
    types:
    - uid: ManagedServiceIdentity
  - name: properties.provisioningState
    isReadyOnly: true
    description: Redis instance provisioning status.
    types:
    - uid: ProvisioningState
  - name: properties.hostName
    isReadyOnly: true
    description: Redis host name.
    types:
    - uid: string
  - name: properties.port
    isReadyOnly: true
    description: Redis non-SSL port.
    types:
    - uid: integer
  - name: properties.sslPort
    isReadyOnly: true
    description: Redis SSL port.
    types:
    - uid: integer
  - name: properties.accessKeys
    isReadyOnly: true
    description: The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
    types:
    - uid: RedisAccessKeys
  - name: properties.linkedServers
    isReadyOnly: true
    description: List of the linked servers associated with the cache
    types:
    - uid: RedisLinkedServer
      isArray: true
  - name: properties.instances
    isReadyOnly: true
    description: List of the Redis instances associated with the cache
    types:
    - uid: RedisInstanceDetails
      isArray: true
  - name: properties.privateEndpointConnections
    isReadyOnly: true
    description: List of private endpoint connection associated with the specified redis cache
    types:
    - uid: PrivateEndpointConnection
      isArray: true
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: location
    description: The geo-location where the resource lives
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
  - name: properties.sku
    description: The SKU of the Redis cache to deploy.
    types:
    - uid: Sku
  - name: properties.subnetId
    description: 'The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1'
    types:
    - uid: string
  - name: properties.staticIP
    description: Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
    types:
    - uid: string
  - name: redisConfiguration
    description: 'All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.'
    types:
    - uid: RedisConfiguration
  - name: redisVersion
    description: 'Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)'
    types:
    - uid: string
  - name: enableNonSslPort
    description: Specifies whether the non-ssl Redis server port (6379) is enabled.
    types:
    - uid: boolean
    defaultValue: false
  - name: replicasPerMaster
    description: The number of replicas to be created per primary.
    types:
    - uid: integer
  - name: replicasPerPrimary
    description: The number of replicas to be created per primary.
    types:
    - uid: integer
  - name: tenantSettings
    description: A dictionary of tenant settings
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: shardCount
    description: The number of shards to be created on a Premium Cluster Cache.
    types:
    - uid: integer
  - name: minimumTlsVersion
    description: "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
    types:
    - uid: TlsVersion
  - name: publicNetworkAccess
    description: Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
    types:
    - uid: PublicNetworkAccess
    defaultValue: Enabled
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: RedisCreateParameters
  description: Parameters supplied to the Create Redis operation.
  kind: object
  properties:
  - name: zones
    description: A list of availability zones denoting where the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: location
    description: The geo-location where the resource lives
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: identity
    description: The identity of the resource.
    types:
    - uid: ManagedServiceIdentity
  - name: properties.sku
    description: The SKU of the Redis cache to deploy.
    types:
    - uid: Sku
  - name: properties.subnetId
    description: 'The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1'
    types:
    - uid: string
  - name: properties.staticIP
    description: Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default.
    types:
    - uid: string
  - name: properties.redisConfiguration
    description: 'All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.'
    types:
    - uid: RedisConfiguration
  - name: properties.redisVersion
    description: 'Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)'
    types:
    - uid: string
  - name: properties.enableNonSslPort
    description: Specifies whether the non-ssl Redis server port (6379) is enabled.
    types:
    - uid: boolean
    defaultValue: false
  - name: properties.replicasPerMaster
    description: The number of replicas to be created per primary.
    types:
    - uid: integer
  - name: properties.replicasPerPrimary
    description: The number of replicas to be created per primary.
    types:
    - uid: integer
  - name: properties.tenantSettings
    description: A dictionary of tenant settings
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: properties.shardCount
    description: The number of shards to be created on a Premium Cluster Cache.
    types:
    - uid: integer
  - name: properties.minimumTlsVersion
    description: "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
    types:
    - uid: TlsVersion
  - name: properties.publicNetworkAccess
    description: Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
    types:
    - uid: PublicNetworkAccess
    defaultValue: Enabled
- name: ManagedServiceIdentityType
  description: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: SystemAssigned
    types:
    - uid: string
  - name: UserAssigned
    types:
    - uid: string
  - name: SystemAssigned, UserAssigned
    types:
    - uid: string
- name: UserAssignedIdentity
  description: User assigned identity properties
  kind: object
  properties:
  - name: principalId
    isReadyOnly: true
    description: The principal ID of the assigned identity.
    types:
    - uid: string
  - name: clientId
    isReadyOnly: true
    description: The client ID of the assigned identity.
    types:
    - uid: string
- name: SkuName
  description: 'The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)'
  kind: enum
  properties:
  - name: Basic
    types:
    - uid: string
  - name: Standard
    types:
    - uid: string
  - name: Premium
    types:
    - uid: string
- name: SkuFamily
  description: 'The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).'
  kind: enum
  properties:
  - name: C
    types:
    - uid: string
  - name: P
    types:
    - uid: string
- name: ProvisioningState
  description: Redis instance provisioning status.
  kind: enum
  properties:
  - name: Creating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
  - name: Linking
    types:
    - uid: string
  - name: Provisioning
    types:
    - uid: string
  - name: RecoveringScaleFailure
    types:
    - uid: string
  - name: Scaling
    types:
    - uid: string
  - name: Succeeded
    types:
    - uid: string
  - name: Unlinking
    types:
    - uid: string
  - name: Unprovisioning
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
- name: RedisAccessKeys
  description: Redis cache access keys.
  kind: object
  properties:
  - name: primaryKey
    isReadyOnly: true
    description: The current primary key that clients can use to authenticate with Redis cache.
    types:
    - uid: string
  - name: secondaryKey
    isReadyOnly: true
    description: The current secondary key that clients can use to authenticate with Redis cache.
    types:
    - uid: string
- name: RedisLinkedServer
  description: Linked server Id
  kind: object
  properties:
  - name: id
    isReadyOnly: true
    description: Linked server Id.
    types:
    - uid: string
- name: RedisInstanceDetails
  description: Details of single instance of redis.
  kind: object
  properties:
  - name: sslPort
    isReadyOnly: true
    description: Redis instance SSL port.
    types:
    - uid: integer
  - name: nonSslPort
    isReadyOnly: true
    description: If enableNonSslPort is true, provides Redis instance Non-SSL port.
    types:
    - uid: integer
  - name: zone
    isReadyOnly: true
    description: If the Cache uses availability zones, specifies availability zone where this instance is located.
    types:
    - uid: string
  - name: shardId
    isReadyOnly: true
    description: If clustering is enabled, the Shard ID of Redis Instance
    types:
    - uid: integer
  - name: isMaster
    isReadyOnly: true
    description: Specifies whether the instance is a primary node.
    types:
    - uid: boolean
  - name: isPrimary
    isReadyOnly: true
    description: Specifies whether the instance is a primary node.
    types:
    - uid: boolean
- name: PrivateEndpointConnection
  description: The Private Endpoint Connection resource.
  kind: object
  properties:
  - name: properties.privateEndpoint
    description: The resource of private end point.
    types:
    - uid: PrivateEndpoint
  - name: properties.privateLinkServiceConnectionState
    description: A collection of information about the state of the connection between service consumer and provider.
    types:
    - uid: PrivateLinkServiceConnectionState
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private endpoint connection resource.
    types:
    - uid: PrivateEndpointConnectionProvisioningState
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: TlsVersion
  description: "Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')"
  kind: enum
  properties:
  - name: "1.0"
    types:
    - uid: string
  - name: "1.1"
    types:
    - uid: string
  - name: "1.2"
    types:
    - uid: string
- name: PublicNetworkAccess
  description: Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: PrivateEndpoint
  description: The Private Endpoint resource.
  kind: object
  properties:
  - name: id
    isReadyOnly: true
    description: The ARM identifier for Private Endpoint
    types:
    - uid: string
- name: PrivateLinkServiceConnectionState
  description: A collection of information about the state of the connection between service consumer and provider.
  kind: object
  properties:
  - name: status
    description: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    types:
    - uid: PrivateEndpointServiceConnectionStatus
  - name: description
    description: The reason for approval/rejection of the connection.
    types:
    - uid: string
  - name: actionsRequired
    description: A message indicating if changes on the service provider require any updates on the consumer.
    types:
    - uid: string
- name: PrivateEndpointConnectionProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Creating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
- name: PrivateEndpointServiceConnectionStatus
  description: The private endpoint connection status.
  kind: enum
  properties:
  - name: Pending
    types:
    - uid: string
  - name: Approved
    types:
    - uid: string
  - name: Rejected
    types:
    - uid: string
examples:
- name: RedisCacheCreate
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/cache1?api-version=2021-06-01
    body: >-
      {
        "location": "West US",
        "zones": [
          "1"
        ],
        "properties": {
          "sku": {
            "name": "Premium",
            "family": "P",
            "capacity": 1
          },
          "redisVersion": "4",
          "enableNonSslPort": true,
          "shardCount": 2,
          "replicasPerPrimary": 2,
          "redisConfiguration": {
            "maxmemory-policy": "allkeys-lru"
          },
          "subnetId": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
          "staticIP": "192.168.0.5",
          "minimumTlsVersion": "1.2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redis/cache1?api-version=2021-06-01

      {
        "location": "West US",
        "zones": [
          "1"
        ],
        "properties": {
          "sku": {
            "name": "Premium",
            "family": "P",
            "capacity": 1
          },
          "redisVersion": "4",
          "enableNonSslPort": true,
          "shardCount": 2,
          "replicasPerPrimary": 2,
          "redisConfiguration": {
            "maxmemory-policy": "allkeys-lru"
          },
          "subnetId": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
          "staticIP": "192.168.0.5",
          "minimumTlsVersion": "1.2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.redis.models.RedisConfiguration;
      import com.azure.resourcemanager.redis.models.RedisCreateParameters;
      import com.azure.resourcemanager.redis.models.Sku;
      import com.azure.resourcemanager.redis.models.SkuFamily;
      import com.azure.resourcemanager.redis.models.SkuName;
      import com.azure.resourcemanager.redis.models.TlsVersion;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for Redis Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheCreate.json
           */
          /**
           * Sample code: RedisCacheCreate.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void redisCacheCreate(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .redisCaches()
                  .manager()
                  .serviceClient()
                  .getRedis()
                  .create(
                      "rg1",
                      "cache1",
                      new RedisCreateParameters()
                          .withZones(Arrays.asList("1"))
                          .withLocation("West US")
                          .withSku(new Sku().withName(SkuName.PREMIUM).withFamily(SkuFamily.P).withCapacity(1))
                          .withSubnetId(
                              "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1")
                          .withStaticIp("192.168.0.5")
                          .withRedisConfiguration(
                              new RedisConfiguration().withMaxmemoryPolicy("allkeys-lru").withAdditionalProperties(mapOf()))
                          .withRedisVersion("4")
                          .withEnableNonSslPort(true)
                          .withReplicasPerPrimary(2)
                          .withShardCount(2)
                          .withMinimumTlsVersion(TlsVersion.ONE_TWO),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armredis_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redis/armredis"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheCreate.json
      func ExampleClient_BeginCreate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armredis.NewClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreate(ctx,
      		"rg1",
      		"cache1",
      		armredis.CreateParameters{
      			Location: to.Ptr("West US"),
      			Properties: &armredis.CreateProperties{
      				EnableNonSSLPort:  to.Ptr(true),
      				MinimumTLSVersion: to.Ptr(armredis.TLSVersionOne2),
      				RedisConfiguration: &armredis.CommonPropertiesRedisConfiguration{
      					MaxmemoryPolicy: to.Ptr("allkeys-lru"),
      				},
      				RedisVersion:       to.Ptr("4"),
      				ReplicasPerPrimary: to.Ptr[int32](2),
      				ShardCount:         to.Ptr[int32](2),
      				SKU: &armredis.SKU{
      					Name:     to.Ptr(armredis.SKUNamePremium),
      					Capacity: to.Ptr[int32](1),
      					Family:   to.Ptr(armredis.SKUFamilyP),
      				},
      				StaticIP: to.Ptr("192.168.0.5"),
      				SubnetID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1"),
      			},
      			Zones: []*string{
      				to.Ptr("1")},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fredis%2Farmredis%2Fv1.0.0/sdk/resourcemanager/redis/armredis/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { RedisManagementClient } = require("@azure/arm-rediscache");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
       *
       * @summary Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
       * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheCreate.json
       */
      async function redisCacheCreate() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const name = "cache1";
        const parameters = {
          enableNonSslPort: true,
          location: "West US",
          minimumTlsVersion: "1.2",
          redisConfiguration: { maxmemoryPolicy: "allkeys-lru" },
          redisVersion: "4",
          replicasPerPrimary: 2,
          shardCount: 2,
          sku: { name: "Premium", capacity: 1, family: "P" },
          staticIP: "192.168.0.5",
          subnetId:
            "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
          zones: ["1"],
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisManagementClient(credential, subscriptionId);
        const result = await client.redis.beginCreateAndWait(resourceGroupName, name, parameters);
        console.log(result);
      }

      redisCacheCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-rediscache_6.1.0/sdk/redis/arm-rediscache/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
        "location": "West US",
        "zones": [
          "1"
        ],
        "name": "cache1",
        "type": "Microsoft.Cache/Redis",
        "tags": {},
        "properties": {
          "accessKeys": {
            "primaryKey": "<primaryKey>",
            "secondaryKey": "<secondaryKey>"
          },
          "provisioningState": "Succeeded",
          "redisVersion": "4.0.14",
          "sku": {
            "name": "Premium",
            "family": "P",
            "capacity": 1
          },
          "enableNonSslPort": false,
          "replicasPerMaster": 2,
          "replicasPerPrimary": 2,
          "redisConfiguration": {
            "maxmemory-policy": "allkeys-lru"
          },
          "hostName": "cache1.redis.cache.windows.net",
          "port": 6379,
          "sslPort": 6380,
          "minimumTlsVersion": "1.2",
          "instances": [
            {
              "sslPort": 15000,
              "nonSslPort": 13000,
              "zone": "1",
              "shardId": 0,
              "isMaster": true,
              "isPrimary": true
            },
            {
              "sslPort": 15001,
              "nonSslPort": 13001,
              "zone": "1",
              "shardId": 0,
              "isMaster": false,
              "isPrimary": false
            },
            {
              "sslPort": 15002,
              "nonSslPort": 13002,
              "zone": "1",
              "shardId": 0,
              "isMaster": false,
              "isPrimary": false
            },
            {
              "sslPort": 15003,
              "nonSslPort": 13003,
              "zone": "1",
              "shardId": 1,
              "isMaster": true,
              "isPrimary": true
            },
            {
              "sslPort": 15004,
              "nonSslPort": 13004,
              "zone": "1",
              "shardId": 1,
              "isMaster": false,
              "isPrimary": false
            },
            {
              "sslPort": 15005,
              "nonSslPort": 13005,
              "zone": "1",
              "shardId": 1,
              "isMaster": false,
              "isPrimary": false
            }
          ]
        }
      }
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
        "location": "West US",
        "zones": [
          "1"
        ],
        "name": "cache1",
        "type": "Microsoft.Cache/Redis",
        "tags": {},
        "properties": {
          "accessKeys": {
            "primaryKey": "<primaryKey>",
            "secondaryKey": "<secondaryKey>"
          },
          "provisioningState": "Succeeded",
          "redisVersion": "3.0",
          "sku": {
            "name": "Premium",
            "family": "P",
            "capacity": 1
          },
          "enableNonSslPort": false,
          "replicasPerMaster": 2,
          "replicasPerPrimary": 2,
          "redisConfiguration": {
            "maxclients": "1000",
            "maxmemory-reserved": "50",
            "maxmemory-delta": "50"
          },
          "hostName": "cache1.redis.cache.windows.net",
          "port": 6379,
          "sslPort": 6380,
          "minimumTlsVersion": "1.2",
          "instances": [
            {
              "sslPort": 15000,
              "nonSslPort": 13000,
              "zone": "1",
              "shardId": 0,
              "isMaster": true,
              "isPrimary": true
            },
            {
              "sslPort": 15001,
              "nonSslPort": 13001,
              "zone": "1",
              "shardId": 0,
              "isMaster": false,
              "isPrimary": false
            },
            {
              "sslPort": 15002,
              "nonSslPort": 13002,
              "zone": "1",
              "shardId": 0,
              "isMaster": false,
              "isPrimary": false
            },
            {
              "sslPort": 15003,
              "nonSslPort": 13003,
              "zone": "1",
              "shardId": 1,
              "isMaster": true,
              "isPrimary": true
            },
            {
              "sslPort": 15004,
              "nonSslPort": 13004,
              "zone": "1",
              "shardId": 1,
              "isMaster": false,
              "isPrimary": false
            },
            {
              "sslPort": 15005,
              "nonSslPort": 13005,
              "zone": "1",
              "shardId": 1,
              "isMaster": false,
              "isPrimary": false
            }
          ]
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Redis Cache service - Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
errorCodes: []
