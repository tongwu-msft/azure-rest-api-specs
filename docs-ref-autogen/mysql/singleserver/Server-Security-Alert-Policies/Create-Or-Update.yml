### YamlMime:RESTOperation
uid: management.azure.com.mysql.singleserver.serversecurityalertpolicies.createorupdate
name: Create Or Update
service: MySQL
groupName: Server Security Alert Policies
apiVersion: 2017-12-01
summary: Creates or updates a threat detection policy.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/securityAlertPolicies/Default?api-version=2017-12-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group. The name is case insensitive.
  types:
  - uid: string
- name: serverName
  in: path
  isRequired: true
  description: The name of the server.
  types:
  - uid: string
- name: securityAlertPolicyName
  in: path
  isRequired: true
  description: The name of the threat detection policy.
  types:
  - uid: SecurityAlertPolicyName
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully updated the threat detection policy.
  types:
  - uid: ServerSecurityAlertPolicy
- name: Other Status Codes
  description: Error response describing why the operation of setting security alert policies failed.
- name: 202 Accepted
  description: Created request to set the server threat detection policy.
requestBody:
- name: default
  parameters:
  - name: properties.state
    in: body
    isRequired: true
    description: Specifies the state of the policy, whether it is enabled or disabled.
    types:
    - uid: ServerSecurityAlertPolicyState
  - name: properties.disabledAlerts
    in: body
    description: 'Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly'
    types:
    - uid: string
      isArray: true
  - name: properties.emailAddresses
    in: body
    description: Specifies an array of e-mail addresses to which the alert is sent.
    types:
    - uid: string
      isArray: true
  - name: properties.emailAccountAdmins
    in: body
    description: Specifies that the alert is sent to the account administrators.
    types:
    - uid: boolean
  - name: properties.storageEndpoint
    in: body
    description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
    types:
    - uid: string
  - name: properties.storageAccountAccessKey
    in: body
    description: Specifies the identifier key of the Threat Detection audit storage account.
    types:
    - uid: string
  - name: properties.retentionDays
    in: body
    description: Specifies the number of days to keep in the Threat Detection audit logs.
    types:
    - uid: integer
requestHeader: []
definitions:
- name: SecurityAlertPolicyName
  description: The name of the threat detection policy.
  kind: enum
  properties:
  - name: Default
    types:
    - uid: string
- name: ServerSecurityAlertPolicy
  description: A server security alert policy.
  kind: object
  properties:
  - name: properties.state
    description: Specifies the state of the policy, whether it is enabled or disabled.
    types:
    - uid: ServerSecurityAlertPolicyState
  - name: properties.disabledAlerts
    description: 'Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly'
    types:
    - uid: string
      isArray: true
  - name: properties.emailAddresses
    description: Specifies an array of e-mail addresses to which the alert is sent.
    types:
    - uid: string
      isArray: true
  - name: properties.emailAccountAdmins
    description: Specifies that the alert is sent to the account administrators.
    types:
    - uid: boolean
  - name: properties.storageEndpoint
    description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
    types:
    - uid: string
  - name: properties.storageAccountAccessKey
    description: Specifies the identifier key of the Threat Detection audit storage account.
    types:
    - uid: string
  - name: properties.retentionDays
    description: Specifies the number of days to keep in the Threat Detection audit logs.
    types:
    - uid: integer
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: ServerSecurityAlertPolicyState
  description: Specifies the state of the policy, whether it is enabled or disabled.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
examples:
- name: Update a server's threat detection policy with all parameters
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2017-12-01
    body: >-
      {
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [
            "testSecurityAlert@microsoft.com"
          ],
          "disabledAlerts": [
            "Access_Anomaly",
            "Usage_Anomaly"
          ],
          "retentionDays": 5,
          "storageAccountAccessKey": "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2017-12-01

      {
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [
            "testSecurityAlert@microsoft.com"
          ],
          "disabledAlerts": [
            "Access_Anomaly",
            "Usage_Anomaly"
          ],
          "retentionDays": 5,
          "storageAccountAccessKey": "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.mysql.models.SecurityAlertPolicyName;
      import com.azure.resourcemanager.mysql.models.ServerSecurityAlertPolicy;
      import com.azure.resourcemanager.mysql.models.ServerSecurityAlertPolicyState;
      import java.util.Arrays;

      /** Samples for ServerSecurityAlertPolicies CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json
           */
          /**
           * Sample code: Update a server's threat detection policy with all parameters.
           *
           * @param manager Entry point to MySqlManager.
           */
          public static void updateAServerSThreatDetectionPolicyWithAllParameters(
              com.azure.resourcemanager.mysql.MySqlManager manager) {
              ServerSecurityAlertPolicy resource =
                  manager
                      .serverSecurityAlertPolicies()
                      .getWithResponse(
                          "securityalert-4799", "securityalert-6440", SecurityAlertPolicyName.DEFAULT, Context.NONE)
                      .getValue();
              resource
                  .update()
                  .withState(ServerSecurityAlertPolicyState.ENABLED)
                  .withDisabledAlerts(Arrays.asList("Access_Anomaly", "Usage_Anomaly"))
                  .withEmailAddresses(Arrays.asList("testSecurityAlert@microsoft.com"))
                  .withEmailAccountAdmins(true)
                  .withStorageEndpoint("https://mystorage.blob.core.windows.net")
                  .withStorageAccountAccessKey(
                      "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==")
                  .withRetentionDays(5)
                  .apply();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mysql_1.0.2/sdk/mysql/azure-resourcemanager-mysql/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmysql_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mysql/armmysql"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json
      func ExampleServerSecurityAlertPoliciesClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmysql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"securityalert-4799",
      		"securityalert-6440",
      		armmysql.SecurityAlertPolicyNameDefault,
      		armmysql.ServerSecurityAlertPolicy{
      			Properties: &armmysql.SecurityAlertPolicyProperties{
      				DisabledAlerts: []*string{
      					to.Ptr("Access_Anomaly"),
      					to.Ptr("Usage_Anomaly")},
      				EmailAccountAdmins: to.Ptr(true),
      				EmailAddresses: []*string{
      					to.Ptr("testSecurityAlert@microsoft.com")},
      				RetentionDays:           to.Ptr[int32](5),
      				State:                   to.Ptr(armmysql.ServerSecurityAlertPolicyStateEnabled),
      				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
      				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmysql%2Farmmysql%2Fv1.0.0/sdk/resourcemanager/mysql/armmysql/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { MySQLManagementClient } = require("@azure/arm-mysql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a threat detection policy.
       *
       * @summary Creates or updates a threat detection policy.
       * x-ms-original-file: specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMax.json
       */
      async function updateAServerThreatDetectionPolicyWithAllParameters() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "securityalert-4799";
        const serverName = "securityalert-6440";
        const securityAlertPolicyName = "Default";
        const parameters = {
          disabledAlerts: ["Access_Anomaly", "Usage_Anomaly"],
          emailAccountAdmins: true,
          emailAddresses: ["testSecurityAlert@microsoft.com"],
          retentionDays: 5,
          state: "Enabled",
          storageAccountAccessKey:
            "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          storageEndpoint: "https://mystorage.blob.core.windows.net",
        };
        const credential = new DefaultAzureCredential();
        const client = new MySQLManagementClient(credential, subscriptionId);
        const result = await client.serverSecurityAlertPolicies.beginCreateOrUpdateAndWait(
          resourceGroupName,
          serverName,
          securityAlertPolicyName,
          parameters
        );
        console.log(result);
      }

      updateAServerThreatDetectionPolicyWithAllParameters().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mysql_5.0.1/sdk/mysql/arm-mysql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/default",
        "name": "Default",
        "type": "Microsoft.DBforMySQL/servers/securityAlertPolicies",
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [
            "testSecurityAlert@microsoft.com"
          ],
          "disabledAlerts": [
            "Access_Anomaly",
            "Usage_Anomaly"
          ],
          "retentionDays": 5,
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }
  - statusCode: "202"
- name: Update a server's threat detection policy with minimal parameters
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2017-12-01
    body: >-
      {
        "properties": {
          "state": "Disabled",
          "emailAccountAdmins": true
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2017-12-01

      {
        "properties": {
          "state": "Disabled",
          "emailAccountAdmins": true
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.mysql.models.SecurityAlertPolicyName;
      import com.azure.resourcemanager.mysql.models.ServerSecurityAlertPolicy;
      import com.azure.resourcemanager.mysql.models.ServerSecurityAlertPolicyState;

      /** Samples for ServerSecurityAlertPolicies CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json
           */
          /**
           * Sample code: Update a server's threat detection policy with minimal parameters.
           *
           * @param manager Entry point to MySqlManager.
           */
          public static void updateAServerSThreatDetectionPolicyWithMinimalParameters(
              com.azure.resourcemanager.mysql.MySqlManager manager) {
              ServerSecurityAlertPolicy resource =
                  manager
                      .serverSecurityAlertPolicies()
                      .getWithResponse(
                          "securityalert-4799", "securityalert-6440", SecurityAlertPolicyName.DEFAULT, Context.NONE)
                      .getValue();
              resource.update().withState(ServerSecurityAlertPolicyState.DISABLED).withEmailAccountAdmins(true).apply();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mysql_1.0.2/sdk/mysql/azure-resourcemanager-mysql/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { MySQLManagementClient } = require("@azure/arm-mysql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a threat detection policy.
       *
       * @summary Creates or updates a threat detection policy.
       * x-ms-original-file: specification/mysql/resource-manager/Microsoft.DBforMySQL/stable/2017-12-01/examples/ServerSecurityAlertsCreateMin.json
       */
      async function updateAServerThreatDetectionPolicyWithMinimalParameters() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "securityalert-4799";
        const serverName = "securityalert-6440";
        const securityAlertPolicyName = "Default";
        const parameters = {
          emailAccountAdmins: true,
          state: "Disabled",
        };
        const credential = new DefaultAzureCredential();
        const client = new MySQLManagementClient(credential, subscriptionId);
        const result = await client.serverSecurityAlertPolicies.beginCreateOrUpdateAndWait(
          resourceGroupName,
          serverName,
          securityAlertPolicyName,
          parameters
        );
        console.log(result);
      }

      updateAServerThreatDetectionPolicyWithMinimalParameters().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mysql_5.0.1/sdk/mysql/arm-mysql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.DBforMySQL/servers/securityalert-6440/securityAlertPolicies/default",
        "name": "Default",
        "type": "Microsoft.DBforMySQL/servers/securityAlertPolicies",
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [],
          "disabledAlerts": [],
          "retentionDays": 0,
          "storageEndpoint": ""
        }
      }
  - statusCode: "202"
security: []
metadata:
  description: Learn more about MySQL service - Creates or updates a threat detection policy.
errorCodes: []
