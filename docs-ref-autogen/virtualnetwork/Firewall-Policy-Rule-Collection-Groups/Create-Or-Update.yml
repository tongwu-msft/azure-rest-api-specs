### YamlMime:RESTOperation
uid: management.azure.com.virtualnetwork.firewallpolicyrulecollectiongroups.createorupdate
name: Create Or Update
service: Virtual Networks
groupName: Firewall Policy Rule Collection Groups
apiVersion: 2022-05-01
summary: Creates or updates the specified FirewallPolicyRuleCollectionGroup.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/ruleCollectionGroups/{ruleCollectionGroupName}?api-version=2022-05-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: firewallPolicyName
  in: path
  isRequired: true
  description: The name of the Firewall Policy.
  types:
  - uid: string
- name: ruleCollectionGroupName
  in: path
  isRequired: true
  description: The name of the FirewallPolicyRuleCollectionGroup.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 201 Created
  description: Request received successfully. The operation returns the resulting FirewallPolicyRuleCollectionGroup resource.
  types:
  - uid: FirewallPolicyRuleCollectionGroup
- name: 200 OK
  description: Request successful. The operation returns the resulting FirewallPolicyRuleCollectionGroup resource.
  types:
  - uid: FirewallPolicyRuleCollectionGroup
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: name
    in: body
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: properties.priority
    in: body
    description: Priority of the Firewall Policy Rule Collection Group resource.
    types:
    - uid: integer
  - name: properties.ruleCollections
    in: body
    description: Group of Firewall Policy rule collections.
    types:
    - uid: FirewallPolicyNatRuleCollection
      isArray: true
    - uid: FirewallPolicyFilterRuleCollection
      isArray: true
    typesTitle: FirewallPolicyRuleCollection[]
  - name: id
    in: body
    description: Resource ID.
    types:
    - uid: string
requestHeader: []
definitions:
- name: FirewallPolicyRuleCollectionGroup
  description: Rule Collection Group resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Rule Group type.
    types:
    - uid: string
  - name: properties.priority
    description: Priority of the Firewall Policy Rule Collection Group resource.
    types:
    - uid: integer
  - name: properties.ruleCollections
    description: Group of Firewall Policy rule collections.
    types:
    - uid: FirewallPolicyNatRuleCollection
      isArray: true
    - uid: FirewallPolicyFilterRuleCollection
      isArray: true
    typesTitle: FirewallPolicyRuleCollection[]
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the firewall policy rule collection group resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: CloudError
  description: An error response from the service.
  kind: object
  properties:
  - name: error
    description: Cloud error body.
    types:
    - uid: CloudErrorBody
- name: FirewallPolicyNatRuleCollection
  description: Firewall Policy NAT Rule Collection.
  kind: object
  properties:
  - name: action
    description: The action type of a Nat rule collection.
    types:
    - uid: FirewallPolicyNatRuleCollectionAction
  - name: rules
    description: List of rules included in a rule collection.
    types:
    - uid: ApplicationRule
      isArray: true
    - uid: NatRule
      isArray: true
    - uid: NetworkRule
      isArray: true
    typesTitle: FirewallPolicyRule[]
  - name: ruleCollectionType
    description: The type of the rule collection.
    types:
    - uid: FirewallPolicyNatRuleCollection
    typesTitle: string
  - name: name
    description: The name of the rule collection.
    types:
    - uid: string
  - name: priority
    description: Priority of the Firewall Policy Rule Collection resource.
    types:
    - uid: integer
- name: FirewallPolicyFilterRuleCollection
  description: Firewall Policy Filter Rule Collection.
  kind: object
  properties:
  - name: action
    description: The action type of a Filter rule collection.
    types:
    - uid: FirewallPolicyFilterRuleCollectionAction
  - name: rules
    description: List of rules included in a rule collection.
    types:
    - uid: ApplicationRule
      isArray: true
    - uid: NatRule
      isArray: true
    - uid: NetworkRule
      isArray: true
    typesTitle: FirewallPolicyRule[]
  - name: ruleCollectionType
    description: The type of the rule collection.
    types:
    - uid: FirewallPolicyFilterRuleCollection
    typesTitle: string
  - name: name
    description: The name of the rule collection.
    types:
    - uid: string
  - name: priority
    description: Priority of the Firewall Policy Rule Collection resource.
    types:
    - uid: integer
- name: ProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response from the service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
- name: FirewallPolicyNatRuleCollectionAction
  description: Properties of the FirewallPolicyNatRuleCollectionAction.
  kind: object
  properties:
  - name: type
    description: The type of action.
    types:
    - uid: FirewallPolicyNatRuleCollectionActionType
- name: FirewallPolicyFilterRuleCollectionAction
  description: Properties of the FirewallPolicyFilterRuleCollectionAction.
  kind: object
  properties:
  - name: type
    description: The type of action.
    types:
    - uid: FirewallPolicyFilterRuleCollectionActionType
- name: FirewallPolicyNatRuleCollectionActionType
  description: The action type of a rule.
  kind: enum
  properties:
  - name: DNAT
    types:
    - uid: string
- name: ApplicationRule
  description: Rule of type application.
  kind: object
  properties:
  - name: sourceAddresses
    description: List of source IP addresses for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationAddresses
    description: List of destination IP addresses or Service Tags.
    types:
    - uid: string
      isArray: true
  - name: protocols
    description: Array of Application Protocols.
    types:
    - uid: FirewallPolicyRuleApplicationProtocol
      isArray: true
  - name: targetFqdns
    description: List of FQDNs for this rule.
    types:
    - uid: string
      isArray: true
  - name: targetUrls
    description: List of Urls for this rule condition.
    types:
    - uid: string
      isArray: true
  - name: fqdnTags
    description: List of FQDN Tags for this rule.
    types:
    - uid: string
      isArray: true
  - name: sourceIpGroups
    description: List of source IpGroups for this rule.
    types:
    - uid: string
      isArray: true
  - name: terminateTLS
    description: Terminate TLS connections for this rule.
    types:
    - uid: boolean
  - name: webCategories
    description: List of destination azure web categories.
    types:
    - uid: string
      isArray: true
  - name: name
    description: Name of the rule.
    types:
    - uid: string
  - name: description
    description: Description of the rule.
    types:
    - uid: string
  - name: ruleType
    description: Rule Type.
    types:
    - uid: ApplicationRule
    typesTitle: string
- name: NatRule
  description: Rule of type nat.
  kind: object
  properties:
  - name: ipProtocols
    description: Array of FirewallPolicyRuleNetworkProtocols.
    types:
    - uid: string
      isArray: true
  - name: sourceAddresses
    description: List of source IP addresses for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationAddresses
    description: List of destination IP addresses or Service Tags.
    types:
    - uid: string
      isArray: true
  - name: destinationPorts
    description: List of destination ports.
    types:
    - uid: string
      isArray: true
  - name: translatedAddress
    description: The translated address for this NAT rule.
    types:
    - uid: string
  - name: translatedPort
    description: The translated port for this NAT rule.
    types:
    - uid: string
  - name: sourceIpGroups
    description: List of source IpGroups for this rule.
    types:
    - uid: string
      isArray: true
  - name: translatedFqdn
    description: The translated FQDN for this NAT rule.
    types:
    - uid: string
  - name: name
    description: Name of the rule.
    types:
    - uid: string
  - name: description
    description: Description of the rule.
    types:
    - uid: string
  - name: ruleType
    description: Rule Type.
    types:
    - uid: NatRule
    typesTitle: string
- name: NetworkRule
  description: Rule of type network.
  kind: object
  properties:
  - name: ipProtocols
    description: Array of FirewallPolicyRuleNetworkProtocols.
    types:
    - uid: string
      isArray: true
  - name: sourceAddresses
    description: List of source IP addresses for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationAddresses
    description: List of destination IP addresses or Service Tags.
    types:
    - uid: string
      isArray: true
  - name: destinationPorts
    description: List of destination ports.
    types:
    - uid: string
      isArray: true
  - name: sourceIpGroups
    description: List of source IpGroups for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationIpGroups
    description: List of destination IpGroups for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationFqdns
    description: List of destination FQDNs.
    types:
    - uid: string
      isArray: true
  - name: name
    description: Name of the rule.
    types:
    - uid: string
  - name: description
    description: Description of the rule.
    types:
    - uid: string
  - name: ruleType
    description: Rule Type.
    types:
    - uid: NetworkRule
    typesTitle: string
- name: FirewallPolicyFilterRuleCollectionActionType
  description: The action type of a rule.
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
- name: FirewallPolicyRuleApplicationProtocol
  description: Properties of the application rule protocol.
  kind: object
  properties:
  - name: protocolType
    description: Protocol type.
    types:
    - uid: FirewallPolicyRuleApplicationProtocolType
  - name: port
    description: Port number for the protocol, cannot be greater than 64000.
    types:
    - uid: integer
- name: FirewallPolicyRuleApplicationProtocolType
  description: The application protocol type of a Rule.
  kind: enum
  properties:
  - name: Http
    types:
    - uid: string
  - name: Https
    types:
    - uid: string
examples:
- name: Create FirewallPolicyRuleCollectionGroup
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01
    body: >-
      {
        "properties": {
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "priority": 100,
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-rule1",
                  "sourceAddresses": [
                    "10.1.25.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01

      {
        "properties": {
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "priority": 100,
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-rule1",
                  "sourceAddresses": [
                    "10.1.25.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyRuleCollectionGroupPut.json
      func ExampleFirewallPolicyRuleCollectionGroupsClient_BeginCreateOrUpdate_createFirewallPolicyRuleCollectionGroup() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "firewallPolicy", "ruleCollectionGroup1", armnetwork.FirewallPolicyRuleCollectionGroup{
      		Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
      			Priority: to.Ptr[int32](100),
      			RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
      				&armnetwork.FirewallPolicyFilterRuleCollection{
      					Name:               to.Ptr("Example-Filter-Rule-Collection"),
      					Priority:           to.Ptr[int32](100),
      					RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
      					Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
      						Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
      					},
      					Rules: []armnetwork.FirewallPolicyRuleClassification{
      						&armnetwork.Rule{
      							Name:     to.Ptr("network-rule1"),
      							RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
      							DestinationAddresses: []*string{
      								to.Ptr("*")},
      							DestinationPorts: []*string{
      								to.Ptr("*")},
      							IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
      								to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
      							SourceAddresses: []*string{
      								to.Ptr("10.1.25.0/24")},
      						}},
      				}},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       *
       * @summary Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyRuleCollectionGroupPut.json
       */
      async function createFirewallPolicyRuleCollectionGroup() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const firewallPolicyName = "firewallPolicy";
        const ruleCollectionGroupName = "ruleCollectionGroup1";
        const parameters = {
          priority: 100,
          ruleCollections: [
            {
              name: "Example-Filter-Rule-Collection",
              action: { type: "Deny" },
              priority: 100,
              ruleCollectionType: "FirewallPolicyFilterRuleCollection",
              rules: [
                {
                  name: "network-rule1",
                  destinationAddresses: ["*"],
                  destinationPorts: ["*"],
                  ipProtocols: ["TCP"],
                  ruleType: "NetworkRule",
                  sourceAddresses: ["10.1.25.0/24"],
                },
              ],
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.firewallPolicyRuleCollectionGroups.beginCreateOrUpdateAndWait(
          resourceGroupName,
          firewallPolicyName,
          ruleCollectionGroupName,
          parameters
        );
        console.log(result);
      }

      createFirewallPolicyRuleCollectionGroup().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "ruleCollectionGroup1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "priority": 100,
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-rule1",
                  "sourceAddresses": [
                    "10.1.25.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            }
          ]
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "firewallPolicy",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "priority": 100,
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-rule1",
                  "sourceAddresses": [
                    "10.1.25.0/24"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            }
          ]
        }
      }
- name: Create FirewallPolicyRuleCollectionGroup With IpGroups
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01
    body: >-
      {
        "properties": {
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-1",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ],
                  "sourceIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1"
                  ],
                  "destinationIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2"
                  ]
                }
              ]
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01

      {
        "properties": {
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-1",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ],
                  "sourceIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1"
                  ],
                  "destinationIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2"
                  ]
                }
              ]
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsPut.json
      func ExampleFirewallPolicyRuleCollectionGroupsClient_BeginCreateOrUpdate_createFirewallPolicyRuleCollectionGroupWithIpGroups() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "firewallPolicy", "ruleCollectionGroup1", armnetwork.FirewallPolicyRuleCollectionGroup{
      		Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
      			Priority: to.Ptr[int32](110),
      			RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
      				&armnetwork.FirewallPolicyFilterRuleCollection{
      					Name:               to.Ptr("Example-Filter-Rule-Collection"),
      					RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
      					Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
      						Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
      					},
      					Rules: []armnetwork.FirewallPolicyRuleClassification{
      						&armnetwork.Rule{
      							Name:     to.Ptr("network-1"),
      							RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNetworkRule),
      							DestinationIPGroups: []*string{
      								to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2")},
      							DestinationPorts: []*string{
      								to.Ptr("*")},
      							IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
      								to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP)},
      							SourceIPGroups: []*string{
      								to.Ptr("/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1")},
      						}},
      				}},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       *
       * @summary Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyRuleCollectionGroupWithIpGroupsPut.json
       */
      async function createFirewallPolicyRuleCollectionGroupWithIPGroups() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const firewallPolicyName = "firewallPolicy";
        const ruleCollectionGroupName = "ruleCollectionGroup1";
        const parameters = {
          priority: 110,
          ruleCollections: [
            {
              name: "Example-Filter-Rule-Collection",
              action: { type: "Deny" },
              ruleCollectionType: "FirewallPolicyFilterRuleCollection",
              rules: [
                {
                  name: "network-1",
                  destinationIpGroups: [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2",
                  ],
                  destinationPorts: ["*"],
                  ipProtocols: ["TCP"],
                  ruleType: "NetworkRule",
                  sourceIpGroups: [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1",
                  ],
                },
              ],
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.firewallPolicyRuleCollectionGroups.beginCreateOrUpdateAndWait(
          resourceGroupName,
          firewallPolicyName,
          ruleCollectionGroupName,
          parameters
        );
        console.log(result);
      }

      createFirewallPolicyRuleCollectionGroupWithIPGroups().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "ruleCollectionGroup1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-1",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ],
                  "sourceIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1"
                  ],
                  "destinationIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2"
                  ]
                }
              ]
            }
          ]
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "firewallPolicy",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "NetworkRule",
                  "name": "network-1",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "*"
                  ],
                  "sourceIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups1"
                  ],
                  "destinationIpGroups": [
                    "/subscriptions/subid/providers/Microsoft.Network/resourceGroup/rg1/ipGroups/ipGroups2"
                  ]
                }
              ]
            }
          ]
        }
      }
- name: Create FirewallPolicyNatRuleCollectionGroup
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01
    body: >-
      {
        "properties": {
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyNatRuleCollection",
              "priority": 100,
              "name": "Example-Nat-Rule-Collection",
              "action": {
                "type": "DNAT"
              },
              "rules": [
                {
                  "ruleType": "NatRule",
                  "name": "nat-rule1",
                  "translatedFqdn": "internalhttp.server.net",
                  "translatedPort": "8080",
                  "ipProtocols": [
                    "TCP",
                    "UDP"
                  ],
                  "sourceAddresses": [
                    "2.2.2.2"
                  ],
                  "sourceIpGroups": [],
                  "destinationAddresses": [
                    "152.23.32.23"
                  ],
                  "destinationPorts": [
                    "8080"
                  ]
                }
              ]
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01

      {
        "properties": {
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyNatRuleCollection",
              "priority": 100,
              "name": "Example-Nat-Rule-Collection",
              "action": {
                "type": "DNAT"
              },
              "rules": [
                {
                  "ruleType": "NatRule",
                  "name": "nat-rule1",
                  "translatedFqdn": "internalhttp.server.net",
                  "translatedPort": "8080",
                  "ipProtocols": [
                    "TCP",
                    "UDP"
                  ],
                  "sourceAddresses": [
                    "2.2.2.2"
                  ],
                  "sourceIpGroups": [],
                  "destinationAddresses": [
                    "152.23.32.23"
                  ],
                  "destinationPorts": [
                    "8080"
                  ]
                }
              ]
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyNatRuleCollectionGroupPut.json
      func ExampleFirewallPolicyRuleCollectionGroupsClient_BeginCreateOrUpdate_createFirewallPolicyNatRuleCollectionGroup() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "firewallPolicy", "ruleCollectionGroup1", armnetwork.FirewallPolicyRuleCollectionGroup{
      		Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
      			Priority: to.Ptr[int32](100),
      			RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
      				&armnetwork.FirewallPolicyNatRuleCollection{
      					Name:               to.Ptr("Example-Nat-Rule-Collection"),
      					Priority:           to.Ptr[int32](100),
      					RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection),
      					Action: &armnetwork.FirewallPolicyNatRuleCollectionAction{
      						Type: to.Ptr(armnetwork.FirewallPolicyNatRuleCollectionActionTypeDNAT),
      					},
      					Rules: []armnetwork.FirewallPolicyRuleClassification{
      						&armnetwork.NatRule{
      							Name:     to.Ptr("nat-rule1"),
      							RuleType: to.Ptr(armnetwork.FirewallPolicyRuleTypeNatRule),
      							DestinationAddresses: []*string{
      								to.Ptr("152.23.32.23")},
      							DestinationPorts: []*string{
      								to.Ptr("8080")},
      							IPProtocols: []*armnetwork.FirewallPolicyRuleNetworkProtocol{
      								to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolTCP),
      								to.Ptr(armnetwork.FirewallPolicyRuleNetworkProtocolUDP)},
      							SourceAddresses: []*string{
      								to.Ptr("2.2.2.2")},
      							SourceIPGroups: []*string{},
      							TranslatedFqdn: to.Ptr("internalhttp.server.net"),
      							TranslatedPort: to.Ptr("8080"),
      						}},
      				}},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       *
       * @summary Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyNatRuleCollectionGroupPut.json
       */
      async function createFirewallPolicyNatRuleCollectionGroup() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const firewallPolicyName = "firewallPolicy";
        const ruleCollectionGroupName = "ruleCollectionGroup1";
        const parameters = {
          priority: 100,
          ruleCollections: [
            {
              name: "Example-Nat-Rule-Collection",
              action: { type: "DNAT" },
              priority: 100,
              ruleCollectionType: "FirewallPolicyNatRuleCollection",
              rules: [
                {
                  name: "nat-rule1",
                  destinationAddresses: ["152.23.32.23"],
                  destinationPorts: ["8080"],
                  ipProtocols: ["TCP", "UDP"],
                  ruleType: "NatRule",
                  sourceAddresses: ["2.2.2.2"],
                  sourceIpGroups: [],
                  translatedFqdn: "internalhttp.server.net",
                  translatedPort: "8080",
                },
              ],
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.firewallPolicyRuleCollectionGroups.beginCreateOrUpdateAndWait(
          resourceGroupName,
          firewallPolicyName,
          ruleCollectionGroupName,
          parameters
        );
        console.log(result);
      }

      createFirewallPolicyNatRuleCollectionGroup().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "ruleCollectionGroup1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 100,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyNatRuleCollection",
              "name": "Example-Nat-Rule-Collection",
              "priority": 100,
              "action": {
                "type": "DNAT"
              },
              "rules": [
                {
                  "ruleType": "NatRule",
                  "name": "nat-rule1",
                  "translatedFqdn": "internalhttp.server.net",
                  "translatedPort": "8080",
                  "ipProtocols": [
                    "TCP",
                    "UDP"
                  ],
                  "sourceAddresses": [
                    "2.2.2.2"
                  ],
                  "sourceIpGroups": [],
                  "destinationAddresses": [
                    "152.23.32.23"
                  ],
                  "destinationPorts": [
                    "8080"
                  ]
                }
              ]
            }
          ]
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "firewallPolicy",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyNatRuleCollection",
              "name": "Example-Nat-Rule-Collection",
              "priority": 100,
              "action": {
                "type": "DNAT"
              },
              "rules": [
                {
                  "ruleType": "NatRule",
                  "name": "nat-rule1",
                  "translatedFqdn": "internalhttp.server.net",
                  "translatedPort": "8080",
                  "ipProtocols": [
                    "TCP",
                    "UDP"
                  ],
                  "sourceAddresses": [
                    "2.2.2.2"
                  ],
                  "sourceIpGroups": [],
                  "destinationAddresses": [
                    "152.23.32.23"
                  ],
                  "destinationPorts": [
                    "8080"
                  ]
                }
              ]
            }
          ]
        }
      }
- name: Create FirewallPolicyRuleCollectionGroup With Web Categories
  request:
    uri: PUT https://management.azure.com/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01
    body: >-
      {
        "properties": {
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "ApplicationRule",
                  "name": "rule1",
                  "description": "Deny inbound rule",
                  "protocols": [
                    {
                      "protocolType": "Https",
                      "port": 443
                    }
                  ],
                  "sourceAddresses": [
                    "216.58.216.164",
                    "10.0.0.0/24"
                  ],
                  "webCategories": [
                    "Hacking"
                  ]
                }
              ]
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1?api-version=2022-05-01

      {
        "properties": {
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "ApplicationRule",
                  "name": "rule1",
                  "description": "Deny inbound rule",
                  "protocols": [
                    {
                      "protocolType": "Https",
                      "port": 443
                    }
                  ],
                  "sourceAddresses": [
                    "216.58.216.164",
                    "10.0.0.0/24"
                  ],
                  "webCategories": [
                    "Hacking"
                  ]
                }
              ]
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesPut.json
      func ExampleFirewallPolicyRuleCollectionGroupsClient_BeginCreateOrUpdate_createFirewallPolicyRuleCollectionGroupWithWebCategories() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewFirewallPolicyRuleCollectionGroupsClient("e747cc13-97d4-4a79-b463-42d7f4e558f2", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "firewallPolicy", "ruleCollectionGroup1", armnetwork.FirewallPolicyRuleCollectionGroup{
      		Properties: &armnetwork.FirewallPolicyRuleCollectionGroupProperties{
      			Priority: to.Ptr[int32](110),
      			RuleCollections: []armnetwork.FirewallPolicyRuleCollectionClassification{
      				&armnetwork.FirewallPolicyFilterRuleCollection{
      					Name:               to.Ptr("Example-Filter-Rule-Collection"),
      					RuleCollectionType: to.Ptr(armnetwork.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection),
      					Action: &armnetwork.FirewallPolicyFilterRuleCollectionAction{
      						Type: to.Ptr(armnetwork.FirewallPolicyFilterRuleCollectionActionTypeDeny),
      					},
      					Rules: []armnetwork.FirewallPolicyRuleClassification{
      						&armnetwork.ApplicationRule{
      							Name:        to.Ptr("rule1"),
      							Description: to.Ptr("Deny inbound rule"),
      							RuleType:    to.Ptr(armnetwork.FirewallPolicyRuleTypeApplicationRule),
      							Protocols: []*armnetwork.FirewallPolicyRuleApplicationProtocol{
      								{
      									Port:         to.Ptr[int32](443),
      									ProtocolType: to.Ptr(armnetwork.FirewallPolicyRuleApplicationProtocolTypeHTTPS),
      								}},
      							SourceAddresses: []*string{
      								to.Ptr("216.58.216.164"),
      								to.Ptr("10.0.0.0/24")},
      							WebCategories: []*string{
      								to.Ptr("Hacking")},
      						}},
      				}},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       *
       * @summary Creates or updates the specified FirewallPolicyRuleCollectionGroup.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/FirewallPolicyRuleCollectionGroupWithWebCategoriesPut.json
       */
      async function createFirewallPolicyRuleCollectionGroupWithWebCategories() {
        const subscriptionId = "e747cc13-97d4-4a79-b463-42d7f4e558f2";
        const resourceGroupName = "rg1";
        const firewallPolicyName = "firewallPolicy";
        const ruleCollectionGroupName = "ruleCollectionGroup1";
        const parameters = {
          priority: 110,
          ruleCollections: [
            {
              name: "Example-Filter-Rule-Collection",
              action: { type: "Deny" },
              ruleCollectionType: "FirewallPolicyFilterRuleCollection",
              rules: [
                {
                  name: "rule1",
                  description: "Deny inbound rule",
                  protocols: [{ port: 443, protocolType: "Https" }],
                  ruleType: "ApplicationRule",
                  sourceAddresses: ["216.58.216.164", "10.0.0.0/24"],
                  webCategories: ["Hacking"],
                },
              ],
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.firewallPolicyRuleCollectionGroups.beginCreateOrUpdateAndWait(
          resourceGroupName,
          firewallPolicyName,
          ruleCollectionGroupName,
          parameters
        );
        console.log(result);
      }

      createFirewallPolicyRuleCollectionGroupWithWebCategories().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "ruleCollectionGroup1",
        "id": "/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "ApplicationRule",
                  "name": "rule1",
                  "description": "Deny inbound rule",
                  "protocols": [
                    {
                      "protocolType": "Https",
                      "port": 443
                    }
                  ],
                  "sourceAddresses": [
                    "216.58.216.164",
                    "10.0.0.0/24"
                  ],
                  "webCategories": [
                    "Hacking"
                  ]
                }
              ]
            }
          ]
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "firewallPolicy",
        "id": "/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Succeeded",
          "priority": 110,
          "ruleCollections": [
            {
              "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
              "name": "Example-Filter-Rule-Collection",
              "action": {
                "type": "Deny"
              },
              "rules": [
                {
                  "ruleType": "ApplicationRule",
                  "name": "rule1",
                  "description": "Deny inbound rule",
                  "protocols": [
                    {
                      "protocolType": "Https",
                      "port": 443
                    }
                  ],
                  "sourceAddresses": [
                    "216.58.216.164",
                    "10.0.0.0/24"
                  ],
                  "webCategories": [
                    "Hacking"
                  ]
                }
              ]
            }
          ]
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Virtual Networks service - Creates or updates the specified FirewallPolicyRuleCollectionGroup.
errorCodes: []
