### YamlMime:RESTOperation
uid: management.azure.com.internetanalyzer.experiments.createorupdate
name: Create Or Update
service: Internet Analyzer
groupName: Experiments
apiVersion: 2019-11-01
summary: Creates or updates an Experiment
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}?api-version=2019-11-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: Name of the Resource group within the Azure subscription.
  types:
  - uid: string
  pattern: ^[a-zA-Z0-9_\-\(\)\.]*[^\.]$
- name: profileName
  in: path
  isRequired: true
  description: The Profile identifier associated with the Tenant and Partner
  types:
  - uid: string
  pattern: ^[a-zA-Z0-9_\-\(\)\.]*[^\.]$
- name: experimentName
  in: path
  isRequired: true
  description: The Experiment identifier associated with the Experiment
  types:
  - uid: string
  pattern: ^[a-zA-Z0-9_\-\(\)\.]*[^\.]$
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK. The request has succeeded.
  types:
  - uid: Experiment
- name: 201 Created
  description: Created. The request has been fulfilled and a new experiment has been created.
  types:
  - uid: Experiment
- name: 202 Accepted
  description: Accepted. The request has been accepted for processing and the operation will complete asynchronously.
  types:
  - uid: Experiment
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: properties.description
    in: body
    description: The description of the details or intents of the Experiment
    types:
    - uid: string
  - name: properties.endpointA
    in: body
    description: The endpoint A of an experiment
    types:
    - uid: Endpoint
  - name: properties.endpointB
    in: body
    description: The endpoint B of an experiment
    types:
    - uid: Endpoint
  - name: properties.enabledState
    in: body
    description: The state of the Experiment
    types:
    - uid: state
  - name: location
    in: body
    description: Resource location.
    types:
    - uid: string
  - name: tags
    in: body
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: Endpoint
  description: Defines the endpoint properties
  kind: object
  properties:
  - name: name
    description: The name of the endpoint
    types:
    - uid: string
  - name: endpoint
    description: The endpoint URL
    types:
    - uid: string
- name: Experiment
  description: Defines the properties of an Experiment
  kind: object
  properties:
  - name: name
    isReadyOnly: true
    description: The name of the Experiment
    types:
    - uid: string
  - name: properties.description
    description: The description of the details or intents of the Experiment
    types:
    - uid: string
  - name: properties.endpointA
    description: The endpoint A of an experiment
    types:
    - uid: Endpoint
  - name: properties.endpointB
    description: The endpoint B of an experiment
    types:
    - uid: Endpoint
  - name: properties.enabledState
    description: The state of the Experiment
    types:
    - uid: state
  - name: properties.resourceState
    isReadyOnly: true
    description: Resource status.
    types:
    - uid: NetworkExperimentResourceState
  - name: properties.status
    isReadyOnly: true
    description: The description of Experiment status from the server side
    types:
    - uid: string
  - name: properties.scriptFileUri
    isReadyOnly: true
    description: The uri to the Script used in the Experiment
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: ErrorResponse
  description: Error response indicates Front Door service is not able to process the incoming request. The reason is provided in the error message.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: Error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: Error message indicating why the operation failed.
    types:
    - uid: string
- name: state
  description: The state of the Experiment
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: NetworkExperimentResourceState
  description: Defines the server side resource status
  kind: enum
  properties:
  - name: Creating
    types:
    - uid: string
  - name: Enabling
    types:
    - uid: string
  - name: Enabled
    types:
    - uid: string
  - name: Disabling
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
examples:
- name: Creates an Experiment
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment?api-version=2019-11-01
    body: >-
      {
        "properties": {
          "description": "this is my first experiment!",
          "endpointA": {
            "name": "endpoint A",
            "endpoint": "endpointA.net"
          },
          "endpointB": {
            "name": "endpoint B",
            "endpoint": "endpointB.net"
          },
          "enabledState": "Enabled"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment?api-version=2019-11-01

      {
        "properties": {
          "description": "this is my first experiment!",
          "endpointA": {
            "name": "endpoint A",
            "endpoint": "endpointA.net"
          },
          "endpointB": {
            "name": "endpoint B",
            "endpoint": "endpointB.net"
          },
          "enabledState": "Enabled"
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armfrontdoor_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/frontdoor/armfrontdoor"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateExperiment.json
      func ExampleExperimentsClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armfrontdoor.NewExperimentsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"MyResourceGroup",
      		"MyProfile",
      		"MyExperiment",
      		armfrontdoor.Experiment{
      			Properties: &armfrontdoor.ExperimentProperties{
      				Description:  to.Ptr("this is my first experiment!"),
      				EnabledState: to.Ptr(armfrontdoor.StateEnabled),
      				EndpointA: &armfrontdoor.Endpoint{
      					Name:     to.Ptr("endpoint A"),
      					Endpoint: to.Ptr("endpointA.net"),
      				},
      				EndpointB: &armfrontdoor.Endpoint{
      					Name:     to.Ptr("endpoint B"),
      					Endpoint: to.Ptr("endpointB.net"),
      				},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Ffrontdoor%2Farmfrontdoor%2Fv1.0.0/sdk/resourcemanager/frontdoor/armfrontdoor/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { FrontDoorManagementClient } = require("@azure/arm-frontdoor");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates an Experiment
       *
       * @summary Creates or updates an Experiment
       * x-ms-original-file: specification/frontdoor/resource-manager/Microsoft.Network/stable/2019-11-01/examples/NetworkExperimentCreateExperiment.json
       */
      async function createsAnExperiment() {
        const subscriptionId = "subid";
        const resourceGroupName = "MyResourceGroup";
        const profileName = "MyProfile";
        const experimentName = "MyExperiment";
        const parameters = {
          description: "this is my first experiment!",
          enabledState: "Enabled",
          endpointA: { name: "endpoint A", endpoint: "endpointA.net" },
          endpointB: { name: "endpoint B", endpoint: "endpointB.net" },
        };
        const credential = new DefaultAzureCredential();
        const client = new FrontDoorManagementClient(credential, subscriptionId);
        const result = await client.experiments.beginCreateOrUpdateAndWait(
          resourceGroupName,
          profileName,
          experimentName,
          parameters
        );
        console.log(result);
      }

      createsAnExperiment().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-frontdoor_5.0.1/sdk/frontdoor/arm-frontdoor/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "MyExperiment",
        "id": "/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment",
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "location": "WestUs",
        "properties": {
          "description": "this is my first experiment!",
          "endpointA": {
            "name": "endpoint A",
            "endpoint": "endpointA.net"
          },
          "endpointB": {
            "name": "endpoint B",
            "endpoint": "endpointB.net"
          },
          "enabledState": "Enabled",
          "resourceState": "Creating",
          "status": "ongoing",
          "scriptFileUri": "www.myScript.com"
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "MyExperiment",
        "id": "/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment",
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "location": "WestUs",
        "properties": {
          "description": "this is my first experiment!",
          "endpointA": {
            "name": "endpoint A",
            "endpoint": "endpointA.net"
          },
          "endpointB": {
            "name": "endpoint B",
            "endpoint": "endpointB.net"
          },
          "enabledState": "Enabled",
          "resourceState": "Creating",
          "status": "ongoing",
          "scriptFileUri": "www.myScript.com"
        }
      }
  - statusCode: "202"
    body: >-
      {
        "name": "MyExperiment",
        "id": "/subscriptions/subid/resourceGroups/MyResourceGroup/providers/Microsoft.Network/NetworkExperimentProfiles/MyProfile/Experiments/MyExperiment",
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "location": "WestUs",
        "properties": {
          "description": "this is my first experiment!",
          "endpointA": {
            "name": "endpoint A",
            "endpoint": "endpointA.net"
          },
          "endpointB": {
            "name": "endpoint B",
            "endpoint": "endpointB.net"
          },
          "enabledState": "Enabled",
          "resourceState": "Creating",
          "status": "ongoing",
          "scriptFileUri": "www.myScript.com"
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Internet Analyzer service - Creates or updates an Experiment
errorCodes: []
