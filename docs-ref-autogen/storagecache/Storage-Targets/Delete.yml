### YamlMime:RESTOperation
uid: management.azure.com.storagecache.storagetargets.delete
name: Delete
service: Storagecache
groupName: Storage Targets
apiVersion: 2022-05-01
summary: Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
consumes:
- application/json
produces:
- application/json
paths:
- content: DELETE https://management.azure.com/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}?api-version=2022-05-01
- content: DELETE https://management.azure.com/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}?api-version=2022-05-01&force={force}
  isOptional: true
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: Target resource group.
  types:
  - uid: string
- name: cacheName
  in: path
  isRequired: true
  description: Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
  types:
  - uid: string
  pattern: ^[-0-9a-zA-Z_]{1,80}$
- name: storageTargetName
  in: path
  isRequired: true
  description: Name of Storage Target.
  types:
  - uid: string
  pattern: ^[-0-9a-zA-Z_]{1,80}$
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
- name: force
  in: query
  description: Boolean value requesting the force delete operation for a storage target. Force delete discards unwritten-data in the cache instead of flushing it to back-end storage.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Storage Target deleted.
- name: 202 Accepted
  description: Started the Storage Target's deletion. Poll the Cache's Storage Targets to monitor.
- name: 204 No Content
  description: Storage Target deleted.
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestHeader: []
definitions:
- name: CloudError
  description: An error response.
  kind: object
  properties:
  - name: error
    description: The body of the error.
    types:
    - uid: CloudErrorBody
- name: CloudErrorBody
  description: An error response.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
examples:
- name: StorageTargets_Delete
  request:
    uri: DELETE https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-05-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      DELETE https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-05-01
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;

      /** Samples for StorageTargets Delete. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-05-01/examples/StorageTargets_Delete.json
           */
          /**
           * Sample code: StorageTargets_Delete.
           *
           * @param manager Entry point to StorageCacheManager.
           */
          public static void storageTargetsDelete(com.azure.resourcemanager.storagecache.StorageCacheManager manager) {
              manager.storageTargets().delete("scgroup", "sc1", "st1", null, Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-storagecache_1.0.0-beta.6/sdk/storagecache/azure-resourcemanager-storagecache/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstoragecache_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagecache/armstoragecache/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-05-01/examples/StorageTargets_Delete.json
      func ExampleStorageTargetsClient_BeginDelete() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstoragecache.NewStorageTargetsClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginDelete(ctx,
      		"scgroup",
      		"sc1",
      		"st1",
      		&armstoragecache.StorageTargetsClientBeginDeleteOptions{Force: nil})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	_, err = poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstoragecache%2Farmstoragecache%2Fv2.0.0/sdk/resourcemanager/storagecache/armstoragecache/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageCacheManagementClient } = require("@azure/arm-storagecache");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
       *
       * @summary Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
       * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-05-01/examples/StorageTargets_Delete.json
       */
      async function storageTargetsDelete() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = await client.storageTargets.beginDeleteAndWait(
          resourceGroupName,
          cacheName,
          storageTargetName
        );
        console.log(result);
      }

      storageTargetsDelete().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storagecache_5.2.0/sdk/storagecache/arm-storagecache/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
  - statusCode: "202"
  - statusCode: "204"
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target ma
errorCodes: []
