### YamlMime:RESTOperation
uid: management.azure.com.storagecache.storagetargets.createorupdate
name: Create Or Update
service: Storagecache
groupName: Storage Targets
apiVersion: 2022-01-01
summary: Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}?api-version=2022-01-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: Target resource group.
  types:
  - uid: string
- name: cacheName
  in: path
  isRequired: true
  description: Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
  types:
  - uid: string
  pattern: ^[-0-9a-zA-Z_]{1,80}$
- name: storageTargetName
  in: path
  isRequired: true
  description: Name of Storage Target.
  types:
  - uid: string
  pattern: ^[-0-9a-zA-Z_]{1,80}$
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Storage Target has been created or updated.
  types:
  - uid: StorageTarget
- name: 201 Created
  description: Storage Target creation or update has been initiated. Poll the Storage Target's provisioningState property to monitor creation/update progress.
  types:
  - uid: StorageTarget
- name: 202 Accepted
  description: Storage Target creation or update has been initiated. Poll the Storage Target's provisioningState property to monitor creation/update progress.
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: properties.junctions
    in: body
    description: List of Cache namespace junctions to target for namespace associations.
    types:
    - uid: NamespaceJunction
      isArray: true
  - name: properties.targetType
    in: body
    isRequired: true
    description: Type of the Storage Target.
    types:
    - uid: StorageTargetType
  - name: properties.state
    in: body
    description: Storage target operational state.
    types:
    - uid: OperationalStateType
  - name: properties.nfs3
    in: body
    description: Properties when targetType is nfs3.
    types:
    - uid: Nfs3Target
  - name: properties.clfs
    in: body
    description: Properties when targetType is clfs.
    types:
    - uid: ClfsTarget
  - name: properties.unknown
    in: body
    description: Properties when targetType is unknown.
    types:
    - uid: UnknownTarget
  - name: properties.blobNfs
    in: body
    description: Properties when targetType is blobNfs.
    types:
    - uid: BlobNfsTarget
requestHeader: []
definitions:
- name: NamespaceJunction
  description: A namespace junction.
  kind: object
  properties:
  - name: namespacePath
    description: Namespace path on a Cache for a Storage Target.
    types:
    - uid: string
  - name: targetPath
    description: Path in Storage Target to which namespacePath points.
    types:
    - uid: string
  - name: nfsExport
    description: NFS export where targetPath exists.
    types:
    - uid: string
  - name: nfsAccessPolicy
    description: Name of the access policy applied to this junction.
    types:
    - uid: string
    defaultValue: default
- name: Nfs3Target
  description: Properties pertaining to the Nfs3Target
  kind: object
  properties:
  - name: target
    description: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
    types:
    - uid: string
  - name: usageModel
    description: Identifies the StorageCache usage model to be used for this storage target.
    types:
    - uid: string
- name: ClfsTarget
  description: Properties pertaining to the ClfsTarget
  kind: object
  properties:
  - name: target
    description: Resource ID of storage container.
    types:
    - uid: string
- name: UnknownTarget
  description: Properties pertaining to the UnknownTarget
  kind: object
  properties:
  - name: attributes
    description: Dictionary of string->string pairs containing information about the Storage Target.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: BlobNfsTarget
  description: Properties pertaining to the BlobNfsTarget.
  kind: object
  properties:
  - name: target
    description: Resource ID of the storage container.
    types:
    - uid: string
  - name: usageModel
    description: Identifies the StorageCache usage model to be used for this storage target.
    types:
    - uid: string
- name: systemData
  description: Metadata pertaining to creation and last modification of the resource.
  kind: object
  properties:
  - name: createdBy
    description: The identity that created the resource.
    types:
    - uid: string
  - name: createdByType
    description: The type of identity that created the resource.
    types:
    - uid: createdByType
  - name: createdAt
    description: The timestamp of resource creation (UTC).
    types:
    - uid: string
  - name: lastModifiedBy
    description: The identity that last modified the resource.
    types:
    - uid: string
  - name: lastModifiedByType
    description: The type of identity that last modified the resource.
    types:
    - uid: createdByType
  - name: lastModifiedAt
    description: The timestamp of resource last modification (UTC)
    types:
    - uid: string
- name: StorageTarget
  description: Type of the Storage Target.
  kind: object
  properties:
  - name: properties.junctions
    description: List of Cache namespace junctions to target for namespace associations.
    types:
    - uid: NamespaceJunction
      isArray: true
  - name: properties.targetType
    description: Type of the Storage Target.
    types:
    - uid: StorageTargetType
  - name: properties.provisioningState
    isReadyOnly: true
    description: ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
    types:
    - uid: ProvisioningStateType
  - name: properties.state
    description: Storage target operational state.
    types:
    - uid: OperationalStateType
  - name: properties.nfs3
    description: Properties when targetType is nfs3.
    types:
    - uid: Nfs3Target
  - name: properties.clfs
    description: Properties when targetType is clfs.
    types:
    - uid: ClfsTarget
  - name: properties.unknown
    description: Properties when targetType is unknown.
    types:
    - uid: UnknownTarget
  - name: properties.blobNfs
    description: Properties when targetType is blobNfs.
    types:
    - uid: BlobNfsTarget
  - name: name
    isReadyOnly: true
    description: Name of the Storage Target.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Resource ID of the Storage Target.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
    types:
    - uid: string
  - name: location
    isReadyOnly: true
    description: Region name string.
    types:
    - uid: string
  - name: systemData
    isReadyOnly: true
    description: The system meta data relating to this resource.
    types:
    - uid: systemData
- name: CloudError
  description: An error response.
  kind: object
  properties:
  - name: error
    description: The body of the error.
    types:
    - uid: CloudErrorBody
- name: createdByType
  description: The type of identity that created the resource.
  kind: enum
  properties:
  - name: User
    types:
    - uid: string
  - name: Application
    types:
    - uid: string
  - name: ManagedIdentity
    types:
    - uid: string
  - name: Key
    types:
    - uid: string
- name: StorageTargetType
  description: Type of the Storage Target.
  kind: enum
  properties:
  - name: nfs3
    types:
    - uid: string
  - name: clfs
    types:
    - uid: string
  - name: unknown
    types:
    - uid: string
  - name: blobNfs
    types:
    - uid: string
- name: ProvisioningStateType
  description: ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
  - name: Cancelled
    types:
    - uid: string
  - name: Creating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
- name: OperationalStateType
  description: Storage target operational state.
  kind: enum
  properties:
  - name: Ready
    types:
    - uid: string
  - name: Busy
    types:
    - uid: string
  - name: Suspended
    types:
    - uid: string
  - name: Flushing
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
examples:
- name: StorageTargets_CreateOrUpdate
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-01-01
    body: >-
      {
        "properties": {
          "junctions": [
            {
              "namespacePath": "/path/on/cache",
              "targetPath": "/path/on/exp1",
              "nfsExport": "exp1",
              "nfsAccessPolicy": "default"
            },
            {
              "namespacePath": "/path2/on/cache",
              "targetPath": "/path2/on/exp2",
              "nfsExport": "exp2",
              "nfsAccessPolicy": "rootSquash"
            }
          ],
          "targetType": "nfs3",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-01-01

      {
        "properties": {
          "junctions": [
            {
              "namespacePath": "/path/on/cache",
              "targetPath": "/path/on/exp1",
              "nfsExport": "exp1",
              "nfsAccessPolicy": "default"
            },
            {
              "namespacePath": "/path2/on/cache",
              "targetPath": "/path2/on/exp2",
              "nfsExport": "exp2",
              "nfsAccessPolicy": "rootSquash"
            }
          ],
          "targetType": "nfs3",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
      import com.azure.resourcemanager.storagecache.models.Nfs3Target;
      import com.azure.resourcemanager.storagecache.models.StorageTargetType;
      import java.util.Arrays;

      /** Samples for StorageTargets CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate.json
           */
          /**
           * Sample code: StorageTargets_CreateOrUpdate.
           *
           * @param manager Entry point to StorageCacheManager.
           */
          public static void storageTargetsCreateOrUpdate(
              com.azure.resourcemanager.storagecache.StorageCacheManager manager) {
              manager
                  .storageTargets()
                  .define("st1")
                  .withExistingCache("scgroup", "sc1")
                  .withJunctions(
                      Arrays
                          .asList(
                              new NamespaceJunction()
                                  .withNamespacePath("/path/on/cache")
                                  .withTargetPath("/path/on/exp1")
                                  .withNfsExport("exp1")
                                  .withNfsAccessPolicy("default"),
                              new NamespaceJunction()
                                  .withNamespacePath("/path2/on/cache")
                                  .withTargetPath("/path2/on/exp2")
                                  .withNfsExport("exp2")
                                  .withNfsAccessPolicy("rootSquash")))
                  .withTargetType(StorageTargetType.NFS3)
                  .withNfs3(new Nfs3Target().withTarget("10.0.44.44").withUsageModel("READ_HEAVY_INFREQ"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-storagecache_1.0.0-beta.5/sdk/storagecache/azure-resourcemanager-storagecache/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstoragecache_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagecache/armstoragecache"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate.json
      func ExampleStorageTargetsClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstoragecache.NewStorageTargetsClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"scgroup",
      		"sc1",
      		"st1",
      		&armstoragecache.StorageTargetsClientBeginCreateOrUpdateOptions{Storagetarget: &armstoragecache.StorageTarget{
      			Properties: &armstoragecache.StorageTargetProperties{
      				Junctions: []*armstoragecache.NamespaceJunction{
      					{
      						NamespacePath:   to.Ptr("/path/on/cache"),
      						NfsAccessPolicy: to.Ptr("default"),
      						NfsExport:       to.Ptr("exp1"),
      						TargetPath:      to.Ptr("/path/on/exp1"),
      					},
      					{
      						NamespacePath:   to.Ptr("/path2/on/cache"),
      						NfsAccessPolicy: to.Ptr("rootSquash"),
      						NfsExport:       to.Ptr("exp2"),
      						TargetPath:      to.Ptr("/path2/on/exp2"),
      					}},
      				Nfs3: &armstoragecache.Nfs3Target{
      					Target:     to.Ptr("10.0.44.44"),
      					UsageModel: to.Ptr("READ_HEAVY_INFREQ"),
      				},
      				TargetType: to.Ptr(armstoragecache.StorageTargetTypeNfs3),
      			},
      		},
      		})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstoragecache%2Farmstoragecache%2Fv1.0.0/sdk/resourcemanager/storagecache/armstoragecache/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { StorageCacheManagementClient } = require("@azure/arm-storagecache");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
       *
       * @summary Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
       * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate.json
       */
      async function storageTargetsCreateOrUpdate() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const storagetarget = {
          junctions: [
            {
              namespacePath: "/path/on/cache",
              nfsAccessPolicy: "default",
              nfsExport: "exp1",
              targetPath: "/path/on/exp1",
            },
            {
              namespacePath: "/path2/on/cache",
              nfsAccessPolicy: "rootSquash",
              nfsExport: "exp2",
              targetPath: "/path2/on/exp2",
            },
          ],
          nfs3: { target: "10.0.44.44", usageModel: "READ_HEAVY_INFREQ" },
          targetType: "nfs3",
        };
        const options = { storagetarget };
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = await client.storageTargets.beginCreateOrUpdateAndWait(
          resourceGroupName,
          cacheName,
          storageTargetName,
          options
        );
        console.log(result);
      }

      storageTargetsCreateOrUpdate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storagecache_5.1.0/sdk/storagecache/arm-storagecache/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "st1",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storagetargets/st1",
        "type": "Microsoft.StorageCache/Cache/StorageTarget",
        "systemData": {
          "createdBy": "user1",
          "createdByType": "User",
          "createdAt": "2020-01-01T17:18:19.1234567Z",
          "lastModifiedBy": "user2",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-01-02T17:18:19.1234567Z"
        },
        "properties": {
          "junctions": [
            {
              "namespacePath": "/path/on/cache",
              "targetPath": "/path/on/exp1",
              "nfsExport": "exp1",
              "nfsAccessPolicy": "default"
            },
            {
              "namespacePath": "/path2/on/cache",
              "targetPath": "/path2/on/exp2",
              "nfsExport": "exp2",
              "nfsAccessPolicy": "rootSquash"
            }
          ],
          "state": "Ready",
          "targetType": "nfs3",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "st1",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storagetargets/st1",
        "type": "Microsoft.StorageCache/Cache/StorageTarget",
        "systemData": {
          "createdBy": "user1",
          "createdByType": "User",
          "createdAt": "2020-01-01T17:18:19.1234567Z",
          "lastModifiedBy": "user2",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-01-02T17:18:19.1234567Z"
        },
        "properties": {
          "junctions": [
            {
              "namespacePath": "/path/on/cache",
              "targetPath": "/path/on/exp1",
              "nfsExport": "exp1",
              "nfsAccessPolicy": "default"
            },
            {
              "namespacePath": "/path2/on/cache",
              "targetPath": "/path2/on/exp2",
              "nfsExport": "exp2",
              "nfsAccessPolicy": "rootSquash"
            }
          ],
          "state": "Ready",
          "targetType": "nfs3",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }
  - statusCode: "202"
- name: StorageTargets_CreateOrUpdate_NoJunctions
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-01-01
    body: >-
      {
        "properties": {
          "targetType": "nfs3",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-01-01

      {
        "properties": {
          "targetType": "nfs3",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.storagecache.models.Nfs3Target;
      import com.azure.resourcemanager.storagecache.models.StorageTargetType;

      /** Samples for StorageTargets CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate_NoJunctions.json
           */
          /**
           * Sample code: StorageTargets_CreateOrUpdate_NoJunctions.
           *
           * @param manager Entry point to StorageCacheManager.
           */
          public static void storageTargetsCreateOrUpdateNoJunctions(
              com.azure.resourcemanager.storagecache.StorageCacheManager manager) {
              manager
                  .storageTargets()
                  .define("st1")
                  .withExistingCache("scgroup", "sc1")
                  .withTargetType(StorageTargetType.NFS3)
                  .withNfs3(new Nfs3Target().withTarget("10.0.44.44").withUsageModel("READ_HEAVY_INFREQ"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-storagecache_1.0.0-beta.5/sdk/storagecache/azure-resourcemanager-storagecache/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { StorageCacheManagementClient } = require("@azure/arm-storagecache");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
       *
       * @summary Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
       * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate_NoJunctions.json
       */
      async function storageTargetsCreateOrUpdateNoJunctions() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const storagetarget = {
          nfs3: { target: "10.0.44.44", usageModel: "READ_HEAVY_INFREQ" },
          targetType: "nfs3",
        };
        const options = { storagetarget };
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = await client.storageTargets.beginCreateOrUpdateAndWait(
          resourceGroupName,
          cacheName,
          storageTargetName,
          options
        );
        console.log(result);
      }

      storageTargetsCreateOrUpdateNoJunctions().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storagecache_5.1.0/sdk/storagecache/arm-storagecache/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "st1",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storagetargets/st1",
        "type": "Microsoft.StorageCache/Cache/StorageTarget",
        "systemData": {
          "createdBy": "user1",
          "createdByType": "User",
          "createdAt": "2020-01-01T17:18:19.1234567Z",
          "lastModifiedBy": "user2",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-01-02T17:18:19.1234567Z"
        },
        "properties": {
          "targetType": "nfs3",
          "state": "Ready",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "st1",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storagetargets/st1",
        "type": "Microsoft.StorageCache/Cache/StorageTarget",
        "systemData": {
          "createdBy": "user1",
          "createdByType": "User",
          "createdAt": "2020-01-01T17:18:19.1234567Z",
          "lastModifiedBy": "user2",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-01-02T17:18:19.1234567Z"
        },
        "properties": {
          "targetType": "nfs3",
          "state": "Ready",
          "nfs3": {
            "target": "10.0.44.44",
            "usageModel": "READ_HEAVY_INFREQ"
          }
        }
      }
  - statusCode: "202"
- name: StorageTargets_CreateOrUpdate_BlobNfs
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-01-01
    body: >-
      {
        "properties": {
          "targetType": "blobNfs",
          "junctions": [
            {
              "namespacePath": "/blobnfs"
            }
          ],
          "blobNfs": {
            "target": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs",
            "usageModel": "WRITE_WORKLOAD_15"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storageTargets/st1?api-version=2022-01-01

      {
        "properties": {
          "targetType": "blobNfs",
          "junctions": [
            {
              "namespacePath": "/blobnfs"
            }
          ],
          "blobNfs": {
            "target": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs",
            "usageModel": "WRITE_WORKLOAD_15"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.storagecache.models.BlobNfsTarget;
      import com.azure.resourcemanager.storagecache.models.NamespaceJunction;
      import com.azure.resourcemanager.storagecache.models.StorageTargetType;
      import java.util.Arrays;

      /** Samples for StorageTargets CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate_BlobNfs.json
           */
          /**
           * Sample code: StorageTargets_CreateOrUpdate_BlobNfs.
           *
           * @param manager Entry point to StorageCacheManager.
           */
          public static void storageTargetsCreateOrUpdateBlobNfs(
              com.azure.resourcemanager.storagecache.StorageCacheManager manager) {
              manager
                  .storageTargets()
                  .define("st1")
                  .withExistingCache("scgroup", "sc1")
                  .withJunctions(Arrays.asList(new NamespaceJunction().withNamespacePath("/blobnfs")))
                  .withTargetType(StorageTargetType.BLOB_NFS)
                  .withBlobNfs(
                      new BlobNfsTarget()
                          .withTarget(
                              "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs")
                          .withUsageModel("WRITE_WORKLOAD_15"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-storagecache_1.0.0-beta.5/sdk/storagecache/azure-resourcemanager-storagecache/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { StorageCacheManagementClient } = require("@azure/arm-storagecache");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
       *
       * @summary Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
       * x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2022-01-01/examples/StorageTargets_CreateOrUpdate_BlobNfs.json
       */
      async function storageTargetsCreateOrUpdateBlobNfs() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "scgroup";
        const cacheName = "sc1";
        const storageTargetName = "st1";
        const storagetarget = {
          blobNfs: {
            target:
              "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs",
            usageModel: "WRITE_WORKLOAD_15",
          },
          junctions: [{ namespacePath: "/blobnfs" }],
          targetType: "blobNfs",
        };
        const options = { storagetarget };
        const credential = new DefaultAzureCredential();
        const client = new StorageCacheManagementClient(credential, subscriptionId);
        const result = await client.storageTargets.beginCreateOrUpdateAndWait(
          resourceGroupName,
          cacheName,
          storageTargetName,
          options
        );
        console.log(result);
      }

      storageTargetsCreateOrUpdateBlobNfs().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storagecache_5.1.0/sdk/storagecache/arm-storagecache/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "st1",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storagetargets/st1",
        "type": "Microsoft.StorageCache/Cache/StorageTarget",
        "systemData": {
          "createdBy": "user1",
          "createdByType": "User",
          "createdAt": "2020-01-01T17:18:19.1234567Z",
          "lastModifiedBy": "user2",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-01-02T17:18:19.1234567Z"
        },
        "properties": {
          "targetType": "blobNfs",
          "junctions": [
            {
              "namespacePath": "/blobnfs"
            }
          ],
          "state": "Ready",
          "blobNfs": {
            "target": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs",
            "usageModel": "WRITE_WORKLOAD_15"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "st1",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.StorageCache/caches/sc1/storagetargets/st1",
        "type": "Microsoft.StorageCache/Cache/StorageTarget",
        "systemData": {
          "createdBy": "user1",
          "createdByType": "User",
          "createdAt": "2020-01-01T17:18:19.1234567Z",
          "lastModifiedBy": "user2",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-01-02T17:18:19.1234567Z"
        },
        "properties": {
          "targetType": "blobNfs",
          "junctions": [
            {
              "namespacePath": "/blobnfs"
            }
          ],
          "state": "Ready",
          "blobNfs": {
            "target": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Storage/storageAccounts/blofnfs/blobServices/default/containers/blobnfs",
            "usageModel": "WRITE_WORKLOAD_15"
          }
        }
      }
  - statusCode: "202"
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage
errorCodes: []
