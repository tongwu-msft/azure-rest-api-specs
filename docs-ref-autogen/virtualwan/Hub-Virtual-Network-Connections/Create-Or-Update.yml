### YamlMime:RESTOperation
uid: management.azure.com.virtualwan.hubvirtualnetworkconnections.createorupdate
name: Create Or Update
service: Virtual WAN
groupName: Hub Virtual Network Connections
apiVersion: 2021-08-01
summary: Creates a hub virtual network connection if it doesn't exist else updates the existing one.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/hubVirtualNetworkConnections/{connectionName}?api-version=2021-08-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The resource group name of the HubVirtualNetworkConnection.
  types:
  - uid: string
- name: virtualHubName
  in: path
  isRequired: true
  description: The name of the VirtualHub.
  types:
  - uid: string
- name: connectionName
  in: path
  isRequired: true
  description: The name of the HubVirtualNetworkConnection.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Request successful. Returns the details of the hub virtual network connection created or updated.
  types:
  - uid: HubVirtualNetworkConnection
- name: 201 Created
  description: Request successful. Returns the details of the hub virtual network connection retrieved.
  types:
  - uid: HubVirtualNetworkConnection
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: name
    in: body
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: properties.remoteVirtualNetwork
    in: body
    description: Reference to the remote virtual network.
    types:
    - uid: SubResource
  - name: properties.allowHubToRemoteVnetTransit
    in: body
    description: 'Deprecated: VirtualHub to RemoteVnet transit to enabled or not.'
    types:
    - uid: boolean
  - name: properties.allowRemoteVnetToUseHubVnetGateways
    in: body
    description: "Deprecated: Allow RemoteVnet to use Virtual Hub's gateways."
    types:
    - uid: boolean
  - name: properties.enableInternetSecurity
    in: body
    description: Enable internet security.
    types:
    - uid: boolean
  - name: properties.routingConfiguration
    in: body
    description: The Routing Configuration indicating the associated and propagated route tables on this connection.
    types:
    - uid: RoutingConfiguration
  - name: id
    in: body
    description: Resource ID.
    types:
    - uid: string
requestHeader: []
definitions:
- name: SubResource
  description: Reference to another subresource.
  kind: object
  properties:
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: RoutingConfiguration
  description: Routing Configuration indicating the associated and propagated route tables for this connection.
  kind: object
  properties:
  - name: associatedRouteTable
    description: The resource id RouteTable associated with this RoutingConfiguration.
    types:
    - uid: SubResource
  - name: propagatedRouteTables
    description: The list of RouteTables to advertise the routes to.
    types:
    - uid: PropagatedRouteTable
  - name: vnetRoutes
    description: List of routes that control routing from VirtualHub into a virtual network connection.
    types:
    - uid: VnetRoute
- name: HubVirtualNetworkConnection
  description: HubVirtualNetworkConnection Resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.remoteVirtualNetwork
    description: Reference to the remote virtual network.
    types:
    - uid: SubResource
  - name: properties.allowHubToRemoteVnetTransit
    description: 'Deprecated: VirtualHub to RemoteVnet transit to enabled or not.'
    types:
    - uid: boolean
  - name: properties.allowRemoteVnetToUseHubVnetGateways
    description: "Deprecated: Allow RemoteVnet to use Virtual Hub's gateways."
    types:
    - uid: boolean
  - name: properties.enableInternetSecurity
    description: Enable internet security.
    types:
    - uid: boolean
  - name: properties.routingConfiguration
    description: The Routing Configuration indicating the associated and propagated route tables on this connection.
    types:
    - uid: RoutingConfiguration
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the hub virtual network connection resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: CloudError
  description: An error response from the service.
  kind: object
  properties:
  - name: error
    description: Cloud error body.
    types:
    - uid: CloudErrorBody
- name: PropagatedRouteTable
  description: The list of RouteTables to advertise the routes to.
  kind: object
  properties:
  - name: labels
    description: The list of labels.
    types:
    - uid: string
      isArray: true
  - name: ids
    description: The list of resource ids of all the RouteTables.
    types:
    - uid: SubResource
      isArray: true
- name: VnetRoute
  description: List of routes that control routing from VirtualHub into a virtual network connection.
  kind: object
  properties:
  - name: staticRoutes
    description: List of all Static Routes.
    types:
    - uid: StaticRoute
      isArray: true
  - name: bgpConnections
    isReadyOnly: true
    description: The list of references to HubBgpConnection objects.
    types:
    - uid: SubResource
      isArray: true
- name: ProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response from the service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
- name: StaticRoute
  description: List of all Static Routes.
  kind: object
  properties:
  - name: name
    description: The name of the StaticRoute that is unique within a VnetRoute.
    types:
    - uid: string
  - name: addressPrefixes
    description: List of all address prefixes.
    types:
    - uid: string
      isArray: true
  - name: nextHopIpAddress
    description: The ip address of the next hop.
    types:
    - uid: string
examples:
- name: HubVirtualNetworkConnectionPut
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/connection1?api-version=2021-08-01
    body: >-
      {
        "properties": {
          "remoteVirtualNetwork": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"
          },
          "enableInternetSecurity": false,
          "routingConfiguration": {
            "associatedRouteTable": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
            },
            "propagatedRouteTables": {
              "labels": [
                "label1",
                "label2"
              ],
              "ids": [
                {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
                }
              ]
            },
            "vnetRoutes": {
              "staticRoutes": [
                {
                  "name": "route1",
                  "addressPrefixes": [
                    "10.1.0.0/16",
                    "10.2.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.68"
                },
                {
                  "name": "route2",
                  "addressPrefixes": [
                    "10.3.0.0/16",
                    "10.4.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.65"
                }
              ]
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/connection1?api-version=2021-08-01

      {
        "properties": {
          "remoteVirtualNetwork": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"
          },
          "enableInternetSecurity": false,
          "routingConfiguration": {
            "associatedRouteTable": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
            },
            "propagatedRouteTables": {
              "labels": [
                "label1",
                "label2"
              ],
              "ids": [
                {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
                }
              ]
            },
            "vnetRoutes": {
              "staticRoutes": [
                {
                  "name": "route1",
                  "addressPrefixes": [
                    "10.1.0.0/16",
                    "10.2.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.68"
                },
                {
                  "name": "route2",
                  "addressPrefixes": [
                    "10.3.0.0/16",
                    "10.4.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.65"
                }
              ]
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.management.SubResource;
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.network.fluent.models.HubVirtualNetworkConnectionInner;
      import com.azure.resourcemanager.network.models.PropagatedRouteTable;
      import com.azure.resourcemanager.network.models.RoutingConfiguration;
      import com.azure.resourcemanager.network.models.StaticRoute;
      import com.azure.resourcemanager.network.models.VnetRoute;
      import java.util.Arrays;

      /** Samples for HubVirtualNetworkConnections CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-08-01/examples/HubVirtualNetworkConnectionPut.json
           */
          /**
           * Sample code: HubVirtualNetworkConnectionPut.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void hubVirtualNetworkConnectionPut(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .networks()
                  .manager()
                  .serviceClient()
                  .getHubVirtualNetworkConnections()
                  .createOrUpdate(
                      "rg1",
                      "virtualHub1",
                      "connection1",
                      new HubVirtualNetworkConnectionInner()
                          .withRemoteVirtualNetwork(
                              new SubResource()
                                  .withId(
                                      "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"))
                          .withEnableInternetSecurity(false)
                          .withRoutingConfiguration(
                              new RoutingConfiguration()
                                  .withAssociatedRouteTable(
                                      new SubResource()
                                          .withId(
                                              "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"))
                                  .withPropagatedRouteTables(
                                      new PropagatedRouteTable()
                                          .withLabels(Arrays.asList("label1", "label2"))
                                          .withIds(
                                              Arrays
                                                  .asList(
                                                      new SubResource()
                                                          .withId(
                                                              "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"))))
                                  .withVnetRoutes(
                                      new VnetRoute()
                                          .withStaticRoutes(
                                              Arrays
                                                  .asList(
                                                      new StaticRoute()
                                                          .withName("route1")
                                                          .withAddressPrefixes(Arrays.asList("10.1.0.0/16", "10.2.0.0/16"))
                                                          .withNextHopIpAddress("10.0.0.68"),
                                                      new StaticRoute()
                                                          .withName("route2")
                                                          .withAddressPrefixes(Arrays.asList("10.3.0.0/16", "10.4.0.0/16"))
                                                          .withNextHopIpAddress("10.0.0.65"))))),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2021-08-01/examples/HubVirtualNetworkConnectionPut.json
      func ExampleHubVirtualNetworkConnectionsClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewHubVirtualNetworkConnectionsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"rg1",
      		"virtualHub1",
      		"connection1",
      		armnetwork.HubVirtualNetworkConnection{
      			Properties: &armnetwork.HubVirtualNetworkConnectionProperties{
      				EnableInternetSecurity: to.Ptr(false),
      				RemoteVirtualNetwork: &armnetwork.SubResource{
      					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"),
      				},
      				RoutingConfiguration: &armnetwork.RoutingConfiguration{
      					AssociatedRouteTable: &armnetwork.SubResource{
      						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
      					},
      					PropagatedRouteTables: &armnetwork.PropagatedRouteTable{
      						IDs: []*armnetwork.SubResource{
      							{
      								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"),
      							}},
      						Labels: []*string{
      							to.Ptr("label1"),
      							to.Ptr("label2")},
      					},
      					VnetRoutes: &armnetwork.VnetRoute{
      						StaticRoutes: []*armnetwork.StaticRoute{
      							{
      								Name: to.Ptr("route1"),
      								AddressPrefixes: []*string{
      									to.Ptr("10.1.0.0/16"),
      									to.Ptr("10.2.0.0/16")},
      								NextHopIPAddress: to.Ptr("10.0.0.68"),
      							},
      							{
      								Name: to.Ptr("route2"),
      								AddressPrefixes: []*string{
      									to.Ptr("10.3.0.0/16"),
      									to.Ptr("10.4.0.0/16")},
      								NextHopIPAddress: to.Ptr("10.0.0.65"),
      							}},
      					},
      				},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv1.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates a hub virtual network connection if it doesn't exist else updates the existing one.
       *
       * @summary Creates a hub virtual network connection if it doesn't exist else updates the existing one.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-08-01/examples/HubVirtualNetworkConnectionPut.json
       */
      async function hubVirtualNetworkConnectionPut() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const virtualHubName = "virtualHub1";
        const connectionName = "connection1";
        const hubVirtualNetworkConnectionParameters = {
          enableInternetSecurity: false,
          remoteVirtualNetwork: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1",
          },
          routingConfiguration: {
            associatedRouteTable: {
              id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
            },
            propagatedRouteTables: {
              ids: [
                {
                  id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1",
                },
              ],
              labels: ["label1", "label2"],
            },
            vnetRoutes: {
              staticRoutes: [
                {
                  name: "route1",
                  addressPrefixes: ["10.1.0.0/16", "10.2.0.0/16"],
                  nextHopIpAddress: "10.0.0.68",
                },
                {
                  name: "route2",
                  addressPrefixes: ["10.3.0.0/16", "10.4.0.0/16"],
                  nextHopIpAddress: "10.0.0.65",
                },
              ],
            },
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.hubVirtualNetworkConnections.beginCreateOrUpdateAndWait(
          resourceGroupName,
          virtualHubName,
          connectionName,
          hubVirtualNetworkConnectionParameters
        );
        console.log(result);
      }

      hubVirtualNetworkConnectionPut().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_28.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "connection1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/connection1",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Updating",
          "remoteVirtualNetwork": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"
          },
          "enableInternetSecurity": false,
          "routingConfiguration": {
            "associatedRouteTable": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
            },
            "propagatedRouteTables": {
              "labels": [
                "label1",
                "label2"
              ],
              "ids": [
                {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
                }
              ]
            },
            "vnetRoutes": {
              "staticRoutes": [
                {
                  "name": "route1",
                  "addressPrefixes": [
                    "10.1.0.0/16",
                    "10.2.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.68"
                },
                {
                  "name": "route2",
                  "addressPrefixes": [
                    "10.3.0.0/16",
                    "10.4.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.65"
                }
              ],
              "bgpConnections": [
                {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/bgpConnections/bgpConn1"
                }
              ]
            }
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "connection1",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubVirtualNetworkConnections/connection1",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "properties": {
          "provisioningState": "Updating",
          "remoteVirtualNetwork": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/SpokeVnet1"
          },
          "enableInternetSecurity": false,
          "routingConfiguration": {
            "associatedRouteTable": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
            },
            "propagatedRouteTables": {
              "labels": [
                "label1",
                "label2"
              ],
              "ids": [
                {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/hubRouteTable1"
                }
              ]
            },
            "vnetRoutes": {
              "staticRoutes": [
                {
                  "name": "route1",
                  "addressPrefixes": [
                    "10.1.0.0/16",
                    "10.2.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.68"
                },
                {
                  "name": "route2",
                  "addressPrefixes": [
                    "10.3.0.0/16",
                    "10.4.0.0/16"
                  ],
                  "nextHopIpAddress": "10.0.0.65"
                }
              ],
              "bgpConnections": [
                {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/virtualHub1/bgpConnections/bgpConn1"
                }
              ]
            }
          }
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Virtual WAN service - Creates a hub virtual network connection if it doesn't exist else updates the existing one.
errorCodes: []
