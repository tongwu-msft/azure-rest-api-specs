### YamlMime:RESTOperation
uid: batchservice.job.list
name: List
service: Batch Service
groupName: Job
apiVersion: 2019-06-01.9.0
summary: Lists all of the Jobs in the specified Account.
consumes:
- application/json; odata=minimalmetadata
produces:
- application/json
paths:
- content: GET {batchUrl}/jobs?api-version=2019-06-01.9.0
- content: GET {batchUrl}/jobs?$filter={$filter}&$select={$select}&$expand={$expand}&maxresults={maxresults}&timeout={timeout}&api-version=2019-06-01.9.0
  isOptional: true
uriParameters:
- name: batchUrl
  in: path
  isRequired: true
  description: The base URL for all Azure Batch service requests.
  types:
  - uid: string
- name: $filter
  in: query
  description: An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
  types:
  - uid: string
- name: $select
  in: query
  description: An OData $select clause.
  types:
  - uid: string
- name: $expand
  in: query
  description: An OData $expand clause.
  types:
  - uid: string
- name: maxresults
  in: query
  description: The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned.
  types:
  - uid: integer
  format: int32
- name: timeout
  in: query
  description: The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
  types:
  - uid: integer
  format: int32
- name: api-version
  in: query
  isRequired: true
  description: Client API Version.
  types:
  - uid: string
responses:
- name: 200 OK
  headers:
  - name: client-request-id
    value: string
  - name: request-id
    value: string
  - name: ETag
    value: string
  - name: Last-Modified
    value: string
  description: A response containing the list of Jobs.
  types:
  - uid: CloudJobListResult
- name: Other Status Codes
  description: The error from the Batch service.
  types:
  - uid: BatchError
requestHeader:
- name: client-request-id
  in: header
  description: The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
  types:
  - uid: string
  format: uuid
- name: return-client-request-id
  in: header
  description: Whether the server should return the client-request-id in the response.
  types:
  - uid: boolean
- name: ocp-date
  in: header
  description: The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
  types:
  - uid: string
  format: date-time-rfc1123
definitions:
- name: CloudJobListResult
  description: The result of listing the Jobs in an Account.
  kind: object
  properties:
  - name: value
    description: The list of Jobs.
    types:
    - uid: CloudJob
      isArray: true
  - name: odata.nextLink
    description: The URL to get the next set of results.
    types:
    - uid: string
- name: BatchError
  description: An error response received from the Azure Batch service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: ErrorMessage
  - name: values
    description: A collection of key-value pairs containing additional details about the error.
    types:
    - uid: BatchErrorDetail
      isArray: true
- name: CloudJob
  description: An Azure Batch Job.
  kind: object
  properties:
  - name: id
    description: "A string that uniquely identifies the Job within the Account.  \nThe ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case)."
    types:
    - uid: string
  - name: displayName
    description: The display name for the Job.
    types:
    - uid: string
  - name: usesTaskDependencies
    description: Whether Tasks in the Job can define dependencies on each other. The default is false.
    types:
    - uid: boolean
  - name: url
    description: The URL of the Job.
    types:
    - uid: string
  - name: eTag
    description: "The ETag of the Job.  \nThis is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime."
    types:
    - uid: string
  - name: lastModified
    description: "The last modified time of the Job.  \nThis is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state."
    types:
    - uid: string
  - name: creationTime
    description: The creation time of the Job.
    types:
    - uid: string
  - name: state
    description: The current state of the Job.
    types:
    - uid: JobState
  - name: stateTransitionTime
    description: The time at which the Job entered its current state.
    types:
    - uid: string
  - name: previousState
    description: "The previous state of the Job.  \nThis property is not set if the Job is in its initial Active state."
    types:
    - uid: JobState
  - name: previousStateTransitionTime
    description: "The time at which the Job entered its previous state.  \nThis property is not set if the Job is in its initial Active state."
    types:
    - uid: string
  - name: priority
    description: "The priority of the Job.  \nPriority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0."
    types:
    - uid: integer
  - name: constraints
    description: The execution constraints for the Job.
    types:
    - uid: JobConstraints
  - name: jobManagerTask
    description: "Details of a Job Manager Task to be launched when the Job is started.  \nThe Job Manager Task is automatically started when the Job is created. The Batch service tries to schedule the Job Manager Task before any other Tasks in the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where Job Manager Tasks are running for as long as possible (that is, Compute Nodes running 'normal' Tasks are removed before Compute Nodes running Job Manager Tasks). When a Job Manager Task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle Compute Nodes available, the system may terminate one of the running Tasks in the Pool and return it to the queue in order to make room for the Job Manager Task to restart. Note that a Job Manager Task in one Job does not have priority over Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For example, if a Job Manager in a priority 0 Job needs to be restarted, it will not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing."
    types:
    - uid: JobManagerTask
  - name: jobPreparationTask
    description: "The Job Preparation Task.  \nThe Job Preparation Task is a special Task run on each Compute Node before any other Task of the Job."
    types:
    - uid: JobPreparationTask
  - name: jobReleaseTask
    description: "The Job Release Task.  \nThe Job Release Task is a special Task run at the end of the Job on each Compute Node that has run any other Task of the Job."
    types:
    - uid: JobReleaseTask
  - name: commonEnvironmentSettings
    description: "The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks).  \nIndividual Tasks can override an environment setting specified here by specifying the same setting name with a different value."
    types:
    - uid: EnvironmentSetting
      isArray: true
  - name: poolInfo
    description: The Pool settings associated with the Job.
    types:
    - uid: PoolInformation
  - name: onAllTasksComplete
    description: "The action the Batch service should take when all Tasks in the Job are in the completed state.  \nThe default is noaction."
    types:
    - uid: OnAllTasksComplete
  - name: onTaskFailure
    description: "The action the Batch service should take when any Task in the Job fails.  \nA Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction."
    types:
    - uid: OnTaskFailure
  - name: networkConfiguration
    description: The network configuration for the Job.
    types:
    - uid: JobNetworkConfiguration
  - name: metadata
    description: "A list of name-value pairs associated with the Job as metadata.  \nThe Batch service does not assign any meaning to metadata; it is solely for the use of user code."
    types:
    - uid: MetadataItem
      isArray: true
  - name: executionInfo
    description: The execution information for the Job.
    types:
    - uid: JobExecutionInformation
  - name: stats
    description: "Resource usage statistics for the entire lifetime of the Job.  \nThis property is populated only if the CloudJob was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes."
    types:
    - uid: JobStatistics
- name: ErrorMessage
  description: An error message received in an Azure Batch error response.
  kind: object
  properties:
  - name: lang
    description: The language code of the error message
    types:
    - uid: string
  - name: value
    description: The text of the message.
    types:
    - uid: string
- name: BatchErrorDetail
  description: An item of additional information included in an Azure Batch error response.
  kind: object
  properties:
  - name: key
    description: An identifier specifying the meaning of the Value property.
    types:
    - uid: string
  - name: value
    description: The additional information included with the error response.
    types:
    - uid: string
- name: JobState
  description: The state of the Job.
  kind: enum
  properties:
  - name: active
    description: The Job is available to have Tasks scheduled.
    types:
    - uid: string
  - name: disabling
    description: A user has requested that the Job be disabled, but the disable operation is still in progress (for example, waiting for Tasks to terminate).
    types:
    - uid: string
  - name: disabled
    description: A user has disabled the Job. No Tasks are running, and no new Tasks will be scheduled.
    types:
    - uid: string
  - name: enabling
    description: A user has requested that the Job be enabled, but the enable operation is still in progress.
    types:
    - uid: string
  - name: terminating
    description: The Job is about to complete, either because a Job Manager Task has completed or because the user has terminated the Job, but the terminate operation is still in progress (for example, because Job Release Tasks are running).
    types:
    - uid: string
  - name: completed
    description: All Tasks have terminated, and the system will not accept any more Tasks or any further changes to the Job.
    types:
    - uid: string
  - name: deleting
    description: A user has requested that the Job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running Tasks).
    types:
    - uid: string
- name: JobConstraints
  description: The execution constraints for a Job.
  kind: object
  properties:
  - name: maxWallClockTime
    description: "The maximum elapsed time that the Job may run, measured from the time the Job is created.  \nIf the Job does not complete within the time limit, the Batch service terminates it and any Tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the Job may run."
    types:
    - uid: string
  - name: maxTaskRetryCount
    description: "The maximum number of times each Task may be retried. The Batch service retries a Task if its exit code is nonzero.  \nNote that this value specifically controls the number of retries. The Batch service will try each Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry Tasks. If the maximum retry count is -1, the Batch service retries Tasks without limit. The default value is 0 (no retries)."
    types:
    - uid: integer
- name: JobManagerTask
  description: Specifies details of a Job Manager Task.
  kind: object
  properties:
  - name: id
    description: "A string that uniquely identifies the Job Manager Task within the Job.  \nThe ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters."
    types:
    - uid: string
  - name: displayName
    description: "The display name of the Job Manager Task.  \nIt need not be unique and can contain any Unicode characters up to a maximum length of 1024."
    types:
    - uid: string
  - name: commandLine
    description: "The command line of the Job Manager Task.  \nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
    types:
    - uid: string
  - name: containerSettings
    description: "The settings for the container under which the Job Manager Task runs.  \nIf the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
    types:
    - uid: TaskContainerSettings
  - name: resourceFiles
    description: "A list of files that the Batch service will download to the Compute Node before running the command line.  \nFiles listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers."
    types:
    - uid: ResourceFile
      isArray: true
  - name: outputFiles
    description: "A list of files that the Batch service will upload from the Compute Node after running the command line.  \nFor multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed."
    types:
    - uid: OutputFile
      isArray: true
  - name: environmentSettings
    description: A list of environment variable settings for the Job Manager Task.
    types:
    - uid: EnvironmentSetting
      isArray: true
  - name: constraints
    description: Constraints that apply to the Job Manager Task.
    types:
    - uid: TaskConstraints
  - name: killJobOnCompletion
    description: "Whether completion of the Job Manager Task signifies completion of the entire Job.  \nIf true, when the Job Manager Task completes, the Batch service marks the Job as complete. If any Tasks are still running at this time (other than Job Release), those Tasks are terminated. If false, the completion of the Job Manager Task does not affect the Job status. In this case, you should either use the onAllTasksComplete attribute to terminate the Job, or have a client or user terminate the Job explicitly. An example of this is if the Job Manager creates a set of Tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control Job lifetime, and using the Job Manager Task only to create the Tasks for the Job (not to monitor progress), then it is important to set killJobOnCompletion to false."
    types:
    - uid: boolean
  - name: userIdentity
    description: "The user identity under which the Job Manager Task runs.  \nIf omitted, the Task runs as a non-administrative user unique to the Task."
    types:
    - uid: UserIdentity
  - name: runExclusive
    description: "Whether the Job Manager Task requires exclusive use of the Compute Node where it runs.  \nIf true, no other Tasks will run on the same Node for as long as the Job Manager is running. If false, other Tasks can run simultaneously with the Job Manager on a Compute Node. The Job Manager Task counts normally against the Compute Node's concurrent Task limit, so this is only relevant if the Compute Node allows multiple concurrent Tasks. The default value is true."
    types:
    - uid: boolean
  - name: applicationPackageReferences
    description: "A list of Application Packages that the Batch service will deploy to the Compute Node before running the command line.  \nApplication Packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced Application Package is already on the Compute Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Application Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails."
    types:
    - uid: ApplicationPackageReference
      isArray: true
  - name: authenticationTokenSettings
    description: "The settings for an authentication token that the Task can use to perform Batch service operations.  \nIf this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job."
    types:
    - uid: AuthenticationTokenSettings
  - name: allowLowPriorityNode
    description: "Whether the Job Manager Task may run on a low-priority Compute Node.  \nThe default value is true."
    types:
    - uid: boolean
- name: JobPreparationTask
  description: A Job Preparation Task to run before any Tasks of the Job on any given Compute Node.
  kind: object
  properties:
  - name: id
    description: "A string that uniquely identifies the Job Preparation Task within the Job.  \nThe ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict)."
    types:
    - uid: string
  - name: commandLine
    description: "The command line of the Job Preparation Task.  \nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
    types:
    - uid: string
  - name: containerSettings
    description: "The settings for the container under which the Job Preparation Task runs.  \nWhen this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
    types:
    - uid: TaskContainerSettings
  - name: resourceFiles
    description: "A list of files that the Batch service will download to the Compute Node before running the command line.  \nFiles listed under this element are located in the Task's working directory.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers."
    types:
    - uid: ResourceFile
      isArray: true
  - name: environmentSettings
    description: A list of environment variable settings for the Job Preparation Task.
    types:
    - uid: EnvironmentSetting
      isArray: true
  - name: constraints
    description: Constraints that apply to the Job Preparation Task.
    types:
    - uid: TaskConstraints
  - name: waitForSuccess
    description: "Whether the Batch service should wait for the Job Preparation Task to complete successfully before scheduling any other Tasks of the Job on the Compute Node. A Job Preparation Task has completed successfully if it exits with exit code 0.  \nIf true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true."
    types:
    - uid: boolean
  - name: userIdentity
    description: "The user identity under which the Job Preparation Task runs.  \nIf omitted, the Task runs as a non-administrative user unique to the Task on Windows Compute Nodes, or a non-administrative user unique to the Pool on Linux Compute Nodes."
    types:
    - uid: UserIdentity
  - name: rerunOnNodeRebootAfterSuccess
    description: "Whether the Batch service should rerun the Job Preparation Task after a Compute Node reboots.  \nThe Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true."
    types:
    - uid: boolean
- name: JobReleaseTask
  description: A Job Release Task to run on Job completion on any Compute Node where the Job has run.
  kind: object
  properties:
  - name: id
    description: "A string that uniquely identifies the Job Release Task within the Job.  \nThe ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other Task in the Job can have the same ID as the Job Release Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict)."
    types:
    - uid: string
  - name: commandLine
    description: "The command line of the Job Release Task.  \nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
    types:
    - uid: string
  - name: containerSettings
    description: "The settings for the container under which the Job Release Task runs.  \nWhen this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
    types:
    - uid: TaskContainerSettings
  - name: resourceFiles
    description: "A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.  \nFiles listed under this element are located in the Task's working directory."
    types:
    - uid: ResourceFile
      isArray: true
  - name: environmentSettings
    description: A list of environment variable settings for the Job Release Task.
    types:
    - uid: EnvironmentSetting
      isArray: true
  - name: maxWallClockTime
    description: The maximum elapsed time that the Job Release Task may run on a given Compute Node, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
    types:
    - uid: string
  - name: retentionTime
    description: "The minimum time to retain the Task directory for the Job Release Task on the Compute Node. After this time, the Batch service may delete the Task directory and all its contents.  \nThe default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted."
    types:
    - uid: string
  - name: userIdentity
    description: "The user identity under which the Job Release Task runs.  \nIf omitted, the Task runs as a non-administrative user unique to the Task."
    types:
    - uid: UserIdentity
- name: EnvironmentSetting
  description: An environment variable to be set on a Task process.
  kind: object
  properties:
  - name: name
    description: The name of the environment variable.
    types:
    - uid: string
  - name: value
    description: The value of the environment variable.
    types:
    - uid: string
- name: PoolInformation
  description: Specifies how a Job should be assigned to a Pool.
  kind: object
  properties:
  - name: poolId
    description: "The ID of an existing Pool. All the Tasks of the Job will run on the specified Pool.  \nYou must ensure that the Pool referenced by this property exists. If the Pool does not exist at the time the Batch service tries to schedule a Job, no Tasks for the Job will run until you create a Pool with that id. Note that the Batch service will not reject the Job request; it will simply not run Tasks until the Pool exists. You must specify either the Pool ID or the auto Pool specification, but not both."
    types:
    - uid: string
  - name: autoPoolSpecification
    description: "Characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted.  \nIf auto Pool creation fails, the Batch service moves the Job to a completed state, and the Pool creation error is set in the Job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified, deletion) of the auto Pool. Any user actions that affect the lifetime of the auto Pool while the Job is active will result in unexpected behavior. You must specify either the Pool ID or the auto Pool specification, but not both."
    types:
    - uid: AutoPoolSpecification
- name: OnAllTasksComplete
  description: The action the Batch service should take when all Tasks in the Job are in the completed state.
  kind: enum
  properties:
  - name: noaction
    description: Do nothing. The Job remains active unless terminated or disabled by some other means.
    types:
    - uid: string
  - name: terminatejob
    description: Terminate the Job. The Job's terminateReason is set to 'AllTasksComplete'.
    types:
    - uid: string
- name: OnTaskFailure
  description: The action the Batch service should take when any Task in the Job fails.
  kind: enum
  properties:
  - name: noaction
    description: Do nothing. The Job remains active unless terminated or disabled by some other means.
    types:
    - uid: string
  - name: performexitoptionsjobaction
    description: Take the action associated with the Task exit condition in the Task's exitConditions collection. (This may still result in no action being taken, if that is what the Task specifies.)
    types:
    - uid: string
- name: JobNetworkConfiguration
  description: The network configuration for the Job.
  kind: object
  properties:
  - name: subnetId
    description: "The ARM resource identifier of the virtual network subnet which Compute Nodes running Tasks from the Job will join for the duration of the Task. This will only work with a VirtualMachineConfiguration Pool.  \nThe virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration"
    types:
    - uid: string
- name: MetadataItem
  description: A name-value pair associated with a Batch service resource.
  kind: object
  properties:
  - name: name
    description: The name of the metadata item.
    types:
    - uid: string
  - name: value
    description: The value of the metadata item.
    types:
    - uid: string
- name: JobExecutionInformation
  description: Contains information about the execution of a Job in the Azure Batch service.
  kind: object
  properties:
  - name: startTime
    description: "The start time of the Job.  \nThis is the time at which the Job was created."
    types:
    - uid: string
  - name: endTime
    description: "The completion time of the Job.  \nThis property is set only if the Job is in the completed state."
    types:
    - uid: string
  - name: poolId
    description: "The ID of the Pool to which this Job is assigned.  \nThis element contains the actual Pool where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool."
    types:
    - uid: string
  - name: schedulingError
    description: "Details of any error encountered by the service in starting the Job.  \nThis property is not set if there was no error starting the Job."
    types:
    - uid: JobSchedulingError
  - name: terminateReason
    description: "A string describing the reason the Job ended.  \nThis property is set only if the Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation."
    types:
    - uid: string
- name: JobStatistics
  description: Resource usage statistics for a Job.
  kind: object
  properties:
  - name: url
    description: The URL of the statistics.
    types:
    - uid: string
  - name: startTime
    description: The start time of the time range covered by the statistics.
    types:
    - uid: string
  - name: lastUpdateTime
    description: The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
    types:
    - uid: string
  - name: userCPUTime
    description: The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
    types:
    - uid: string
  - name: kernelCPUTime
    description: The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job.
    types:
    - uid: string
  - name: wallClockTime
    description: "The total wall clock time of all Tasks in the Job.  \n The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries."
    types:
    - uid: string
  - name: readIOps
    description: The total number of disk read operations made by all Tasks in the Job.
    types:
    - uid: integer
  - name: writeIOps
    description: The total number of disk write operations made by all Tasks in the Job.
    types:
    - uid: integer
  - name: readIOGiB
    description: The total amount of data in GiB read from disk by all Tasks in the Job.
    types:
    - uid: number
  - name: writeIOGiB
    description: The total amount of data in GiB written to disk by all Tasks in the Job.
    types:
    - uid: number
  - name: numSucceededTasks
    description: "The total number of Tasks successfully completed in the Job during the given time range.  \nA Task completes successfully if it returns exit code 0."
    types:
    - uid: integer
  - name: numFailedTasks
    description: "The total number of Tasks in the Job that failed during the given time range.  \nA Task fails if it exhausts its maximum retry count without returning exit code 0."
    types:
    - uid: integer
  - name: numTaskRetries
    description: The total number of retries on all the Tasks in the Job during the given time range.
    types:
    - uid: integer
  - name: waitTime
    description: "The total wait time of all Tasks in the Job.  \nThe wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics."
    types:
    - uid: string
- name: TaskContainerSettings
  description: The container settings for a Task.
  kind: object
  properties:
  - name: containerRunOptions
    description: "Additional options to the container create command.  \nThese additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service."
    types:
    - uid: string
  - name: imageName
    description: "The Image to use to create the container in which the Task will run.  \nThis is the full Image reference, as would be specified to \"docker pull\". If no tag is provided as part of the Image name, the tag \":latest\" is used as a default."
    types:
    - uid: string
  - name: registry
    description: "The private registry which contains the container Image.  \nThis setting can be omitted if was already provided at Pool creation."
    types:
    - uid: ContainerRegistry
  - name: workingDirectory
    description: "The location of the container Task working directory.  \nThe default is 'taskWorkingDirectory'."
    types:
    - uid: ContainerWorkingDirectory
- name: ResourceFile
  description: A single file or multiple files to be downloaded to a Compute Node.
  kind: object
  properties:
  - name: autoStorageContainerName
    description: "The storage container name in the auto storage Account.  \nThe autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified."
    types:
    - uid: string
  - name: storageContainerUrl
    description: "The URL of the blob container within Azure Blob Storage.  \nThe autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading blobs from the container. There are two ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, or set the ACL for the container to allow public access."
    types:
    - uid: string
  - name: httpUrl
    description: "The URL of the file to download.  \nThe autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access."
    types:
    - uid: string
  - name: blobPrefix
    description: "The blob prefix to use when downloading blobs from an Azure Storage container. Only the blobs whose names begin with the specified prefix will be downloaded.  \nThe property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded."
    types:
    - uid: string
  - name: filePath
    description: "The location on the Compute Node to which to download the file(s), relative to the Task's working directory.  \nIf the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task's working directory (for example by using '..')."
    types:
    - uid: string
  - name: fileMode
    description: "The file permission mode attribute in octal format.  \nThis property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file."
    types:
    - uid: string
- name: OutputFile
  description: A specification for uploading files from an Azure Batch Compute Node to another location after the Batch service has finished executing the Task process.
  kind: object
  properties:
  - name: filePattern
    description: "A pattern indicating which file(s) to upload.  \nBoth relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied."
    types:
    - uid: string
  - name: destination
    description: The destination for the output file(s).
    types:
    - uid: OutputFileDestination
  - name: uploadOptions
    description: Additional options for the upload operation, including under what conditions to perform the upload.
    types:
    - uid: OutputFileUploadOptions
- name: TaskConstraints
  description: Execution constraints to apply to a Task.
  kind: object
  properties:
  - name: maxWallClockTime
    description: "The maximum elapsed time that the Task may run, measured from the time the Task starts. If the Task does not complete within the time limit, the Batch service terminates it.  \nIf this is not specified, there is no time limit on how long the Task may run."
    types:
    - uid: string
  - name: retentionTime
    description: "The minimum time to retain the Task directory on the Compute Node where it ran, from the time it completes execution. After this time, the Batch service may delete the Task directory and all its contents.  \nThe default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted."
    types:
    - uid: string
  - name: maxTaskRetryCount
    description: "The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero.  \nNote that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit."
    types:
    - uid: integer
- name: UserIdentity
  description: The definition of the user identity under which the Task is run.
  kind: object
  properties:
  - name: username
    description: "The name of the user identity under which the Task is run.  \nThe userName and autoUser properties are mutually exclusive; you must specify one but not both."
    types:
    - uid: string
  - name: autoUser
    description: "The auto user under which the Task is run.  \nThe userName and autoUser properties are mutually exclusive; you must specify one but not both."
    types:
    - uid: AutoUserSpecification
- name: ApplicationPackageReference
  description: A reference to an Package to be deployed to Compute Nodes.
  kind: object
  properties:
  - name: applicationId
    description: The ID of the application to deploy.
    types:
    - uid: string
  - name: version
    description: "The version of the application to deploy. If omitted, the default version is deployed.  \nIf this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error."
    types:
    - uid: string
- name: AuthenticationTokenSettings
  description: The settings for an authentication token that the Task can use to perform Batch service operations.
  kind: object
  properties:
  - name: access
    description: "The Batch resources to which the token grants access.  \nThe authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the Job which contains the Task."
    types:
    - uid: string
      isArray: true
- name: AutoPoolSpecification
  description: Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto Pool when the Job is submitted.
  kind: object
  properties:
  - name: autoPoolIdPrefix
    description: "A prefix to be added to the unique identifier when a Pool is automatically created.  \nThe Batch service assigns each auto Pool a unique identifier on creation. To distinguish between Pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long."
    types:
    - uid: string
  - name: poolLifetimeOption
    description: The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
    types:
    - uid: PoolLifetimeOption
  - name: keepAlive
    description: "Whether to keep an auto Pool alive after its lifetime expires.  \nIf false, the Batch service deletes the Pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the Job or Job Schedule completes. If true, the Batch service does not delete the Pool automatically. It is up to the user to delete auto Pools created with this option."
    types:
    - uid: boolean
  - name: pool
    description: The Pool specification for the auto Pool.
    types:
    - uid: PoolSpecification
- name: JobSchedulingError
  description: An error encountered by the Batch service when scheduling a Job.
  kind: object
  properties:
  - name: category
    description: The category of the Job scheduling error.
    types:
    - uid: ErrorCategory
  - name: code
    description: An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the Job scheduling error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: details
    description: A list of additional error details related to the scheduling error.
    types:
    - uid: NameValuePair
      isArray: true
- name: ContainerRegistry
  description: A private container registry.
  kind: object
  properties:
  - name: registryServer
    description: "The registry URL.  \nIf omitted, the default is \"docker.io\"."
    types:
    - uid: string
  - name: username
    description: The user name to log into the registry server.
    types:
    - uid: string
  - name: password
    description: The password to log into the registry server.
    types:
    - uid: string
- name: ContainerWorkingDirectory
  description: The location of the container Task working directory.
  kind: enum
  properties:
  - name: taskWorkingDirectory
    description: Use the standard Batch service Task working directory, which will contain the Task Resource Files populated by Batch.
    types:
    - uid: string
  - name: containerImageDefault
    description: Use the working directory defined in the container Image. Beware that this directory will not contain the Resource Files downloaded by Batch.
    types:
    - uid: string
- name: OutputFileDestination
  description: The destination to which a file should be uploaded.
  kind: object
  properties:
  - name: container
    description: A location in Azure blob storage to which files are uploaded.
    types:
    - uid: OutputFileBlobContainerDestination
- name: OutputFileUploadOptions
  description: Details about an output file upload operation, including under what conditions to perform the upload.
  kind: object
  properties:
  - name: uploadCondition
    description: "The conditions under which the Task output file or set of files should be uploaded.  \nThe default is taskcompletion."
    types:
    - uid: OutputFileUploadCondition
- name: AutoUserSpecification
  description: Specifies the parameters for the auto user that runs a Task on the Batch service.
  kind: object
  properties:
  - name: scope
    description: "The scope for the auto user  \nThe default value is Task."
    types:
    - uid: AutoUserScope
  - name: elevationLevel
    description: "The elevation level of the auto user.  \nThe default value is nonAdmin."
    types:
    - uid: ElevationLevel
- name: PoolLifetimeOption
  description: The minimum lifetime of created auto Pools, and how multiple Jobs on a schedule are assigned to Pools.
  kind: enum
  properties:
  - name: jobschedule
    description: The Pool exists for the lifetime of the Job Schedule. The Batch Service creates the Pool when it creates the first Job on the schedule. You may apply this option only to Job Schedules, not to Jobs.
    types:
    - uid: string
  - name: job
    description: The Pool exists for the lifetime of the Job to which it is dedicated. The Batch service creates the Pool when it creates the Job. If the 'job' option is applied to a Job Schedule, the Batch service creates a new auto Pool for every Job created on the schedule.
    types:
    - uid: string
- name: PoolSpecification
  description: Specification for creating a new Pool.
  kind: object
  properties:
  - name: displayName
    description: "The display name for the Pool.  \nThe display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
    types:
    - uid: string
  - name: vmSize
    description: "The size of the virtual machines in the Pool. All virtual machines in a Pool are the same size.  \nFor information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes)."
    types:
    - uid: string
  - name: cloudServiceConfiguration
    description: "The cloud service configuration for the Pool.  \nThis property must be specified if the Pool needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'."
    types:
    - uid: CloudServiceConfiguration
  - name: virtualMachineConfiguration
    description: "The virtual machine configuration for the Pool.  \nThis property must be specified if the Pool needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
    types:
    - uid: VirtualMachineConfiguration
  - name: maxTasksPerNode
    description: "The maximum number of Tasks that can run concurrently on a single Compute Node in the Pool.  \nThe default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the Pool or 256."
    types:
    - uid: integer
  - name: taskSchedulingPolicy
    description: "How Tasks are distributed across Compute Nodes in a Pool.  \nIf not specified, the default is spread."
    types:
    - uid: TaskSchedulingPolicy
  - name: resizeTimeout
    description: "The timeout for allocation of Compute Nodes to the Pool.  \nThis timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
    types:
    - uid: string
  - name: targetDedicatedNodes
    description: "The desired number of dedicated Compute Nodes in the Pool.  \nThis property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both."
    types:
    - uid: integer
  - name: targetLowPriorityNodes
    description: "The desired number of low-priority Compute Nodes in the Pool.  \nThis property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both."
    types:
    - uid: integer
  - name: enableAutoScale
    description: "Whether the Pool size should automatically adjust over time.  \nIf false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The Pool automatically resizes according to the formula. The default value is false."
    types:
    - uid: boolean
  - name: autoScaleFormula
    description: "The formula for the desired number of Compute Nodes in the Pool.  \nThis property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information."
    types:
    - uid: string
  - name: autoScaleEvaluationInterval
    description: "The time interval at which to automatically adjust the Pool size according to the autoscale formula.  \nThe default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
    types:
    - uid: string
  - name: enableInterNodeCommunication
    description: "Whether the Pool permits direct communication between Compute Nodes.  \nEnabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false."
    types:
    - uid: boolean
  - name: networkConfiguration
    description: "The network configuration for the Pool.  \nThe network configuration for a Pool."
    types:
    - uid: NetworkConfiguration
  - name: startTask
    description: "A Task to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool or when the Compute Node is restarted.  \nBatch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the start Task may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid start Tasks which create breakaway process or install/launch services from the start Task working directory, as this will block Batch from being able to re-run the start Task."
    types:
    - uid: StartTask
  - name: certificateReferences
    description: "A list of Certificates to be installed on each Compute Node in the Pool.  \nFor Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory."
    types:
    - uid: CertificateReference
      isArray: true
  - name: applicationPackageReferences
    description: "The list of Packages to be installed on each Compute Node in the Pool.  \nChanges to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool."
    types:
    - uid: ApplicationPackageReference
      isArray: true
  - name: applicationLicenses
    description: "The list of application licenses the Batch service will make available on each Compute Node in the Pool.  \nThe list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail. The permitted licenses available on the Pool are 'maya', 'vray', '3dsmax', 'arnold'. An additional charge applies for each application license added to the Pool."
    types:
    - uid: string
      isArray: true
  - name: userAccounts
    description: The list of user Accounts to be created on each Compute Node in the Pool.
    types:
    - uid: UserAccount
      isArray: true
  - name: metadata
    description: "A list of name-value pairs associated with the Pool as metadata.  \nThe Batch service does not assign any meaning to metadata; it is solely for the use of user code."
    types:
    - uid: MetadataItem
      isArray: true
- name: ErrorCategory
  description: The category of the error.
  kind: enum
  properties:
  - name: usererror
    description: The error is due to a user issue, such as misconfiguration.
    types:
    - uid: string
  - name: servererror
    description: The error is due to an internal server issue.
    types:
    - uid: string
- name: NameValuePair
  description: Represents a name-value pair.
  kind: object
  properties:
  - name: name
    description: The name in the name-value pair.
    types:
    - uid: string
  - name: value
    description: The value in the name-value pair.
    types:
    - uid: string
- name: OutputFileBlobContainerDestination
  description: Specifies a file upload destination within an Azure blob storage container.
  kind: object
  properties:
  - name: path
    description: "The destination blob or virtual directory within the Azure Storage container.  \nIf filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name."
    types:
    - uid: string
  - name: containerUrl
    description: "The URL of the container within Azure Blob Storage to which to upload the file(s).  \nThe URL must include a Shared Access Signature (SAS) granting write permissions to the container."
    types:
    - uid: string
- name: OutputFileUploadCondition
  description: The conditions under which a Task output file or set of files should be uploaded.
  kind: enum
  properties:
  - name: tasksuccess
    description: Upload the file(s) only after the Task process exits with an exit code of 0.
    types:
    - uid: string
  - name: taskfailure
    description: Upload the file(s) only after the Task process exits with a nonzero exit code.
    types:
    - uid: string
  - name: taskcompletion
    description: Upload the file(s) after the Task process exits, no matter what the exit code was.
    types:
    - uid: string
- name: AutoUserScope
  description: The scope for the auto user
  kind: enum
  properties:
  - name: task
    description: Specifies that the service should create a new user for the Task.
    types:
    - uid: string
  - name: pool
    description: Specifies that the Task runs as the common auto user Account which is created on every Compute Node in a Pool.
    types:
    - uid: string
- name: ElevationLevel
  description: The elevation level of the user.
  kind: enum
  properties:
  - name: nonadmin
    description: The user is a standard user without elevated access.
    types:
    - uid: string
  - name: admin
    description: The user is a user with elevated access and operates with full Administrator permissions.
    types:
    - uid: string
- name: CloudServiceConfiguration
  description: The configuration for Compute Nodes in a Pool based on the Azure Cloud Services platform.
  kind: object
  properties:
  - name: osFamily
    description: "The Azure Guest OS family to be installed on the virtual machines in the Pool.  \nPossible values are:\n2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.\n3 - OS Family 3, equivalent to Windows Server 2012.\n4 - OS Family 4, equivalent to Windows Server 2012 R2.\n5 - OS Family 5, equivalent to Windows Server 2016.\n6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases)."
    types:
    - uid: string
  - name: osVersion
    description: "The Azure Guest OS version to be installed on the virtual machines in the Pool.  \nThe default value is * which specifies the latest operating system version for the specified OS family."
    types:
    - uid: string
- name: VirtualMachineConfiguration
  description: The configuration for Compute Nodes in a Pool based on the Azure Virtual Machines infrastructure.
  kind: object
  properties:
  - name: imageReference
    description: A reference to the Azure Virtual Machines Marketplace Image or the custom Virtual Machine Image to use.
    types:
    - uid: ImageReference
  - name: nodeAgentSKUId
    description: "The SKU of the Batch Compute Node agent to be provisioned on Compute Nodes in the Pool.  \nThe Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the 'List supported Compute Node agent SKUs' operation."
    types:
    - uid: string
  - name: windowsConfiguration
    description: "Windows operating system settings on the virtual machine.  \nThis property must not be specified if the imageReference property specifies a Linux OS Image."
    types:
    - uid: WindowsConfiguration
  - name: dataDisks
    description: "The configuration for data disks attached to the Compute Nodes in the Pool.  \nThis property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine."
    types:
    - uid: DataDisk
      isArray: true
  - name: licenseType
    description: "The type of on-premises license to be used when deploying the operating system.  \nThis only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:\n\n Windows_Server - The on-premises license is for Windows Server.\n Windows_Client - The on-premises license is for Windows Client."
    types:
    - uid: string
  - name: containerConfiguration
    description: "The container configuration for the Pool.  \nIf specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it."
    types:
    - uid: ContainerConfiguration
- name: TaskSchedulingPolicy
  description: Specifies how Tasks should be distributed across Compute Nodes.
  kind: object
  properties:
  - name: nodeFillType
    description: "How Tasks are distributed across Compute Nodes in a Pool.  \nIf not specified, the default is spread."
    types:
    - uid: ComputeNodeFillType
- name: NetworkConfiguration
  description: The network configuration for a Pool.
  kind: object
  properties:
  - name: subnetId
    description: "The ARM resource identifier of the virtual network subnet which the Compute Nodes of the Pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.  \nThe virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration"
    types:
    - uid: string
  - name: dynamicVNetAssignmentScope
    description: The scope of dynamic vnet assignment.
    types:
    - uid: DynamicVNetAssignmentScope
  - name: endpointConfiguration
    description: "The configuration for endpoints on Compute Nodes in the Batch Pool.  \nPool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property."
    types:
    - uid: PoolEndpointConfiguration
- name: StartTask
  description: A Task which is run when a Node joins a Pool in the Azure Batch service, or when the Compute Node is rebooted or reimaged.
  kind: object
  properties:
  - name: commandLine
    description: "The command line of the start Task.  \nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
    types:
    - uid: string
  - name: containerSettings
    description: "The settings for the container under which the start Task runs.  \nWhen this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
    types:
    - uid: TaskContainerSettings
  - name: resourceFiles
    description: "A list of files that the Batch service will download to the Compute Node before running the command line.  There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.  \nFiles listed under this element are located in the Task's working directory."
    types:
    - uid: ResourceFile
      isArray: true
  - name: environmentSettings
    description: A list of environment variable settings for the start Task.
    types:
    - uid: EnvironmentSetting
      isArray: true
  - name: userIdentity
    description: "The user identity under which the start Task runs.  \nIf omitted, the Task runs as a non-administrative user unique to the Task."
    types:
    - uid: UserIdentity
  - name: maxTaskRetryCount
    description: "The maximum number of times the Task may be retried.  \nThe Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit."
    types:
    - uid: integer
  - name: waitForSuccess
    description: "Whether the Batch service should wait for the start Task to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node.  \nIf true and the start Task fails on a Node, the Batch service retries the start Task up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the start Task to complete. In this case, other Tasks can start executing on the Compute Node while the start Task is still running; and even if the start Task fails, new Tasks will continue to be scheduled on the Compute Node. The default is false."
    types:
    - uid: boolean
- name: CertificateReference
  description: A reference to a Certificate to be installed on Compute Nodes in a Pool.
  kind: object
  properties:
  - name: thumbprint
    description: The thumbprint of the Certificate.
    types:
    - uid: string
  - name: thumbprintAlgorithm
    description: The algorithm with which the thumbprint is associated. This must be sha1.
    types:
    - uid: string
  - name: storeLocation
    description: "The location of the Certificate store on the Compute Node into which to install the Certificate.  \nThe default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory."
    types:
    - uid: CertificateStoreLocation
  - name: storeName
    description: "The name of the Certificate store on the Compute Node into which to install the Certificate.  \nThis property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My."
    types:
    - uid: string
  - name: visibility
    description: "Which user Accounts on the Compute Node should have access to the private data of the Certificate.  \nYou can specify more than one visibility in this collection. The default is all Accounts."
    types:
    - uid: string
      isArray: true
- name: UserAccount
  description: Properties used to create a user used to execute Tasks on an Azure Batch Compute Node.
  kind: object
  properties:
  - name: name
    description: The name of the user Account.
    types:
    - uid: string
  - name: password
    description: The password for the user Account.
    types:
    - uid: string
  - name: elevationLevel
    description: "The elevation level of the user Account.  \nThe default value is nonAdmin."
    types:
    - uid: ElevationLevel
  - name: linuxUserConfiguration
    description: "The Linux-specific user configuration for the user Account.  \nThis property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options."
    types:
    - uid: LinuxUserConfiguration
  - name: windowsUserConfiguration
    description: "The Windows-specific user configuration for the user Account.  \nThis property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options."
    types:
    - uid: WindowsUserConfiguration
- name: ImageReference
  description: A reference to an Azure Virtual Machines Marketplace Image or a custom Azure Virtual Machine Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List supported Images' operation.
  kind: object
  properties:
  - name: publisher
    description: "The publisher of the Azure Virtual Machines Marketplace Image.  \nFor example, Canonical or MicrosoftWindowsServer."
    types:
    - uid: string
  - name: offer
    description: "The offer type of the Azure Virtual Machines Marketplace Image.  \nFor example, UbuntuServer or WindowsServer."
    types:
    - uid: string
  - name: sku
    description: "The SKU of the Azure Virtual Machines Marketplace Image.  \nFor example, 14.04.0-LTS or 2012-R2-Datacenter."
    types:
    - uid: string
  - name: version
    description: "The version of the Azure Virtual Machines Marketplace Image.  \nA value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'."
    types:
    - uid: string
  - name: virtualMachineImageId
    description: "The ARM resource identifier of the Virtual Machine Image. Computes Compute Nodes of the Pool will be created using this custom Image. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}  \nThis property is mutually exclusive with other ImageReference properties. The Virtual Machine Image must be in the same region and subscription as the Azure Batch Account. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration."
    types:
    - uid: string
- name: WindowsConfiguration
  description: Windows operating system settings to apply to the virtual machine.
  kind: object
  properties:
  - name: enableAutomaticUpdates
    description: "Whether automatic updates are enabled on the virtual machine.  \nIf omitted, the default value is true."
    types:
    - uid: boolean
- name: DataDisk
  description: Settings which will be used by the data disks associated to Compute Nodes in the Pool.
  kind: object
  properties:
  - name: lun
    description: "The logical unit number.  \nThe lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun."
    types:
    - uid: integer
  - name: caching
    description: "The type of caching to be enabled for the data disks.  \nThe default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/."
    types:
    - uid: CachingType
  - name: diskSizeGB
    description: The initial disk size in gigabytes.
    types:
    - uid: integer
  - name: storageAccountType
    description: "The storage Account type to be used for the data disk.  \nIf omitted, the default is \"standard_lrs\"."
    types:
    - uid: StorageAccountType
- name: ContainerConfiguration
  description: The configuration for container-enabled Pools.
  kind: object
  properties:
  - name: type
    description: The container technology to be used.
    types:
    - uid: ContainerType
  - name: containerImageNames
    description: "The collection of container Image names.  \nThis is the full Image reference, as would be specified to \"docker pull\". An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry."
    types:
    - uid: string
      isArray: true
  - name: containerRegistries
    description: "Additional private registries from which containers can be pulled.  \nIf any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here."
    types:
    - uid: ContainerRegistry
      isArray: true
- name: ComputeNodeFillType
  description: How Tasks are distributed across Compute Nodes in a Pool.
  kind: enum
  properties:
  - name: spread
    description: Tasks should be assigned evenly across all Compute Nodes in the Pool.
    types:
    - uid: string
  - name: pack
    description: As many Tasks as possible (maxTasksPerNode) should be assigned to each Compute Node in the Pool before any Tasks are assigned to the next Compute Node in the Pool.
    types:
    - uid: string
- name: DynamicVNetAssignmentScope
  description: The scope of dynamic vnet assignment.
  kind: enum
  properties:
  - name: none
    description: No dynamic VNet assignment is enabled.
    types:
    - uid: string
  - name: job
    description: Dynamic VNet assignment is done per-job.
    types:
    - uid: string
- name: PoolEndpointConfiguration
  description: The endpoint configuration for a Pool.
  kind: object
  properties:
  - name: inboundNATPools
    description: "A list of inbound NAT Pools that can be used to address specific ports on an individual Compute Node externally.  \nThe maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400."
    types:
    - uid: InboundNATPool
      isArray: true
- name: CertificateStoreLocation
  description: The location of the Certificate store on the Compute Node into which to install the Certificate.
  kind: enum
  properties:
  - name: currentuser
    description: Certificates should be installed to the CurrentUser Certificate store.
    types:
    - uid: string
  - name: localmachine
    description: Certificates should be installed to the LocalMachine Certificate store.
    types:
    - uid: string
- name: LinuxUserConfiguration
  description: Properties used to create a user Account on a Linux Compute Node.
  kind: object
  properties:
  - name: uid
    description: "The user ID of the user Account.  \nThe uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid."
    types:
    - uid: integer
  - name: gid
    description: "The group ID for the user Account.  \nThe uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid."
    types:
    - uid: integer
  - name: sshPrivateKey
    description: "The SSH private key for the user Account.  \nThe private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user's .ssh directory is done)."
    types:
    - uid: string
- name: WindowsUserConfiguration
  description: Properties used to create a user Account on a Windows Compute Node.
  kind: object
  properties:
  - name: loginMode
    description: "The login mode for the user  \nThe default value for VirtualMachineConfiguration Pools is 'batch' and for CloudServiceConfiguration Pools is 'interactive'."
    types:
    - uid: LoginMode
- name: CachingType
  description: The type of caching to enable for the disk.
  kind: enum
  properties:
  - name: none
    description: The caching mode for the disk is not enabled.
    types:
    - uid: string
  - name: readonly
    description: The caching mode for the disk is read only.
    types:
    - uid: string
  - name: readwrite
    description: The caching mode for the disk is read and write.
    types:
    - uid: string
- name: StorageAccountType
  description: The storage Account type for use in creating data disks.
  kind: enum
  properties:
  - name: standard_lrs
    description: The data disk should use standard locally redundant storage.
    types:
    - uid: string
  - name: premium_lrs
    description: The data disk should use premium locally redundant storage.
    types:
    - uid: string
- name: ContainerType
  description: The container technology to be used.
  kind: enum
  properties:
  - name: dockerCompatible
    description: A Docker compatible container technology will be used to launch the containers.
    types:
    - uid: string
- name: InboundNATPool
  description: A inbound NAT Pool that can be used to address specific ports on Compute Nodes in a Batch Pool externally.
  kind: object
  properties:
  - name: name
    description: "The name of the endpoint.  \nThe name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400."
    types:
    - uid: string
  - name: protocol
    description: The protocol of the endpoint.
    types:
    - uid: InboundEndpointProtocol
  - name: backendPort
    description: "The port number on the Compute Node.  \nThis must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400."
    types:
    - uid: integer
  - name: frontendPortRangeStart
    description: "The first port number in the range of external ports that will be used to provide inbound access to the backendPort on individual Compute Nodes.  \nAcceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400."
    types:
    - uid: integer
  - name: frontendPortRangeEnd
    description: "The last port number in the range of external ports that will be used to provide inbound access to the backendPort on individual Compute Nodes.  \nAcceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400."
    types:
    - uid: integer
  - name: networkSecurityGroupRules
    description: "A list of network security group rules that will be applied to the endpoint.  \nThe maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400."
    types:
    - uid: NetworkSecurityGroupRule
      isArray: true
- name: LoginMode
  description: The login mode for the user
  kind: enum
  properties:
  - name: batch
    description: The LOGON32_LOGON_BATCH Win32 login mode. The batch login mode is recommended for long running parallel processes.
    types:
    - uid: string
  - name: interactive
    description: The LOGON32_LOGON_INTERACTIVE Win32 login mode. UAC is enabled on Windows VirtualMachineConfiguration Pools. If this option is used with an elevated user identity in a Windows VirtualMachineConfiguration Pool, the user session will not be elevated unless the application executed by the Task command line is configured to always require administrative privilege or to always require maximum privilege.
    types:
    - uid: string
- name: InboundEndpointProtocol
  description: The protocol of the endpoint.
  kind: enum
  properties:
  - name: tcp
    description: Use TCP for the endpoint.
    types:
    - uid: string
  - name: udp
    description: Use UDP for the endpoint.
    types:
    - uid: string
- name: NetworkSecurityGroupRule
  description: A network security group rule to apply to an inbound endpoint.
  kind: object
  properties:
  - name: priority
    description: "The priority for this rule.  \nPriorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400."
    types:
    - uid: integer
  - name: access
    description: The action that should be taken for a specified IP address, subnet range or tag.
    types:
    - uid: NetworkSecurityGroupRuleAccess
  - name: sourceAddressPrefix
    description: "The source address prefix or tag to match for the rule.  \nValid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400."
    types:
    - uid: string
  - name: sourcePortRanges
    description: "The source port ranges to match for the rule.  \nValid values are '*' (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is '*'."
    types:
    - uid: string
      isArray: true
- name: NetworkSecurityGroupRuleAccess
  description: The action that should be taken for a specified IP address, subnet range or tag.
  kind: enum
  properties:
  - name: allow
    description: Allow access.
    types:
    - uid: string
  - name: deny
    description: Deny access.
    types:
    - uid: string
examples:
- name: Job list
  request:
    uri: GET account.region.batch.azure.com/jobs?api-version=2019-06-01.9.0
    headers:
    - name: client-request-id
      value: 00000000-0000-0000-0000-000000000000
    - name: ocp-date
      value: Fri, 17 Feb 2017 00:00:00 GMT
  responses:
  - statusCode: "200"
    body: >-
      {
        "value": [
          {
            "id": "jobId",
            "url": "https://account.region.batch.azure.com/jobs/jobId",
            "eTag": "0x8D4100FC46D5BF4",
            "lastModified": "2016-11-19T00:05:27.2137716Z",
            "creationTime": "2016-11-19T00:05:25.311915Z",
            "state": "active",
            "stateTransitionTime": "2016-11-19T00:05:27.2137716Z",
            "previousState": "disabled",
            "previousStateTransitionTime": "2016-11-19T00:05:26.88777Z",
            "priority": 0,
            "usesTaskDependencies": false,
            "constraints": {
              "maxWallClockTime": "P10675199DT2H48M5.4775807S",
              "maxTaskRetryCount": 0
            },
            "poolInfo": {
              "poolId": "poolId"
            },
            "executionInfo": {
              "startTime": "2016-11-19T00:05:25.3309105Z",
              "poolId": "poolId"
            },
            "onAllTasksComplete": "noaction",
            "onTaskFailure": "noaction"
          }
        ]
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: Impersonate your user account
- name: Authorization
  type: apiKey
  in: header
errorCodes: []
