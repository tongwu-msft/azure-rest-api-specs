{
  "swagger": "2.0",
  "info": {
    "version": "2017-09-01.6.0",
    "x-ms-code-generation-settings": {
      "name": "BatchServiceClient"
    },
    "title": "BatchService",
    "description": "A client for issuing REST requests to the Azure Batch service."
  },
  "host": "batch.core.windows.net",
  "schemes": [
    "https"
  ],
  "paths": {
    "/pools/{poolId}": {
      "head": {
        "tags": [
          "Pools"
        ],
        "operationId": "Pool_Exists",
        "description": "Gets basic properties of a pool.",
        "x-ms-request-id": "request-id",
        "parameters": [
          {
            "name": "poolId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the pool to get."
          },
          {
            "name": "timeout",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 30,
            "description": "The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "name": "client-request-id",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "uuid",
            "description": "The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            },
            "x-ms-client-request-id": true
          },
          {
            "name": "return-client-request-id",
            "default": false,
            "in": "header",
            "required": false,
            "type": "boolean",
            "description": "Whether the server should return the client-request-id in the response.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "name": "ocp-date",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "date-time-rfc1123",
            "description": "The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "date-time-rfc1123",
            "description": "A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "required": false,
            "type": "string",
            "format": "date-time-rfc1123",
            "description": "A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.",
            "x-ms-parameter-grouping": {
              "postfix": "Options"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "client-request-id": {
                "description": "The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true.",
                "type": "string",
                "format": "uuid"
              },
              "request-id": {
                "description": "A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in.",
                "type": "string",
                "format": "uuid"
              },
              "ETag": {
                "description": "The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.",
                "type": "string"
              },
              "Last-Modified": {
                "description": "The time at which the resource was last modified.",
                "type": "string",
                "format": "date-time-rfc1123"
              }
            },
            "description": "A response containing headers related to the pool, if it exists."
          },
          "404": {
            "description": "The pool does not exist."
          },
          "default": {
            "description": "The error from the Batch service.",
            "schema": {
              "$ref": "#/definitions/BatchError"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json; odata=minimalmetadata"
        ],
        "x-internal-toc-name": "Exists"
      }
    }
  },
  "definitions": {
    "PoolUsageMetrics": {
      "properties": {
        "poolId": {
          "type": "string",
          "title": "The ID of the pool whose metrics are aggregated in this entry."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the aggregation interval covered by this entry."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The end time of the aggregation interval covered by this entry."
        },
        "vmSize": {
          "type": "string",
          "title": "The size of virtual machines in the pool. All VMs in a pool are the same size.",
          "description": "For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, STANDARD_A1_V2 and STANDARD_A2_V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)."
        },
        "totalCoreHours": {
          "type": "number",
          "format": "double",
          "title": "The total core hours used in the pool during this aggregation interval."
        },
        "dataIngressGiB": {
          "type": "number",
          "format": "double",
          "title": "The cross data center network ingress to the pool during this interval, in GiB."
        },
        "dataEgressGiB": {
          "type": "number",
          "format": "double",
          "title": "The cross data center network egress from the pool during this interval, in GiB."
        }
      },
      "required": [
        "poolId",
        "startTime",
        "endTime",
        "vmSize",
        "totalCoreHours",
        "dataIngressGiB",
        "dataEgressGiB"
      ],
      "title": "Usage metrics for a pool across an aggregation interval."
    },
    "PoolListUsageMetricsResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PoolUsageMetrics"
          },
          "title": "The pool usage metrics data."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of a listing the usage metrics for an account."
    },
    "NodeAgentSku": {
      "properties": {
        "id": {
          "type": "string",
          "title": "The ID of the node agent SKU."
        },
        "verifiedImageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageReference"
          },
          "title": "The list of Azure Marketplace images verified to be compatible with this node agent SKU.",
          "description": "This collection is not exhaustive (the node agent may be compatible with other images)."
        },
        "osType": {
          "type": "string",
          "title": "The type of operating system (e.g. Windows or Linux) compatible with the node agent SKU.",
          "enum": [
            "linux",
            "windows"
          ],
          "x-ms-enum": {
            "name": "OSType",
            "modelAsString": false
          }
        }
      },
      "title": "A node agent SKU supported by the Batch service.",
      "description": "The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems."
    },
    "AuthenticationTokenSettings": {
      "properties": {
        "access": {
          "type": "array",
          "items": {
            "type": "string",
            "x-nullable": false,
            "enum": [
              "job"
            ],
            "x-ms-enum": {
              "name": "AccessScope",
              "modelAsString": false
            }
          },
          "title": "The Batch resources to which the token grants access.",
          "description": "The authentication token grants access to a limited set of Batch service operations. Currently the only supported value for the access property is 'job', which grants access to all operations related to the job which contains the task."
        }
      },
      "title": "The settings for an authentication token that the task can use to perform Batch service operations."
    },
    "AccountListNodeAgentSkusResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAgentSku"
          },
          "title": "The list of supported node agent SKUs."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the supported node agent SKUs."
    },
    "UsageStatistics": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the time range covered by the statistics."
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime."
        },
        "dedicatedCoreTime": {
          "type": "string",
          "format": "duration",
          "title": "The aggregated wall-clock time of the dedicated compute node cores being part of the pool."
        }
      },
      "required": [
        "startTime",
        "lastUpdateTime",
        "dedicatedCoreTime"
      ],
      "title": "Statistics related to pool usage information."
    },
    "ResourceStatistics": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the time range covered by the statistics."
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime."
        },
        "avgCPUPercentage": {
          "type": "number",
          "format": "double",
          "title": "The average CPU usage across all nodes in the pool (percentage per node)."
        },
        "avgMemoryGiB": {
          "type": "number",
          "format": "double",
          "title": "The average memory usage in GiB across all nodes in the pool."
        },
        "peakMemoryGiB": {
          "type": "number",
          "format": "double",
          "title": "The peak memory usage in GiB across all nodes in the pool."
        },
        "avgDiskGiB": {
          "type": "number",
          "format": "double",
          "title": "The average used disk space in GiB across all nodes in the pool."
        },
        "peakDiskGiB": {
          "type": "number",
          "format": "double",
          "title": "The peak used disk space in GiB across all nodes in the pool."
        },
        "diskReadIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk read operations across all nodes in the pool."
        },
        "diskWriteIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk write operations across all nodes in the pool."
        },
        "diskReadGiB": {
          "type": "number",
          "format": "double",
          "title": "The total amount of data in GiB of disk reads across all nodes in the pool."
        },
        "diskWriteGiB": {
          "type": "number",
          "format": "double",
          "title": "The total amount of data in GiB of disk writes across all nodes in the pool."
        },
        "networkReadGiB": {
          "type": "number",
          "format": "double",
          "title": "The total amount of data in GiB of network reads across all nodes in the pool."
        },
        "networkWriteGiB": {
          "type": "number",
          "format": "double",
          "title": "The total amount of data in GiB of network writes across all nodes in the pool."
        }
      },
      "required": [
        "startTime",
        "lastUpdateTime",
        "avgCPUPercentage",
        "avgMemoryGiB",
        "peakMemoryGiB",
        "avgDiskGiB",
        "peakDiskGiB",
        "diskReadIOps",
        "diskWriteIOps",
        "diskReadGiB",
        "diskWriteGiB",
        "networkReadGiB",
        "networkWriteGiB"
      ],
      "title": "Statistics related to resource consumption by compute nodes in a pool."
    },
    "PoolStatistics": {
      "properties": {
        "url": {
          "type": "string",
          "title": "The URL for the statistics."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the time range covered by the statistics."
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime."
        },
        "usageStats": {
          "$ref": "#/definitions/UsageStatistics",
          "title": "Statistics related to pool usage, such as the amount of core-time used."
        },
        "resourceStats": {
          "$ref": "#/definitions/ResourceStatistics",
          "title": "Statistics related to resource consumption by compute nodes in the pool."
        }
      },
      "required": [
        "url",
        "startTime",
        "lastUpdateTime"
      ],
      "title": "Contains utilization and resource usage statistics for the lifetime of a pool."
    },
    "JobStatistics": {
      "properties": {
        "url": {
          "type": "string",
          "title": "The URL of the statistics."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the time range covered by the statistics."
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime."
        },
        "userCPUTime": {
          "type": "string",
          "format": "duration",
          "title": "The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job."
        },
        "kernelCPUTime": {
          "type": "string",
          "format": "duration",
          "title": "The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in the job."
        },
        "wallClockTime": {
          "type": "string",
          "format": "duration",
          "title": "The total wall clock time of all tasks in the job.",
          "description": " The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If a task was retried, this includes the wall clock time of all the task retries."
        },
        "readIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk read operations made by all tasks in the job."
        },
        "writeIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk write operations made by all tasks in the job."
        },
        "readIOGiB": {
          "type": "number",
          "format": "double",
          "title": "The total amount of data in GiB read from disk by all tasks in the job."
        },
        "writeIOGiB": {
          "type": "number",
          "format": "double",
          "title": "The total amount of data in GiB written to disk by all tasks in the job."
        },
        "numSucceededTasks": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of tasks successfully completed in the job during the given time range.",
          "description": "A task completes successfully if it returns exit code 0."
        },
        "numFailedTasks": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of tasks in the job that failed during the given time range.",
          "description": "A task fails if it exhausts its maximum retry count without returning exit code 0."
        },
        "numTaskRetries": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of retries on all the tasks in the job during the given time range."
        },
        "waitTime": {
          "type": "string",
          "format": "duration",
          "title": "The total wait time of all tasks in the job.",
          "description": "The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.) This value is only reported in the account lifetime statistics; it is not included in the job statistics."
        }
      },
      "required": [
        "url",
        "startTime",
        "lastUpdateTime",
        "userCPUTime",
        "kernelCPUTime",
        "wallClockTime",
        "readIOps",
        "writeIOps",
        "readIOGiB",
        "writeIOGiB",
        "numSucceededTasks",
        "numFailedTasks",
        "numTaskRetries",
        "waitTime"
      ],
      "title": "Resource usage statistics for a job."
    },
    "NameValuePair": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The name in the name-value pair."
        },
        "value": {
          "type": "string",
          "title": "The value in the name-value pair."
        }
      },
      "title": "Represents a name-value pair."
    },
    "DeleteCertificateError": {
      "properties": {
        "code": {
          "type": "string",
          "title": "An identifier for the certificate deletion error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "title": "A message describing the certificate deletion error, intended to be suitable for display in a user interface."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          },
          "title": "A list of additional error details related to the certificate deletion error.",
          "description": "This list includes details such as the active pools and nodes referencing this certificate. However, if a large number of resources reference the certificate, the list contains only about the first hundred."
        }
      },
      "title": "An error encountered by the Batch service when deleting a certificate."
    },
    "Certificate": {
      "properties": {
        "thumbprint": {
          "type": "string",
          "title": "The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits."
        },
        "thumbprintAlgorithm": {
          "type": "string",
          "title": "The algorithm used to derive the thumbprint."
        },
        "url": {
          "type": "string",
          "title": "The URL of the certificate."
        },
        "state": {
          "title": "The current state of the certificate.",
          "$ref": "#/definitions/CertificateState"
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the certificate entered its current state."
        },
        "previousState": {
          "title": "The previous state of the certificate.",
          "description": "This property is not set if the certificate is in its initial active state.",
          "$ref": "#/definitions/CertificateState"
        },
        "previousStateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the certificate entered its previous state.",
          "description": "This property is not set if the certificate is in its initial Active state."
        },
        "publicData": {
          "type": "string",
          "title": "The public part of the certificate as a base-64 encoded .cer file."
        },
        "deleteCertificateError": {
          "$ref": "#/definitions/DeleteCertificateError",
          "title": "The error that occurred on the last attempt to delete this certificate.",
          "description": "This property is set only if the certificate is in the DeleteFailed state."
        }
      },
      "description": "A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine."
    },
    "ApplicationPackageReference": {
      "properties": {
        "applicationId": {
          "type": "string",
          "title": "The ID of the application to deploy."
        },
        "version": {
          "type": "string",
          "title": "The version of the application to deploy. If omitted, the default version is deployed.",
          "description": "If this is omitted on a pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a task, and no default version is specified for this application, the task fails with a pre-processing error."
        }
      },
      "required": [
        "applicationId"
      ],
      "title": "A reference to an application package to be deployed to compute nodes."
    },
    "ApplicationSummary": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the application within the account."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the application."
        },
        "versions": {
          "type": "array",
          "title": "The list of available versions of the application.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "displayName",
        "versions"
      ],
      "title": "Contains information about an application in an Azure Batch account."
    },
    "CertificateAddParameter": {
      "properties": {
        "thumbprint": {
          "type": "string",
          "title": "The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed)."
        },
        "thumbprintAlgorithm": {
          "type": "string",
          "title": "The algorithm used to derive the thumbprint. This must be sha1."
        },
        "data": {
          "type": "string",
          "title": "The base64-encoded contents of the certificate. The maximum size is 10KB."
        },
        "certificateFormat": {
          "type": "string",
          "title": "The format of the certificate data.",
          "enum": [
            "pfx",
            "cer"
          ],
          "x-ms-enum": {
            "name": "CertificateFormat",
            "modelAsString": false
          }
        },
        "password": {
          "type": "string",
          "title": "The password to access the certificate's private key.",
          "description": "This is required if the certificate format is pfx. It should be omitted if the certificate format is cer."
        }
      },
      "required": [
        "thumbprint",
        "thumbprintAlgorithm",
        "data"
      ],
      "title": "A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine."
    },
    "CertificateListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Certificate"
          },
          "title": "The list of certificates."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the certificates in the account."
    },
    "FileProperties": {
      "properties": {
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "title": "The file creation time.",
          "description": "The creation time is not returned for files on Linux compute nodes."
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the file was last modified."
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "title": "The length of the file."
        },
        "contentType": {
          "type": "string",
          "title": "The content type of the file."
        },
        "fileMode": {
          "type": "string",
          "title": "The file mode attribute in octal format.",
          "description": "The file mode is returned only for files on Linux compute nodes."
        }
      },
      "required": [
        "lastModified",
        "contentLength"
      ],
      "title": "The properties of a file on a compute node."
    },
    "NodeFile": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The file path."
        },
        "url": {
          "type": "string",
          "title": "The URL of the file."
        },
        "isDirectory": {
          "type": "boolean",
          "title": "Whether the object represents a directory."
        },
        "properties": {
          "$ref": "#/definitions/FileProperties",
          "title": "The file properties."
        }
      },
      "title": "Information about a file or directory on a compute node."
    },
    "NodeFileListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeFile"
          },
          "title": "The list of files."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the files on a compute node, or the files associated with a task on a node."
    },
    "Schedule": {
      "properties": {
        "doNotRunUntil": {
          "type": "string",
          "format": "date-time",
          "title": "The earliest time at which any job may be created under this job schedule.",
          "description": "If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately."
        },
        "doNotRunAfter": {
          "type": "string",
          "format": "date-time",
          "title": "A time after which no job will be created under this job schedule. The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule.",
          "description": "If you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it."
        },
        "startWindow": {
          "type": "string",
          "format": "duration",
          "title": "The time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created.",
          "description": "If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "recurrenceInterval": {
          "type": "string",
          "format": "duration",
          "title": "The time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time.",
          "description": "Because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        }
      },
      "title": "The schedule according to which jobs will be created"
    },
    "JobConstraints": {
      "properties": {
        "maxWallClockTime": {
          "type": "string",
          "format": "duration",
          "title": "The maximum elapsed time that the job may run, measured from the time the job is created.",
          "description": "If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run."
        },
        "maxTaskRetryCount": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero.",
          "description": "Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries)."
        }
      },
      "title": "The execution constraints for a job."
    },
    "TaskContainerSettings": {
      "properties": {
        "containerRunOptions": {
          "type": "string",
          "title": "Additional options to the container create command.",
          "description": "These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service."
        },
        "imageName": {
          "type": "string",
          "title": "The image to use to create the container in which the task will run.",
          "description": "This is the full image reference, as would be specified to \"docker pull\". If no tag is provided as part of the image name, the tag \":latest\" is used as a default."
        },
        "registry": {
          "$ref": "#/definitions/ContainerRegistry",
          "title": "The private registry which contains the container image.",
          "description": "This setting can be omitted if was already provided at pool creation."
        }
      },
      "required": [
        "imageName"
      ],
      "title": "The container settings for a task."
    },
    "ResourceFile": {
      "properties": {
        "blobSource": {
          "type": "string",
          "title": "The URL of the file within Azure Blob Storage.",
          "description": "This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access."
        },
        "filePath": {
          "type": "string",
          "title": "The location on the compute node to which to download the file, relative to the task's working directory."
        },
        "fileMode": {
          "type": "string",
          "title": "The file permission mode attribute in octal format.",
          "description": "This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file."
        }
      },
      "required": [
        "blobSource",
        "filePath"
      ],
      "title": "A file to be downloaded from Azure blob storage to a compute node."
    },
    "EnvironmentSetting": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the environment variable."
        },
        "value": {
          "type": "string",
          "title": "The value of the environment variable."
        }
      },
      "required": [
        "name"
      ],
      "title": "An environment variable to be set on a task process."
    },
    "ExitConditions": {
      "properties": {
        "exitCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExitCodeMapping"
          },
          "title": "A list of individual task exit codes and how the Batch service should respond to them."
        },
        "exitCodeRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExitCodeRangeMapping"
          },
          "title": "A list of task exit code ranges and how the Batch service should respond to them."
        },
        "preProcessingError": {
          "$ref": "#/definitions/ExitOptions",
          "title": "How the Batch service should respond if the task fails to start due to an error."
        },
        "fileUploadError": {
          "$ref": "#/definitions/ExitOptions",
          "title": "How the Batch service should respond if a file upload error occurs.",
          "description": "If the task exited with an exit code that was specified via exitCodes or exitCodeRanges, and then encountered a file upload error, then the action specified by the exit code takes precedence."
        },
        "default": {
          "$ref": "#/definitions/ExitOptions",
          "title": "How the Batch service should respond if the task fails with an exit condition not covered by any of the other properties.",
          "description": "This value is used if the task exits with any nonzero exit code not listed in the exitCodes or exitCodeRanges collection, with a pre-processing error if the preProcessingError property is not present, or with a file upload error if the fileUploadError property is not present. If you want non-default behaviour on exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges collection."
        }
      },
      "title": "Specifies how the Batch service should respond when the task completes."
    },
    "ExitCodeMapping": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "A process exit code."
        },
        "exitOptions": {
          "$ref": "#/definitions/ExitOptions",
          "title": "How the Batch service should respond if the task exits with this exit code."
        }
      },
      "title": "How the Batch service should respond if a task exits with a particular exit code.",
      "required": [
        "code",
        "exitOptions"
      ]
    },
    "ExitCodeRangeMapping": {
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32",
          "title": "The first exit code in the range."
        },
        "end": {
          "type": "integer",
          "format": "int32",
          "title": "The last exit code in the range."
        },
        "exitOptions": {
          "$ref": "#/definitions/ExitOptions",
          "title": "How the Batch service should respond if the task exits with an exit code in the range start to end (inclusive)."
        }
      },
      "title": "A range of exit codes and how the Batch service should respond to exit codes within that range.",
      "required": [
        "start",
        "end",
        "exitOptions"
      ]
    },
    "ExitOptions": {
      "properties": {
        "jobAction": {
          "type": "string",
          "title": "An action to take on the job containing the task, if the task completes with the given exit condition and the job's onTaskFailed property is 'performExitOptionsJobAction'.",
          "description": "Values are:\n\n none - Take no action.\n disable - Disable the job. This is equivalent to calling the disable job API, with a disableTasks value of requeue.\n terminate - Terminate the job. The terminateReason in the job's executionInfo is set to \"TaskFailed\". The default is none for exit code 0 and terminate for all other exit conditions.\n\n If the job's onTaskFailed property is noAction, then specifying this property returns an error and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
          "enum": [
            "none",
            "disable",
            "terminate"
          ],
          "x-ms-enum": {
            "name": "JobAction",
            "modelAsString": false
          }
        },
        "dependencyAction": {
          "type": "string",
          "title": "An action that the Batch service performs on tasks that depend on this task.",
          "description": "Values are:\n\n satisfy - Satisfy the task's dependencies.\n block - Block the task's dependencies.\n\n The default is 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's usesTaskDependencies property is set to false, then specifying the dependencyAction property returns an erro and the add task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400  (Bad Request).",
          "enum": [
            "satisfy",
            "block"
          ],
          "x-ms-enum": {
            "name": "DependencyAction",
            "modelAsString": false
          }
        }
      },
      "title": "Specifies how the Batch service responds to a particular exit condition."
    },
    "AutoUserSpecification": {
      "properties": {
        "scope": {
          "type": "string",
          "title": "The scope for the auto user",
          "description": "Values are:\n\n pool - specifies that the task runs as the common auto user account which is created on every node in a pool.\n task - specifies that the service should create a new user for the task.\n The default value is task.",
          "enum": [
            "task",
            "pool"
          ],
          "x-ms-enum": {
            "name": "AutoUserScope",
            "modelAsString": false
          }
        },
        "elevationLevel": {
          "title": "The elevation level of the auto user.",
          "description": "nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.",
          "$ref": "#/definitions/ElevationLevel"
        }
      },
      "title": "Specifies the parameters for the auto user that runs a task on the Batch service."
    },
    "UserIdentity": {
      "properties": {
        "username": {
          "type": "string",
          "x-ms-client-name": "userName",
          "title": "The name of the user identity under which the task is run.",
          "description": "The userName and autoUser properties are mutually exclusive; you must specify one but not both."
        },
        "autoUser": {
          "$ref": "#/definitions/AutoUserSpecification",
          "title": "The auto user under which the task is run.",
          "description": "The userName and autoUser properties are mutually exclusive; you must specify one but not both."
        }
      },
      "title": "The definition of the user identity under which the task is run.",
      "description": "Specify either the userName or autoUser property, but not both."
    },
    "LinuxUserConfiguration": {
      "properties": {
        "uid": {
          "type": "integer",
          "format": "int32",
          "title": "The user ID of the user account.",
          "description": "The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid."
        },
        "gid": {
          "type": "integer",
          "format": "int32",
          "title": "The group ID for the user account.",
          "description": "The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid."
        },
        "sshPrivateKey": {
          "type": "string",
          "title": "The SSH private key for the user account.",
          "description": "The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done)."
        }
      },
      "title": "Properties used to create a user account on a Linux node."
    },
    "UserAccount": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the user account."
        },
        "password": {
          "type": "string",
          "title": "The password for the user account."
        },
        "elevationLevel": {
          "title": "The elevation level of the user account.",
          "description": "nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.",
          "$ref": "#/definitions/ElevationLevel"
        },
        "linuxUserConfiguration": {
          "title": "The Linux-specific user configuration for the user account.",
          "description": "This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.",
          "$ref": "#/definitions/LinuxUserConfiguration"
        }
      },
      "required": [
        "name",
        "password"
      ],
      "title": "Properties used to create a user used to execute tasks on an Azure Batch node."
    },
    "TaskConstraints": {
      "properties": {
        "maxWallClockTime": {
          "type": "string",
          "format": "duration",
          "title": "The maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.",
          "description": "If this is not specified, there is no time limit on how long the task may run."
        },
        "retentionTime": {
          "type": "string",
          "format": "duration",
          "title": "The minimum time to retain the task directory on the compute node where it ran, from the time it completes execution. After this time, the Batch service may delete the task directory and all its contents.",
          "description": "The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged."
        },
        "maxTaskRetryCount": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.",
          "description": "Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit."
        }
      },
      "title": "Execution constraints to apply to a task."
    },
    "JobManagerTask": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the Job Manager task within the job.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters."
        },
        "displayName": {
          "type": "string",
          "title": "The display name of the Job Manager task.",
          "description": "It need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "commandLine": {
          "type": "string",
          "title": "The command line of the Job Manager task.",
          "description": "The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux."
        },
        "containerSettings": {
          "$ref": "#/definitions/TaskContainerSettings",
          "title": "The settings for the container under which the Job Manager task runs.",
          "description": "If the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
        },
        "resourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download to the compute node before running the command line.",
          "description": "Files listed under this element are located in the task's working directory."
        },
        "outputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputFile"
          },
          "title": "A list of files that the Batch service will upload from the compute node after running the command line.",
          "description": "For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed."
        },
        "environmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of environment variable settings for the Job Manager task."
        },
        "constraints": {
          "$ref": "#/definitions/TaskConstraints",
          "title": "Constraints that apply to the Job Manager task."
        },
        "killJobOnCompletion": {
          "type": "boolean",
          "title": "Whether completion of the Job Manager task signifies completion of the entire job.",
          "description": "If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false."
        },
        "userIdentity": {
          "$ref": "#/definitions/UserIdentity",
          "title": "The user identity under which the Job Manager task runs.",
          "description": "If omitted, the task runs as a non-administrative user unique to the task."
        },
        "runExclusive": {
          "type": "boolean",
          "title": "Whether the Job Manager task requires exclusive use of the compute node where it runs.",
          "description": "If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "A list of application packages that the Batch service will deploy to the compute node before running the command line.",
          "description": "Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails."
        },
        "authenticationTokenSettings": {
          "title": "The settings for an authentication token that the task can use to perform Batch service operations.",
          "description": "If this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.",
          "$ref": "#/definitions/AuthenticationTokenSettings"
        },
        "allowLowPriorityNode": {
          "type": "boolean",
          "title": "Whether the Job Manager task may run on a low-priority compute node.",
          "description": "The default value is false."
        }
      },
      "required": [
        "id",
        "commandLine"
      ],
      "title": "Specifies details of a Job Manager task.",
      "description": "The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job."
    },
    "JobPreparationTask": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the Job Preparation task within the job.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same ID as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict)."
        },
        "commandLine": {
          "type": "string",
          "title": "The command line of the Job Preparation task.",
          "description": "The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux."
        },
        "containerSettings": {
          "$ref": "#/definitions/TaskContainerSettings",
          "title": "The settings for the container under which the Job Preparation task runs.",
          "description": "When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
        },
        "resourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download to the compute node before running the command line.",
          "description": "Files listed under this element are located in the task's working directory."
        },
        "environmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of environment variable settings for the Job Preparation task."
        },
        "constraints": {
          "$ref": "#/definitions/TaskConstraints",
          "title": "Constraints that apply to the Job Preparation task."
        },
        "waitForSuccess": {
          "type": "boolean",
          "title": "Whether the Batch service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node. A Job Preparation task has completed successfully if it exits with exit code 0.",
          "description": "If true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true."
        },
        "userIdentity": {
          "$ref": "#/definitions/UserIdentity",
          "title": "The user identity under which the Job Preparation task runs.",
          "description": "If omitted, the task runs as a non-administrative user unique to the task on Windows nodes, or a a non-administrative user unique to the pool on Linux nodes."
        },
        "rerunOnNodeRebootAfterSuccess": {
          "type": "boolean",
          "title": "Whether the Batch service should rerun the Job Preparation task after a compute node reboots.",
          "description": "The Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true."
        }
      },
      "required": [
        "commandLine"
      ],
      "title": "A Job Preparation task to run before any tasks of the job on any given compute node.",
      "description": "You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\\shared), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job."
    },
    "JobReleaseTask": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the Job Release task within the job.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other task in the job can have the same ID as the Job Release task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict)."
        },
        "commandLine": {
          "type": "string",
          "title": "The command line of the Job Release task.",
          "description": "The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux."
        },
        "containerSettings": {
          "$ref": "#/definitions/TaskContainerSettings",
          "title": "The settings for the container under which the Job Release task runs.",
          "description": "When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
        },
        "resourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download to the compute node before running the command line.",
          "description": "Files listed under this element are located in the task's working directory."
        },
        "environmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of environment variable settings for the Job Release task."
        },
        "maxWallClockTime": {
          "type": "string",
          "format": "duration",
          "title": "The maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes. You may not specify a timeout longer than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "retentionTime": {
          "type": "string",
          "format": "duration",
          "title": "The minimum time to retain the task directory for the Job Release task on the compute node. After this time, the Batch service may delete the task directory and all its contents.",
          "description": "The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged."
        },
        "userIdentity": {
          "$ref": "#/definitions/UserIdentity",
          "title": "The user identity under which the Job Release task runs.",
          "description": "If omitted, the task runs as a non-administrative user unique to the task."
        }
      },
      "required": [
        "commandLine"
      ],
      "title": "A Job Release task to run on job completion on any compute node where the job has run.",
      "description": "The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool."
    },
    "TaskSchedulingPolicy": {
      "properties": {
        "nodeFillType": {
          "type": "string",
          "title": "How tasks are distributed across compute nodes in a pool. Values are:\n\n pack - As many tasks as possible (maxTasksPerNode) should be assigned to each node in the pool before any tasks are assigned to the next node in the pool.\n spread - Tasks should be assigned evenly across all nodes in the pool.",
          "enum": [
            "spread",
            "pack"
          ],
          "x-ms-enum": {
            "name": "ComputeNodeFillType",
            "modelAsString": false
          }
        }
      },
      "required": [
        "nodeFillType"
      ],
      "title": "Specifies how tasks should be distributed across compute nodes."
    },
    "StartTask": {
      "properties": {
        "commandLine": {
          "type": "string",
          "title": "The command line of the start task.",
          "description": "The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux."
        },
        "containerSettings": {
          "$ref": "#/definitions/TaskContainerSettings",
          "title": "The settings for the container under which the start task runs.",
          "description": "When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
        },
        "resourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download to the compute node before running the command line.",
          "description": "Files listed under this element are located in the task's working directory."
        },
        "environmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of environment variable settings for the start task."
        },
        "userIdentity": {
          "$ref": "#/definitions/UserIdentity",
          "title": "The user identity under which the start task runs.",
          "description": "If omitted, the task runs as a non-administrative user unique to the task."
        },
        "maxTaskRetryCount": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of times the task may be retried.",
          "description": "The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit."
        },
        "waitForSuccess": {
          "type": "boolean",
          "title": "Whether the Batch service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node.",
          "description": "If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false."
        }
      },
      "required": [
        "commandLine"
      ],
      "title": "A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged."
    },
    "CertificateReference": {
      "properties": {
        "thumbprint": {
          "type": "string",
          "title": "The thumbprint of the certificate."
        },
        "thumbprintAlgorithm": {
          "type": "string",
          "title": "The algorithm with which the thumbprint is associated. This must be sha1."
        },
        "storeLocation": {
          "type": "string",
          "title": "The location of the certificate store on the compute node into which to install the certificate.",
          "description": "The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.",
          "enum": [
            "currentUser",
            "localMachine"
          ],
          "x-ms-enum": {
            "name": "CertificateStoreLocation",
            "modelAsString": false
          }
        },
        "storeName": {
          "type": "string",
          "title": "The name of the certificate store on the compute node into which to install the certificate.",
          "description": "This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My."
        },
        "visibility": {
          "type": "array",
          "items": {
            "type": "string",
            "x-nullable": false,
            "enum": [
              "startTask",
              "task",
              "remoteUser"
            ],
            "x-ms-enum": {
              "name": "CertificateVisibility",
              "modelAsString": false
            }
          },
          "title": "Which user accounts on the compute node should have access to the private data of the certificate.",
          "description": "Values are:\n\n starttask - The user account under which the start task is run.\n task - The accounts under which job tasks are run.\n remoteuser - The accounts under which users remotely access the node.\n\n You can specify more than one visibility in this collection. The default is all accounts."
        }
      },
      "required": [
        "thumbprint",
        "thumbprintAlgorithm"
      ],
      "title": "A reference to a certificate to be installed on compute nodes in a pool."
    },
    "MetadataItem": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the metadata item."
        },
        "value": {
          "type": "string",
          "title": "The value of the metadata item."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "title": "A name-value pair associated with a Batch service resource.",
      "description": "The Batch service does not assign any meaning to this metadata; it is solely for the use of user code."
    },
    "PoolSpecification": {
      "properties": {
        "displayName": {
          "type": "string",
          "title": "The display name for the pool.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "vmSize": {
          "type": "string",
          "title": "The size of the virtual machines in the pool. All virtual machines in a pool are the same size.",
          "description": "For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)."
        },
        "cloudServiceConfiguration": {
          "$ref": "#/definitions/CloudServiceConfiguration",
          "title": "The cloud service configuration for the pool.",
          "description": "This property must be specified if the pool needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'."
        },
        "virtualMachineConfiguration": {
          "$ref": "#/definitions/VirtualMachineConfiguration",
          "title": "The virtual machine configuration for the pool.",
          "description": "This property must be specified if the pool needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. If neither is specified then the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "maxTasksPerNode": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of tasks that can run concurrently on a single compute node in the pool.",
          "description": "The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting)."
        },
        "taskSchedulingPolicy": {
          "$ref": "#/definitions/TaskSchedulingPolicy",
          "title": "How tasks are distributed across compute nodes in a pool."
        },
        "resizeTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The timeout for allocation of compute nodes to the pool.",
          "description": "This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "targetDedicatedNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of dedicated compute nodes in the pool.",
          "description": "This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both."
        },
        "targetLowPriorityNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of low-priority compute nodes in the pool.",
          "description": "This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both."
        },
        "enableAutoScale": {
          "type": "boolean",
          "title": "Whether the pool size should automatically adjust over time.",
          "description": "If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The pool automatically resizes according to the formula. The default value is false."
        },
        "autoScaleFormula": {
          "type": "string",
          "title": "The formula for the desired number of compute nodes in the pool.",
          "description": "This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information."
        },
        "autoScaleEvaluationInterval": {
          "type": "string",
          "format": "duration",
          "title": "The time interval at which to automatically adjust the pool size according to the autoscale formula.",
          "description": "The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "enableInterNodeCommunication": {
          "type": "boolean",
          "title": "Whether the pool permits direct communication between nodes.",
          "description": "Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false."
        },
        "networkConfiguration": {
          "$ref": "#/definitions/NetworkConfiguration",
          "title": "The network configuration for the pool."
        },
        "startTask": {
          "$ref": "#/definitions/StartTask",
          "title": "A task to run on each compute node as it joins the pool. The task runs when the node is added to the pool or when the node is restarted."
        },
        "certificateReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateReference"
          },
          "title": "A list of certificates to be installed on each compute node in the pool.",
          "description": "For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "The list of application packages to be installed on each compute node in the pool."
        },
        "applicationLicenses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of application licenses the Batch service will make available on each compute node in the pool.",
          "description": "The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail."
        },
        "userAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAccount"
          },
          "title": "The list of user accounts to be created on each node in the pool."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the pool as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        }
      },
      "required": [
        "vmSize"
      ],
      "title": "Specification for creating a new pool."
    },
    "AutoPoolSpecification": {
      "properties": {
        "autoPoolIdPrefix": {
          "type": "string",
          "title": "A prefix to be added to the unique identifier when a pool is automatically created.",
          "description": "The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long."
        },
        "poolLifetimeOption": {
          "type": "string",
          "title": "The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.",
          "description": "When the pool lifetime is jobSchedule the pool exists for the lifetime of the job schedule. The Batch Service creates the pool when it creates the first job on the schedule. You may apply this option only to job schedules, not to jobs. When the pool lifetime is job the pool exists for the lifetime of the job to which it is dedicated. The Batch service creates the pool when it creates the job. If the 'job' option is applied to a job schedule, the Batch service creates a new auto pool for every job created on the schedule.",
          "enum": [
            "jobSchedule",
            "job"
          ],
          "x-ms-enum": {
            "name": "PoolLifetimeOption",
            "modelAsString": false
          }
        },
        "keepAlive": {
          "type": "boolean",
          "title": "Whether to keep an auto pool alive after its lifetime expires.",
          "description": "If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option."
        },
        "pool": {
          "$ref": "#/definitions/PoolSpecification",
          "title": "The pool specification for the auto pool."
        }
      },
      "required": [
        "poolLifetimeOption"
      ],
      "title": "Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted."
    },
    "PoolInformation": {
      "properties": {
        "poolId": {
          "type": "string",
          "title": "The ID of an existing pool. All the tasks of the job will run on the specified pool.",
          "description": "You must ensure that the pool referenced by this property exists. If the pool does not exist at the time the Batch service tries to schedule a job, no tasks for the job will run until you create a pool with that id. Note that the Batch service will not reject the job request; it will simply not run tasks until the pool exists. You must specify either the pool ID or the auto pool specification, but not both."
        },
        "autoPoolSpecification": {
          "$ref": "#/definitions/AutoPoolSpecification",
          "title": "Characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when the job is submitted.",
          "description": "If auto pool creation fails, the Batch service moves the job to a completed state, and the pool creation error is set in the job's scheduling error property. The Batch service manages the lifetime (both creation and, unless keepAlive is specified, deletion) of the auto pool. Any user actions that affect the lifetime of the auto pool while the job is active will result in unexpected behavior. You must specify either the pool ID or the auto pool specification, but not both."
        }
      },
      "title": "Specifies how a job should be assigned to a pool."
    },
    "JobSpecification": {
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority of jobs created under this schedule.",
          "description": "Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for jobs created under this schedule.",
          "description": "The name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "usesTaskDependencies": {
          "type": "boolean",
          "title": "Whether tasks in the job can define dependencies on each other. The default is false."
        },
        "onAllTasksComplete": {
          "title": "The action the Batch service should take when all tasks in a job created under this schedule are in the completed state.",
          "description": "Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noAction and update the job properties to set onAllTasksComplete to terminateJob once you have finished adding tasks. The default is noAction.",
          "$ref": "#/definitions/OnAllTasksComplete"
        },
        "onTaskFailure": {
          "title": "The action the Batch service should take when any task fails in a job created under this schedule. A task is considered to have failed if it have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error.",
          "description": "The default is noAction.",
          "$ref": "#/definitions/OnTaskFailure"
        },
        "constraints": {
          "$ref": "#/definitions/JobConstraints",
          "title": "The execution constraints for jobs created under this schedule."
        },
        "jobManagerTask": {
          "$ref": "#/definitions/JobManagerTask",
          "title": "The details of a Job Manager task to be launched when a job is started under this schedule.",
          "description": "If the job does not specify a Job Manager task, the user must explicitly add tasks to the job using the Task API. If the job does specify a Job Manager task, the Batch service creates the Job Manager task when the job is created, and will try to schedule the Job Manager task before scheduling other tasks in the job."
        },
        "jobPreparationTask": {
          "$ref": "#/definitions/JobPreparationTask",
          "title": "The Job Preparation task for jobs created under this schedule.",
          "description": "If a job has a Job Preparation task, the Batch service will run the Job Preparation task on a compute node before starting any tasks of that job on that compute node."
        },
        "jobReleaseTask": {
          "$ref": "#/definitions/JobReleaseTask",
          "title": "The Job Release task for jobs created under this schedule.",
          "description": "The primary purpose of the Job Release task is to undo changes to compute nodes made by the Job Preparation task. Example activities include deleting local files, or shutting down services that were started as part of job preparation. A Job Release task cannot be specified without also specifying a Job Preparation task for the job. The Batch service runs the Job Release task on the compute nodes that have run the Job Preparation task."
        },
        "commonEnvironmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of common environment variable settings. These environment variables are set for all tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job Release tasks).",
          "description": "Individual tasks can override an environment setting specified here by specifying the same setting name with a different value."
        },
        "poolInfo": {
          "$ref": "#/definitions/PoolInformation",
          "title": "The pool on which the Batch service runs the tasks of jobs created under this schedule."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with each job created under this schedule as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        }
      },
      "required": [
        "poolInfo"
      ],
      "title": "Specifies details of the jobs to be created on a schedule."
    },
    "RecentJob": {
      "properties": {
        "id": {
          "type": "string",
          "title": "The ID of the job."
        },
        "url": {
          "type": "string",
          "title": "The URL of the job."
        }
      },
      "title": "Information about the most recent job to run under the job schedule."
    },
    "JobScheduleExecutionInformation": {
      "properties": {
        "nextRunTime": {
          "type": "string",
          "format": "date-time",
          "title": "The next time at which a job will be created under this schedule.",
          "description": "This property is meaningful only if the schedule is in the active state when the time comes around. For example, if the schedule is disabled, no job will be created at nextRunTime unless the job is enabled before then."
        },
        "recentJob": {
          "$ref": "#/definitions/RecentJob",
          "title": "Information about the most recent job under the job schedule.",
          "description": "This property is present only if the at least one job has run under the schedule."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the schedule ended.",
          "description": "This property is set only if the job schedule is in the completed state."
        }
      },
      "title": "Contains information about jobs that have been and will be run under a job schedule."
    },
    "JobScheduleStatistics": {
      "properties": {
        "url": {
          "type": "string",
          "title": "The URL of the statistics."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the time range covered by the statistics."
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime."
        },
        "userCPUTime": {
          "type": "string",
          "format": "duration",
          "title": "The total user mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in all jobs created under the schedule."
        },
        "kernelCPUTime": {
          "type": "string",
          "format": "duration",
          "title": "The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all tasks in all jobs created under the schedule."
        },
        "wallClockTime": {
          "type": "string",
          "format": "duration",
          "title": "The total wall clock time of all the tasks in all the jobs created under the schedule.",
          "description": "The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If a task was retried, this includes the wall clock time of all the task retries."
        },
        "readIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk read operations made by all tasks in all jobs created under the schedule."
        },
        "writeIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk write operations made by all tasks in all jobs created under the schedule."
        },
        "readIOGiB": {
          "type": "number",
          "format": "double",
          "title": "The total gibibytes read from disk by all tasks in all jobs created under the schedule."
        },
        "writeIOGiB": {
          "type": "number",
          "format": "double",
          "title": "The total gibibytes written to disk by all tasks in all jobs created under the schedule."
        },
        "numSucceededTasks": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of tasks successfully completed during the given time range in jobs created under the schedule. A task completes successfully if it returns exit code 0."
        },
        "numFailedTasks": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of tasks that failed during the given time range in jobs created under the schedule. A task fails if it exhausts its maximum retry count without returning exit code 0."
        },
        "numTaskRetries": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of retries during the given time range on all tasks in all jobs created under the schedule."
        },
        "waitTime": {
          "type": "string",
          "format": "duration",
          "title": "The total wait time of all tasks in all jobs created under the schedule. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)",
          "description": "This value is only reported in the account lifetime statistics; it is not included in the job statistics."
        }
      },
      "required": [
        "url",
        "startTime",
        "lastUpdateTime",
        "userCPUTime",
        "kernelCPUTime",
        "wallClockTime",
        "readIOps",
        "writeIOps",
        "readIOGiB",
        "writeIOGiB",
        "numSucceededTasks",
        "numFailedTasks",
        "numTaskRetries",
        "waitTime"
      ],
      "title": "Resource usage statistics for a job schedule."
    },
    "CloudJobSchedule": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the schedule within the account."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the schedule."
        },
        "url": {
          "type": "string",
          "title": "The URL of the job schedule."
        },
        "eTag": {
          "type": "string",
          "title": "The ETag of the job schedule.",
          "description": "This is an opaque string. You can use it to detect whether the job schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime."
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "title": "The last modified time of the job schedule.",
          "description": "This is the last time at which the schedule level data, such as the job specification or recurrence information, changed. It does not factor in job-level changes such as new jobs being created or jobs changing state."
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "title": "The creation time of the job schedule."
        },
        "state": {
          "title": "The current state of the job schedule.",
          "$ref": "#/definitions/JobScheduleState"
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the job schedule entered the current state."
        },
        "previousState": {
          "title": "The previous state of the job schedule.",
          "description": "This property is not present if the job schedule is in its initial active state.",
          "$ref": "#/definitions/JobScheduleState"
        },
        "previousStateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the job schedule entered its previous state.",
          "description": "This property is not present if the job schedule is in its initial active state."
        },
        "schedule": {
          "$ref": "#/definitions/Schedule",
          "title": "The schedule according to which jobs will be created."
        },
        "jobSpecification": {
          "$ref": "#/definitions/JobSpecification",
          "title": "The details of the jobs to be created on this schedule."
        },
        "executionInfo": {
          "$ref": "#/definitions/JobScheduleExecutionInformation",
          "title": "Information about jobs that have been and will be run under this schedule."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the schedule as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        },
        "stats": {
          "$ref": "#/definitions/JobScheduleStatistics",
          "title": "The lifetime resource usage statistics for the job schedule."
        }
      },
      "title": "A job schedule that allows recurring jobs by specifying when to run jobs and a specification used to create each job."
    },
    "JobScheduleAddParameter": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the schedule within the account.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case)."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the schedule.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "schedule": {
          "$ref": "#/definitions/Schedule",
          "title": "The schedule according to which jobs will be created."
        },
        "jobSpecification": {
          "$ref": "#/definitions/JobSpecification",
          "title": "The details of the jobs to be created on this schedule."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the schedule as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        }
      },
      "required": [
        "id",
        "schedule",
        "jobSpecification"
      ],
      "title": "A job schedule that allows recurring jobs by specifying when to run jobs and a specification used to create each job."
    },
    "CloudJobScheduleListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudJobSchedule"
          },
          "title": "The list of job schedules."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the job schedules in an account."
    },
    "JobSchedulingError": {
      "properties": {
        "category": {
          "title": "The category of the job scheduling error.",
          "$ref": "#/definitions/ErrorCategory"
        },
        "code": {
          "type": "string",
          "title": "An identifier for the job scheduling error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "title": "A message describing the job scheduling error, intended to be suitable for display in a user interface."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          },
          "title": "A list of additional error details related to the scheduling error."
        }
      },
      "required": [
        "category"
      ],
      "title": "An error encountered by the Batch service when scheduling a job."
    },
    "JobExecutionInformation": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the job.",
          "description": "This is the time at which the job was created."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The completion time of the job.",
          "description": "This property is set only if the job is in the completed state."
        },
        "poolId": {
          "type": "string",
          "title": "The ID of the pool to which this job is assigned.",
          "description": "This element contains the actual pool where the job is assigned. When you get job details from the service, they also contain a poolInfo element, which contains the pool configuration data from when the job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the job ran on an auto pool, and this property contains the ID of that auto pool."
        },
        "schedulingError": {
          "$ref": "#/definitions/JobSchedulingError",
          "title": "Details of any error encountered by the service in starting the job.",
          "description": "This property is not set if there was no error starting the job."
        },
        "terminateReason": {
          "type": "string",
          "title": "A string describing the reason the job ended.",
          "description": "This property is set only if the job is in the completed state. If the Batch service terminates the job, it sets the reason as follows: JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job's onAllTasksComplete attribute is set to terminateJob, and all tasks in the job are complete. TaskFailed - the job's onTaskFailure attribute is set to performExitOptionsJobAction, and a task in the job failed with an exit condition that specified a jobAction of terminateJob. Any other string is a user-defined reason specified in a call to the 'Terminate a job' operation."
        }
      },
      "required": [
        "startTime"
      ],
      "title": "Contains information about the execution of a job in the Azure Batch service."
    },
    "CloudJob": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the job within the account.",
          "description": "The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case)."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the job."
        },
        "usesTaskDependencies": {
          "type": "boolean",
          "title": "Whether tasks in the job can define dependencies on each other. The default is false."
        },
        "url": {
          "type": "string",
          "title": "The URL of the job."
        },
        "eTag": {
          "type": "string",
          "title": "The ETag of the job.",
          "description": "This is an opaque string. You can use it to detect whether the job has changed between requests. In particular, you can be pass the ETag when updating a job to specify that your changes should take effect only if nobody else has modified the job in the meantime."
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "title": "The last modified time of the job.",
          "description": "This is the last time at which the job level data, such as the job state or priority, changed. It does not factor in task-level changes such as adding new tasks or tasks changing state."
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "title": "The creation time of the job."
        },
        "state": {
          "title": "The current state of the job.",
          "$ref": "#/definitions/JobState"
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the job entered its current state."
        },
        "previousState": {
          "title": "The previous state of the job.",
          "description": "This property is not set if the job is in its initial Active state.",
          "$ref": "#/definitions/JobState"
        },
        "previousStateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the job entered its previous state.",
          "description": "This property is not set if the job is in its initial Active state."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority of the job.",
          "description": "Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0."
        },
        "constraints": {
          "$ref": "#/definitions/JobConstraints",
          "title": "The execution constraints for the job."
        },
        "jobManagerTask": {
          "$ref": "#/definitions/JobManagerTask",
          "title": "Details of a Job Manager task to be launched when the job is started."
        },
        "jobPreparationTask": {
          "$ref": "#/definitions/JobPreparationTask",
          "title": "The Job Preparation task.",
          "description": "The Job Preparation task is a special task run on each node before any other task of the job."
        },
        "jobReleaseTask": {
          "$ref": "#/definitions/JobReleaseTask",
          "title": "The Job Release task.",
          "description": "The Job Release task is a special task run at the end of the job on each node that has run any other task of the job."
        },
        "commonEnvironmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "The list of common environment variable settings. These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).",
          "description": "Individual tasks can override an environment setting specified here by specifying the same setting name with a different value."
        },
        "poolInfo": {
          "$ref": "#/definitions/PoolInformation",
          "title": "The pool settings associated with the job."
        },
        "onAllTasksComplete": {
          "title": "The action the Batch service should take when all tasks in the job are in the completed state.",
          "description": "noAction - do nothing. The job remains active unless terminated or disabled by some other means. terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'. The default is noAction.",
          "$ref": "#/definitions/OnAllTasksComplete"
        },
        "onTaskFailure": {
          "title": "The action the Batch service should take when any task in the job fails.",
          "description": "A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. noAction - do nothing. performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.) The default is noAction.",
          "$ref": "#/definitions/OnTaskFailure"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the job as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        },
        "executionInfo": {
          "$ref": "#/definitions/JobExecutionInformation",
          "title": "The execution information for the job."
        },
        "stats": {
          "$ref": "#/definitions/JobStatistics",
          "title": "Resource usage statistics for the entire lifetime of the job."
        }
      },
      "title": "An Azure Batch job."
    },
    "JobAddParameter": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the job within the account.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case)."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the job.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority of the job.",
          "description": "Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0."
        },
        "constraints": {
          "$ref": "#/definitions/JobConstraints",
          "description": "The execution constraints for the job."
        },
        "jobManagerTask": {
          "$ref": "#/definitions/JobManagerTask",
          "title": "Details of a Job Manager task to be launched when the job is started.",
          "description": "If the job does not specify a Job Manager task, the user must explicitly add tasks to the job. If the job does specify a Job Manager task, the Batch service creates the Job Manager task when the job is created, and will try to schedule the Job Manager task before scheduling other tasks in the job. The Job Manager task's typical purpose is to control and/or monitor job execution, for example by deciding what additional tasks to run, determining when the work is complete, etc. (However, a Job Manager task is not restricted to these activities - it is a fully-fledged task in the system and perform whatever actions are required for the job.) For example, a Job Manager task might download a file specified as a parameter, analyze the contents of that file and submit additional tasks based on those contents."
        },
        "jobPreparationTask": {
          "$ref": "#/definitions/JobPreparationTask",
          "title": "The Job Preparation task.",
          "description": "If a job has a Job Preparation task, the Batch service will run the Job Preparation task on a compute node before starting any tasks of that job on that compute node."
        },
        "jobReleaseTask": {
          "$ref": "#/definitions/JobReleaseTask",
          "title": "The Job Release task.",
          "description": "A Job Release task cannot be specified without also specifying a Job Preparation task for the job. The Batch service runs the Job Release task on the compute nodes that have run the Job Preparation task. The primary purpose of the Job Release task is to undo changes to compute nodes made by the Job Preparation task. Example activities include deleting local files, or shutting down services that were started as part of job preparation."
        },
        "commonEnvironmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "The list of common environment variable settings. These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).",
          "description": "Individual tasks can override an environment setting specified here by specifying the same setting name with a different value."
        },
        "poolInfo": {
          "$ref": "#/definitions/PoolInformation",
          "title": "The pool on which the Batch service runs the job's tasks."
        },
        "onAllTasksComplete": {
          "title": "The action the Batch service should take when all tasks in the job are in the completed state.",
          "description": "Note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noAction and update the job properties to set onAllTasksComplete to terminateJob once you have finished adding tasks. Permitted values are: noAction - do nothing. The job remains active unless terminated or disabled by some other means. terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'. The default is noAction.",
          "$ref": "#/definitions/OnAllTasksComplete"
        },
        "onTaskFailure": {
          "title": "The action the Batch service should take when any task in the job fails.",
          "description": "A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. noAction - do nothing. performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.) The default is noAction.",
          "$ref": "#/definitions/OnTaskFailure"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the job as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        },
        "usesTaskDependencies": {
          "type": "boolean",
          "title": "Whether tasks in the job can define dependencies on each other. The default is false."
        }
      },
      "required": [
        "id",
        "poolInfo"
      ],
      "title": "An Azure Batch job to add."
    },
    "CloudJobListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudJob"
          },
          "title": "The list of jobs."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the jobs in an account."
    },
    "TaskContainerExecutionInformation": {
      "properties": {
        "containerId": {
          "type": "string",
          "title": "The ID of the container."
        },
        "state": {
          "type": "string",
          "title": "The state of the container.",
          "description": "This is the state of the container according to the Docker service. It is equivalent to the status field returned by \"docker inspect\"."
        },
        "error": {
          "type": "string",
          "title": "Detailed error information about the container.",
          "description": "This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by \"docker inspect\"."
        }
      },
      "title": "Contains information about the container which a task is executing."
    },
    "TaskFailureInformation": {
      "properties": {
        "category": {
          "title": "The category of the task error.",
          "$ref": "#/definitions/ErrorCategory"
        },
        "code": {
          "type": "string",
          "title": "An identifier for the task error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "title": "A message describing the task error, intended to be suitable for display in a user interface."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          },
          "title": "A list of additional details related to the error."
        }
      },
      "required": [
        "category"
      ],
      "title": "Information about a task failure."
    },
    "JobPreparationTaskExecutionInformation": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the task started running.",
          "description": "If the task has been restarted or retried, this is the most recent time at which the task started running."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the Job Preparation task completed.",
          "description": "This property is set only if the task is in the Completed state."
        },
        "state": {
          "type": "string",
          "title": "The current state of the Job Preparation task on the compute node.",
          "description": "Values are:\n\n running - the task is currently running (including retrying).\n completed - the task has exited with exit code 0, or the task has exhausted its retry limit, or the Batch service was unable to start the task due to task preparation errors (such as resource file download failures).",
          "enum": [
            "running",
            "completed"
          ],
          "x-ms-enum": {
            "name": "JobPreparationTaskState",
            "modelAsString": false
          }
        },
        "taskRootDirectory": {
          "type": "string",
          "title": "The root directory of the Job Preparation task on the compute node. You can use this path to retrieve files created by the task, such as log files."
        },
        "taskRootDirectoryUrl": {
          "type": "string",
          "title": "The URL to the root directory of the Job Preparation task on the compute node."
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exit code of the program specified on the task command line.",
          "description": "This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated."
        },
        "containerInfo": {
          "$ref": "#/definitions/TaskContainerExecutionInformation",
          "title": "Information about the container under which the task is executing.",
          "description": "This property is set only if the task runs in a container context."
        },
        "failureInfo": {
          "$ref": "#/definitions/TaskFailureInformation",
          "title": "Information describing the task failure, if any.",
          "description": "This property is set only if the task is in the completed state and encountered a failure."
        },
        "retryCount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of times the task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.",
          "description": "Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints."
        },
        "lastRetryTime": {
          "type": "string",
          "format": "date-time",
          "title": "The most recent time at which a retry of the Job Preparation task started running.",
          "description": "This property is set only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not."
        },
        "result": {
          "$ref": "#/definitions/TaskExecutionResult",
          "title": "The result of the task execution.",
          "description": "If the value is 'failed', then the details of the failure can be found in the failureInfo property."
        }
      },
      "required": [
        "startTime",
        "retryCount",
        "state"
      ],
      "title": "Contains information about the execution of a Job Preparation task on a compute node."
    },
    "JobReleaseTaskExecutionInformation": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the task started running.",
          "description": "If the task has been restarted or retried, this is the most recent time at which the task started running."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the Job Release task completed.",
          "description": "This property is set only if the task is in the Completed state."
        },
        "state": {
          "type": "string",
          "title": "The current state of the Job Release task on the compute node.",
          "description": "Values are:\n\n running - the task is currently running (including retrying).\n completed - the task has exited, or the Batch service was unable to start the task due to task preparation errors (such as resource file download failures).",
          "enum": [
            "running",
            "completed"
          ],
          "x-ms-enum": {
            "name": "JobReleaseTaskState",
            "modelAsString": false
          }
        },
        "taskRootDirectory": {
          "type": "string",
          "title": "The root directory of the Job Release task on the compute node. You can use this path to retrieve files created by the task, such as log files."
        },
        "taskRootDirectoryUrl": {
          "type": "string",
          "title": "The URL to the root directory of the Job Release task on the compute node."
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exit code of the program specified on the task command line.",
          "description": "This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated."
        },
        "containerInfo": {
          "$ref": "#/definitions/TaskContainerExecutionInformation",
          "title": "Information about the container under which the task is executing.",
          "description": "This property is set only if the task runs in a container context."
        },
        "failureInfo": {
          "$ref": "#/definitions/TaskFailureInformation",
          "title": "Information describing the task failure, if any.",
          "description": "This property is set only if the task is in the completed state and encountered a failure."
        },
        "result": {
          "$ref": "#/definitions/TaskExecutionResult",
          "title": "The result of the task execution.",
          "description": "If the value is 'failed', then the details of the failure can be found in the failureInfo property."
        }
      },
      "required": [
        "startTime",
        "state"
      ],
      "title": "Contains information about the execution of a Job Release task on a compute node."
    },
    "JobPreparationAndReleaseTaskExecutionInformation": {
      "properties": {
        "poolId": {
          "type": "string",
          "title": "The ID of the pool containing the compute node to which this entry refers."
        },
        "nodeId": {
          "type": "string",
          "title": "The ID of the compute node to which this entry refers."
        },
        "nodeUrl": {
          "type": "string",
          "title": "The URL of the compute node to which this entry refers."
        },
        "jobPreparationTaskExecutionInfo": {
          "$ref": "#/definitions/JobPreparationTaskExecutionInformation",
          "title": "Information about the execution status of the Job Preparation task on this compute node."
        },
        "jobReleaseTaskExecutionInfo": {
          "$ref": "#/definitions/JobReleaseTaskExecutionInformation",
          "title": "Information about the execution status of the Job Release task on this compute node.",
          "description": "This property is set only if the Job Release task has run on the node."
        }
      },
      "title": "The status of the Job Preparation and Job Release tasks on a compute node."
    },
    "CloudJobListPreparationAndReleaseTaskStatusResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobPreparationAndReleaseTaskExecutionInformation"
          },
          "title": "A list of Job Preparation and Job Release task execution information."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the status of the Job Preparation and Job Release tasks for a job."
    },
    "TaskCounts": {
      "properties": {
        "active": {
          "type": "integer",
          "format": "int32",
          "title": "The number of tasks in the active state."
        },
        "running": {
          "type": "integer",
          "format": "int32",
          "title": "The number of tasks in the running or preparing state."
        },
        "completed": {
          "type": "integer",
          "format": "int32",
          "title": "The number of tasks in the completed state."
        },
        "succeeded": {
          "type": "integer",
          "format": "int32",
          "title": "The number of tasks which succeeded. A task succeeds if its result (found in the executionInfo property) is 'success'."
        },
        "failed": {
          "type": "integer",
          "format": "int32",
          "title": "The number of tasks which failed. A task fails if its result (found in the executionInfo property) is 'failure'."
        },
        "validationStatus": {
          "type": "string",
          "title": "Whether the task counts have been validated.",
          "description": "If the validationStatus is unvalidated, then the Batch service has not been able to check state counts against the task states as reported in the List Tasks API. The validationStatus may be unvalidated if the job contains more than 200,000 tasks.",
          "enum": [
            "validated",
            "unvalidated"
          ],
          "x-ms-enum": {
            "name": "TaskCountValidationStatus",
            "modelAsString": false
          }
        }
      },
      "required": [
        "active",
        "running",
        "completed",
        "succeeded",
        "failed",
        "validationStatus"
      ],
      "title": "The task counts for a job."
    },
    "AutoScaleRunError": {
      "properties": {
        "code": {
          "type": "string",
          "title": "An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "title": "A message describing the autoscale error, intended to be suitable for display in a user interface."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          },
          "title": "A list of additional error details related to the autoscale error."
        }
      },
      "title": "An error that occurred when executing or evaluating a pool autoscale formula."
    },
    "AutoScaleRun": {
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the autoscale formula was last evaluated."
        },
        "results": {
          "type": "string",
          "title": "The final values of all variables used in the evaluation of the autoscale formula.",
          "description": "Each variable value is returned in the form $variable=value, and variables are separated by semicolons."
        },
        "error": {
          "$ref": "#/definitions/AutoScaleRunError",
          "title": "Details of the error encountered evaluating the autoscale formula on the pool, if the evaluation was unsuccessful."
        }
      },
      "required": [
        "timestamp"
      ],
      "title": "The results and errors from an execution of a pool autoscale formula."
    },
    "ResizeError": {
      "properties": {
        "code": {
          "type": "string",
          "title": "An identifier for the pool resize error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "title": "A message describing the pool resize error, intended to be suitable for display in a user interface."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          },
          "title": "A list of additional error details related to the pool resize error."
        }
      },
      "title": "An error that occurred when resizing a pool."
    },
    "CloudServiceConfiguration": {
      "properties": {
        "osFamily": {
          "type": "string",
          "title": "The Azure Guest OS family to be installed on the virtual machines in the pool.",
          "description": "Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases)."
        },
        "targetOSVersion": {
          "type": "string",
          "title": "The Azure Guest OS version to be installed on the virtual machines in the pool.",
          "description": "The default value is * which specifies the latest operating system version for the specified OS family."
        },
        "currentOSVersion": {
          "type": "string",
          "readOnly": true,
          "title": "The Azure Guest OS Version currently installed on the virtual machines in the pool.",
          "description": "This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion."
        }
      },
      "required": [
        "osFamily"
      ],
      "title": "The configuration for nodes in a pool based on the Azure Cloud Services platform."
    },
    "ImageReference": {
      "properties": {
        "publisher": {
          "type": "string",
          "title": "The publisher of the Azure Virtual Machines Marketplace image.",
          "description": "For example, Canonical or MicrosoftWindowsServer."
        },
        "offer": {
          "type": "string",
          "title": "The offer type of the Azure Virtual Machines Marketplace image.",
          "description": "For example, UbuntuServer or WindowsServer."
        },
        "sku": {
          "type": "string",
          "title": "The SKU of the Azure Virtual Machines Marketplace image.",
          "description": "For example, 14.04.0-LTS or 2012-R2-Datacenter."
        },
        "version": {
          "type": "string",
          "title": "The version of the Azure Virtual Machines Marketplace image.",
          "description": "A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'."
        },
        "virtualMachineImageId": {
          "type": "string",
          "title": "The ARM resource identifier of the virtual machine image. Computes nodes of the pool will be created using this custom image. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}",
          "description": "This property is mutually exclusive with other ImageReference properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration."
        }
      },
      "title": "A reference to an Azure Virtual Machines Marketplace image or a custom Azure Virtual Machine image. To get the list of all Azure Marketplace image references verified by Azure Batch, see the 'List node agent SKUs' operation."
    },
    "OSDisk": {
      "properties": {
        "caching": {
          "title": "The type of caching to enable for the OS disk.",
          "description": "Values are:\n\n none - The caching mode for the disk is not enabled.\n readOnly - The caching mode for the disk is read only.\n readWrite - The caching mode for the disk is read and write.\n\n The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.",
          "$ref": "#/definitions/CachingType"
        }
      },
      "title": "Settings for the operating system disk of the virtual machine."
    },
    "WindowsConfiguration": {
      "properties": {
        "enableAutomaticUpdates": {
          "type": "boolean",
          "title": "Whether automatic updates are enabled on the virtual machine.",
          "description": "If omitted, the default value is true."
        }
      },
      "title": "Windows operating system settings to apply to the virtual machine."
    },
    "DataDisk": {
      "properties": {
        "lun": {
          "type": "integer",
          "format": "int32",
          "title": "The logical unit number.",
          "description": "The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun."
        },
        "caching": {
          "$ref": "#/definitions/CachingType",
          "title": "The type of caching to be enabled for the data disks.",
          "description": "Values are:\n\n none - The caching mode for the disk is not enabled.\n readOnly - The caching mode for the disk is read only.\n readWrite - The caching mode for the disk is read and write.\n\n The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/."
        },
        "diskSizeGB": {
          "type": "integer",
          "format": "int32",
          "title": "The initial disk size in gigabytes."
        },
        "storageAccountType": {
          "title": "The storage account type to be used for the data disk.",
          "description": "If omitted, the default is \"Standard_LRS\". Values are:\n\n Standard_LRS - The data disk should use standard locally redundant storage.\n Premium_LRS - The data disk should use premium locally redundant storage.",
          "$ref": "#/definitions/StorageAccountType"
        }
      },
      "required": [
        "lun",
        "diskSizeGB"
      ],
      "title": "Settings which will be used by the data disks associated to compute nodes in the pool."
    },
    "StorageAccountType": {
      "type": "string",
      "title": "The storage account type for use in creating data disks.",
      "enum": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "x-ms-enum": {
        "name": "StorageAccountType",
        "modelAsString": false
      }
    },
    "CachingType": {
      "type": "string",
      "title": "The type of caching to enable for the disk.",
      "description": "Values are:\n\n none - The caching mode for the disk is not enabled.\n readOnly - The caching mode for the disk is read only.\n readWrite - The caching mode for the disk is read and write.\n\n The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.",
      "enum": [
        "none",
        "readOnly",
        "readWrite"
      ],
      "x-ms-enum": {
        "name": "CachingType",
        "modelAsString": false
      }
    },
    "VirtualMachineConfiguration": {
      "properties": {
        "imageReference": {
          "$ref": "#/definitions/ImageReference",
          "title": "A reference to the Azure Virtual Machines Marketplace image or the custom Virtual Machine image to use."
        },
        "osDisk": {
          "$ref": "#/definitions/OSDisk",
          "title": "Settings for the operating system disk of the Virtual Machine."
        },
        "nodeAgentSKUId": {
          "type": "string",
          "title": "The SKU of the Batch node agent to be provisioned on compute nodes in the pool.",
          "description": "The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation."
        },
        "windowsConfiguration": {
          "$ref": "#/definitions/WindowsConfiguration",
          "title": "Windows operating system settings on the virtual machine.",
          "description": "This property must not be specified if the imageReference or osDisk property specifies a Linux OS image."
        },
        "dataDisks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataDisk"
          },
          "title": "The configuration for data disks attached to the comptue nodes in the pool.",
          "description": "This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. This cannot be updated."
        },
        "licenseType": {
          "type": "string",
          "title": "The type of on-premises license to be used when deploying the operating system.",
          "description": "This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:\n\n Windows_Server - The on-premises license is for Windows Server.\n Windows_Client - The on-premises license is for Windows Client.\n"
        },
        "containerConfiguration": {
          "$ref": "#/definitions/ContainerConfiguration",
          "title": "The container configuration for the pool.",
          "description": "If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it."
        }
      },
      "required": [
        "nodeAgentSKUId",
        "imageReference"
      ],
      "title": "The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure."
    },
    "ContainerRegistry": {
      "properties": {
        "registryServer": {
          "type": "string",
          "title": "The registry URL.",
          "description": "If omitted, the default is \"docker.io\"."
        },
        "username": {
          "type": "string",
          "x-ms-client-name": "userName",
          "title": "The user name to log into the registry server."
        },
        "password": {
          "type": "string",
          "title": "The password to log into the registry server."
        }
      },
      "required": [
        "username",
        "password"
      ],
      "title": "A private container registry."
    },
    "ContainerConfiguration": {
      "properties": {
        "type": {
          "type": "string",
          "title": "The container technology to be used.",
          "description": "Values are:\n\n docker - Docker will be used to launch the containers.",
          "enum": [
            "docker"
          ],
          "x-ms-enum": {
            "name": "ContainerType",
            "modelAsString": false
          }
        },
        "containerImageNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The collection of container image names.",
          "description": "This is the full image reference, as would be specified to \"docker pull\". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry."
        },
        "containerRegistries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerRegistry"
          },
          "title": "Additional private registries from which containers can be pulled.",
          "description": "If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here."
        }
      },
      "required": [
        "type"
      ],
      "title": "The configuration for container-enabled pools."
    },
    "NetworkConfiguration": {
      "properties": {
        "subnetId": {
          "type": "string",
          "title": "The ARM resource identifier of the virtual network subnet which the compute nodes of the pool will join. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.",
          "description": "The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration",
          "externalDocs": {
            "url": "https://azure.microsoft.com/en-us/documentation/articles/role-based-access-built-in-roles/#classic-virtual-machine-contributor",
            "description": "Setting up RBAC for Azure Batch VNETs"
          }
        },
        "endpointConfiguration": {
          "$ref": "#/definitions/PoolEndpointConfiguration",
          "title": "The configuration for endpoints on compute nodes in the Batch pool.",
          "description": "Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property."
        }
      },
      "description": "The network configuration for a pool."
    },
    "CloudPool": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the pool within the account.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case)."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the pool.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "url": {
          "type": "string",
          "title": "The URL of the pool."
        },
        "eTag": {
          "type": "string",
          "title": "The ETag of the pool.",
          "description": "This is an opaque string. You can use it to detect whether the pool has changed between requests. In particular, you can be pass the ETag when updating a pool to specify that your changes should take effect only if nobody else has modified the pool in the meantime."
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "title": "The last modified time of the pool.",
          "description": "This is the last time at which the pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a compute node changing state."
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "title": "The creation time of the pool."
        },
        "state": {
          "type": "string",
          "title": "The current state of the pool.",
          "description": "Values are:\n\n active - The pool is available to run tasks subject to the availability of compute nodes.\n deleting - The user has requested that the pool be deleted, but the delete operation has not yet completed.\n upgrading - The user has requested that the operating system of the pool's nodes be upgraded, but the upgrade operation has not yet completed (that is, some nodes in the pool have not yet been upgraded). While upgrading, the pool may be able to run tasks (with reduced capacity) but this is not guaranteed.",
          "enum": [
            "active",
            "deleting",
            "upgrading"
          ],
          "x-ms-enum": {
            "name": "PoolState",
            "modelAsString": false
          }
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the pool entered its current state."
        },
        "allocationState": {
          "type": "string",
          "title": "Whether the pool is resizing.",
          "description": "Values are:\n\n steady - The pool is not resizing. There are no changes to the number of nodes in the pool in progress. A pool enters this state when it is created and when no operations are being performed on the pool to change the number of dedicated nodes.\n resizing - The pool is resizing; that is, compute nodes are being added to or removed from the pool.\n stopping - The pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.",
          "enum": [
            "steady",
            "resizing",
            "stopping"
          ],
          "x-ms-enum": {
            "name": "AllocationState",
            "modelAsString": false
          }
        },
        "allocationStateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the pool entered its current allocation state."
        },
        "vmSize": {
          "type": "string",
          "title": "The size of virtual machines in the pool. All virtual machines in a pool are the same size.",
          "description": "For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)."
        },
        "cloudServiceConfiguration": {
          "$ref": "#/definitions/CloudServiceConfiguration",
          "title": "The cloud service configuration for the pool.",
          "description": "This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'."
        },
        "virtualMachineConfiguration": {
          "$ref": "#/definitions/VirtualMachineConfiguration",
          "title": "The virtual machine configuration for the pool.",
          "description": "This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified."
        },
        "resizeTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The timeout for allocation of compute nodes to the pool.",
          "description": "This is the timeout for the most recent resize operation. (The initial sizing when the pool is created counts as a resize.) The default value is 15 minutes."
        },
        "resizeErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResizeError"
          },
          "title": "A list of errors encountered while performing the last resize on the pool.",
          "description": "This property is set only if one or more errors occurred during the last pool resize, and only when the pool allocationState is Steady."
        },
        "currentDedicatedNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The number of dedicated compute nodes currently in the pool."
        },
        "currentLowPriorityNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The number of low-priority compute nodes currently in the pool.",
          "description": "Low-priority compute nodes which have been preempted are included in this count."
        },
        "targetDedicatedNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of dedicated compute nodes in the pool."
        },
        "targetLowPriorityNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of low-priority compute nodes in the pool."
        },
        "enableAutoScale": {
          "type": "boolean",
          "title": "Whether the pool size should automatically adjust over time.",
          "description": "If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the pool automatically resizes according to the formula. The default value is false."
        },
        "autoScaleFormula": {
          "type": "string",
          "title": "A formula for the desired number of compute nodes in the pool.",
          "description": "This property is set only if the pool automatically scales, i.e. enableAutoScale is true."
        },
        "autoScaleEvaluationInterval": {
          "type": "string",
          "format": "duration",
          "title": "The time interval at which to automatically adjust the pool size according to the autoscale formula.",
          "description": "This property is set only if the pool automatically scales, i.e. enableAutoScale is true."
        },
        "autoScaleRun": {
          "$ref": "#/definitions/AutoScaleRun",
          "title": "The results and errors from the last execution of the autoscale formula.",
          "description": "This property is set only if the pool automatically scales, i.e. enableAutoScale is true."
        },
        "enableInterNodeCommunication": {
          "type": "boolean",
          "title": "Whether the pool permits direct communication between nodes.",
          "description": "This imposes restrictions on which nodes can be assigned to the pool. Specifying this value can reduce the chance of the requested number of nodes to be allocated in the pool."
        },
        "networkConfiguration": {
          "$ref": "#/definitions/NetworkConfiguration",
          "title": "The network configuration for the pool."
        },
        "startTask": {
          "$ref": "#/definitions/StartTask",
          "title": "A task specified to run on each compute node as it joins the pool."
        },
        "certificateReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateReference"
          },
          "title": "The list of certificates to be installed on each compute node in the pool.",
          "description": "For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "The list of application packages to be installed on each compute node in the pool."
        },
        "applicationLicenses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of application licenses the Batch service will make available on each compute node in the pool.",
          "description": "The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail."
        },
        "maxTasksPerNode": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of tasks that can run concurrently on a single compute node in the pool."
        },
        "taskSchedulingPolicy": {
          "$ref": "#/definitions/TaskSchedulingPolicy",
          "title": "How tasks are distributed across compute nodes in a pool."
        },
        "userAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAccount"
          },
          "title": "The list of user accounts to be created on each node in the pool."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the pool as metadata."
        },
        "stats": {
          "$ref": "#/definitions/PoolStatistics",
          "title": "Utilization and resource usage statistics for the entire lifetime of the pool."
        }
      },
      "title": "A pool in the Azure Batch service."
    },
    "PoolAddParameter": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the pool within the account.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two pool IDs within an account that differ only by case)."
        },
        "displayName": {
          "type": "string",
          "title": "The display name for the pool.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "vmSize": {
          "type": "string",
          "title": "The size of virtual machines in the pool. All virtual machines in a pool are the same size.",
          "description": "For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)."
        },
        "cloudServiceConfiguration": {
          "$ref": "#/definitions/CloudServiceConfiguration",
          "title": "The cloud service configuration for the pool.",
          "description": "This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'."
        },
        "virtualMachineConfiguration": {
          "$ref": "#/definitions/VirtualMachineConfiguration",
          "title": "The virtual machine configuration for the pool.",
          "description": "This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified."
        },
        "resizeTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The timeout for allocation of compute nodes to the pool.",
          "description": "This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "targetDedicatedNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of dedicated compute nodes in the pool.",
          "description": "This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both."
        },
        "targetLowPriorityNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of low-priority compute nodes in the pool.",
          "description": "This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both."
        },
        "enableAutoScale": {
          "type": "boolean",
          "title": "Whether the pool size should automatically adjust over time.",
          "description": "If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the pool automatically resizes according to the formula. The default value is false."
        },
        "autoScaleFormula": {
          "type": "string",
          "title": "A formula for the desired number of compute nodes in the pool.",
          "description": "This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale compute nodes in an Azure Batch pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/)."
        },
        "autoScaleEvaluationInterval": {
          "type": "string",
          "format": "duration",
          "title": "The time interval at which to automatically adjust the pool size according to the autoscale formula.",
          "description": "The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "enableInterNodeCommunication": {
          "type": "boolean",
          "title": "Whether the pool permits direct communication between nodes.",
          "description": "Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false."
        },
        "networkConfiguration": {
          "$ref": "#/definitions/NetworkConfiguration",
          "title": "The network configuration for the pool."
        },
        "startTask": {
          "$ref": "#/definitions/StartTask",
          "title": "A task specified to run on each compute node as it joins the pool.",
          "description": "The task runs when the node is added to the pool or when the node is restarted."
        },
        "certificateReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateReference"
          },
          "title": "The list of certificates to be installed on each compute node in the pool.",
          "description": "For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "The list of application packages to be installed on each compute node in the pool."
        },
        "applicationLicenses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of application licenses the Batch service will make available on each compute node in the pool.",
          "description": "The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail."
        },
        "maxTasksPerNode": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of tasks that can run concurrently on a single compute node in the pool.",
          "description": "The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting)."
        },
        "taskSchedulingPolicy": {
          "$ref": "#/definitions/TaskSchedulingPolicy",
          "title": "How tasks are distributed across compute nodes in a pool."
        },
        "userAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAccount"
          },
          "title": "The list of user accounts to be created on each node in the pool."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the pool as metadata.",
          "description": "The Batch service does not assign any meaning to metadata; it is solely for the use of user code."
        }
      },
      "required": [
        "id",
        "vmSize"
      ],
      "title": "A pool in the Azure Batch service to add."
    },
    "ApplicationListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationSummary"
          },
          "title": "The list of applications available in the account."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the applications available in an account."
    },
    "CloudPoolListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudPool"
          },
          "title": "The list of pools."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the pools in an account."
    },
    "AffinityInformation": {
      "properties": {
        "affinityId": {
          "type": "string",
          "title": "An opaque string representing the location of a compute node or a task that has run previously.",
          "description": "You can pass the affinityId of a compute node to indicate that this task needs to run on that compute node. Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere."
        }
      },
      "required": [
        "affinityId"
      ],
      "title": "A locality hint that can be used by the Batch service to select a compute node on which to start a task."
    },
    "TaskExecutionInformation": {
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the task started running.",
          "description": "'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the task completed.",
          "description": "This property is set only if the task is in the Completed state."
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exit code of the program specified on the task command line.",
          "description": "This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code."
        },
        "containerInfo": {
          "$ref": "#/definitions/TaskContainerExecutionInformation",
          "title": "Information about the container under which the task is executing.",
          "description": "This property is set only if the task runs in a container context."
        },
        "failureInfo": {
          "$ref": "#/definitions/TaskFailureInformation",
          "title": "Information describing the task failure, if any.",
          "description": "This property is set only if the task is in the completed state and encountered a failure."
        },
        "retryCount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of times the task has been retried by the Batch service.",
          "description": "Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints."
        },
        "lastRetryTime": {
          "type": "string",
          "format": "date-time",
          "title": "The most recent time at which a retry of the task started running.",
          "description": "This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not."
        },
        "requeueCount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of times the task has been requeued by the Batch service as the result of a user request.",
          "description": "When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons."
        },
        "lastRequeueTime": {
          "type": "string",
          "format": "date-time",
          "title": "The most recent time at which the task has been requeued by the Batch service as the result of a user request.",
          "description": "This property is set only if the requeueCount is nonzero."
        },
        "result": {
          "$ref": "#/definitions/TaskExecutionResult",
          "title": "The result of the task execution.",
          "description": "If the value is 'failed', then the details of the failure can be found in the failureInfo property."
        }
      },
      "required": [
        "requeueCount",
        "retryCount"
      ],
      "title": "Information about the execution of a task."
    },
    "ComputeNodeInformation": {
      "properties": {
        "affinityId": {
          "type": "string",
          "title": "An identifier for the compute node on which the task ran, which can be passed when adding a task to request that the task be scheduled on this compute node."
        },
        "nodeUrl": {
          "type": "string",
          "title": "The URL of the node on which the task ran. "
        },
        "poolId": {
          "type": "string",
          "title": "The ID of the pool on which the task ran."
        },
        "nodeId": {
          "type": "string",
          "title": "The ID of the node on which the task ran."
        },
        "taskRootDirectory": {
          "type": "string",
          "title": "The root directory of the task on the compute node."
        },
        "taskRootDirectoryUrl": {
          "type": "string",
          "title": "The URL to the root directory of the task on the compute node."
        }
      },
      "title": "Information about the compute node on which a task ran."
    },
    "MultiInstanceSettings": {
      "properties": {
        "numberOfInstances": {
          "type": "integer",
          "format": "int32",
          "title": "The number of compute nodes required by the task.",
          "description": "If omitted, the default is 1."
        },
        "coordinationCommandLine": {
          "type": "string",
          "title": "The command line to run on all the compute nodes to enable them to coordinate when the primary runs the main task command.",
          "description": "A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages."
        },
        "commonResourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download before running the coordination command line.",
          "description": "The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the task working directory, but instead are downloaded to the task root directory (one directory above the working directory)."
        }
      },
      "required": [
        "coordinationCommandLine"
      ],
      "title": "Settings which specify how to run a multi-instance task.",
      "description": "Multi-instance tasks are commonly used to support MPI tasks."
    },
    "TaskStatistics": {
      "properties": {
        "url": {
          "type": "string",
          "title": "The URL of the statistics."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The start time of the time range covered by the statistics."
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime."
        },
        "userCPUTime": {
          "type": "string",
          "format": "duration",
          "title": "The total user mode CPU time (summed across all cores and all compute nodes) consumed by the task."
        },
        "kernelCPUTime": {
          "type": "string",
          "format": "duration",
          "title": "The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by the task."
        },
        "wallClockTime": {
          "type": "string",
          "format": "duration",
          "title": "The total wall clock time of the task.",
          "description": "The wall clock time is the elapsed time from when the task started running on a compute node to when it finished (or to the last time the statistics were updated, if the task had not finished by then). If the task was retried, this includes the wall clock time of all the task retries."
        },
        "readIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk read operations made by the task."
        },
        "writeIOps": {
          "type": "integer",
          "format": "int64",
          "title": "The total number of disk write operations made by the task."
        },
        "readIOGiB": {
          "type": "number",
          "format": "double",
          "title": "The total gibibytes read from disk by the task."
        },
        "writeIOGiB": {
          "type": "number",
          "format": "double",
          "title": "The total gibibytes written to disk by the task."
        },
        "waitTime": {
          "type": "string",
          "format": "duration",
          "title": "The total wait time of the task. The wait time for a task is defined as the elapsed time between the creation of the task and the start of task execution. (If the task is retried due to failures, the wait time is the time to the most recent task execution.)"
        }
      },
      "required": [
        "url",
        "startTime",
        "lastUpdateTime",
        "userCPUTime",
        "kernelCPUTime",
        "wallClockTime",
        "readIOps",
        "writeIOps",
        "readIOGiB",
        "writeIOGiB",
        "waitTime"
      ],
      "title": "Resource usage statistics for a task."
    },
    "TaskDependencies": {
      "properties": {
        "taskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The list of task IDs that this task depends on. All tasks in this list must complete successfully before the dependent task can be scheduled.",
          "description": "The taskIds collection is limited to 64000 characters total (i.e. the combined length of all task IDs). If the taskIds collection exceeds the maximum length, the Add Task request fails with error code TaskDependencyListTooLong. In this case consider using task ID ranges instead."
        },
        "taskIdRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskIdRange"
          },
          "title": "The list of task ID ranges that this task depends on. All tasks in all ranges must complete successfully before the dependent task can be scheduled."
        }
      },
      "title": "Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled."
    },
    "TaskIdRange": {
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32",
          "title": "The first task ID in the range."
        },
        "end": {
          "type": "integer",
          "format": "int32",
          "title": "The last task ID in the range."
        }
      },
      "title": "A range of task IDs that a task can depend on. All tasks with IDs in the range must complete successfully before the dependent task can be scheduled.",
      "description": "The start and end of the range are inclusive. For example, if a range has start 9 and end 12, then it represents tasks '9', '10', '11' and '12'.",
      "required": [
        "start",
        "end"
      ]
    },
    "CloudTask": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the task within the job.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."
        },
        "displayName": {
          "type": "string",
          "title": "A display name for the task.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "url": {
          "type": "string",
          "title": "The URL of the task."
        },
        "eTag": {
          "type": "string",
          "title": "The ETag of the task.",
          "description": "This is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime."
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "title": "The last modified time of the task."
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "title": "The creation time of the task."
        },
        "exitConditions": {
          "$ref": "#/definitions/ExitConditions",
          "description": "How the Batch service should respond when the task completes."
        },
        "state": {
          "title": "The current state of the task.",
          "$ref": "#/definitions/TaskState"
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the task entered its current state."
        },
        "previousState": {
          "title": "The previous state of the task.",
          "description": "This property is not set if the task is in its initial Active state.",
          "$ref": "#/definitions/TaskState"
        },
        "previousStateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the task entered its previous state.",
          "description": "This property is not set if the task is in its initial Active state."
        },
        "commandLine": {
          "type": "string",
          "title": "The command line of the task.",
          "description": "For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux."
        },
        "containerSettings": {
          "$ref": "#/definitions/TaskContainerSettings",
          "title": "The settings for the container under which the task runs.",
          "description": "If the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
        },
        "resourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download to the compute node before running the command line.",
          "description": "For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed."
        },
        "outputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputFile"
          },
          "title": "A list of files that the Batch service will upload from the compute node after running the command line.",
          "description": "For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed."
        },
        "environmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of environment variable settings for the task."
        },
        "affinityInfo": {
          "$ref": "#/definitions/AffinityInformation",
          "title": "A locality hint that can be used by the Batch service to select a compute node on which to start the new task."
        },
        "constraints": {
          "$ref": "#/definitions/TaskConstraints",
          "title": "The execution constraints that apply to this task."
        },
        "userIdentity": {
          "$ref": "#/definitions/UserIdentity",
          "title": "The user identity under which the task runs.",
          "description": "If omitted, the task runs as a non-administrative user unique to the task."
        },
        "executionInfo": {
          "$ref": "#/definitions/TaskExecutionInformation",
          "title": "Information about the execution of the task."
        },
        "nodeInfo": {
          "$ref": "#/definitions/ComputeNodeInformation",
          "title": "Information about the compute node on which the task ran."
        },
        "multiInstanceSettings": {
          "$ref": "#/definitions/MultiInstanceSettings",
          "title": "An object that indicates that the task is a multi-instance task, and contains information about how to run the multi-instance task."
        },
        "stats": {
          "$ref": "#/definitions/TaskStatistics",
          "title": "Resource usage statistics for the task."
        },
        "dependsOn": {
          "$ref": "#/definitions/TaskDependencies",
          "title": "The tasks that this task depends on.",
          "description": "This task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "A list of application packages that the Batch service will deploy to the compute node before running the command line.",
          "description": "Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails."
        },
        "authenticationTokenSettings": {
          "title": "The settings for an authentication token that the task can use to perform Batch service operations.",
          "description": "If this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.",
          "$ref": "#/definitions/AuthenticationTokenSettings"
        }
      },
      "title": "An Azure Batch task."
    },
    "TaskAddParameter": {
      "properties": {
        "id": {
          "type": "string",
          "title": "A string that uniquely identifies the task within the job.",
          "description": "The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case)."
        },
        "displayName": {
          "type": "string",
          "title": "A display name for the task.",
          "description": "The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024."
        },
        "commandLine": {
          "type": "string",
          "title": "The command line of the task.",
          "description": "For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux."
        },
        "containerSettings": {
          "$ref": "#/definitions/TaskContainerSettings",
          "title": "The settings for the container under which the task runs.",
          "description": "If the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container."
        },
        "exitConditions": {
          "$ref": "#/definitions/ExitConditions",
          "description": "How the Batch service should respond when the task completes."
        },
        "resourceFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceFile"
          },
          "title": "A list of files that the Batch service will download to the compute node before running the command line.",
          "description": "For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed."
        },
        "outputFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputFile"
          },
          "title": "A list of files that the Batch service will upload from the compute node after running the command line.",
          "description": "For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed."
        },
        "environmentSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentSetting"
          },
          "title": "A list of environment variable settings for the task."
        },
        "affinityInfo": {
          "$ref": "#/definitions/AffinityInformation",
          "title": "A locality hint that can be used by the Batch service to select a compute node on which to start the new task."
        },
        "constraints": {
          "$ref": "#/definitions/TaskConstraints",
          "title": "The execution constraints that apply to this task.",
          "description": "If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the job, and the maxWallClockTime and retentionTime are infinite."
        },
        "userIdentity": {
          "$ref": "#/definitions/UserIdentity",
          "title": "The user identity under which the task runs.",
          "description": "If omitted, the task runs as a non-administrative user unique to the task."
        },
        "multiInstanceSettings": {
          "$ref": "#/definitions/MultiInstanceSettings",
          "title": "An object that indicates that the task is a multi-instance task, and contains information about how to run the multi-instance task."
        },
        "dependsOn": {
          "$ref": "#/definitions/TaskDependencies",
          "title": "The tasks that this task depends on.",
          "description": "This task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled. If the job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "A list of application packages that the Batch service will deploy to the compute node before running the command line.",
          "description": "Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails."
        },
        "authenticationTokenSettings": {
          "title": "The settings for an authentication token that the task can use to perform Batch service operations.",
          "description": "If this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.",
          "$ref": "#/definitions/AuthenticationTokenSettings"
        }
      },
      "required": [
        "id",
        "commandLine"
      ],
      "title": "An Azure Batch task to add."
    },
    "TaskAddCollectionParameter": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAddParameter"
          },
          "maxItems": 100,
          "title": "The collection of tasks to add.",
          "description": "The total serialized size of this collection must be less than 4MB. If it is greater than 4MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks."
        }
      },
      "required": [
        "value"
      ],
      "title": "A collection of Azure Batch tasks to add."
    },
    "TaskAddResult": {
      "properties": {
        "status": {
          "type": "string",
          "title": "The status of the add task request.",
          "description": "Values are:\n\n success - Task was added successfully.\n clienterror - Task failed to add due to a client error and should not be retried without modifying the request as appropriate.\n servererror - Task failed to add due to a server error and can be retried without modification.",
          "enum": [
            "success",
            "clientError",
            "serverError"
          ],
          "x-ms-enum": {
            "name": "TaskAddStatus"
          }
        },
        "taskId": {
          "type": "string",
          "title": "The ID of the task for which this is the result."
        },
        "eTag": {
          "type": "string",
          "title": "The ETag of the task, if the task was successfully added.",
          "description": "You can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime."
        },
        "lastModified": {
          "type": "string",
          "format": "date-time",
          "title": "The last modified time of the task."
        },
        "location": {
          "type": "string",
          "title": "The URL of the task, if the task was successfully added."
        },
        "error": {
          "$ref": "#/definitions/BatchError",
          "title": "The error encountered while attempting to add the task."
        }
      },
      "required": [
        "status",
        "taskId"
      ],
      "title": "Result for a single task added as part of an add task collection operation."
    },
    "TaskAddCollectionResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAddResult"
          },
          "title": "The results of the add task collection operation."
        }
      },
      "title": "The result of adding a collection of tasks to a job."
    },
    "SubtaskInformation": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "The ID of the subtask."
        },
        "nodeInfo": {
          "$ref": "#/definitions/ComputeNodeInformation",
          "title": "Information about the compute node on which the subtask ran."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the subtask completed.",
          "description": "This property is set only if the subtask is in the Completed state."
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exit code of the program specified on the subtask command line.",
          "description": "This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code."
        },
        "containerInfo": {
          "$ref": "#/definitions/TaskContainerExecutionInformation",
          "title": "Information about the container under which the task is executing.",
          "description": "This property is set only if the task runs in a container context."
        },
        "failureInfo": {
          "$ref": "#/definitions/TaskFailureInformation",
          "title": "Information describing the task failure, if any.",
          "description": "This property is set only if the task is in the completed state and encountered a failure."
        },
        "state": {
          "title": "The current state of the subtask.",
          "$ref": "#/definitions/SubtaskState"
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the subtask entered its current state."
        },
        "previousState": {
          "title": "The previous state of the subtask.",
          "description": "This property is not set if the subtask is in its initial running state.",
          "$ref": "#/definitions/SubtaskState"
        },
        "previousStateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the subtask entered its previous state.",
          "description": "This property is not set if the subtask is in its initial running state."
        },
        "result": {
          "$ref": "#/definitions/TaskExecutionResult",
          "title": "The result of the task execution.",
          "description": "If the value is 'failed', then the details of the failure can be found in the failureInfo property."
        }
      },
      "title": "Information about an Azure Batch subtask."
    },
    "CloudTaskListSubtasksResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubtaskInformation"
          },
          "title": "The list of subtasks."
        }
      },
      "title": "The result of listing the subtasks of a task."
    },
    "CloudTaskListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudTask"
          },
          "title": "The list of tasks."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the tasks in a job."
    },
    "TaskInformation": {
      "properties": {
        "taskUrl": {
          "type": "string",
          "title": "The URL of the task."
        },
        "jobId": {
          "type": "string",
          "title": "The ID of the job to which the task belongs."
        },
        "taskId": {
          "type": "string",
          "title": "The ID of the task."
        },
        "subtaskId": {
          "type": "integer",
          "format": "int32",
          "title": "The ID of the subtask if the task is a multi-instance task."
        },
        "taskState": {
          "title": "The current state of the task.",
          "$ref": "#/definitions/TaskState"
        },
        "executionInfo": {
          "$ref": "#/definitions/TaskExecutionInformation",
          "title": "Information about the execution of the task."
        }
      },
      "required": [
        "taskState"
      ],
      "title": "Information about a task running on a compute node."
    },
    "StartTaskInformation": {
      "properties": {
        "state": {
          "type": "string",
          "title": "The state of the start task on the compute node.",
          "description": "Values are:\n\n running - The start task is currently running.\n completed - The start task has exited with exit code 0, or the start task has failed and the retry limit has reached, or the start task process did not run due to task preparation errors (such as resource file download failures).",
          "enum": [
            "running",
            "completed"
          ],
          "x-ms-enum": {
            "name": "StartTaskState",
            "modelAsString": false
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the start task started running.",
          "description": "This value is reset every time the task is restarted or retried (that is, this is the most recent time at which the start task started running)."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the start task stopped running.",
          "description": "This is the end time of the most recent run of the start task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start task is currently running."
        },
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "The exit code of the program specified on the start task command line.",
          "description": "This property is set only if the start task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start task (due to timeout, or user termination via the API) you may see an operating system-defined exit code."
        },
        "containerInfo": {
          "$ref": "#/definitions/TaskContainerExecutionInformation",
          "title": "Information about the container under which the task is executing.",
          "description": "This property is set only if the task runs in a container context."
        },
        "failureInfo": {
          "$ref": "#/definitions/TaskFailureInformation",
          "title": "Information describing the task failure, if any.",
          "description": "This property is set only if the task is in the completed state and encountered a failure."
        },
        "retryCount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of times the task has been retried by the Batch service.",
          "description": "Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints."
        },
        "lastRetryTime": {
          "type": "string",
          "format": "date-time",
          "title": "The most recent time at which a retry of the task started running.",
          "description": "This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not."
        },
        "result": {
          "$ref": "#/definitions/TaskExecutionResult",
          "title": "The result of the task execution.",
          "description": "If the value is 'failed', then the details of the failure can be found in the failureInfo property."
        }
      },
      "required": [
        "state",
        "startTime",
        "retryCount"
      ],
      "title": "Information about a start task running on a compute node."
    },
    "ComputeNodeError": {
      "properties": {
        "code": {
          "type": "string",
          "title": "An identifier for the compute node error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "type": "string",
          "title": "A message describing the compute node error, intended to be suitable for display in a user interface."
        },
        "errorDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          },
          "title": "The list of additional error details related to the compute node error."
        }
      },
      "title": "An error encountered by a compute node."
    },
    "ComputeNode": {
      "properties": {
        "id": {
          "type": "string",
          "title": "The ID of the compute node.",
          "description": "Every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes."
        },
        "url": {
          "type": "string",
          "title": "The URL of the compute node."
        },
        "state": {
          "type": "string",
          "title": "The current state of the compute node.",
          "description": "Values are:\n\n idle - The node is not currently running a task.\n rebooting - The node is rebooting.\n reimaging - The node is reimaging.\n running - The node is running one or more tasks (other than a start task).\n unusable - The node cannot be used for task execution due to errors.\n creating - The Batch service has obtained the underlying virtual machine from Azure Compute, but it has not yet started to join the pool.\n starting - the Batch service is starting on the underlying virtual machine.\n waitingforstarttask - The start task has started running on the compute node, but waitForSuccess is set and the start task has not yet completed.\n starttaskfailed - The start task has failed on the compute node (and exhausted all retries), and waitForSuccess is set. The node is not usable for running tasks.\n unknown - The Batch service has lost contact with the node, and does not know its true state.\n leavingpool - The node is leaving the pool, either because the user explicitly removed it or because the pool is resizing or autoscaling down.\n offline - The node is not currently running a task, and scheduling of new tasks to the node is disabled.\n preempted - The low-priority node has been preempted. Tasks which were running on the node when it was pre-empted will be rescheduled when another node becomes available.",
          "enum": [
            "idle",
            "rebooting",
            "reimaging",
            "running",
            "unusable",
            "creating",
            "starting",
            "waitingForStartTask",
            "startTaskFailed",
            "unknown",
            "leavingPool",
            "offline",
            "preempted"
          ],
          "x-ms-enum": {
            "name": "ComputeNodeState",
            "modelAsString": false
          }
        },
        "schedulingState": {
          "type": "string",
          "title": "Whether the compute node is available for task scheduling.",
          "description": "Values are:\n\n enabled - Tasks can be scheduled on the node.\n disabled - No new tasks will be scheduled on the node. Tasks already running on the node may still run to completion. All nodes start with scheduling enabled.",
          "enum": [
            "enabled",
            "disabled"
          ],
          "x-ms-enum": {
            "name": "SchedulingState",
            "modelAsString": false
          }
        },
        "stateTransitionTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the compute node entered its current state."
        },
        "lastBootTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the compute node was started.",
          "description": "This property may not be present if the node state is unusable."
        },
        "allocationTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which this compute node was allocated to the pool."
        },
        "ipAddress": {
          "type": "string",
          "title": "The IP address that other compute nodes can use to communicate with this compute node.",
          "description": "Every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes."
        },
        "affinityId": {
          "type": "string",
          "title": "An identifier which can be passed when adding a task to request that the task be scheduled on this node.",
          "description": "Note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere."
        },
        "vmSize": {
          "type": "string",
          "title": "The size of the virtual machine hosting the compute node.",
          "description": "For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series)."
        },
        "totalTasksRun": {
          "type": "integer",
          "format": "int32",
          "title": "The total number of job tasks completed on the compute node. This includes Job Preparation, Job Release and Job Manager tasks, but not the pool start task."
        },
        "runningTasksCount": {
          "type": "integer",
          "format": "int32",
          "title": "The total number of currently running job tasks on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task."
        },
        "totalTasksSucceeded": {
          "type": "integer",
          "format": "int32",
          "title": "The total number of job tasks which completed successfully (with exitCode 0) on the compute node. This includes Job Preparation, Job Release, and Job Manager tasks, but not the pool start task."
        },
        "recentTasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInformation"
          },
          "title": "A list of tasks whose state has recently changed.",
          "description": "This property is present only if at least one task has run on this node since it was assigned to the pool."
        },
        "startTask": {
          "$ref": "#/definitions/StartTask",
          "title": "The task specified to run on the compute node as it joins the pool."
        },
        "startTaskInfo": {
          "$ref": "#/definitions/StartTaskInformation",
          "title": "Runtime information about the execution of the start task on the compute node."
        },
        "certificateReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateReference"
          },
          "title": "The list of certificates installed on the compute node.",
          "description": "For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComputeNodeError"
          },
          "title": "The list of errors that are currently being encountered by the compute node."
        },
        "isDedicated": {
          "type": "boolean",
          "title": "Whether this compute node is a dedicated node. If false, the node is a low-priority node."
        },
        "endpointConfiguration": {
          "$ref": "#/definitions/ComputeNodeEndpointConfiguration",
          "title": "The endpoint configuration for the compute node."
        }
      },
      "title": "A compute node in the Batch service."
    },
    "PoolEndpointConfiguration": {
      "properties": {
        "inboundNATPools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboundNATPool"
          },
          "title": "A list of inbound NAT pools that can be used to address specific ports on an individual compute node externally.",
          "description": "The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400."
        }
      },
      "required": [
        "inboundNATPools"
      ],
      "title": "The endpoint configuration for a pool."
    },
    "InboundNATPool": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the endpoint.",
          "description": "The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400."
        },
        "protocol": {
          "type": "string",
          "title": "The protocol of the endpoint.",
          "enum": [
            "tcp",
            "udp"
          ],
          "x-ms-enum": {
            "name": "InboundEndpointProtocol",
            "modelAsString": false
          }
        },
        "backendPort": {
          "type": "integer",
          "format": "int32",
          "title": "The port number on the compute node.",
          "description": "This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400."
        },
        "frontendPortRangeStart": {
          "type": "integer",
          "format": "int32",
          "title": "The first port number in the range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes.",
          "description": "Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400."
        },
        "frontendPortRangeEnd": {
          "type": "integer",
          "format": "int32",
          "title": "The last port number in the range of external ports that will be used to provide inbound access to the backendPort on individual compute nodes.",
          "description": "Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400."
        },
        "networkSecurityGroupRules": {
          "type": "array",
          "title": "A list of network security group rules that will be applied to the endpoint.",
          "description": "The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.",
          "items": {
            "$ref": "#/definitions/NetworkSecurityGroupRule"
          }
        }
      },
      "required": [
        "name",
        "protocol",
        "backendPort",
        "frontendPortRangeStart",
        "frontendPortRangeEnd"
      ],
      "title": "A inbound NAT pool that can be used to address specific ports on compute nodes in a Batch pool externally."
    },
    "NetworkSecurityGroupRule": {
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority for this rule.",
          "description": "Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400."
        },
        "access": {
          "type": "string",
          "title": "The action that should be taken for a specified IP address, subnet range or tag.",
          "enum": [
            "allow",
            "deny"
          ],
          "x-ms-enum": {
            "name": "NetworkSecurityGroupRuleAccess",
            "modelAsString": false
          }
        },
        "sourceAddressPrefix": {
          "type": "string",
          "title": "The source address prefix or tag to match for the rule.",
          "description": "Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400."
        }
      },
      "required": [
        "priority",
        "access",
        "sourceAddressPrefix"
      ],
      "title": "A network security group rule to apply to an inbound endpoint."
    },
    "ComputeNodeEndpointConfiguration": {
      "properties": {
        "inboundEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboundEndpoint"
          },
          "title": "The list of inbound endpoints that are accessible on the compute node."
        }
      },
      "required": [
        "inboundEndpoints"
      ],
      "title": "The endpoint configuration for the compute node."
    },
    "InboundEndpoint": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the endpoint."
        },
        "protocol": {
          "type": "string",
          "title": "The protocol of the endpoint.",
          "enum": [
            "tcp",
            "udp"
          ],
          "x-ms-enum": {
            "name": "InboundEndpointProtocol",
            "modelAsString": false
          }
        },
        "publicIPAddress": {
          "type": "string",
          "title": "The public IP address of the compute node."
        },
        "publicFQDN": {
          "type": "string",
          "title": "The public fully qualified domain name for the compute node."
        },
        "frontendPort": {
          "type": "integer",
          "format": "int32",
          "title": "The public port number of the endpoint."
        },
        "backendPort": {
          "type": "integer",
          "format": "int32",
          "title": "The backend port number of the endpoint."
        }
      },
      "required": [
        "name",
        "protocol",
        "publicIPAddress",
        "publicFQDN",
        "frontendPort",
        "backendPort"
      ],
      "title": "An inbound endpoint on a compute node."
    },
    "ComputeNodeListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComputeNode"
          },
          "title": "The list of compute nodes."
        },
        "odata.nextLink": {
          "type": "string",
          "title": "The URL to get the next set of results."
        }
      },
      "title": "The result of listing the compute nodes in a pool."
    },
    "ComputeNodeUser": {
      "properties": {
        "name": {
          "type": "string",
          "title": "The user name of the account."
        },
        "isAdmin": {
          "type": "boolean",
          "title": "Whether the account should be an administrator on the compute node.",
          "description": "The default value is false."
        },
        "expiryTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the account should expire.",
          "description": "If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day."
        },
        "password": {
          "type": "string",
          "title": "The password of the account.",
          "description": "The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property."
        },
        "sshPublicKey": {
          "type": "string",
          "title": "The SSH public key that can be used for remote login to the compute node.",
          "description": "The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        }
      },
      "required": [
        "name"
      ],
      "title": "A user account for RDP or SSH access on a compute node."
    },
    "ComputeNodeGetRemoteLoginSettingsResult": {
      "properties": {
        "remoteLoginIPAddress": {
          "type": "string",
          "title": "The IP address used for remote login to the compute node."
        },
        "remoteLoginPort": {
          "type": "integer",
          "format": "int32",
          "title": "The port used for remote login to the compute node."
        }
      },
      "required": [
        "remoteLoginIPAddress",
        "remoteLoginPort"
      ],
      "title": "The remote login settings for a compute node."
    },
    "JobSchedulePatchParameter": {
      "properties": {
        "schedule": {
          "$ref": "#/definitions/Schedule",
          "title": "The schedule according to which jobs will be created.",
          "description": "If you do not specify this element, the existing schedule is left unchanged."
        },
        "jobSpecification": {
          "$ref": "#/definitions/JobSpecification",
          "title": "The details of the jobs to be created on this schedule.",
          "description": "Updates affect only jobs that are started after the update has taken place. Any currently active job continues with the older specification."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the job schedule as metadata.",
          "description": "If you do not specify this element, existing metadata is left unchanged."
        }
      },
      "title": "The set of changes to be made to a job schedule."
    },
    "JobScheduleUpdateParameter": {
      "properties": {
        "schedule": {
          "$ref": "#/definitions/Schedule",
          "title": "The schedule according to which jobs will be created.",
          "description": "If you do not specify this element, it is equivalent to passing the default schedule: that is, a single job scheduled to run immediately."
        },
        "jobSpecification": {
          "$ref": "#/definitions/JobSpecification",
          "title": "Details of the jobs to be created on this schedule.",
          "description": "Updates affect only jobs that are started after the update has taken place. Any currently active job continues with the older specification."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the job schedule as metadata.",
          "description": "If you do not specify this element, it takes the default value of an empty list; in effect, any existing metadata is deleted."
        }
      },
      "required": [
        "schedule",
        "jobSpecification"
      ],
      "title": "The set of changes to be made to a job schedule."
    },
    "JobDisableParameter": {
      "properties": {
        "disableTasks": {
          "type": "string",
          "title": "What to do with active tasks associated with the job.",
          "description": "Values are:\n\n requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled.\n terminate - Terminate running tasks. The tasks will not run again.\n wait - Allow currently running tasks to complete.",
          "enum": [
            "requeue",
            "terminate",
            "wait"
          ],
          "x-ms-enum": {
            "name": "DisableJobOption",
            "modelAsString": false
          }
        }
      },
      "required": [
        "disableTasks"
      ],
      "title": "Options when disabling a job."
    },
    "JobTerminateParameter": {
      "properties": {
        "terminateReason": {
          "type": "string",
          "title": "The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'."
        }
      },
      "title": "Options when terminating a job."
    },
    "JobPatchParameter": {
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority of the job.",
          "description": "Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged."
        },
        "onAllTasksComplete": {
          "title": "The action the Batch service should take when all tasks in the job are in the completed state.",
          "description": "If omitted, the completion behavior is left unchanged. You may not change the value from terminateJob to noAction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails with an 'invalid property value' error response; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).",
          "$ref": "#/definitions/OnAllTasksComplete"
        },
        "constraints": {
          "$ref": "#/definitions/JobConstraints",
          "title": "The execution constraints for the job.",
          "description": "If omitted, the existing execution constraints are left unchanged."
        },
        "poolInfo": {
          "$ref": "#/definitions/PoolInformation",
          "title": "The pool on which the Batch service runs the job's tasks.",
          "description": "You may change the pool for a job only when the job is disabled. The Patch Job call will fail if you include the poolInfo element and the job is not disabled. If you specify an autoPoolSpecification specification in the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a poolLifetimeOption of job. If omitted, the job continues to run on its current pool."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the job as metadata.",
          "description": "If omitted, the existing job metadata is left unchanged."
        }
      },
      "title": "The set of changes to be made to a job."
    },
    "JobUpdateParameter": {
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority of the job.",
          "description": "Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, it is set to the default value 0."
        },
        "constraints": {
          "$ref": "#/definitions/JobConstraints",
          "title": "The execution constraints for the job.",
          "description": "If omitted, the constraints are cleared."
        },
        "poolInfo": {
          "$ref": "#/definitions/PoolInformation",
          "title": "The pool on which the Batch service runs the job's tasks.",
          "description": "You may change the pool for a job only when the job is disabled. The Update Job call will fail if you include the poolInfo element and the job is not disabled. If you specify an autoPoolSpecification specification in the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a poolLifetimeOption of job."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the job as metadata.",
          "description": "If omitted, it takes the default value of an empty list; in effect, any existing metadata is deleted."
        },
        "onAllTasksComplete": {
          "title": "The action the Batch service should take when all tasks in the job are in the completed state.",
          "description": "If omitted, the completion behavior is set to noAction. If the current value is terminateJob, this is an error because a job's completion behavior may not be changed from terminateJob to noAction. You may not change the value from terminatejob to noaction - that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value' error response. If you do not specify this element in a PUT request, it is equivalent to passing noaction. This is an error if the current value is terminatejob.",
          "$ref": "#/definitions/OnAllTasksComplete"
        }
      },
      "required": [
        "poolInfo"
      ],
      "title": "The set of changes to be made to a job."
    },
    "PoolEnableAutoScaleParameter": {
      "properties": {
        "autoScaleFormula": {
          "type": "string",
          "title": "The formula for the desired number of compute nodes in the pool.",
          "description": "The formula is checked for validity before it is applied to the pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling)."
        },
        "autoScaleEvaluationInterval": {
          "type": "string",
          "format": "duration",
          "title": "The time interval at which to automatically adjust the pool size according to the autoscale formula.",
          "description": "The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued."
        }
      },
      "title": "Options for enabling automatic scaling on a pool."
    },
    "PoolEvaluateAutoScaleParameter": {
      "properties": {
        "autoScaleFormula": {
          "type": "string",
          "title": "The formula for the desired number of compute nodes in the pool.",
          "description": "The formula is validated and its results calculated, but it is not applied to the pool. To apply the formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling)."
        }
      },
      "required": [
        "autoScaleFormula"
      ],
      "title": "Options for evaluating an automatic scaling formula on a pool."
    },
    "PoolResizeParameter": {
      "properties": {
        "targetDedicatedNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of dedicated compute nodes in the pool."
        },
        "targetLowPriorityNodes": {
          "type": "integer",
          "format": "int32",
          "title": "The desired number of low-priority compute nodes in the pool."
        },
        "resizeTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool.",
          "description": "The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "nodeDeallocationOption": {
          "title": "Determines what to do with a node and its running task(s) if the pool size is decreasing.",
          "description": "The default value is requeue.",
          "$ref": "#/definitions/ComputeNodeDeallocationOption"
        }
      },
      "title": "Options for changing the size of a pool."
    },
    "PoolUpdatePropertiesParameter": {
      "properties": {
        "startTask": {
          "$ref": "#/definitions/StartTask",
          "title": "A task to run on each compute node as it joins the pool. The task runs when the node is added to the pool or when the node is restarted.",
          "description": "If this element is present, it overwrites any existing start task. If omitted, any existing start task is removed from the pool."
        },
        "certificateReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateReference"
          },
          "title": "A list of certificates to be installed on each compute node in the pool.",
          "description": "This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "A list of application packages to be installed on each compute node in the pool.",
          "description": "The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the pool as metadata.",
          "description": "This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool."
        }
      },
      "required": [
        "certificateReferences",
        "metadata",
        "applicationPackageReferences"
      ],
      "title": "The set of changes to be made to a pool."
    },
    "PoolUpgradeOSParameter": {
      "properties": {
        "targetOSVersion": {
          "type": "string",
          "title": "The Azure Guest OS version to be installed on the virtual machines in the pool."
        }
      },
      "required": [
        "targetOSVersion"
      ],
      "title": "Options for upgrading the operating system of compute nodes in a pool."
    },
    "PoolPatchParameter": {
      "properties": {
        "startTask": {
          "$ref": "#/definitions/StartTask",
          "title": "A task to run on each compute node as it joins the pool. The task runs when the node is added to the pool or when the node is restarted.",
          "description": "If this element is present, it overwrites any existing start task. If omitted, any existing start task is left unchanged."
        },
        "certificateReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateReference"
          },
          "title": "A list of certificates to be installed on each compute node in the pool.",
          "description": "If this element is present, it replaces any existing certificate references configured on the pool. If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory."
        },
        "applicationPackageReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationPackageReference"
          },
          "title": "A list of application packages to be installed on each compute node in the pool.",
          "description": "Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataItem"
          },
          "title": "A list of name-value pairs associated with the pool as metadata.",
          "description": "If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged."
        }
      },
      "title": "The set of changes to be made to a pool."
    },
    "TaskUpdateParameter": {
      "properties": {
        "constraints": {
          "$ref": "#/definitions/TaskConstraints",
          "title": "Constraints that apply to this task.",
          "description": "If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks."
        }
      },
      "title": "The set of changes to be made to a task."
    },
    "NodeUpdateUserParameter": {
      "properties": {
        "password": {
          "type": "string",
          "title": "The password of the account.",
          "description": "The password is required for Windows nodes (those created with 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows image reference). For Linux compute nodes, the password can optionally be specified along with the sshPublicKey property. If omitted, any existing password is removed."
        },
        "expiryTime": {
          "type": "string",
          "format": "date-time",
          "title": "The time at which the account should expire.",
          "description": "If omitted, the default is 1 day from the current time. For Linux compute nodes, the expiryTime has a precision up to a day."
        },
        "sshPublicKey": {
          "type": "string",
          "title": "The SSH public key that can be used for remote login to the compute node.",
          "description": "The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux nodes. If this is specified for a Windows node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If omitted, any existing SSH public key is removed."
        }
      },
      "title": "The set of changes to be made to a user account on a node."
    },
    "NodeRebootParameter": {
      "properties": {
        "nodeRebootOption": {
          "type": "string",
          "title": "When to reboot the compute node and what to do with currently running tasks.",
          "description": "Values are:\n\n requeue - Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Restart the node as soon as tasks have been terminated.\n terminate - Terminate running tasks. The tasks will not run again. Restart the node as soon as tasks have been terminated.\n taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Restart the node when all tasks have completed.\n retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Restart the node when all task retention periods have expired.\n\n The default value is requeue.",
          "enum": [
            "requeue",
            "terminate",
            "taskCompletion",
            "retainedData"
          ],
          "x-ms-enum": {
            "name": "ComputeNodeRebootOption",
            "modelAsString": false
          }
        }
      },
      "title": "Options for rebooting a compute node."
    },
    "NodeReimageParameter": {
      "properties": {
        "nodeReimageOption": {
          "type": "string",
          "title": "When to reimage the compute node and what to do with currently running tasks.",
          "description": "Values are:\n\n requeue - Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Reimage the node as soon as tasks have been terminated.\n terminate - Terminate running tasks. The tasks will not run again. Reimage the node as soon as tasks have been terminated.\n taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Reimage the node when all tasks have completed.\n retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Reimage the node when all task retention periods have expired.\n\n The default value is requeue.",
          "enum": [
            "requeue",
            "terminate",
            "taskCompletion",
            "retainedData"
          ],
          "x-ms-enum": {
            "name": "ComputeNodeReimageOption",
            "modelAsString": false
          }
        }
      },
      "title": "Options for reimaging a compute node."
    },
    "NodeDisableSchedulingParameter": {
      "properties": {
        "nodeDisableSchedulingOption": {
          "type": "string",
          "title": "What to do with currently running tasks when disabling task scheduling on the compute node.",
          "description": "Values are:\n\n requeue - Terminate running task processes and requeue the tasks. The tasks may run again on other compute nodes, or when task scheduling is re-enabled on this node. Enter offline state as soon as tasks have been terminated.\n terminate - Terminate running tasks. The tasks will not run again. Enter offline state as soon as tasks have been terminated.\n taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Enter offline state when all tasks have completed.\n\n The default value is requeue.",
          "enum": [
            "requeue",
            "terminate",
            "taskCompletion"
          ],
          "x-ms-enum": {
            "name": "DisableComputeNodeSchedulingOption",
            "modelAsString": false
          }
        }
      },
      "title": "Options for disabling scheduling on a compute node."
    },
    "NodeRemoveParameter": {
      "properties": {
        "nodeList": {
          "type": "array",
          "maxItems": 100,
          "items": {
            "type": "string"
          },
          "title": "A list containing the IDs of the compute nodes to be removed from the specified pool."
        },
        "resizeTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The timeout for removal of compute nodes to the pool.",
          "description": "The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request)."
        },
        "nodeDeallocationOption": {
          "title": "Determines what to do with a node and its running task(s) after it has been selected for deallocation.",
          "description": "The default value is requeue.",
          "$ref": "#/definitions/ComputeNodeDeallocationOption"
        }
      },
      "required": [
        "nodeList"
      ],
      "title": "Options for removing compute nodes from a pool."
    },
    "OutputFile": {
      "properties": {
        "filePattern": {
          "type": "string",
          "title": "A pattern indicating which file(s) to upload.",
          "description": "Both relative and absolute paths are supported. Relative paths are relative to the task working directory. The following wildcards are supported: * matches 0 or more characters (for example pattern abc* would match abc or abcdef), ** matches any directory, ? matches any single character, [abc] matches one character in the brackets, and [a-c] matches one character in the range. Brackets can include a negation to match any character not specified (for example [!abc] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example: **\\*.txt matches any file that does not start in '.' and ends with .txt in the task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc[*] would match a file named abc*). Note that both \\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied."
        },
        "destination": {
          "title": "The destination for the output file(s).",
          "$ref": "#/definitions/OutputFileDestination"
        },
        "uploadOptions": {
          "title": "Additional options for the upload operation, including under what conditions to perform the upload.",
          "$ref": "#/definitions/OutputFileUploadOptions"
        }
      },
      "required": [
        "filePattern",
        "destination",
        "uploadOptions"
      ],
      "title": "A specification for uploading files from an Azure Batch node to another location after the Batch service has finished executing the task process."
    },
    "OutputFileDestination": {
      "properties": {
        "container": {
          "title": "A location in Azure blob storage to which files are uploaded.",
          "$ref": "#/definitions/OutputFileBlobContainerDestination"
        }
      },
      "title": "The destination to which a file should be uploaded."
    },
    "OutputFileBlobContainerDestination": {
      "properties": {
        "path": {
          "type": "string",
          "title": "The destination blob or virtual directory within the Azure Storage container.",
          "description": "If filePattern refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to which to upload that file. If filePattern contains one or more wildcards (and therefore may match multiple files), then path is the name of the blob virtual directory (which is prepended to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the root of the container with a blob name matching their file name."
        },
        "containerUrl": {
          "type": "string",
          "title": "The URL of the container within Azure Blob Storage to which to upload the file(s).",
          "description": "The URL must include a Shared Access Signature (SAS) granting write permissions to the container."
        }
      },
      "required": [
        "containerUrl"
      ],
      "title": "Specifies a file upload destination within an Azure blob storage container."
    },
    "OutputFileUploadOptions": {
      "properties": {
        "uploadCondition": {
          "title": "The conditions under which the task output file or set of files should be uploaded.",
          "description": "The default is taskCompletion.",
          "$ref": "#/definitions/OutputFileUploadCondition"
        }
      },
      "required": [
        "uploadCondition"
      ],
      "title": "Details about an output file upload operation, including under what conditions to perform the upload."
    },
    "ErrorMessage": {
      "properties": {
        "lang": {
          "type": "string",
          "title": "The language code of the error message"
        },
        "value": {
          "type": "string",
          "title": "The text of the message."
        }
      },
      "title": "An error message received in an Azure Batch error response."
    },
    "BatchErrorDetail": {
      "properties": {
        "key": {
          "type": "string",
          "title": "An identifier specifying the meaning of the Value property."
        },
        "value": {
          "type": "string",
          "title": "The additional information included with the error response."
        }
      },
      "title": "An item of additional information included in an Azure Batch error response."
    },
    "BatchError": {
      "properties": {
        "code": {
          "type": "string",
          "title": "An identifier for the error. Codes are invariant and are intended to be consumed programmatically."
        },
        "message": {
          "$ref": "#/definitions/ErrorMessage",
          "title": "A message describing the error, intended to be suitable for display in a user interface."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchErrorDetail"
          },
          "title": "A collection of key-value pairs containing additional details about the error."
        }
      },
      "title": "An error response received from the Azure Batch service."
    },
    "CertificateState": {
      "type": "string",
      "title": "The state of the certificate.",
      "description": "Values are:\n\n active - The certificate is available for use in pools.\n deleting - The user has requested that the certificate be deleted, but the delete operation has not yet completed. You may not reference the certificate when creating or updating pools.\n deletefailed - The user requested that the certificate be deleted, but there are pools that still have references to the certificate, or it is still installed on one or more compute nodes. (The latter can occur if the certificate has been removed from the pool, but the node has not yet restarted. Nodes refresh their certificates only when they restart.) You may use the cancel certificate delete operation to cancel the delete, or the delete certificate operation to retry the delete.",
      "enum": [
        "active",
        "deleting",
        "deleteFailed"
      ],
      "x-ms-enum": {
        "name": "CertificateState",
        "modelAsString": false
      }
    },
    "ElevationLevel": {
      "type": "string",
      "title": "The elevation level of the user.",
      "description": "Values are:\n\n nonAdmin - The user is a standard user without elevated access.\n admin - The user is a user with elevated access and operates with full Administrator permissions.",
      "enum": [
        "nonAdmin",
        "admin"
      ],
      "x-ms-enum": {
        "name": "ElevationLevel",
        "modelAsString": false
      }
    },
    "JobScheduleState": {
      "type": "string",
      "title": "The state of the job schedule.",
      "description": "Values are:\n\n active - The job schedule is active and will create jobs as per its schedule.\n disabled - The user has disabled the schedule. The scheduler will not initiate any new jobs will on this schedule, but any existing active job will continue to run.\n terminating - The schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new jobs for this schedule, nor is any existing job active.\n completed - The schedule has terminated, either by reaching its end time or by the user terminating it explicitly.\n deleting - The user has requested that the schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new jobs for this schedule, and will delete any existing jobs and tasks under the schedule, including any active job. The schedule will be deleted when all jobs and tasks under the schedule have been deleted.",
      "enum": [
        "active",
        "completed",
        "disabled",
        "terminating",
        "deleting"
      ],
      "x-ms-enum": {
        "name": "JobScheduleState",
        "modelAsString": false
      }
    },
    "JobState": {
      "type": "string",
      "title": "The state of the job.",
      "description": "Values are:\n\n active - the job is available to have tasks scheduled.\n disabling - a user has requested that the job be disabled, but the disable operation is still in progress (for example, waiting for tasks to terminate).\n disabled - a user has disabled the job. No tasks are running, and no new tasks will be scheduled.\n enabling - a user has requested that the job be enabled, but the enable operation is still in progress.\n terminating - the job is about to complete, either because a Job Manager task has completed or because the user has terminated the job, but the terminate operation is still in progress (for example, because Job Release tasks are running).\n completed - all tasks have terminated, and the system will not accept any more tasks or any further changes to the job.\n deleting - a user has requested that the job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running tasks).",
      "enum": [
        "active",
        "disabling",
        "disabled",
        "enabling",
        "terminating",
        "completed",
        "deleting"
      ],
      "x-ms-enum": {
        "name": "JobState",
        "modelAsString": false
      }
    },
    "OnAllTasksComplete": {
      "type": "string",
      "title": "The action the Batch service should take when all tasks in the job are in the completed state.",
      "description": "Values are:\n\n noAction - do nothing. The job remains active unless terminated or disabled by some other means.\n terminateJob - terminate the job. The job's terminateReason is set to 'AllTasksComplete'.",
      "enum": [
        "noAction",
        "terminateJob"
      ],
      "x-ms-enum": {
        "name": "OnAllTasksComplete",
        "modelAsString": false
      }
    },
    "OnTaskFailure": {
      "type": "string",
      "title": "The action the Batch service should take when any task in the job fails.",
      "description": "A task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. Values are:\n\n noAction - do nothing.\n performExitOptionsJobAction - take the action associated with the task exit condition in the task's exitConditions collection. (This may still result in no action being taken, if that is what the task specifies.)\n\n The default is noAction.",
      "enum": [
        "noAction",
        "performExitOptionsJobAction"
      ],
      "x-ms-enum": {
        "name": "OnTaskFailure",
        "modelAsString": false
      }
    },
    "ErrorCategory": {
      "type": "string",
      "title": "The category of the error.",
      "enum": [
        "userError",
        "serverError"
      ],
      "x-ms-enum": {
        "name": "ErrorCategory",
        "modelAsString": false
      }
    },
    "TaskState": {
      "type": "string",
      "title": "The state of the task.",
      "description": "Values are:\n\n active - The task is queued and able to run, but is not currently assigned to a compute node. A task enters this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.\n preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will return to active and will be eligible to be assigned to a different node.\n running - The task is running on a compute node. This includes task-level preparation such as downloading resource files or deploying application packages specified on the task - it does not necessarily mean that the task command line has started executing.\n completed - The task is no longer eligible to run, usually because the task has finished successfully, or the task has finished unsuccessfully and has exhausted its retry limit. A task is also marked as completed if an error occurred launching the task, or when the task has been terminated.",
      "enum": [
        "active",
        "preparing",
        "running",
        "completed"
      ],
      "x-ms-enum": {
        "name": "TaskState",
        "modelAsString": false
      }
    },
    "SubtaskState": {
      "type": "string",
      "title": "The state of the subtask.",
      "description": "Values are:\n\n preparing - The task has been assigned to a compute node, but is waiting for a required Job Preparation task to complete on the node. If the Job Preparation task succeeds, the task will move to running. If the Job Preparation task fails, the task will be eligible to be assigned to a different node.\n running - The subtask is running on a compute node.\n completed - The subtask is no longer eligible to run, usually because the subtask has finished successfully, or the subtask has finished unsuccessfully and has exhausted its retry limit. A subtask is also marked as completed if an error occurred launching the subtask, or when the task has been terminated.",
      "enum": [
        "preparing",
        "running",
        "completed"
      ],
      "x-ms-enum": {
        "name": "SubtaskState",
        "modelAsString": false
      }
    },
    "ComputeNodeDeallocationOption": {
      "type": "string",
      "title": "Determines what to do with a node and its running task(s) after it has been selected for deallocation.",
      "description": "Values are:\n\n requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled. Remove nodes as soon as tasks have been terminated.\n terminate - Terminate running tasks. The tasks will not run again. Remove nodes as soon as tasks have been terminated.\n taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.\n retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.\n\n The default value is requeue.",
      "enum": [
        "requeue",
        "terminate",
        "taskCompletion",
        "retainedData"
      ],
      "x-ms-enum": {
        "name": "ComputeNodeDeallocationOption",
        "modelAsString": false
      }
    },
    "OutputFileUploadCondition": {
      "type": "string",
      "title": "The conditions under which a task output file or set of files should be uploaded.",
      "description": "Values are:\n\n taskSuccess - Upload the file(s) only after the task process exits with an exit code of 0.\n taskFailure - Upload the file(s) only after the task process exits with a nonzero exit code.\n taskCompletion - Upload the file(s) after the task process exits, no matter what the exit code was.",
      "enum": [
        "taskSuccess",
        "taskFailure",
        "taskCompletion"
      ],
      "x-ms-enum": {
        "name": "OutputFileUploadCondition",
        "modelAsString": false
      }
    },
    "TaskExecutionResult": {
      "type": "string",
      "title": "The result of task execution.",
      "description": "Values are:\n\n success - The task ran successfully.\n failure - There was an error during processing of the task. The failure may have occurred before the task process was launched, while the task process was executing, or after the task process exited.",
      "enum": [
        "success",
        "failure"
      ],
      "x-ms-enum": {
        "name": "TaskExecutionResult",
        "modelAsString": false
      }
    }
  },
  "parameters": {
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client API Version."
    }
  },
  "x-internal-service-name": "Batch Service",
  "x-internal-toc-name": "Pool",
  "x-internal-split-type": "Operation"
}