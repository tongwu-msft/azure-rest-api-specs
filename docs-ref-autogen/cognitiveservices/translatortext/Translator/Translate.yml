### YamlMime:RESTOperation
uid: api.cognitive.microsofttranslator.com.cognitiveservices.translatortext.translator.translate
name: Translate
service: Cognitive Services
groupName: Translator
apiVersion: "3.0"
summary: >
  Translates text into one or more languages.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST {Endpoint}/translate?api-version=3.0&to={to}
- content: POST {Endpoint}/translate?api-version=3.0&from={from}&to={to}&textType={textType}&category={category}&profanityAction={profanityAction}&profanityMarker={profanityMarker}&includeAlignment={includeAlignment}&includeSentenceLength={includeSentenceLength}&suggestedFrom={suggestedFrom}&fromScript={fromScript}&toScript={toScript}
  isOptional: true
uriParameters:
- name: Endpoint
  in: path
  isRequired: true
  skipUrlEncoding: true
  description: Supported Cognitive Services endpoints
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version of the API requested by the client. Value must be **3.0**.
  types:
  - uid: string
- name: from
  in: query
  description: >
    Specifies the language of the input text. Find which languages are available to translate from by using the languages method. If the `from` parameter is not specified, automatic language detection is applied to determine the source language.
  types:
  - uid: string
- name: to
  in: query
  isRequired: true
  description: >
    Specifies the language of the output text. Find which languages are available to translate to by using the languages method. For example, use `to=de` to translate to German.
      It's possible to translate to multiple languages simultaneously by repeating the `to` parameter in the query string. For example, use `to=de&to=it` to translate to German and Italian in the same request.
  types:
  - uid: array
- name: textType
  in: query
  description: >
    Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed, complete HTML element. Possible values are `plain` (default) or `html`
  types:
  - uid: string
- name: category
  in: query
  description: >
    A string specifying the category (domain) of the translation. This parameter retrieves translations from a customized system built with Custom Translator. Default value is `general`.
  types:
  - uid: string
- name: profanityAction
  in: query
  description: >
    Specifies how profanities should be treated in translations. Possible values are: `NoAction` (default), `Marked` or `Deleted`.

    ### Handling Profanity

    Normally the Translator service will retain profanity that is present in the source in the translation. The degree of profanity and the context that makes words profane differ between cultures, and as a result the degree of profanity in the target language may be amplified or reduced.


    If you want to avoid getting profanity in the translation, regardless of the presence of profanity in the source text, you can use the profanity filtering option. The option allows you to choose whether you want to see profanity deleted, whether you want to mark profanities with appropriate tags (giving you the option to add your own post-processing), or you want no action taken. The accepted values of `ProfanityAction` are `Deleted`, `Marked` and `NoAction` (default).


    | ProfanityAction | Action                                                                    |

    | ----------      | ----------                                                                |

    | `NoAction`      | This is the default behavior. Profanity will pass from source to target.  |

    |                 | Example Source (Japanese)- 彼はジャッカスです。                           |

    |                 | Example Translation (English)- He is a jackass.                           |

    |                 |                                                                           |

    | `Deleted`       | Profane words will be removed from the output without replacement.        |

    |                 | Example Source (Japanese)- 彼はジャッカスです。                           |

    |                 | Example Translation (English)- He is a.                                   |

    | `Marked`        | Profane words are replaced by a marker in the output. The marker depends on the `ProfanityMarker` parameter.

    |                 | For `ProfanityMarker=Asterisk`, profane words are replaced with `***`     |

    |                 | Example Source (Japanese)- 彼はジャッカスです。                           |

    |                 | Example Translation (English)- He is a ***.                               |

    |                 | For `ProfanityMarker=Tag`, profane words are surrounded by XML tags <profanity> and </profanity>

    |                 | Example Source (Japanese)- 彼はジャッカスです。                           |

    |                 | Example Translation (English)- He is a <profanity>jackass</profanity>.
  types:
  - uid: string
- name: profanityMarker
  in: query
  description: >
    Specifies how profanities should be marked in translations. Possible values are- `Asterisk` (default) or `Tag`.
  types:
  - uid: string
- name: includeAlignment
  in: query
  description: >
    Specifies whether to include alignment projection from source text to translated text. Possible values are- `true` or `false` (default).
  types:
  - uid: boolean
- name: includeSentenceLength
  in: query
  description: >
    Specifies whether to include sentence boundaries for the input text and the translated text. Possible values are- `true` or `false` (default).
  types:
  - uid: boolean
- name: suggestedFrom
  in: query
  description: >
    Specifies a fallback language if the language of the input text can't be identified. Language auto-detection is applied when the `from` parameter is omitted. If detection fails, the `suggestedFrom` language will be assumed.
  types:
  - uid: string
- name: fromScript
  in: query
  description: Specifies the script of the input text. Supported scripts are available from the languages method
  types:
  - uid: string
- name: toScript
  in: query
  description: Specifies the script of the translated text. Supported scripts are available from the languages method
  types:
  - uid: array
responses:
- name: 200 OK
  description: Success
  types:
  - uid: TranslateResultAll
    isArray: true
- name: Other Status Codes
  description: Error response.
  types:
  - uid: ErrorMessage
requestBody:
- name: default
  parameters:
  - name: text
    in: body
    description: "# Request body\nThe body of the request is a JSON array. Each array element is a JSON object with a string property named `Text`, which represents the string to translate.\nThe following limitations apply:\n* The array can have at most 25 elements.\n* The entire text included in the request cannot exceed 5,000 characters including spaces.\n# Response body\nA successful response is a JSON array with one result for each string in the input array. A result object includes the following properties-\n* `detectedLanguage`- An object describing the detected language through the following properties.\n  * `language`- A string representing the code of the detected language.\n  * `score`- A float value indicating the confidence in the result. The score is between zero and one and a low score indicates a low confidence.\n  The `detectedLanguage` property is only present in the result object when language auto-detection is requested.\n* `translations`- An array of translation results. The size of the array matches the number of target languages specified in the `to` query parameter. Each element in the array includes.\n  * `to` A string representing the language code of the target language.\n  * `text`- A string giving the translated text.\n  * `transliteration`- An object giving the translated text in the script specified by the `toScript` parameter.\n    * `script`- A string specifying the target script.\n    * `text`- A string giving the translated text in the target script.\n    The `transliteration` object is not included if transliteration does not take place.\n  *`alignment`- An object with a single string property named `proj`, which maps input text to translated text. The alignment information is only provided when the request parameter `includeAlignment` is `true`. Alignment is returned as a string value of the following format- `[[SourceTextStartIndex]-[SourceTextEndIndex]–[TgtTextStartIndex]-[TgtTextEndIndex]]`. The colon separates start and end index, the dash separates the languages, and space separates the words. One word may align with zero, one, or multiple words in the other language, and the aligned words may be non-contiguous. When no alignment information is available, the alignment element will be empty. See Obtain alignment information for an example and restrictions.\n  * `sentLen`- An object returning sentence boundaries in the input and output texts.\n    * `srcSentLen`- An integer array representing the lengths of the sentences in the input text. The length of the array is the number of sentences, and the values are the length of each sentence.\n    * `transSentLen`- An integer array representing the lengths of the sentences in the translated text. The length of the array is the number of sentences, and the values are the length of each sentence.\n    Sentence boundaries are only included when the request parameter `includeSentenceLength` is `true`.\n  * `sourceText`- An object with a single string property named `text`, which gives the input text in the default script of the source language. `sourceText` property is present only when the input is expressed in a script that's not the usual script for the language. For example, if the input were Arabic written in Latin script, then `sourceText.text` would be the same Arabic text converted into Arab script.\n  Example of JSON responses are provided in the examples section.\n  \n  \n"
    types:
    - uid: TranslateTextInput
      isArray: true
requestHeader:
- name: X-ClientTraceId
  in: header
  description: A client-generated GUID to uniquely identify the request. Note that you can omit this header if you include the trace ID in the query string using a query parameter named ClientTraceId.
  types:
  - uid: string
definitions:
- name: TranslateResultAll
  description: Example of a successful translate request, including all optional parameters.
  kind: object
  properties:
  - name: detectedLanguage
    description: ''
    types:
    - uid: DetectedLanguage
  - name: translations
    description: ''
    types:
    - uid: Translations
      isArray: true
- name: ErrorMessage
  kind: object
  properties:
  - name: error
    description: ''
    types:
    - uid: Error
- name: TranslateTextInput
  description: 'Text needed for a translate request '
  kind: object
  properties:
  - name: text
    description: ''
    types:
    - uid: string
- name: DetectedLanguage
  kind: object
  properties:
  - name: language
    description: ''
    types:
    - uid: string
  - name: score
    description: ''
    types:
    - uid: integer
- name: Translations
  kind: object
  properties:
  - name: normalizedTarget
    description: ''
    types:
    - uid: string
  - name: displayTarget
    description: ''
    types:
    - uid: string
  - name: posTag
    description: ''
    types:
    - uid: string
  - name: confidence
    description: ''
    types:
    - uid: number
  - name: prefixWord
    description: ''
    types:
    - uid: string
  - name: backTranslations
    description: ''
    types:
    - uid: BackTranslations
      isArray: true
- name: Error
  kind: object
  properties:
  - name: code
    description: ''
    types:
    - uid: string
  - name: message
    description: ''
    types:
    - uid: string
- name: BackTranslations
  kind: object
  properties:
  - name: normalizedText
    description: ''
    types:
    - uid: string
  - name: displayText
    description: ''
    types:
    - uid: string
  - name: numExamples
    description: ''
    types:
    - uid: integer
  - name: frequencyCount
    description: ''
    types:
    - uid: integer
examples:
- name: Translate success example
  request:
    uri: POST https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=en&to=es
    body: >-
      [
        {
          "Text": "I would really like to drive your car."
        }
      ]
  responses:
  - statusCode: "200"
    body: >-
      [
        {
          "translations": [
            {
              "text": "Realmente me gustaría conducir su coche.",
              "to": "es"
            }
          ]
        }
      ]
security:
- name: Ocp-Apim-Subscription-Key
  type: apiKey
  in: header
- name: Ocp-Apim-Subscription-Key
  type: apiKey
  in: header
- name: Ocp-Apim-Subscription-Region
  type: apiKey
  in: header
errorCodes: []
