### YamlMime:RESTOperation
uid: management.azure.com.datafactory.dataflows.createorupdate
name: Create Or Update
service: Data Factory
groupName: Data Flows
apiVersion: 2018-06-01
summary: Creates or updates a data flow.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}?api-version=2018-06-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription identifier.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The resource group name.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: factoryName
  in: path
  isRequired: true
  description: The factory name.
  types:
  - uid: string
  pattern: ^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$
- name: dataFlowName
  in: path
  isRequired: true
  description: The data flow name.
  types:
  - uid: string
  pattern: ^[A-Za-z0-9_][^<>*#.%&:\\+?/]*$
- name: api-version
  in: query
  isRequired: true
  description: The API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK.
  types:
  - uid: DataFlowResource
- name: Other Status Codes
  description: An error response received from the Azure Data Factory service.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: properties
    in: body
    isRequired: true
    description: Data flow properties.
    types:
    - uid: MappingDataFlow
    - uid: Flowlet
    - uid: WranglingDataFlow
    typesTitle: DataFlow
requestHeader:
- name: If-Match
  in: header
  description: ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update.
  types:
  - uid: string
definitions:
- name: DataFlowResource
  description: Data flow resource type.
  kind: object
  properties:
  - name: properties
    description: Data flow properties.
    types:
    - uid: MappingDataFlow
    - uid: Flowlet
    - uid: WranglingDataFlow
    typesTitle: DataFlow
  - name: id
    isReadyOnly: true
    description: The resource identifier.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The resource type.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: Etag identifies change in the resource.
    types:
    - uid: string
- name: CloudError
  description: The object that defines the structure of an Azure Data Factory error response.
  kind: object
  properties:
  - name: error.code
    description: Error code.
    types:
    - uid: string
  - name: error.message
    description: Error message.
    types:
    - uid: string
  - name: error.target
    description: Property name/path in request associated with error.
    types:
    - uid: string
  - name: error.details
    description: Array with additional error details.
    types:
    - uid: CloudError
      isArray: true
- name: MappingDataFlow
  description: Mapping data flow.
  kind: object
  properties:
  - name: typeProperties.sources
    description: List of sources in data flow.
    types:
    - uid: DataFlowSource
      isArray: true
  - name: typeProperties.sinks
    description: List of sinks in data flow.
    types:
    - uid: DataFlowSink
      isArray: true
  - name: typeProperties.transformations
    description: List of transformations in data flow.
    types:
    - uid: Transformation
      isArray: true
  - name: typeProperties.script
    description: DataFlow script.
    types:
    - uid: string
  - name: typeProperties.scriptLines
    description: Data flow script lines.
    types:
    - uid: string
      isArray: true
  - name: type
    description: Type of data flow.
    types:
    - uid: MappingDataFlow
    typesTitle: string
  - name: description
    description: The description of the data flow.
    types:
    - uid: string
  - name: annotations
    description: List of tags that can be used for describing the data flow.
    types:
    - uid: object
      isArray: true
  - name: folder
    description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
    types:
    - uid: Folder
- name: Flowlet
  description: Data flow flowlet
  kind: object
  properties:
  - name: typeProperties.sources
    description: List of sources in Flowlet.
    types:
    - uid: DataFlowSource
      isArray: true
  - name: typeProperties.sinks
    description: List of sinks in Flowlet.
    types:
    - uid: DataFlowSink
      isArray: true
  - name: typeProperties.transformations
    description: List of transformations in Flowlet.
    types:
    - uid: Transformation
      isArray: true
  - name: typeProperties.script
    description: Flowlet script.
    types:
    - uid: string
  - name: typeProperties.scriptLines
    description: Flowlet script lines.
    types:
    - uid: string
      isArray: true
  - name: type
    description: Type of data flow.
    types:
    - uid: Flowlet
    typesTitle: string
  - name: description
    description: The description of the data flow.
    types:
    - uid: string
  - name: annotations
    description: List of tags that can be used for describing the data flow.
    types:
    - uid: object
      isArray: true
  - name: folder
    description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
    types:
    - uid: Folder
- name: WranglingDataFlow
  description: Power Query data flow.
  kind: object
  properties:
  - name: typeProperties.sources
    description: List of sources in Power Query.
    types:
    - uid: PowerQuerySource
      isArray: true
  - name: typeProperties.script
    description: Power query mashup script.
    types:
    - uid: string
  - name: typeProperties.documentLocale
    description: Locale of the Power query mashup document.
    types:
    - uid: string
  - name: type
    description: Type of data flow.
    types:
    - uid: WranglingDataFlow
    typesTitle: string
  - name: description
    description: The description of the data flow.
    types:
    - uid: string
  - name: annotations
    description: List of tags that can be used for describing the data flow.
    types:
    - uid: object
      isArray: true
  - name: folder
    description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
    types:
    - uid: Folder
- name: DataFlowSource
  description: Transformation for data flow source.
  kind: object
  properties:
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: schemaLinkedService
    description: Schema linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
- name: DataFlowSink
  description: Transformation for data flow sink.
  kind: object
  properties:
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: schemaLinkedService
    description: Schema linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: rejectedDataLinkedService
    description: Rejected data linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
- name: Transformation
  description: A data flow transformation.
  kind: object
  properties:
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
- name: Folder
  description: The folder that this data flow is in. If not specified, Data flow will appear at the root level.
  kind: object
  properties:
  - name: name
    description: The name of the folder that this data flow is in.
    types:
    - uid: string
- name: PowerQuerySource
  description: Power query source.
  kind: object
  properties:
  - name: script
    description: source script.
    types:
    - uid: string
  - name: dataset
    description: Dataset reference.
    types:
    - uid: DatasetReference
  - name: linkedService
    description: Linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: schemaLinkedService
    description: Schema linked service reference.
    types:
    - uid: LinkedServiceReference
  - name: flowlet
    description: Flowlet Reference
    types:
    - uid: DataFlowReference
  - name: name
    description: Transformation name.
    types:
    - uid: string
  - name: description
    description: Transformation description.
    types:
    - uid: string
- name: DatasetReference
  description: Dataset reference type.
  kind: object
  properties:
  - name: type
    description: Dataset reference type.
    types:
    - uid: DatasetReference
    typesTitle: enum
  - name: referenceName
    description: Reference dataset name.
    types:
    - uid: string
  - name: parameters
    description: Arguments for dataset.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: object
- name: LinkedServiceReference
  description: Linked service reference type.
  kind: object
  properties:
  - name: type
    description: Linked service reference type.
    types:
    - uid: Type
  - name: referenceName
    description: Reference LinkedService name.
    types:
    - uid: string
  - name: parameters
    description: Arguments for LinkedService.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: object
- name: DataFlowReference
  description: Data flow reference type.
  kind: object
  properties:
  - name: type
    description: Data flow reference type.
    types:
    - uid: DataFlowReferenceType
  - name: referenceName
    description: Reference data flow name.
    types:
    - uid: string
  - name: datasetParameters
    description: Reference data flow parameters from dataset.
    types:
    - uid: object
  - name: parameters
    description: Data flow parameters
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: object
- name: Type
  description: Linked service reference type.
  kind: enum
  properties:
  - name: LinkedServiceReference
    types:
    - uid: string
- name: DataFlowReferenceType
  description: Data flow reference type.
  kind: enum
  properties:
  - name: DataFlowReference
    types:
    - uid: string
examples:
- name: DataFlows_Create
  request:
    uri: PUT https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/dataflows/exampleDataFlow?api-version=2018-06-01
    body: >-
      {
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "scriptLines": [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
            ]
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/dataflows/exampleDataFlow?api-version=2018-06-01

      {
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "scriptLines": [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
            ]
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.datafactory.models.DataFlowSink;
      import com.azure.resourcemanager.datafactory.models.DataFlowSource;
      import com.azure.resourcemanager.datafactory.models.DatasetReference;
      import com.azure.resourcemanager.datafactory.models.MappingDataFlow;
      import java.util.Arrays;

      /** Samples for DataFlows CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Create.json
           */
          /**
           * Sample code: DataFlows_Create.
           *
           * @param manager Entry point to DataFactoryManager.
           */
          public static void dataFlowsCreate(com.azure.resourcemanager.datafactory.DataFactoryManager manager) {
              manager
                  .dataFlows()
                  .define("exampleDataFlow")
                  .withExistingFactory("exampleResourceGroup", "exampleFactoryName")
                  .withProperties(
                      new MappingDataFlow()
                          .withDescription(
                              "Sample demo data flow to convert currencies showing usage of union, derive and conditional"
                                  + " split transformation.")
                          .withSources(
                              Arrays
                                  .asList(
                                      new DataFlowSource()
                                          .withName("USDCurrency")
                                          .withDataset(new DatasetReference().withReferenceName("CurrencyDatasetUSD")),
                                      new DataFlowSource()
                                          .withName("CADSource")
                                          .withDataset(new DatasetReference().withReferenceName("CurrencyDatasetCAD"))))
                          .withSinks(
                              Arrays
                                  .asList(
                                      new DataFlowSink()
                                          .withName("USDSink")
                                          .withDataset(new DatasetReference().withReferenceName("USDOutput")),
                                      new DataFlowSink()
                                          .withName("CADSink")
                                          .withDataset(new DatasetReference().withReferenceName("CADOutput"))))
                          .withScriptLines(
                              Arrays
                                  .asList(
                                      "source(output(",
                                      "PreviousConversionRate as double,",
                                      "Country as string,",
                                      "DateTime1 as string,",
                                      "CurrentConversionRate as double",
                                      "),",
                                      "allowSchemaDrift: false,",
                                      "validateSchema: false) ~> USDCurrency",
                                      "source(output(",
                                      "PreviousConversionRate as double,",
                                      "Country as string,",
                                      "DateTime1 as string,",
                                      "CurrentConversionRate as double",
                                      "),",
                                      "allowSchemaDrift: true,",
                                      "validateSchema: false) ~> CADSource",
                                      "USDCurrency, CADSource union(byName: true)~> Union",
                                      "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~>"
                                          + " NewCurrencyColumn",
                                      "NewCurrencyColumn split(Country == 'USD',",
                                      "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
                                      "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
                                      "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink")))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-datafactory_1.0.0-beta.18/sdk/datafactory/azure-resourcemanager-datafactory/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armdatafactory_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Create.json
      func ExampleDataFlowsClient_CreateOrUpdate_dataFlowsCreate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "exampleResourceGroup", "exampleFactoryName", "exampleDataFlow", armdatafactory.DataFlowResource{
      		Properties: &armdatafactory.MappingDataFlow{
      			Type:        to.Ptr("MappingDataFlow"),
      			Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
      			TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
      				ScriptLines: []*string{
      					to.Ptr("source(output("),
      					to.Ptr("PreviousConversionRate as double,"),
      					to.Ptr("Country as string,"),
      					to.Ptr("DateTime1 as string,"),
      					to.Ptr("CurrentConversionRate as double"),
      					to.Ptr("),"),
      					to.Ptr("allowSchemaDrift: false,"),
      					to.Ptr("validateSchema: false) ~> USDCurrency"),
      					to.Ptr("source(output("),
      					to.Ptr("PreviousConversionRate as double,"),
      					to.Ptr("Country as string,"),
      					to.Ptr("DateTime1 as string,"),
      					to.Ptr("CurrentConversionRate as double"),
      					to.Ptr("),"),
      					to.Ptr("allowSchemaDrift: true,"),
      					to.Ptr("validateSchema: false) ~> CADSource"),
      					to.Ptr("USDCurrency, CADSource union(byName: true)~> Union"),
      					to.Ptr("Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn"),
      					to.Ptr("NewCurrencyColumn split(Country == 'USD',"),
      					to.Ptr("Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)"),
      					to.Ptr("ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink"),
      					to.Ptr("ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink")},
      				Sinks: []*armdatafactory.DataFlowSink{
      					{
      						Name: to.Ptr("USDSink"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("USDOutput"),
      						},
      					},
      					{
      						Name: to.Ptr("CADSink"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("CADOutput"),
      						},
      					}},
      				Sources: []*armdatafactory.DataFlowSource{
      					{
      						Name: to.Ptr("USDCurrency"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("CurrencyDatasetUSD"),
      						},
      					},
      					{
      						Name: to.Ptr("CADSource"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("CurrencyDatasetCAD"),
      						},
      					}},
      			},
      		},
      	}, &armdatafactory.DataFlowsClientCreateOrUpdateOptions{IfMatch: nil})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fdatafactory%2Farmdatafactory%2Fv2.0.0/sdk/resourcemanager/datafactory/armdatafactory/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { DataFactoryManagementClient } = require("@azure/arm-datafactory");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a data flow.
       *
       * @summary Creates or updates a data flow.
       * x-ms-original-file: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Create.json
       */
      async function dataFlowsCreate() {
        const subscriptionId = "12345678-1234-1234-1234-12345678abc";
        const resourceGroupName = "exampleResourceGroup";
        const factoryName = "exampleFactoryName";
        const dataFlowName = "exampleDataFlow";
        const dataFlow = {
          properties: {
            type: "MappingDataFlow",
            description:
              "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
            scriptLines: [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
            ],
            sinks: [
              {
                name: "USDSink",
                dataset: { type: "DatasetReference", referenceName: "USDOutput" },
              },
              {
                name: "CADSink",
                dataset: { type: "DatasetReference", referenceName: "CADOutput" },
              },
            ],
            sources: [
              {
                name: "USDCurrency",
                dataset: {
                  type: "DatasetReference",
                  referenceName: "CurrencyDatasetUSD",
                },
              },
              {
                name: "CADSource",
                dataset: {
                  type: "DatasetReference",
                  referenceName: "CurrencyDatasetCAD",
                },
              },
            ],
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new DataFactoryManagementClient(credential, subscriptionId);
        const result = await client.dataFlows.createOrUpdate(
          resourceGroupName,
          factoryName,
          dataFlowName,
          dataFlow
        );
        console.log(result);
      }

      dataFlowsCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-datafactory_10.9.0/sdk/datafactory/arm-datafactory/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    headers:
    - name: Date
      value: Sat, 16 Jun 2019 00:37:38 GMT
    - name: X-Content-Type-Options
      value: nosniff
    - name: x-ms-ratelimit-remaining-subscription-writes
      value: "1194"
    - name: x-ms-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
    - name: x-ms-correlation-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
    body: >-
      {
        "id": "/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset",
        "name": "exampleDataFlow",
        "type": "Microsoft.DataFactory/factories/dataflows",
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "scriptLines": [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
            ]
          }
        },
        "etag": "0a0066d4-0000-0000-0000-5b245bd20000"
      }
- name: DataFlows_Update
  request:
    uri: PUT https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/dataflows/exampleDataFlow?api-version=2018-06-01
    body: >-
      {
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "scriptLines": [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
            ]
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/dataflows/exampleDataFlow?api-version=2018-06-01

      {
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "scriptLines": [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
            ]
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.datafactory.models.DataFlowResource;
      import com.azure.resourcemanager.datafactory.models.DataFlowSink;
      import com.azure.resourcemanager.datafactory.models.DataFlowSource;
      import com.azure.resourcemanager.datafactory.models.DatasetReference;
      import com.azure.resourcemanager.datafactory.models.MappingDataFlow;
      import java.util.Arrays;

      /** Samples for DataFlows CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Update.json
           */
          /**
           * Sample code: DataFlows_Update.
           *
           * @param manager Entry point to DataFactoryManager.
           */
          public static void dataFlowsUpdate(com.azure.resourcemanager.datafactory.DataFactoryManager manager) {
              DataFlowResource resource =
                  manager
                      .dataFlows()
                      .getWithResponse("exampleResourceGroup", "exampleFactoryName", "exampleDataFlow", null, Context.NONE)
                      .getValue();
              resource
                  .update()
                  .withProperties(
                      new MappingDataFlow()
                          .withDescription(
                              "Sample demo data flow to convert currencies showing usage of union, derive and conditional"
                                  + " split transformation.")
                          .withSources(
                              Arrays
                                  .asList(
                                      new DataFlowSource()
                                          .withName("USDCurrency")
                                          .withDataset(new DatasetReference().withReferenceName("CurrencyDatasetUSD")),
                                      new DataFlowSource()
                                          .withName("CADSource")
                                          .withDataset(new DatasetReference().withReferenceName("CurrencyDatasetCAD"))))
                          .withSinks(
                              Arrays
                                  .asList(
                                      new DataFlowSink()
                                          .withName("USDSink")
                                          .withDataset(new DatasetReference().withReferenceName("USDOutput")),
                                      new DataFlowSink()
                                          .withName("CADSink")
                                          .withDataset(new DatasetReference().withReferenceName("CADOutput"))))
                          .withScriptLines(
                              Arrays
                                  .asList(
                                      "source(output(",
                                      "PreviousConversionRate as double,",
                                      "Country as string,",
                                      "DateTime1 as string,",
                                      "CurrentConversionRate as double",
                                      "),",
                                      "allowSchemaDrift: false,",
                                      "validateSchema: false) ~> USDCurrency",
                                      "source(output(",
                                      "PreviousConversionRate as double,",
                                      "Country as string,",
                                      "DateTime1 as string,",
                                      "CurrentConversionRate as double",
                                      "),",
                                      "allowSchemaDrift: true,",
                                      "validateSchema: false) ~> CADSource",
                                      "USDCurrency, CADSource union(byName: true)~> Union",
                                      "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~>"
                                          + " NewCurrencyColumn",
                                      "NewCurrencyColumn split(Country == 'USD',",
                                      "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
                                      "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
                                      "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink")))
                  .apply();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-datafactory_1.0.0-beta.18/sdk/datafactory/azure-resourcemanager-datafactory/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armdatafactory_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Update.json
      func ExampleDataFlowsClient_CreateOrUpdate_dataFlowsUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armdatafactory.NewDataFlowsClient("12345678-1234-1234-1234-12345678abc", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx, "exampleResourceGroup", "exampleFactoryName", "exampleDataFlow", armdatafactory.DataFlowResource{
      		Properties: &armdatafactory.MappingDataFlow{
      			Type:        to.Ptr("MappingDataFlow"),
      			Description: to.Ptr("Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation."),
      			TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
      				ScriptLines: []*string{
      					to.Ptr("source(output("),
      					to.Ptr("PreviousConversionRate as double,"),
      					to.Ptr("Country as string,"),
      					to.Ptr("DateTime1 as string,"),
      					to.Ptr("CurrentConversionRate as double"),
      					to.Ptr("),"),
      					to.Ptr("allowSchemaDrift: false,"),
      					to.Ptr("validateSchema: false) ~> USDCurrency"),
      					to.Ptr("source(output("),
      					to.Ptr("PreviousConversionRate as double,"),
      					to.Ptr("Country as string,"),
      					to.Ptr("DateTime1 as string,"),
      					to.Ptr("CurrentConversionRate as double"),
      					to.Ptr("),"),
      					to.Ptr("allowSchemaDrift: true,"),
      					to.Ptr("validateSchema: false) ~> CADSource"),
      					to.Ptr("USDCurrency, CADSource union(byName: true)~> Union"),
      					to.Ptr("Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn"),
      					to.Ptr("NewCurrencyColumn split(Country == 'USD',"),
      					to.Ptr("Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)"),
      					to.Ptr("ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink"),
      					to.Ptr("ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink")},
      				Sinks: []*armdatafactory.DataFlowSink{
      					{
      						Name: to.Ptr("USDSink"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("USDOutput"),
      						},
      					},
      					{
      						Name: to.Ptr("CADSink"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("CADOutput"),
      						},
      					}},
      				Sources: []*armdatafactory.DataFlowSource{
      					{
      						Name: to.Ptr("USDCurrency"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("CurrencyDatasetUSD"),
      						},
      					},
      					{
      						Name: to.Ptr("CADSource"),
      						Dataset: &armdatafactory.DatasetReference{
      							Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
      							ReferenceName: to.Ptr("CurrencyDatasetCAD"),
      						},
      					}},
      			},
      		},
      	}, &armdatafactory.DataFlowsClientCreateOrUpdateOptions{IfMatch: nil})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fdatafactory%2Farmdatafactory%2Fv2.0.0/sdk/resourcemanager/datafactory/armdatafactory/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { DataFactoryManagementClient } = require("@azure/arm-datafactory");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a data flow.
       *
       * @summary Creates or updates a data flow.
       * x-ms-original-file: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlows_Update.json
       */
      async function dataFlowsUpdate() {
        const subscriptionId = "12345678-1234-1234-1234-12345678abc";
        const resourceGroupName = "exampleResourceGroup";
        const factoryName = "exampleFactoryName";
        const dataFlowName = "exampleDataFlow";
        const dataFlow = {
          properties: {
            type: "MappingDataFlow",
            description:
              "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
            scriptLines: [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink",
            ],
            sinks: [
              {
                name: "USDSink",
                dataset: { type: "DatasetReference", referenceName: "USDOutput" },
              },
              {
                name: "CADSink",
                dataset: { type: "DatasetReference", referenceName: "CADOutput" },
              },
            ],
            sources: [
              {
                name: "USDCurrency",
                dataset: {
                  type: "DatasetReference",
                  referenceName: "CurrencyDatasetUSD",
                },
              },
              {
                name: "CADSource",
                dataset: {
                  type: "DatasetReference",
                  referenceName: "CurrencyDatasetCAD",
                },
              },
            ],
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new DataFactoryManagementClient(credential, subscriptionId);
        const result = await client.dataFlows.createOrUpdate(
          resourceGroupName,
          factoryName,
          dataFlowName,
          dataFlow
        );
        console.log(result);
      }

      dataFlowsUpdate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-datafactory_10.9.0/sdk/datafactory/arm-datafactory/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    headers:
    - name: Date
      value: Sat, 16 Jun 2019 00:37:38 GMT
    - name: X-Content-Type-Options
      value: nosniff
    - name: x-ms-ratelimit-remaining-subscription-writes
      value: "1193"
    - name: x-ms-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
    - name: x-ms-correlation-request-id
      value: ce95d6dd-c04d-4b02-b7ad-fe79c9b26df0
    body: >-
      {
        "id": "/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/datasets/exampleDataset",
        "name": "exampleDataFlow",
        "type": "Microsoft.DataFactory/factories/dataflows",
        "properties": {
          "description": "Sample demo data flow to convert currencies showing usage of union, derive and conditional split transformation.",
          "type": "MappingDataFlow",
          "typeProperties": {
            "sources": [
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetUSD",
                  "type": "DatasetReference"
                },
                "name": "USDCurrency"
              },
              {
                "dataset": {
                  "referenceName": "CurrencyDatasetCAD",
                  "type": "DatasetReference"
                },
                "name": "CADSource"
              }
            ],
            "sinks": [
              {
                "dataset": {
                  "referenceName": "USDOutput",
                  "type": "DatasetReference"
                },
                "name": "USDSink"
              },
              {
                "dataset": {
                  "referenceName": "CADOutput",
                  "type": "DatasetReference"
                },
                "name": "CADSink"
              }
            ],
            "scriptLines": [
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: false,",
              "validateSchema: false) ~> USDCurrency",
              "source(output(",
              "PreviousConversionRate as double,",
              "Country as string,",
              "DateTime1 as string,",
              "CurrentConversionRate as double",
              "),",
              "allowSchemaDrift: true,",
              "validateSchema: false) ~> CADSource",
              "USDCurrency, CADSource union(byName: true)~> Union",
              "Union derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn",
              "NewCurrencyColumn split(Country == 'USD',",
              "Country == 'CAD',disjoint: false) ~> ConditionalSplit1@(USD, CAD)",
              "ConditionalSplit1@USD sink(saveMode:'overwrite' ) ~> USDSink",
              "ConditionalSplit1@CAD sink(saveMode:'overwrite' ) ~> CADSink"
            ]
          }
        },
        "etag": "0a0068d4-0000-0000-0000-5b245bd30002"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Data Factory service - Creates or updates a data flow.
errorCodes: []
