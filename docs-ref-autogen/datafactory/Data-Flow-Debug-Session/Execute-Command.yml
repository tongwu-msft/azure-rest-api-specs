### YamlMime:RESTOperation
uid: management.azure.com.datafactory.dataflowdebugsession.executecommand
name: Execute Command
service: Data Factory
groupName: Data Flow Debug Session
apiVersion: 2018-06-01
summary: Execute a data flow debug command.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand?api-version=2018-06-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription identifier.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The resource group name.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: factoryName
  in: path
  isRequired: true
  description: The factory name.
  types:
  - uid: string
  pattern: ^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$
- name: api-version
  in: query
  isRequired: true
  description: The API version.
  types:
  - uid: string
responses:
- name: 202 Accepted
  headers:
  - name: location
    value: string
  description: Accepted.
- name: 200 OK
  description: OK.
  types:
  - uid: DataFlowDebugCommandResponse
- name: Other Status Codes
  description: An error response received from the Azure Data Factory service.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: sessionId
    in: body
    description: The ID of data flow debug session.
    types:
    - uid: string
  - name: command
    in: body
    description: The command type.
    types:
    - uid: DataFlowDebugCommandType
  - name: commandPayload
    in: body
    description: The command payload object.
    types:
    - uid: DataFlowDebugCommandPayload
requestHeader: []
definitions:
- name: DataFlowDebugCommandPayload
  description: Structure of command payload.
  kind: object
  properties:
  - name: streamName
    description: The stream name which is used for preview.
    types:
    - uid: string
  - name: rowLimits
    description: Row limits for preview response.
    types:
    - uid: integer
  - name: columns
    description: Array of column names.
    types:
    - uid: string
      isArray: true
  - name: expression
    description: The expression which is used for preview.
    types:
    - uid: string
- name: DataFlowDebugCommandResponse
  description: Response body structure of data flow result for data preview, statistics or expression preview.
  kind: object
  properties:
  - name: status
    description: The run status of data preview, statistics or expression preview.
    types:
    - uid: string
  - name: data
    description: The result data of data preview, statistics or expression preview.
    types:
    - uid: string
- name: CloudError
  description: The object that defines the structure of an Azure Data Factory error response.
  kind: object
  properties:
  - name: error.code
    description: Error code.
    types:
    - uid: string
  - name: error.message
    description: Error message.
    types:
    - uid: string
  - name: error.target
    description: Property name/path in request associated with error.
    types:
    - uid: string
  - name: error.details
    description: Array with additional error details.
    types:
    - uid: CloudError
      isArray: true
- name: DataFlowDebugCommandRequest
  description: Request body structure for data flow debug command.
  kind: object
  properties:
  - name: sessionId
    description: The ID of data flow debug session.
    types:
    - uid: string
  - name: command
    description: The command type.
    types:
    - uid: DataFlowDebugCommandType
  - name: commandPayload
    description: The command payload object.
    types:
    - uid: DataFlowDebugCommandPayload
- name: DataFlowDebugCommandType
  description: The command type.
  kind: enum
  properties:
  - name: executePreviewQuery
    types:
    - uid: string
  - name: executeStatisticsQuery
    types:
    - uid: string
  - name: executeExpressionQuery
    types:
    - uid: string
examples:
- name: DataFlowDebugSession_ExecuteCommand
  request:
    uri: POST https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/executeDataFlowDebugCommand?api-version=2018-06-01
    body: >-
      {
        "commandPayload": {
          "streamName": "source1",
          "rowLimits": 100
        },
        "command": "executePreviewQuery",
        "sessionId": "f06ed247-9d07-49b2-b05e-2cb4a2fc871e"
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/executeDataFlowDebugCommand?api-version=2018-06-01

      {
        "commandPayload": {
          "streamName": "source1",
          "rowLimits": 100
        },
        "command": "executePreviewQuery",
        "sessionId": "f06ed247-9d07-49b2-b05e-2cb4a2fc871e"
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandPayload;
      import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandRequest;
      import com.azure.resourcemanager.datafactory.models.DataFlowDebugCommandType;

      /** Samples for DataFlowDebugSession ExecuteCommand. */
      public final class Main {
          /*
           * x-ms-original-file: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json
           */
          /**
           * Sample code: DataFlowDebugSession_ExecuteCommand.
           *
           * @param manager Entry point to DataFactoryManager.
           */
          public static void dataFlowDebugSessionExecuteCommand(
              com.azure.resourcemanager.datafactory.DataFactoryManager manager) {
              manager
                  .dataFlowDebugSessions()
                  .executeCommand(
                      "exampleResourceGroup",
                      "exampleFactoryName",
                      new DataFlowDebugCommandRequest()
                          .withSessionId("f06ed247-9d07-49b2-b05e-2cb4a2fc871e")
                          .withCommand(DataFlowDebugCommandType.EXECUTE_PREVIEW_QUERY)
                          .withCommandPayload(new DataFlowDebugCommandPayload().withStreamName("source1").withRowLimits(100)),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-datafactory_1.0.0-beta.16/sdk/datafactory/azure-resourcemanager-datafactory/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armdatafactory_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json
      func ExampleDataFlowDebugSessionClient_BeginExecuteCommand() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armdatafactory.NewDataFlowDebugSessionClient("12345678-1234-1234-1234-12345678abc", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginExecuteCommand(ctx,
      		"exampleResourceGroup",
      		"exampleFactoryName",
      		armdatafactory.DataFlowDebugCommandRequest{
      			Command: to.Ptr(armdatafactory.DataFlowDebugCommandTypeExecutePreviewQuery),
      			CommandPayload: &armdatafactory.DataFlowDebugCommandPayload{
      				RowLimits:  to.Ptr[int32](100),
      				StreamName: to.Ptr("source1"),
      			},
      			SessionID: to.Ptr("f06ed247-9d07-49b2-b05e-2cb4a2fc871e"),
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fdatafactory%2Farmdatafactory%2Fv1.2.0/sdk/resourcemanager/datafactory/armdatafactory/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { DataFactoryManagementClient } = require("@azure/arm-datafactory");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Execute a data flow debug command.
       *
       * @summary Execute a data flow debug command.
       * x-ms-original-file: specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json
       */
      async function dataFlowDebugSessionExecuteCommand() {
        const subscriptionId = "12345678-1234-1234-1234-12345678abc";
        const resourceGroupName = "exampleResourceGroup";
        const factoryName = "exampleFactoryName";
        const request = {
          command: "executePreviewQuery",
          commandPayload: { rowLimits: 100, streamName: "source1" },
          sessionId: "f06ed247-9d07-49b2-b05e-2cb4a2fc871e",
        };
        const credential = new DefaultAzureCredential();
        const client = new DataFactoryManagementClient(credential, subscriptionId);
        const result = await client.dataFlowDebugSession.beginExecuteCommandAndWait(
          resourceGroupName,
          factoryName,
          request
        );
        console.log(result);
      }

      dataFlowDebugSessionExecuteCommand().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-datafactory_10.7.0/sdk/datafactory/arm-datafactory/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "202"
    headers:
    - name: Date
      value: Sat, 16 Jun 2018 00:40:01 GMT
    - name: X-Content-Type-Options
      value: nosniff
    - name: x-ms-ratelimit-remaining-subscription-reads
      value: "14989"
    - name: x-ms-request-id
      value: 2f955e10-c6df-45a7-97d4-81acdb8540cd
    - name: x-ms-correlation-request-id
      value: 2f955e10-c6df-45a7-97d4-81acdb8540cd
    - name: location
      value: https://management.azure.com/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.DataFactory/factories/exampleFactoryName/operationResults/dfCommandOutput$$f06ed247-9d07-49b2-b05e-2cb4a2fc871e$$e5328ee7-c524-4207-8ba4-b709010db33d$$ace5eaf0-3e93-45ba-ada3-bf77da321a7b?api-version=2018-06-01
  - statusCode: "200"
    body: >-
      {
        "status": "Succeeded",
        "data": "some output"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Data Factory service - Execute a data flow debug command.
errorCodes: []
