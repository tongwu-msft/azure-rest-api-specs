### YamlMime:RESTOperation
uid: management.azure.com.media.streaminglocators.listpaths
name: List Paths
service: Media Services
groupName: Streaming Locators
apiVersion: 2021-11-01
summary: List Paths supported by this Streaming Locator
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listPaths?api-version=2021-11-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The unique identifier for a Microsoft Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the Azure subscription.
  types:
  - uid: string
- name: accountName
  in: path
  isRequired: true
  description: The Media Services account name.
  types:
  - uid: string
- name: streamingLocatorName
  in: path
  isRequired: true
  description: The Streaming Locator name.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The version of the API to be used with the client request.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: ListPathsResponse
- name: Other Status Codes
  description: Detailed error information.
  types:
  - uid: ErrorResponse
requestHeader: []
definitions:
- name: ListPathsResponse
  description: Class of response for listPaths action
  kind: object
  properties:
  - name: streamingPaths
    description: Streaming Paths supported by current Streaming Locator
    types:
    - uid: StreamingPath
      isArray: true
  - name: downloadPaths
    description: Download Paths supported by current Streaming Locator
    types:
    - uid: string
      isArray: true
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: StreamingPath
  description: Class of paths for streaming
  kind: object
  properties:
  - name: streamingProtocol
    description: Streaming protocol
    types:
    - uid: StreamingPolicyStreamingProtocol
  - name: encryptionScheme
    description: Encryption scheme
    types:
    - uid: EncryptionScheme
  - name: paths
    description: Streaming paths for each protocol and encryptionScheme pair
    types:
    - uid: string
      isArray: true
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: StreamingPolicyStreamingProtocol
  description: Streaming protocol
  kind: enum
  properties:
  - name: Hls
    description: HLS protocol
    types:
    - uid: string
  - name: Dash
    description: DASH protocol
    types:
    - uid: string
  - name: SmoothStreaming
    description: SmoothStreaming protocol
    types:
    - uid: string
  - name: Download
    description: Download protocol
    types:
    - uid: string
- name: EncryptionScheme
  description: Encryption scheme
  kind: enum
  properties:
  - name: NoEncryption
    description: NoEncryption scheme
    types:
    - uid: string
  - name: EnvelopeEncryption
    description: EnvelopeEncryption scheme
    types:
    - uid: string
  - name: CommonEncryptionCenc
    description: CommonEncryptionCenc scheme
    types:
    - uid: string
  - name: CommonEncryptionCbcs
    description: CommonEncryptionCbcs scheme
    types:
    - uid: string
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: List Paths which has streaming paths only
  request:
    uri: POST https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingLocators/secureStreamingLocator/listPaths?api-version=2021-11-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingLocators/secureStreamingLocator/listPaths?api-version=2021-11-01
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;

      /** Samples for StreamingLocators ListPaths. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-11-01/examples/streaming-locators-list-paths-streaming-only.json
           */
          /**
           * Sample code: List Paths which has streaming paths only.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void listPathsWhichHasStreamingPathsOnly(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingLocators()
                  .listPathsWithResponse("contoso", "contosomedia", "secureStreamingLocator", Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.1.0/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to List Paths supported by this Streaming Locator
       *
       * @summary List Paths supported by this Streaming Locator
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-11-01/examples/streaming-locators-list-paths-streaming-only.json
       */
      async function listPathsWhichHasStreamingPathsOnly() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingLocatorName = "secureStreamingLocator";
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingLocators.listPaths(
          resourceGroupName,
          accountName,
          streamingLocatorName
        );
        console.log(result);
      }

      listPathsWhichHasStreamingPathsOnly().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_12.1.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "streamingPaths": [
          {
            "streamingProtocol": "Hls",
            "encryptionScheme": "EnvelopeEncryption",
            "paths": [
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=m3u8-aapl,encryption=cbc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=m3u8-aapl,encryption=cbc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=m3u8-aapl,encryption=cbc)"
            ]
          },
          {
            "streamingProtocol": "Dash",
            "encryptionScheme": "EnvelopeEncryption",
            "paths": [
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=mpd-time-csf,encryption=cbc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=mpd-time-csf,encryption=cbc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=mpd-time-csf,encryption=cbc)"
            ]
          },
          {
            "streamingProtocol": "SmoothStreaming",
            "encryptionScheme": "EnvelopeEncryption",
            "paths": [
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(encryption=cbc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(encryption=cbc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(encryption=cbc)"
            ]
          },
          {
            "streamingProtocol": "Dash",
            "encryptionScheme": "CommonEncryptionCenc",
            "paths": [
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=mpd-time-csf,encryption=cenc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=mpd-time-csf,encryption=cenc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=mpd-time-csf,encryption=cenc)"
            ]
          },
          {
            "streamingProtocol": "SmoothStreaming",
            "encryptionScheme": "CommonEncryptionCenc",
            "paths": [
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(encryption=cenc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(encryption=cenc)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(encryption=cenc)"
            ]
          },
          {
            "streamingProtocol": "Hls",
            "encryptionScheme": "CommonEncryptionCbcs",
            "paths": [
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest1.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest2.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)",
              "/c3cd62e3-d117-4619-bcbd-99f96edd8dbe/videoManifest3.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)"
            ]
          }
        ],
        "downloadPaths": []
      }
- name: List Paths which has streaming paths and download paths
  request:
    uri: POST https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingLocators/clearStreamingLocator/listPaths?api-version=2021-11-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingLocators/clearStreamingLocator/listPaths?api-version=2021-11-01
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;

      /** Samples for StreamingLocators ListPaths. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-11-01/examples/streaming-locators-list-paths-streaming-and-download.json
           */
          /**
           * Sample code: List Paths which has streaming paths and download paths.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void listPathsWhichHasStreamingPathsAndDownloadPaths(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingLocators()
                  .listPathsWithResponse("contoso", "contosomedia", "clearStreamingLocator", Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.1.0/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-11-01/examples/streaming-locators-list-paths-streaming-and-download.json
      func ExampleStreamingLocatorsClient_ListPaths() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingLocatorsClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.ListPaths(ctx,
      		"contoso",
      		"contosomedia",
      		"clearStreamingLocator",
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.0.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to List Paths supported by this Streaming Locator
       *
       * @summary List Paths supported by this Streaming Locator
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2021-11-01/examples/streaming-locators-list-paths-streaming-and-download.json
       */
      async function listPathsWhichHasStreamingPathsAndDownloadPaths() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingLocatorName = "clearStreamingLocator";
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingLocators.listPaths(
          resourceGroupName,
          accountName,
          streamingLocatorName
        );
        console.log(result);
      }

      listPathsWhichHasStreamingPathsAndDownloadPaths().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_12.1.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "streamingPaths": [
          {
            "streamingProtocol": "Hls",
            "encryptionScheme": "NoEncryption",
            "paths": [
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest1.ism/manifest(format=m3u8-aapl)",
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest2.ism/manifest(format=m3u8-aapl)",
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest3.ism/manifest(format=m3u8-aapl)"
            ]
          },
          {
            "streamingProtocol": "Dash",
            "encryptionScheme": "NoEncryption",
            "paths": [
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest1.ism/manifest(format=mpd-time-csf)",
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest2.ism/manifest(format=mpd-time-csf)",
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest3.ism/manifest(format=mpd-time-csf)"
            ]
          },
          {
            "streamingProtocol": "SmoothStreaming",
            "encryptionScheme": "NoEncryption",
            "paths": [
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest1.ism/manifest",
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest2.ism/manifest",
              "/262a87b6-b538-4657-bac1-b6897924471d/videoManifest3.ism/manifest"
            ]
          }
        ],
        "downloadPaths": [
          "/262a87b6-b538-4657-bac1-b6897924471d/textTrack.vtt",
          "/262a87b6-b538-4657-bac1-b6897924471d/video1.mp4",
          "/262a87b6-b538-4657-bac1-b6897924471d/video2.mp4",
          "/262a87b6-b538-4657-bac1-b6897924471d/video3.mp4"
        ]
      }
security: []
metadata:
  description: >
    Learn more about Media Services service - List Paths supported by this Streaming Locator
errorCodes: []
