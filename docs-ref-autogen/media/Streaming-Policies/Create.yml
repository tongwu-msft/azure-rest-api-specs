### YamlMime:RESTOperation
uid: management.azure.com.media.streamingpolicies.create
name: Create
service: Media Services
groupName: Streaming Policies
apiVersion: 2022-08-01
summary: Create a Streaming Policy in the Media Services account
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}?api-version=2022-08-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The unique identifier for a Microsoft Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the Azure subscription.
  types:
  - uid: string
- name: accountName
  in: path
  isRequired: true
  description: The Media Services account name.
  types:
  - uid: string
- name: streamingPolicyName
  in: path
  isRequired: true
  description: The Streaming Policy name.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The version of the API to be used with the client request.
  types:
  - uid: string
responses:
- name: 201 Created
  description: Created
  types:
  - uid: StreamingPolicy
- name: Other Status Codes
  description: Detailed error information.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: properties.defaultContentKeyPolicyName
    in: body
    description: Default ContentKey used by current Streaming Policy
    types:
    - uid: string
  - name: properties.envelopeEncryption
    in: body
    description: Configuration of EnvelopeEncryption
    types:
    - uid: EnvelopeEncryption
  - name: properties.commonEncryptionCenc
    in: body
    description: Configuration of CommonEncryptionCenc
    types:
    - uid: CommonEncryptionCenc
  - name: properties.commonEncryptionCbcs
    in: body
    description: Configuration of CommonEncryptionCbcs
    types:
    - uid: CommonEncryptionCbcs
  - name: properties.noEncryption
    in: body
    description: Configurations of NoEncryption
    types:
    - uid: NoEncryption
requestHeader: []
definitions:
- name: systemData
  description: Metadata pertaining to creation and last modification of the resource.
  kind: object
  properties:
  - name: createdBy
    description: The identity that created the resource.
    types:
    - uid: string
  - name: createdByType
    description: The type of identity that created the resource.
    types:
    - uid: createdByType
  - name: createdAt
    description: The timestamp of resource creation (UTC).
    types:
    - uid: string
  - name: lastModifiedBy
    description: The identity that last modified the resource.
    types:
    - uid: string
  - name: lastModifiedByType
    description: The type of identity that last modified the resource.
    types:
    - uid: createdByType
  - name: lastModifiedAt
    description: The timestamp of resource last modification (UTC)
    types:
    - uid: string
- name: EnvelopeEncryption
  description: Class for EnvelopeEncryption encryption scheme
  kind: object
  properties:
  - name: enabledProtocols
    description: Representing supported protocols
    types:
    - uid: EnabledProtocols
  - name: clearTracks
    description: Representing which tracks should not be encrypted
    types:
    - uid: TrackSelection
      isArray: true
  - name: contentKeys
    description: Representing default content key for each encryption scheme and separate content keys for specific tracks
    types:
    - uid: StreamingPolicyContentKeys
  - name: customKeyAcquisitionUrlTemplate
    description: Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    types:
    - uid: string
- name: CommonEncryptionCenc
  description: Class for envelope encryption scheme
  kind: object
  properties:
  - name: enabledProtocols
    description: Representing supported protocols
    types:
    - uid: EnabledProtocols
  - name: clearTracks
    description: Representing which tracks should not be encrypted
    types:
    - uid: TrackSelection
      isArray: true
  - name: contentKeys
    description: Representing default content key for each encryption scheme and separate content keys for specific tracks
    types:
    - uid: StreamingPolicyContentKeys
  - name: drm
    description: Configuration of DRMs for CommonEncryptionCenc encryption scheme
    types:
    - uid: CencDrmConfiguration
  - name: clearKeyEncryptionConfiguration
    description: Optional configuration supporting ClearKey in CommonEncryptionCenc encryption scheme.
    types:
    - uid: ClearKeyEncryptionConfiguration
- name: CommonEncryptionCbcs
  description: Class for CommonEncryptionCbcs encryption scheme
  kind: object
  properties:
  - name: enabledProtocols
    description: Representing supported protocols
    types:
    - uid: EnabledProtocols
  - name: clearTracks
    description: Representing which tracks should not be encrypted
    types:
    - uid: TrackSelection
      isArray: true
  - name: contentKeys
    description: Representing default content key for each encryption scheme and separate content keys for specific tracks
    types:
    - uid: StreamingPolicyContentKeys
  - name: drm
    description: Configuration of DRMs for current encryption scheme
    types:
    - uid: CbcsDrmConfiguration
  - name: clearKeyEncryptionConfiguration
    description: Optional configuration supporting ClearKey in CommonEncryptionCbcs encryption scheme.
    types:
    - uid: ClearKeyEncryptionConfiguration
- name: NoEncryption
  description: Class for NoEncryption scheme
  kind: object
  properties:
  - name: enabledProtocols
    description: Representing supported protocols
    types:
    - uid: EnabledProtocols
- name: StreamingPolicy
  description: A Streaming Policy resource
  kind: object
  properties:
  - name: systemData
    isReadyOnly: true
    description: The system metadata relating to this resource.
    types:
    - uid: systemData
  - name: properties.created
    isReadyOnly: true
    description: Creation time of Streaming Policy
    types:
    - uid: string
  - name: properties.defaultContentKeyPolicyName
    description: Default ContentKey used by current Streaming Policy
    types:
    - uid: string
  - name: properties.envelopeEncryption
    description: Configuration of EnvelopeEncryption
    types:
    - uid: EnvelopeEncryption
  - name: properties.commonEncryptionCenc
    description: Configuration of CommonEncryptionCenc
    types:
    - uid: CommonEncryptionCenc
  - name: properties.commonEncryptionCbcs
    description: Configuration of CommonEncryptionCbcs
    types:
    - uid: CommonEncryptionCbcs
  - name: properties.noEncryption
    description: Configurations of NoEncryption
    types:
    - uid: NoEncryption
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: createdByType
  description: The type of identity that created the resource.
  kind: enum
  properties:
  - name: User
    types:
    - uid: string
  - name: Application
    types:
    - uid: string
  - name: ManagedIdentity
    types:
    - uid: string
  - name: Key
    types:
    - uid: string
- name: EnabledProtocols
  description: Class to specify which protocols are enabled
  kind: object
  properties:
  - name: download
    description: Enable Download protocol or not
    types:
    - uid: boolean
  - name: dash
    description: Enable DASH protocol or not
    types:
    - uid: boolean
  - name: hls
    description: Enable HLS protocol or not
    types:
    - uid: boolean
  - name: smoothStreaming
    description: Enable SmoothStreaming protocol or not
    types:
    - uid: boolean
- name: TrackSelection
  description: Class to select a track
  kind: object
  properties:
  - name: trackSelections
    description: TrackSelections is a track property condition list which can specify track(s)
    types:
    - uid: TrackPropertyCondition
      isArray: true
- name: StreamingPolicyContentKeys
  description: Class to specify properties of all content keys in Streaming Policy
  kind: object
  properties:
  - name: defaultKey
    description: Default content key for an encryption scheme
    types:
    - uid: DefaultKey
  - name: keyToTrackMappings
    description: Representing tracks needs separate content key
    types:
    - uid: StreamingPolicyContentKey
      isArray: true
- name: CencDrmConfiguration
  description: Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
  kind: object
  properties:
  - name: playReady
    description: PlayReady configurations
    types:
    - uid: StreamingPolicyPlayReadyConfiguration
  - name: widevine
    description: Widevine configurations
    types:
    - uid: StreamingPolicyWidevineConfiguration
- name: ClearKeyEncryptionConfiguration
  description: Class to specify ClearKey configuration of common encryption schemes in Streaming Policy
  kind: object
  properties:
  - name: customKeysAcquisitionUrlTemplate
    description: Template for the URL of the custom service delivering content keys to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token value is {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId.
    types:
    - uid: string
- name: CbcsDrmConfiguration
  description: Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
  kind: object
  properties:
  - name: fairPlay
    description: FairPlay configurations
    types:
    - uid: StreamingPolicyFairPlayConfiguration
  - name: playReady
    description: PlayReady configurations
    types:
    - uid: StreamingPolicyPlayReadyConfiguration
  - name: widevine
    description: Widevine configurations
    types:
    - uid: StreamingPolicyWidevineConfiguration
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: TrackPropertyCondition
  description: Class to specify one track property condition
  kind: object
  properties:
  - name: property
    description: Track property type
    types:
    - uid: TrackPropertyType
  - name: operation
    description: Track property condition operation
    types:
    - uid: TrackPropertyCompareOperation
  - name: value
    description: Track property value
    types:
    - uid: string
- name: DefaultKey
  description: Class to specify properties of default content key for each encryption scheme
  kind: object
  properties:
  - name: label
    description: Label can be used to specify Content Key when creating a Streaming Locator
    types:
    - uid: string
  - name: policyName
    description: Policy used by Default Key
    types:
    - uid: string
- name: StreamingPolicyContentKey
  description: Class to specify properties of content key
  kind: object
  properties:
  - name: label
    description: Label can be used to specify Content Key when creating a Streaming Locator
    types:
    - uid: string
  - name: policyName
    description: Policy used by Content Key
    types:
    - uid: string
  - name: tracks
    description: Tracks which use this content key
    types:
    - uid: TrackSelection
      isArray: true
- name: StreamingPolicyPlayReadyConfiguration
  description: Class to specify configurations of PlayReady in Streaming Policy
  kind: object
  properties:
  - name: customLicenseAcquisitionUrlTemplate
    description: Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    types:
    - uid: string
  - name: playReadyCustomAttributes
    description: Custom attributes for PlayReady
    types:
    - uid: string
- name: StreamingPolicyWidevineConfiguration
  description: Class to specify configurations of Widevine in Streaming Policy
  kind: object
  properties:
  - name: customLicenseAcquisitionUrlTemplate
    description: Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    types:
    - uid: string
- name: StreamingPolicyFairPlayConfiguration
  description: Class to specify configurations of FairPlay in Streaming Policy
  kind: object
  properties:
  - name: customLicenseAcquisitionUrlTemplate
    description: Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
    types:
    - uid: string
  - name: allowPersistentLicense
    description: All license to be persistent or not
    types:
    - uid: boolean
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
- name: TrackPropertyType
  description: Track property type
  kind: enum
  properties:
  - name: Unknown
    description: Unknown track property
    types:
    - uid: string
  - name: FourCC
    description: Track FourCC
    types:
    - uid: string
- name: TrackPropertyCompareOperation
  description: Track property condition operation
  kind: enum
  properties:
  - name: Unknown
    description: Unknown track property compare operation
    types:
    - uid: string
  - name: Equal
    description: Equal operation
    types:
    - uid: string
examples:
- name: Creates a Streaming Policy with clear streaming
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedClearStreamingPolicy?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "noEncryption": {
            "enabledProtocols": {
              "download": true,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedClearStreamingPolicy?api-version=2022-08-01

      {
        "properties": {
          "noEncryption": {
            "enabledProtocols": {
              "download": true,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.NoEncryption;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-clear.json
           */
          /**
           * Sample code: Creates a Streaming Policy with clear streaming.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithClearStreaming(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedClearStreamingPolicy")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withNoEncryption(
                      new NoEncryption()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(true)
                                  .withDash(true)
                                  .withHls(true)
                                  .withSmoothStreaming(true)))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-clear.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithClearStreaming() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedClearStreamingPolicy", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			NoEncryption: &armmediaservices.NoEncryption{
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(true),
      					Download:        to.Ptr(true),
      					Hls:             to.Ptr(true),
      					SmoothStreaming: to.Ptr(true),
      				},
      			},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-clear.json
       */
      async function createsAStreamingPolicyWithClearStreaming() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedClearStreamingPolicy";
        const parameters = {
          noEncryption: {
            enabledProtocols: {
              dash: true,
              download: true,
              hls: true,
              smoothStreaming: true,
            },
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithClearStreaming().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedClearStreamingPolicy",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedClearStreamingPolicy",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.1535417Z",
          "noEncryption": {
            "enabledProtocols": {
              "download": true,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            }
          }
        }
      }
- name: Creates a Streaming Policy with envelopeEncryption only
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithClearKeyOptionAndTokenRestriction",
          "envelopeEncryption": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            },
            "contentKeys": {
              "defaultKey": {
                "label": "aesDefaultKey"
              }
            },
            "customKeyAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly?api-version=2022-08-01

      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithClearKeyOptionAndTokenRestriction",
          "envelopeEncryption": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            },
            "contentKeys": {
              "defaultKey": {
                "label": "aesDefaultKey"
              }
            },
            "customKeyAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.DefaultKey;
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.EnvelopeEncryption;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-envelopeEncryption-only.json
           */
          /**
           * Sample code: Creates a Streaming Policy with envelopeEncryption only.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithEnvelopeEncryptionOnly(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withDefaultContentKeyPolicyName("PolicyWithClearKeyOptionAndTokenRestriction")
                  .withEnvelopeEncryption(
                      new EnvelopeEncryption()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(true)
                                  .withHls(true)
                                  .withSmoothStreaming(true))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("aesDefaultKey")))
                          .withCustomKeyAcquisitionUrlTemplate(
                              "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-envelopeEncryption-only.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithEnvelopeEncryptionOnly() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			DefaultContentKeyPolicyName: to.Ptr("PolicyWithClearKeyOptionAndTokenRestriction"),
      			EnvelopeEncryption: &armmediaservices.EnvelopeEncryption{
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("aesDefaultKey"),
      					},
      				},
      				CustomKeyAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(true),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(true),
      					SmoothStreaming: to.Ptr(true),
      				},
      			},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-envelopeEncryption-only.json
       */
      async function createsAStreamingPolicyWithEnvelopeEncryptionOnly() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly";
        const parameters = {
          defaultContentKeyPolicyName: "PolicyWithClearKeyOptionAndTokenRestriction",
          envelopeEncryption: {
            contentKeys: { defaultKey: { label: "aesDefaultKey" } },
            customKeyAcquisitionUrlTemplate:
              "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
            enabledProtocols: {
              dash: true,
              download: false,
              hls: true,
              smoothStreaming: true,
            },
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithEnvelopeEncryptionOnly().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.3055712Z",
          "defaultContentKeyPolicyName": "PolicyWithClearKeyOptionAndTokenRestriction",
          "envelopeEncryption": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            },
            "clearTracks": [],
            "contentKeys": {
              "defaultKey": {
                "label": "aesDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "customKeyAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"
          }
        }
      }
- name: Creates a Streaming Policy with commonEncryptionCenc only
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithPlayReadyOptionAndOpenRestriction",
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              }
            },
            "drm": {
              "playReady": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                "playReadyCustomAttributes": "PlayReady CustomAttributes"
              },
              "widevine": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
              }
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly?api-version=2022-08-01

      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithPlayReadyOptionAndOpenRestriction",
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              }
            },
            "drm": {
              "playReady": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                "playReadyCustomAttributes": "PlayReady CustomAttributes"
              },
              "widevine": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
              }
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.CencDrmConfiguration;
      import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCenc;
      import com.azure.resourcemanager.mediaservices.models.DefaultKey;
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyPlayReadyConfiguration;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyWidevineConfiguration;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyCompareOperation;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyCondition;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyType;
      import com.azure.resourcemanager.mediaservices.models.TrackSelection;
      import java.util.Arrays;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-only.json
           */
          /**
           * Sample code: Creates a Streaming Policy with commonEncryptionCenc only.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithCommonEncryptionCencOnly(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withDefaultContentKeyPolicyName("PolicyWithPlayReadyOptionAndOpenRestriction")
                  .withCommonEncryptionCenc(
                      new CommonEncryptionCenc()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(true)
                                  .withHls(false)
                                  .withSmoothStreaming(true))
                          .withClearTracks(
                              Arrays
                                  .asList(
                                      new TrackSelection()
                                          .withTrackSelections(
                                              Arrays
                                                  .asList(
                                                      new TrackPropertyCondition()
                                                          .withProperty(TrackPropertyType.FOUR_CC)
                                                          .withOperation(TrackPropertyCompareOperation.EQUAL)
                                                          .withValue("hev1")))))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("cencDefaultKey")))
                          .withDrm(
                              new CencDrmConfiguration()
                                  .withPlayReady(
                                      new StreamingPolicyPlayReadyConfiguration()
                                          .withCustomLicenseAcquisitionUrlTemplate(
                                              "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}")
                                          .withPlayReadyCustomAttributes("PlayReady CustomAttributes"))
                                  .withWidevine(
                                      new StreamingPolicyWidevineConfiguration()
                                          .withCustomLicenseAcquisitionUrlTemplate(
                                              "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"))))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-only.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithCommonEncryptionCencOnly() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
      				ClearTracks: []*armmediaservices.TrackSelection{
      					{
      						TrackSelections: []*armmediaservices.TrackPropertyCondition{
      							{
      								Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationEqual),
      								Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
      								Value:     to.Ptr("hev1"),
      							}},
      					}},
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("cencDefaultKey"),
      					},
      				},
      				Drm: &armmediaservices.CencDrmConfiguration{
      					PlayReady: &armmediaservices.StreamingPolicyPlayReadyConfiguration{
      						CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
      						PlayReadyCustomAttributes:           to.Ptr("PlayReady CustomAttributes"),
      					},
      					Widevine: &armmediaservices.StreamingPolicyWidevineConfiguration{
      						CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
      					},
      				},
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(true),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(false),
      					SmoothStreaming: to.Ptr(true),
      				},
      			},
      			DefaultContentKeyPolicyName: to.Ptr("PolicyWithPlayReadyOptionAndOpenRestriction"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-only.json
       */
      async function createsAStreamingPolicyWithCommonEncryptionCencOnly() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly";
        const parameters = {
          commonEncryptionCenc: {
            clearTracks: [
              {
                trackSelections: [{ operation: "Equal", property: "FourCC", value: "hev1" }],
              },
            ],
            contentKeys: { defaultKey: { label: "cencDefaultKey" } },
            drm: {
              playReady: {
                customLicenseAcquisitionUrlTemplate:
                  "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                playReadyCustomAttributes: "PlayReady CustomAttributes",
              },
              widevine: {
                customLicenseAcquisitionUrlTemplate:
                  "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
              },
            },
            enabledProtocols: {
              dash: true,
              download: false,
              hls: false,
              smoothStreaming: true,
            },
          },
          defaultContentKeyPolicyName: "PolicyWithPlayReadyOptionAndOpenRestriction",
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithCommonEncryptionCencOnly().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.4678543Z",
          "defaultContentKeyPolicyName": "PolicyWithPlayReadyOptionAndOpenRestriction",
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "drm": {
              "playReady": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                "playReadyCustomAttributes": "PlayReady CustomAttributes"
              },
              "widevine": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId}"
              }
            }
          }
        }
      }
- name: Creates a Streaming Policy with commonEncryptionCbcs only
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              }
            },
            "drm": {
              "fairPlay": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                "allowPersistentLicense": true
              }
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly?api-version=2022-08-01

      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              }
            },
            "drm": {
              "fairPlay": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                "allowPersistentLicense": true
              }
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.CbcsDrmConfiguration;
      import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCbcs;
      import com.azure.resourcemanager.mediaservices.models.DefaultKey;
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-only.json
           */
          /**
           * Sample code: Creates a Streaming Policy with commonEncryptionCbcs only.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithCommonEncryptionCbcsOnly(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withDefaultContentKeyPolicyName("PolicyWithMultipleOptions")
                  .withCommonEncryptionCbcs(
                      new CommonEncryptionCbcs()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(false)
                                  .withHls(true)
                                  .withSmoothStreaming(false))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("cbcsDefaultKey")))
                          .withDrm(
                              new CbcsDrmConfiguration()
                                  .withFairPlay(
                                      new StreamingPolicyFairPlayConfiguration()
                                          .withCustomLicenseAcquisitionUrlTemplate(
                                              "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}")
                                          .withAllowPersistentLicense(true))))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-only.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithCommonEncryptionCbcsOnly() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("cbcsDefaultKey"),
      					},
      				},
      				Drm: &armmediaservices.CbcsDrmConfiguration{
      					FairPlay: &armmediaservices.StreamingPolicyFairPlayConfiguration{
      						AllowPersistentLicense:              to.Ptr(true),
      						CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
      					},
      				},
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(false),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(true),
      					SmoothStreaming: to.Ptr(false),
      				},
      			},
      			DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-only.json
       */
      async function createsAStreamingPolicyWithCommonEncryptionCbcsOnly() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly";
        const parameters = {
          commonEncryptionCbcs: {
            contentKeys: { defaultKey: { label: "cbcsDefaultKey" } },
            drm: {
              fairPlay: {
                allowPersistentLicense: true,
                customLicenseAcquisitionUrlTemplate:
                  "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
              },
            },
            enabledProtocols: {
              dash: false,
              download: false,
              hls: true,
              smoothStreaming: false,
            },
          },
          defaultContentKeyPolicyName: "PolicyWithMultipleOptions",
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithCommonEncryptionCbcsOnly().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.6197199Z",
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "clearTracks": [],
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "drm": {
              "fairPlay": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                "allowPersistentLicense": true
              }
            }
          }
        }
      }
- name: Creates a Streaming Policy with secure streaming
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicy?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "envelopeEncryption": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            },
            "contentKeys": {
              "defaultKey": {
                "label": "aesDefaultKey"
              }
            },
            "customKeyAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"
          },
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              }
            },
            "drm": {
              "playReady": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                "playReadyCustomAttributes": "PlayReady CustomAttributes"
              },
              "widevine": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
              }
            }
          },
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              }
            },
            "drm": {
              "fairPlay": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                "allowPersistentLicense": true
              }
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicy?api-version=2022-08-01

      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "envelopeEncryption": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            },
            "contentKeys": {
              "defaultKey": {
                "label": "aesDefaultKey"
              }
            },
            "customKeyAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"
          },
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              }
            },
            "drm": {
              "playReady": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                "playReadyCustomAttributes": "PlayReady CustomAttributes"
              },
              "widevine": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
              }
            }
          },
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              }
            },
            "drm": {
              "fairPlay": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                "allowPersistentLicense": true
              }
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.CbcsDrmConfiguration;
      import com.azure.resourcemanager.mediaservices.models.CencDrmConfiguration;
      import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCbcs;
      import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCenc;
      import com.azure.resourcemanager.mediaservices.models.DefaultKey;
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.EnvelopeEncryption;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyFairPlayConfiguration;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyPlayReadyConfiguration;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyWidevineConfiguration;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyCompareOperation;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyCondition;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyType;
      import com.azure.resourcemanager.mediaservices.models.TrackSelection;
      import java.util.Arrays;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-secure-streaming.json
           */
          /**
           * Sample code: Creates a Streaming Policy with secure streaming.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithSecureStreaming(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedSecureStreamingPolicy")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withDefaultContentKeyPolicyName("PolicyWithMultipleOptions")
                  .withEnvelopeEncryption(
                      new EnvelopeEncryption()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(true)
                                  .withHls(true)
                                  .withSmoothStreaming(true))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("aesDefaultKey")))
                          .withCustomKeyAcquisitionUrlTemplate(
                              "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"))
                  .withCommonEncryptionCenc(
                      new CommonEncryptionCenc()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(true)
                                  .withHls(false)
                                  .withSmoothStreaming(true))
                          .withClearTracks(
                              Arrays
                                  .asList(
                                      new TrackSelection()
                                          .withTrackSelections(
                                              Arrays
                                                  .asList(
                                                      new TrackPropertyCondition()
                                                          .withProperty(TrackPropertyType.FOUR_CC)
                                                          .withOperation(TrackPropertyCompareOperation.EQUAL)
                                                          .withValue("hev1")))))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("cencDefaultKey")))
                          .withDrm(
                              new CencDrmConfiguration()
                                  .withPlayReady(
                                      new StreamingPolicyPlayReadyConfiguration()
                                          .withCustomLicenseAcquisitionUrlTemplate(
                                              "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}")
                                          .withPlayReadyCustomAttributes("PlayReady CustomAttributes"))
                                  .withWidevine(
                                      new StreamingPolicyWidevineConfiguration()
                                          .withCustomLicenseAcquisitionUrlTemplate(
                                              "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"))))
                  .withCommonEncryptionCbcs(
                      new CommonEncryptionCbcs()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(false)
                                  .withHls(true)
                                  .withSmoothStreaming(false))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("cbcsDefaultKey")))
                          .withDrm(
                              new CbcsDrmConfiguration()
                                  .withFairPlay(
                                      new StreamingPolicyFairPlayConfiguration()
                                          .withCustomLicenseAcquisitionUrlTemplate(
                                              "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}")
                                          .withAllowPersistentLicense(true))))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-secure-streaming.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithSecureStreaming() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedSecureStreamingPolicy", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("cbcsDefaultKey"),
      					},
      				},
      				Drm: &armmediaservices.CbcsDrmConfiguration{
      					FairPlay: &armmediaservices.StreamingPolicyFairPlayConfiguration{
      						AllowPersistentLicense:              to.Ptr(true),
      						CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"),
      					},
      				},
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(false),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(true),
      					SmoothStreaming: to.Ptr(false),
      				},
      			},
      			CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
      				ClearTracks: []*armmediaservices.TrackSelection{
      					{
      						TrackSelections: []*armmediaservices.TrackPropertyCondition{
      							{
      								Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationEqual),
      								Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
      								Value:     to.Ptr("hev1"),
      							}},
      					}},
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("cencDefaultKey"),
      					},
      				},
      				Drm: &armmediaservices.CencDrmConfiguration{
      					PlayReady: &armmediaservices.StreamingPolicyPlayReadyConfiguration{
      						CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}"),
      						PlayReadyCustomAttributes:           to.Ptr("PlayReady CustomAttributes"),
      					},
      					Widevine: &armmediaservices.StreamingPolicyWidevineConfiguration{
      						CustomLicenseAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"),
      					},
      				},
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(true),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(false),
      					SmoothStreaming: to.Ptr(true),
      				},
      			},
      			DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
      			EnvelopeEncryption: &armmediaservices.EnvelopeEncryption{
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("aesDefaultKey"),
      					},
      				},
      				CustomKeyAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"),
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(true),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(true),
      					SmoothStreaming: to.Ptr(true),
      				},
      			},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-secure-streaming.json
       */
      async function createsAStreamingPolicyWithSecureStreaming() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicy";
        const parameters = {
          commonEncryptionCbcs: {
            contentKeys: { defaultKey: { label: "cbcsDefaultKey" } },
            drm: {
              fairPlay: {
                allowPersistentLicense: true,
                customLicenseAcquisitionUrlTemplate:
                  "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
              },
            },
            enabledProtocols: {
              dash: false,
              download: false,
              hls: true,
              smoothStreaming: false,
            },
          },
          commonEncryptionCenc: {
            clearTracks: [
              {
                trackSelections: [{ operation: "Equal", property: "FourCC", value: "hev1" }],
              },
            ],
            contentKeys: { defaultKey: { label: "cencDefaultKey" } },
            drm: {
              playReady: {
                customLicenseAcquisitionUrlTemplate:
                  "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                playReadyCustomAttributes: "PlayReady CustomAttributes",
              },
              widevine: {
                customLicenseAcquisitionUrlTemplate:
                  "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId",
              },
            },
            enabledProtocols: {
              dash: true,
              download: false,
              hls: false,
              smoothStreaming: true,
            },
          },
          defaultContentKeyPolicyName: "PolicyWithMultipleOptions",
          envelopeEncryption: {
            contentKeys: { defaultKey: { label: "aesDefaultKey" } },
            customKeyAcquisitionUrlTemplate:
              "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
            enabledProtocols: {
              dash: true,
              download: false,
              hls: true,
              smoothStreaming: true,
            },
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithSecureStreaming().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedSecureStreamingPolicy",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicy",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.7715696Z",
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "envelopeEncryption": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": true,
              "smoothStreaming": true
            },
            "clearTracks": [],
            "contentKeys": {
              "defaultKey": {
                "label": "aesDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "customKeyAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}"
          },
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "drm": {
              "playReady": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                "playReadyCustomAttributes": "PlayReady CustomAttributes"
              },
              "widevine": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
              }
            }
          },
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "clearTracks": [],
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "drm": {
              "fairPlay": {
                "customLicenseAcquisitionUrlTemplate": "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
                "allowPersistentLicense": true
              }
            }
          }
        }
      }
- name: Creates a Streaming Policy with ClearKey encryption in commonEncryptionCenc.
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithPlayReadyOptionAndOpenRestriction",
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              }
            },
            "clearKeyEncryptionConfiguration": {
              "customKeysAcquisitionUrlTemplate": "https://contoso.com/{AlternativeMediaId}/clearkey/"
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly?api-version=2022-08-01

      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithPlayReadyOptionAndOpenRestriction",
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              }
            },
            "clearKeyEncryptionConfiguration": {
              "customKeysAcquisitionUrlTemplate": "https://contoso.com/{AlternativeMediaId}/clearkey/"
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.ClearKeyEncryptionConfiguration;
      import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCenc;
      import com.azure.resourcemanager.mediaservices.models.DefaultKey;
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyCompareOperation;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyCondition;
      import com.azure.resourcemanager.mediaservices.models.TrackPropertyType;
      import com.azure.resourcemanager.mediaservices.models.TrackSelection;
      import java.util.Arrays;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-clearKeyEncryption.json
           */
          /**
           * Sample code: Creates a Streaming Policy with ClearKey encryption in commonEncryptionCenc.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCenc(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withDefaultContentKeyPolicyName("PolicyWithPlayReadyOptionAndOpenRestriction")
                  .withCommonEncryptionCenc(
                      new CommonEncryptionCenc()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(true)
                                  .withHls(false)
                                  .withSmoothStreaming(true))
                          .withClearTracks(
                              Arrays
                                  .asList(
                                      new TrackSelection()
                                          .withTrackSelections(
                                              Arrays
                                                  .asList(
                                                      new TrackPropertyCondition()
                                                          .withProperty(TrackPropertyType.FOUR_CC)
                                                          .withOperation(TrackPropertyCompareOperation.EQUAL)
                                                          .withValue("hev1")))))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("cencDefaultKey")))
                          .withClearKeyEncryptionConfiguration(
                              new ClearKeyEncryptionConfiguration()
                                  .withCustomKeysAcquisitionUrlTemplate(
                                      "https://contoso.com/{AlternativeMediaId}/clearkey/")))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-clearKeyEncryption.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCenc() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			CommonEncryptionCenc: &armmediaservices.CommonEncryptionCenc{
      				ClearKeyEncryptionConfiguration: &armmediaservices.ClearKeyEncryptionConfiguration{
      					CustomKeysAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AlternativeMediaId}/clearkey/"),
      				},
      				ClearTracks: []*armmediaservices.TrackSelection{
      					{
      						TrackSelections: []*armmediaservices.TrackPropertyCondition{
      							{
      								Operation: to.Ptr(armmediaservices.TrackPropertyCompareOperationEqual),
      								Property:  to.Ptr(armmediaservices.TrackPropertyTypeFourCC),
      								Value:     to.Ptr("hev1"),
      							}},
      					}},
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("cencDefaultKey"),
      					},
      				},
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(true),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(false),
      					SmoothStreaming: to.Ptr(true),
      				},
      			},
      			DefaultContentKeyPolicyName: to.Ptr("PolicyWithPlayReadyOptionAndOpenRestriction"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-clearKeyEncryption.json
       */
      async function createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCenc() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly";
        const parameters = {
          commonEncryptionCenc: {
            clearKeyEncryptionConfiguration: {
              customKeysAcquisitionUrlTemplate: "https://contoso.com/{AlternativeMediaId}/clearkey/",
            },
            clearTracks: [
              {
                trackSelections: [{ operation: "Equal", property: "FourCC", value: "hev1" }],
              },
            ],
            contentKeys: { defaultKey: { label: "cencDefaultKey" } },
            enabledProtocols: {
              dash: true,
              download: false,
              hls: false,
              smoothStreaming: true,
            },
          },
          defaultContentKeyPolicyName: "PolicyWithPlayReadyOptionAndOpenRestriction",
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCenc().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.4678543Z",
          "defaultContentKeyPolicyName": "PolicyWithPlayReadyOptionAndOpenRestriction",
          "commonEncryptionCenc": {
            "enabledProtocols": {
              "download": false,
              "dash": true,
              "hls": false,
              "smoothStreaming": true
            },
            "clearTracks": [
              {
                "trackSelections": [
                  {
                    "property": "FourCC",
                    "operation": "Equal",
                    "value": "hev1"
                  }
                ]
              }
            ],
            "contentKeys": {
              "defaultKey": {
                "label": "cencDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "clearKeyEncryptionConfiguration": {
              "customKeysAcquisitionUrlTemplate": "https://contoso.com/{AlternativeMediaId}/clearkey/"
            }
          }
        }
      }
- name: Creates a Streaming Policy with ClearKey encryption in commonEncryptionCbcs.
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly?api-version=2022-08-01
    body: >-
      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              }
            },
            "clearKeyEncryptionConfiguration": {
              "customKeysAcquisitionUrlTemplate": "https://contoso.com/{AlternativeMediaId}/clearkey/"
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaServices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly?api-version=2022-08-01

      {
        "properties": {
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              }
            },
            "clearKeyEncryptionConfiguration": {
              "customKeysAcquisitionUrlTemplate": "https://contoso.com/{AlternativeMediaId}/clearkey/"
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.mediaservices.models.ClearKeyEncryptionConfiguration;
      import com.azure.resourcemanager.mediaservices.models.CommonEncryptionCbcs;
      import com.azure.resourcemanager.mediaservices.models.DefaultKey;
      import com.azure.resourcemanager.mediaservices.models.EnabledProtocols;
      import com.azure.resourcemanager.mediaservices.models.StreamingPolicyContentKeys;

      /** Samples for StreamingPolicies Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-clearKeyEncryption.json
           */
          /**
           * Sample code: Creates a Streaming Policy with ClearKey encryption in commonEncryptionCbcs.
           *
           * @param manager Entry point to MediaServicesManager.
           */
          public static void createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCbcs(
              com.azure.resourcemanager.mediaservices.MediaServicesManager manager) {
              manager
                  .streamingPolicies()
                  .define("UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly")
                  .withExistingMediaService("contoso", "contosomedia")
                  .withDefaultContentKeyPolicyName("PolicyWithMultipleOptions")
                  .withCommonEncryptionCbcs(
                      new CommonEncryptionCbcs()
                          .withEnabledProtocols(
                              new EnabledProtocols()
                                  .withDownload(false)
                                  .withDash(false)
                                  .withHls(true)
                                  .withSmoothStreaming(false))
                          .withContentKeys(
                              new StreamingPolicyContentKeys().withDefaultKey(new DefaultKey().withLabel("cbcsDefaultKey")))
                          .withClearKeyEncryptionConfiguration(
                              new ClearKeyEncryptionConfiguration()
                                  .withCustomKeysAcquisitionUrlTemplate(
                                      "https://contoso.com/{AlternativeMediaId}/clearkey/")))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-mediaservices_2.2.0-beta.1/sdk/mediaservices/azure-resourcemanager-mediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armmediaservices_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mediaservices/armmediaservices/v3"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-clearKeyEncryption.json
      func ExampleStreamingPoliciesClient_Create_createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCbcs() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armmediaservices.NewStreamingPoliciesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	_, err = client.Create(ctx, "contoso", "contosomedia", "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly", armmediaservices.StreamingPolicy{
      		Properties: &armmediaservices.StreamingPolicyProperties{
      			CommonEncryptionCbcs: &armmediaservices.CommonEncryptionCbcs{
      				ClearKeyEncryptionConfiguration: &armmediaservices.ClearKeyEncryptionConfiguration{
      					CustomKeysAcquisitionURLTemplate: to.Ptr("https://contoso.com/{AlternativeMediaId}/clearkey/"),
      				},
      				ContentKeys: &armmediaservices.StreamingPolicyContentKeys{
      					DefaultKey: &armmediaservices.DefaultKey{
      						Label: to.Ptr("cbcsDefaultKey"),
      					},
      				},
      				EnabledProtocols: &armmediaservices.EnabledProtocols{
      					Dash:            to.Ptr(false),
      					Download:        to.Ptr(false),
      					Hls:             to.Ptr(true),
      					SmoothStreaming: to.Ptr(false),
      				},
      			},
      			DefaultContentKeyPolicyName: to.Ptr("PolicyWithMultipleOptions"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fmediaservices%2Farmmediaservices%2Fv3.1.0/sdk/resourcemanager/mediaservices/armmediaservices/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { AzureMediaServices } = require("@azure/arm-mediaservices");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create a Streaming Policy in the Media Services account
       *
       * @summary Create a Streaming Policy in the Media Services account
       * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-clearKeyEncryption.json
       */
      async function createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCbcs() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly";
        const parameters = {
          commonEncryptionCbcs: {
            clearKeyEncryptionConfiguration: {
              customKeysAcquisitionUrlTemplate: "https://contoso.com/{AlternativeMediaId}/clearkey/",
            },
            contentKeys: { defaultKey: { label: "cbcsDefaultKey" } },
            enabledProtocols: {
              dash: false,
              download: false,
              hls: true,
              smoothStreaming: false,
            },
          },
          defaultContentKeyPolicyName: "PolicyWithMultipleOptions",
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = await client.streamingPolicies.create(
          resourceGroupName,
          accountName,
          streamingPolicyName,
          parameters
        );
        console.log(result);
      }

      createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCbcs().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-mediaservices_13.0.0/sdk/mediaservices/arm-mediaservices/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "name": "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Media/mediaservices/contosomedia/streamingPolicies/UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly",
        "type": "Microsoft.Media/mediaservices/streamingPolicies",
        "properties": {
          "created": "2018-08-08T18:29:31.6197199Z",
          "defaultContentKeyPolicyName": "PolicyWithMultipleOptions",
          "commonEncryptionCbcs": {
            "enabledProtocols": {
              "download": false,
              "dash": false,
              "hls": true,
              "smoothStreaming": false
            },
            "clearTracks": [],
            "contentKeys": {
              "defaultKey": {
                "label": "cbcsDefaultKey"
              },
              "keyToTrackMappings": []
            },
            "clearKeyEncryptionConfiguration": {
              "customKeysAcquisitionUrlTemplate": "https://contoso.com/{AlternativeMediaId}/clearkey/"
            }
          }
        }
      }
security: []
metadata:
  description: >
    Learn more about Media Services service - Create a Streaming Policy in the Media Services account
errorCodes: []
