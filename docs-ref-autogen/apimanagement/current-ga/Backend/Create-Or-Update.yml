### YamlMime:RESTOperation
uid: management.azure.com.apimanagement.current-ga.backend.createorupdate
name: Create Or Update
service: API Management
groupName: Backend
apiVersion: 2021-08-01
summary: Creates or Updates a backend.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/backends/{backendId}?api-version=2021-08-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: serviceName
  in: path
  isRequired: true
  description: The name of the API Management service.
  types:
  - uid: string
  pattern: ^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$
- name: backendId
  in: path
  isRequired: true
  description: Identifier of the Backend entity. Must be unique in the current API Management service instance.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version of the API to be used with the client request.
  types:
  - uid: string
responses:
- name: 201 Created
  headers:
  - name: ETag
    value: string
  description: Backend was successfully created.
  types:
  - uid: BackendContract
- name: 200 OK
  headers:
  - name: ETag
    value: string
  description: The existing backend was successfully updated.
  types:
  - uid: BackendContract
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: properties.url
    in: body
    isRequired: true
    description: Runtime Url of the Backend.
    types:
    - uid: string
  - name: properties.protocol
    in: body
    isRequired: true
    description: Backend communication protocol.
    types:
    - uid: BackendProtocol
  - name: properties.title
    in: body
    description: Backend Title.
    types:
    - uid: string
  - name: properties.description
    in: body
    description: Backend Description.
    types:
    - uid: string
  - name: properties.resourceId
    in: body
    description: Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
    types:
    - uid: string
  - name: properties.properties
    in: body
    description: Backend Properties contract
    types:
    - uid: BackendProperties
  - name: properties.credentials
    in: body
    description: Backend Credentials Contract Properties
    types:
    - uid: BackendCredentialsContract
  - name: properties.proxy
    in: body
    description: Backend Proxy Contract Properties
    types:
    - uid: BackendProxyContract
  - name: properties.tls
    in: body
    description: Backend TLS Properties
    types:
    - uid: BackendTlsProperties
requestHeader:
- name: If-Match
  in: header
  description: ETag of the Entity. Not required when creating an entity, but required when updating an entity.
  types:
  - uid: string
definitions:
- name: BackendProperties
  description: Properties specific to the Backend Type.
  kind: object
  properties:
  - name: serviceFabricCluster
    description: Backend Service Fabric Cluster Properties
    types:
    - uid: BackendServiceFabricClusterProperties
- name: BackendCredentialsContract
  description: Details of the Credentials used to connect to Backend.
  kind: object
  properties:
  - name: certificateIds
    description: List of Client Certificate Ids.
    types:
    - uid: string
      isArray: true
  - name: certificate
    description: List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided.
    types:
    - uid: string
      isArray: true
  - name: query
    description: Query Parameter description.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: array
  - name: header
    description: Header Parameter description.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: array
  - name: authorization
    description: Authorization header authentication
    types:
    - uid: BackendAuthorizationHeaderCredentials
- name: BackendProxyContract
  description: Details of the Backend WebProxy Server to use in the Request to Backend.
  kind: object
  properties:
  - name: url
    description: WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
    types:
    - uid: string
  - name: username
    description: Username to connect to the WebProxy server
    types:
    - uid: string
  - name: password
    description: Password to connect to the WebProxy Server
    types:
    - uid: string
- name: BackendTlsProperties
  description: Properties controlling TLS Certificate Validation.
  kind: object
  properties:
  - name: validateCertificateChain
    description: Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host.
    types:
    - uid: boolean
    defaultValue: true
  - name: validateCertificateName
    description: Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host.
    types:
    - uid: boolean
    defaultValue: true
- name: BackendContract
  description: Backend details.
  kind: object
  properties:
  - name: properties.url
    description: Runtime Url of the Backend.
    types:
    - uid: string
  - name: properties.protocol
    description: Backend communication protocol.
    types:
    - uid: BackendProtocol
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
  - name: properties.title
    description: Backend Title.
    types:
    - uid: string
  - name: properties.description
    description: Backend Description.
    types:
    - uid: string
  - name: properties.resourceId
    description: Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or API Apps.
    types:
    - uid: string
  - name: properties.properties
    description: Backend Properties contract
    types:
    - uid: BackendProperties
  - name: properties.credentials
    description: Backend Credentials Contract Properties
    types:
    - uid: BackendCredentialsContract
  - name: properties.proxy
    description: Backend Proxy Contract Properties
    types:
    - uid: BackendProxyContract
  - name: properties.tls
    description: Backend TLS Properties
    types:
    - uid: BackendTlsProperties
- name: ErrorResponse
  description: Error Response.
  kind: object
  properties:
  - name: error.code
    description: Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
    types:
    - uid: string
  - name: error.message
    description: Human-readable representation of the error.
    types:
    - uid: string
  - name: error.details
    description: The list of invalid fields send in request, in case of validation error.
    types:
    - uid: ErrorFieldContract
      isArray: true
- name: BackendServiceFabricClusterProperties
  description: Properties of the Service Fabric Type Backend.
  kind: object
  properties:
  - name: clientCertificateId
    description: The client certificate id for the management endpoint.
    types:
    - uid: string
  - name: clientCertificatethumbprint
    description: The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided
    types:
    - uid: string
  - name: maxPartitionResolutionRetries
    description: Maximum number of retries while attempting resolve the partition.
    types:
    - uid: integer
  - name: managementEndpoints
    description: The cluster management endpoint.
    types:
    - uid: string
      isArray: true
  - name: serverCertificateThumbprints
    description: Thumbprints of certificates cluster management service uses for tls communication
    types:
    - uid: string
      isArray: true
  - name: serverX509Names
    description: Server X509 Certificate Names Collection
    types:
    - uid: X509CertificateName
      isArray: true
- name: BackendAuthorizationHeaderCredentials
  description: Authorization header information.
  kind: object
  properties:
  - name: scheme
    description: Authentication Scheme name.
    types:
    - uid: string
  - name: parameter
    description: Authentication Parameter value.
    types:
    - uid: string
- name: BackendProtocol
  description: Backend communication protocol.
  kind: enum
  properties:
  - name: http
    description: The Backend is a RESTful service.
    types:
    - uid: string
  - name: soap
    description: The Backend is a SOAP service.
    types:
    - uid: string
- name: ErrorFieldContract
  description: Error Field contract.
  kind: object
  properties:
  - name: code
    description: Property level error code.
    types:
    - uid: string
  - name: message
    description: Human-readable representation of property-level error.
    types:
    - uid: string
  - name: target
    description: Property name.
    types:
    - uid: string
- name: X509CertificateName
  description: Properties of server X509Names.
  kind: object
  properties:
  - name: name
    description: Common Name of the Certificate.
    types:
    - uid: string
  - name: issuerCertificateThumbprint
    description: Thumbprint for the Issuer of the Certificate.
    types:
    - uid: string
examples:
- name: ApiManagementCreateBackendServiceFabric
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend?api-version=2021-08-01
    body: >-
      {
        "properties": {
          "description": "Service Fabric Test App 1",
          "protocol": "http",
          "url": "fabric:/mytestapp/mytestservice",
          "properties": {
            "serviceFabricCluster": {
              "managementEndpoints": [
                "https://somecluster.com"
              ],
              "clientCertificateId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
              "serverX509Names": [
                {
                  "name": "ServerCommonName1",
                  "issuerCertificateThumbprint": "IssuerCertificateThumbprint1"
                }
              ],
              "maxPartitionResolutionRetries": 5
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend?api-version=2021-08-01

      {
        "properties": {
          "description": "Service Fabric Test App 1",
          "protocol": "http",
          "url": "fabric:/mytestapp/mytestservice",
          "properties": {
            "serviceFabricCluster": {
              "managementEndpoints": [
                "https://somecluster.com"
              ],
              "clientCertificateId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
              "serverX509Names": [
                {
                  "name": "ServerCommonName1",
                  "issuerCertificateThumbprint": "IssuerCertificateThumbprint1"
                }
              ],
              "maxPartitionResolutionRetries": 5
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.apimanagement.models.BackendProperties;
      import com.azure.resourcemanager.apimanagement.models.BackendProtocol;
      import com.azure.resourcemanager.apimanagement.models.BackendServiceFabricClusterProperties;
      import com.azure.resourcemanager.apimanagement.models.X509CertificateName;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for Backend CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendServiceFabric.json
           */
          /**
           * Sample code: ApiManagementCreateBackendServiceFabric.
           *
           * @param manager Entry point to ApiManagementManager.
           */
          public static void apiManagementCreateBackendServiceFabric(
              com.azure.resourcemanager.apimanagement.ApiManagementManager manager) {
              manager
                  .backends()
                  .define("sfbackend")
                  .withExistingService("rg1", "apimService1")
                  .withUrl("fabric:/mytestapp/mytestservice")
                  .withProtocol(BackendProtocol.HTTP)
                  .withDescription("Service Fabric Test App 1")
                  .withProperties(
                      new BackendProperties()
                          .withServiceFabricCluster(
                              new BackendServiceFabricClusterProperties()
                                  .withClientCertificateId(
                                      "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1")
                                  .withMaxPartitionResolutionRetries(5)
                                  .withManagementEndpoints(Arrays.asList("https://somecluster.com"))
                                  .withServerX509Names(
                                      Arrays
                                          .asList(
                                              new X509CertificateName()
                                                  .withName("ServerCommonName1")
                                                  .withIssuerCertificateThumbprint("IssuerCertificateThumbprint1")))))
                  .create();
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-apimanagement_1.0.0-beta.3/sdk/apimanagement/azure-resourcemanager-apimanagement/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { ApiManagementClient } = require("@azure/arm-apimanagement");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or Updates a backend.
       *
       * @summary Creates or Updates a backend.
       * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendServiceFabric.json
       */
      async function apiManagementCreateBackendServiceFabric() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const serviceName = "apimService1";
        const backendId = "sfbackend";
        const parameters = {
          description: "Service Fabric Test App 1",
          properties: {
            serviceFabricCluster: {
              clientCertificateId:
                "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
              managementEndpoints: ["https://somecluster.com"],
              maxPartitionResolutionRetries: 5,
              serverX509Names: [
                {
                  name: "ServerCommonName1",
                  issuerCertificateThumbprint: "IssuerCertificateThumbprint1",
                },
              ],
            },
          },
          url: "fabric:/mytestapp/mytestservice",
          protocol: "http",
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = await client.backend.createOrUpdate(
          resourceGroupName,
          serviceName,
          backendId,
          parameters
        );
        console.log(result);
      }

      apiManagementCreateBackendServiceFabric().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-apimanagement_8.1.2/sdk/apimanagement/arm-apimanagement/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend",
        "type": "Microsoft.ApiManagement/service/backends",
        "name": "sfbackend",
        "properties": {
          "description": "Service Fabric Test App 1",
          "url": "fabric:/mytestapp/mytestservice",
          "protocol": "http",
          "properties": {
            "serviceFabricCluster": {
              "managementEndpoints": [
                "https://somecluster.com"
              ],
              "clientCertificateId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
              "serverX509Names": [
                {
                  "name": "ServerCommonName1",
                  "issuerCertificateThumbprint": "IssuerCertificateThumbprint1"
                }
              ],
              "maxPartitionResolutionRetries": 5
            }
          }
        }
      }
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/sfbackend",
        "type": "Microsoft.ApiManagement/service/backends",
        "name": "sfbackend",
        "properties": {
          "description": "Service Fabric Test App 1",
          "url": "fabric:/mytestapp/mytestservice",
          "protocol": "http",
          "properties": {
            "serviceFabricCluster": {
              "managementEndpoints": [
                "https://somecluster.com"
              ],
              "clientCertificateId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/certificates/cert1",
              "serverX509Names": [
                {
                  "name": "ServerCommonName1",
                  "issuerCertificateThumbprint": "IssuerCertificateThumbprint1"
                }
              ],
              "maxPartitionResolutionRetries": 5
            }
          }
        }
      }
- name: ApiManagementCreateBackendProxyBackend
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend?api-version=2021-08-01
    body: >-
      {
        "properties": {
          "description": "description5308",
          "url": "https://backendname2644/",
          "protocol": "http",
          "tls": {
            "validateCertificateChain": true,
            "validateCertificateName": true
          },
          "proxy": {
            "url": "http://192.168.1.1:8080",
            "username": "Contoso\\admin",
            "password": "<password>"
          },
          "credentials": {
            "query": {
              "sv": [
                "xx",
                "bb",
                "cc"
              ]
            },
            "header": {
              "x-my-1": [
                "val1",
                "val2"
              ]
            },
            "authorization": {
              "scheme": "Basic",
              "parameter": "opensesma"
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend?api-version=2021-08-01

      {
        "properties": {
          "description": "description5308",
          "url": "https://backendname2644/",
          "protocol": "http",
          "tls": {
            "validateCertificateChain": true,
            "validateCertificateName": true
          },
          "proxy": {
            "url": "http://192.168.1.1:8080",
            "username": "Contoso\\admin",
            "password": "<password>"
          },
          "credentials": {
            "query": {
              "sv": [
                "xx",
                "bb",
                "cc"
              ]
            },
            "header": {
              "x-my-1": [
                "val1",
                "val2"
              ]
            },
            "authorization": {
              "scheme": "Basic",
              "parameter": "opensesma"
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.apimanagement.models.BackendAuthorizationHeaderCredentials;
      import com.azure.resourcemanager.apimanagement.models.BackendCredentialsContract;
      import com.azure.resourcemanager.apimanagement.models.BackendProtocol;
      import com.azure.resourcemanager.apimanagement.models.BackendProxyContract;
      import com.azure.resourcemanager.apimanagement.models.BackendTlsProperties;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for Backend CreateOrUpdate. */
      public final class Main {
          /*
           * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendProxyBackend.json
           */
          /**
           * Sample code: ApiManagementCreateBackendProxyBackend.
           *
           * @param manager Entry point to ApiManagementManager.
           */
          public static void apiManagementCreateBackendProxyBackend(
              com.azure.resourcemanager.apimanagement.ApiManagementManager manager) {
              manager
                  .backends()
                  .define("proxybackend")
                  .withExistingService("rg1", "apimService1")
                  .withUrl("https://backendname2644/")
                  .withProtocol(BackendProtocol.HTTP)
                  .withDescription("description5308")
                  .withCredentials(
                      new BackendCredentialsContract()
                          .withQuery(mapOf("sv", Arrays.asList("xx", "bb", "cc")))
                          .withHeaderProperty(mapOf("x-my-1", Arrays.asList("val1", "val2")))
                          .withAuthorization(
                              new BackendAuthorizationHeaderCredentials().withScheme("Basic").withParameter("opensesma")))
                  .withProxy(
                      new BackendProxyContract()
                          .withUrl("http://192.168.1.1:8080")
                          .withUsername("Contoso\\admin")
                          .withPassword("<password>"))
                  .withTls(new BackendTlsProperties().withValidateCertificateChain(true).withValidateCertificateName(true))
                  .create();
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-apimanagement_1.0.0-beta.3/sdk/apimanagement/azure-resourcemanager-apimanagement/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armapimanagement_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/apimanagement/armapimanagement"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendProxyBackend.json
      func ExampleBackendClient_CreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armapimanagement.NewBackendClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdate(ctx,
      		"rg1",
      		"apimService1",
      		"proxybackend",
      		armapimanagement.BackendContract{
      			Properties: &armapimanagement.BackendContractProperties{
      				Description: to.Ptr("description5308"),
      				Credentials: &armapimanagement.BackendCredentialsContract{
      					Authorization: &armapimanagement.BackendAuthorizationHeaderCredentials{
      						Parameter: to.Ptr("opensesma"),
      						Scheme:    to.Ptr("Basic"),
      					},
      					Header: map[string][]*string{
      						"x-my-1": {
      							to.Ptr("val1"),
      							to.Ptr("val2")},
      					},
      					Query: map[string][]*string{
      						"sv": {
      							to.Ptr("xx"),
      							to.Ptr("bb"),
      							to.Ptr("cc")},
      					},
      				},
      				Proxy: &armapimanagement.BackendProxyContract{
      					Password: to.Ptr("<password>"),
      					URL:      to.Ptr("http://192.168.1.1:8080"),
      					Username: to.Ptr("Contoso\\admin"),
      				},
      				TLS: &armapimanagement.BackendTLSProperties{
      					ValidateCertificateChain: to.Ptr(true),
      					ValidateCertificateName:  to.Ptr(true),
      				},
      				URL:      to.Ptr("https://backendname2644/"),
      				Protocol: to.Ptr(armapimanagement.BackendProtocolHTTP),
      			},
      		},
      		&armapimanagement.BackendClientCreateOrUpdateOptions{IfMatch: nil})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fapimanagement%2Farmapimanagement%2Fv1.0.0/sdk/resourcemanager/apimanagement/armapimanagement/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { ApiManagementClient } = require("@azure/arm-apimanagement");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or Updates a backend.
       *
       * @summary Creates or Updates a backend.
       * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2021-08-01/examples/ApiManagementCreateBackendProxyBackend.json
       */
      async function apiManagementCreateBackendProxyBackend() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const serviceName = "apimService1";
        const backendId = "proxybackend";
        const parameters = {
          description: "description5308",
          credentials: {
            authorization: { parameter: "opensesma", scheme: "Basic" },
            header: { xMy1: ["val1", "val2"] },
            query: { sv: ["xx", "bb", "cc"] },
          },
          proxy: {
            password: "<password>",
            url: "http://192.168.1.1:8080",
            username: "Contosoadmin",
          },
          tls: { validateCertificateChain: true, validateCertificateName: true },
          url: "https://backendname2644/",
          protocol: "http",
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = await client.backend.createOrUpdate(
          resourceGroupName,
          serviceName,
          backendId,
          parameters
        );
        console.log(result);
      }

      apiManagementCreateBackendProxyBackend().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-apimanagement_8.1.2/sdk/apimanagement/arm-apimanagement/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend",
        "type": "Microsoft.ApiManagement/service/backends",
        "name": "proxybackend",
        "properties": {
          "description": "description5308",
          "url": "https://backendname2644/",
          "protocol": "http",
          "credentials": {
            "query": {
              "sv": [
                "xx",
                "bb",
                "cc"
              ]
            },
            "header": {
              "x-my-1": [
                "val1",
                "val2"
              ]
            },
            "authorization": {
              "scheme": "Basic",
              "parameter": "opensesma"
            }
          },
          "proxy": {
            "url": "http://192.168.1.1:8080",
            "username": "Contoso\\admin",
            "password": "<password>"
          },
          "tls": {
            "validateCertificateChain": false,
            "validateCertificateName": false
          }
        }
      }
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/backends/proxybackend",
        "type": "Microsoft.ApiManagement/service/backends",
        "name": "proxybackend",
        "properties": {
          "description": "description5308",
          "url": "https://backendname2644/",
          "protocol": "http",
          "credentials": {
            "query": {
              "sv": [
                "xx",
                "bb",
                "cc"
              ]
            },
            "header": {
              "x-my-1": [
                "val1",
                "val2"
              ]
            },
            "authorization": {
              "scheme": "Basic",
              "parameter": "opensesma"
            }
          },
          "proxy": {
            "url": "http://192.168.1.1:8080",
            "username": "Contoso\\admin",
            "password": "<password>"
          },
          "tls": {
            "validateCertificateChain": false,
            "validateCertificateName": false
          }
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about API Management service - Creates or Updates a backend.
errorCodes: []
