{
  "swagger": "2.0",
  "info": {
    "version": "2017-03-01",
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the product’s APIs."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}": {
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "Product_CreateOrUpdate",
        "description": "Creates or Updates a product.",
        "x-ms-examples": {
          "ApiManagementCreateProductBasic": {
            "parameters": {
              "serviceName": "apimService1",
              "resourceGroupName": "rg1",
              "api-version": "2017-03-01",
              "subscriptionId": "subid",
              "productId": "testproduct",
              "parameters": {
                "properties": {
                  "displayName": "Test Template ProductName 4"
                }
              }
            },
            "responses": {
              "201": {
                "body": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/testproduct",
                  "type": "Microsoft.ApiManagement/service/products",
                  "name": "testproduct",
                  "properties": {
                    "displayName": "Test Template ProductName 4",
                    "subscriptionRequired": true,
                    "approvalRequired": false,
                    "state": "notPublished"
                  }
                }
              },
              "200": {
                "body": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.ApiManagement/service/apimService1/products/testproduct",
                  "type": "Microsoft.ApiManagement/service/products",
                  "name": "testproduct",
                  "properties": {
                    "displayName": "Test Template ProductName 4",
                    "subscriptionRequired": true,
                    "approvalRequired": false,
                    "state": "notPublished"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductContract"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Product was successfully created.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            }
          },
          "200": {
            "description": "Product was successfully updated.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "x-internal-toc-name": "Create Or Update"
      }
    }
  },
  "definitions": {
    "ProductCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Products list representation."
    },
    "ProductContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ProductContractProperties",
          "description": "Product entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Product details."
    },
    "ProductContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "required": [
        "displayName"
      ],
      "description": "Product profile."
    },
    "ProductEntityBaseParameters": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Product description. May include HTML formatting tags.",
          "minLength": 1,
          "maxLength": 1000
        },
        "terms": {
          "type": "string",
          "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process."
        },
        "subscriptionRequired": {
          "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
          "type": "boolean"
        },
        "approvalRequired": {
          "description": "whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.",
          "type": "boolean"
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.",
          "enum": [
            "notPublished",
            "published"
          ],
          "x-ms-enum": {
            "name": "ProductState",
            "modelAsString": false
          }
        }
      },
      "description": "Product Entity Base Parameters"
    },
    "ProductUpdateParameters": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ProductUpdateProperties",
          "description": "Product entity Update contract properties."
        }
      },
      "description": "Product Update parameters."
    },
    "ProductUpdateProperties": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Product name.",
          "maxLength": 300,
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update Product operation."
    },
    "PolicyContractProperties": {
      "properties": {
        "policyContent": {
          "type": "string",
          "description": "Xml Encoded contents of the Policy."
        }
      },
      "required": [
        "policyContent"
      ],
      "description": "Policy contract Properties."
    },
    "PolicyContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/PolicyContractProperties",
          "description": "Properties of the Policy."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Policy Contract details."
    },
    "Resource": {
      "description": "The Resource definition.",
      "x-ms-azure-resource": true,
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Resource ID."
        },
        "name": {
          "type": "string",
          "description": "Resource name.",
          "readOnly": true
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "Resource type for API Management resource."
        }
      }
    },
    "ErrorFieldContract": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Property level error code."
        },
        "message": {
          "type": "string",
          "description": "Human-readable representation of property-level error."
        },
        "target": {
          "type": "string",
          "description": "Property name."
        }
      },
      "description": "Error Field contract."
    },
    "ErrorResponse": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response."
        },
        "message": {
          "type": "string",
          "description": "Human-readable representation of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorFieldContract"
          },
          "description": "The list of invalid fields send in request, in case of validation error."
        }
      },
      "description": "Error Body contract."
    },
    "PolicyCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyContract"
          },
          "description": "Policy Contract value."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "The response of the list policy operation."
    },
    "SubscriptionContractProperties": {
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier."
        },
        "productId": {
          "type": "string",
          "description": "The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the subscription, or null if the subscription has no name.",
          "minLength": 0,
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.",
          "enum": [
            "suspended",
            "active",
            "expired",
            "submitted",
            "rejected",
            "cancelled"
          ],
          "x-ms-enum": {
            "name": "SubscriptionState",
            "modelAsString": false
          }
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "notificationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
        },
        "primaryKey": {
          "type": "string",
          "description": "Subscription primary key.",
          "minLength": 1,
          "maxLength": 256
        },
        "secondaryKey": {
          "type": "string",
          "description": "Subscription secondary key.",
          "minLength": 1,
          "maxLength": 256
        },
        "stateComment": {
          "type": "string",
          "description": "Optional subscription comment added by an administrator."
        }
      },
      "required": [
        "userId",
        "productId",
        "state",
        "primaryKey",
        "secondaryKey"
      ],
      "description": "Subscription details."
    },
    "SubscriptionContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/SubscriptionContractProperties",
          "description": "Subscription contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Subscription details."
    },
    "SubscriptionCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Subscriptions list representation."
    },
    "GroupContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Group name.",
          "maxLength": 300,
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "Group description. Can contain HTML formatting tags.",
          "maxLength": 1000
        },
        "builtIn": {
          "readOnly": true,
          "type": "boolean",
          "description": "true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false."
        },
        "type": {
          "type": "string",
          "description": "Group type.",
          "enum": [
            "custom",
            "system",
            "external"
          ],
          "x-ms-enum": {
            "name": "GroupType",
            "modelAsString": false
          }
        },
        "externalId": {
          "type": "string",
          "description": "For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null."
        }
      },
      "required": [
        "displayName"
      ],
      "description": "Developer group."
    },
    "GroupContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/GroupContractProperties",
          "description": "Group entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Contract details."
    },
    "GroupCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Group list representation."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details.",
      "example": {
        "subscriptionKeyParameterNames": {
          "query": "customQueryParameterName",
          "header": "customHeaderParameterName"
        }
      }
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract",
          "description": "OAuth2 Authentication settings"
        }
      },
      "description": "API Authentication Settings."
    },
    "ApiContractUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API update contract properties."
    },
    "ApiCreateOrUpdateProperties": {
      "properties": {
        "contentValue": {
          "type": "string",
          "description": "Content value when Importing an API."
        },
        "contentFormat": {
          "type": "string",
          "description": "Format of the Content in which the API is getting imported.",
          "enum": [
            "wadl-xml",
            "wadl-link-json",
            "swagger-json",
            "swagger-link-json",
            "wsdl",
            "wsdl-link"
          ],
          "x-ms-enum": {
            "name": "ContentFormat",
            "modelAsString": false
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiContractProperties"
        }
      ],
      "description": "Api Create or Update Properties."
    },
    "ApiContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "required": [
        "path"
      ],
      "description": "Api Entity Properties"
    },
    "ApiEntityBaseContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "ApiType",
          "x-ms-enum": {
            "name": "ApiType",
            "modelAsString": true
          }
        },
        "apiRevision": {
          "type": "string",
          "description": "Describes the Revision of the Api. If no value is provided, default revision 1 is created",
          "minLength": 1,
          "maxLength": 100
        },
        "isCurrent": {
          "type": "boolean",
          "description": "Indicates if API revision is current api revision."
        },
        "isOnline": {
          "type": "boolean",
          "description": "Indicates if API revision is accessible via the gateway."
        }
      },
      "description": "API base contract details."
    },
    "ApiContract": {
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ApiContractProperties",
          "description": "Api entity contract properties."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "API details."
    },
    "ApiCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Api list representation."
    }
  },
  "parameters": {
    "ProductIdParameter": {
      "name": "productId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Product identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Version of the API to be used with the client request."
    },
    "PolicyIdParameter": {
      "name": "policyId",
      "in": "path",
      "required": true,
      "type": "string",
      "enum": [
        "policy"
      ],
      "description": "The identifier of the Policy.",
      "x-ms-enum": {
        "modelAsString": true,
        "name": "PolicyIdName"
      },
      "x-ms-parameter-location": "method"
    },
    "ServiceNameParameter": {
      "name": "serviceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the API Management service.",
      "minLength": 1,
      "maxLength": 50,
      "pattern": "^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$",
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group.",
      "x-ms-parameter-location": "method"
    },
    "SkipQueryParameter": {
      "name": "$skip",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "description": "Number of records to skip.",
      "minimum": 0,
      "x-ms-parameter-location": "method"
    },
    "TopQueryParameter": {
      "name": "$top",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "description": "Number of records to return.",
      "minimum": 1,
      "x-ms-parameter-location": "method"
    },
    "GroupIdParameter": {
      "name": "groupId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Group identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    },
    "ApiIdParameter": {
      "name": "apiId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "API identifier. Must be unique in the current API Management service instance.",
      "minLength": 1,
      "maxLength": 256,
      "pattern": "^[^*#&+:<>?]+$",
      "x-ms-parameter-location": "method"
    }
  },
  "x-internal-service-name": "API Management",
  "x-internal-toc-name": "Product",
  "x-internal-split-type": "Operation"
}