{
  "swagger": "2.0",
  "info": {
    "version": "2019-01-01",
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for querying APIs. Operations and Products by tags in your Azure API Management deployment."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tagResources": {
      "get": {
        "tags": [
          "TagResource"
        ],
        "operationId": "TagResource_ListByService",
        "description": "Lists a collection of resources associated with tags.",
        "x-ms-examples": {
          "ApiManagementListTagResources": {
            "parameters": {
              "serviceName": "apimService1",
              "resourceGroupName": "rg1",
              "api-version": "2019-01-01",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "tag": {
                        "id": "/tags/apitag123",
                        "name": "awesomeTag"
                      },
                      "operation": {
                        "id": "/apis/echo-api/operations/create-resource",
                        "apiName": "Echo API",
                        "apiRevision": "1",
                        "name": "Create resource",
                        "method": "POST",
                        "urlTemplate": "/resource",
                        "description": "A demonstration of a POST call based on the echo backend above. The request body is expected to contain JSON-formatted data (see example below). A policy is used to automatically transform any request sent in JSON directly to XML. In a real-world scenario this could be used to enable modern clients to speak to a legacy backend."
                      }
                    },
                    {
                      "tag": {
                        "id": "/tags/apitag123",
                        "name": "awesomeTag"
                      },
                      "api": {
                        "id": "/apis/echo-api",
                        "name": "Echo API",
                        "apiRevision": "1",
                        "serviceUrl": "http://echoapi.cloudapp.net/api",
                        "path": "echo",
                        "isCurrent": true
                      }
                    },
                    {
                      "tag": {
                        "id": "/tags/apitag123",
                        "name": "awesomeTag"
                      },
                      "product": {
                        "id": "/products/starter",
                        "name": "Starter",
                        "description": "Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week.",
                        "terms": "",
                        "subscriptionRequired": true,
                        "approvalRequired": false,
                        "subscriptionsLimit": 1,
                        "state": "published"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| aid | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| terms | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| isCurrent | filter | eq |     | </br>"
          },
          {
            "$ref": "#/parameters/TopQueryParameter"
          },
          {
            "$ref": "#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of TagResource entities.",
            "schema": {
              "$ref": "#/definitions/TagResourceCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "./definitions.json#/definitions/TagResourceContract",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "x-internal-toc-name": "List By Service"
      }
    }
  },
  "definitions": {
    "ErrorFieldContract": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Property level error code."
        },
        "message": {
          "type": "string",
          "description": "Human-readable representation of property-level error."
        },
        "target": {
          "type": "string",
          "description": "Property name."
        }
      },
      "description": "Error Field contract."
    },
    "ErrorResponseBody": {
      "properties": {
        "code": {
          "type": "string",
          "description": "Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response."
        },
        "message": {
          "type": "string",
          "description": "Human-readable representation of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorFieldContract"
          },
          "description": "The list of invalid fields send in request, in case of validation error."
        }
      },
      "description": "Error Body contract."
    },
    "ErrorResponse": {
      "properties": {
        "error": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/ErrorResponseBody",
          "description": "Properties of the Error Response."
        }
      },
      "description": "Error Response."
    },
    "ProductUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Product name.",
          "maxLength": 300,
          "minLength": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "description": "Parameters supplied to the Update Product operation."
    },
    "ProductTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the product in the form of /products/{productId}"
        },
        "name": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "required": [
        "name"
      ],
      "description": "Product profile."
    },
    "ProductContractProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Product name.",
          "minLength": 1,
          "maxLength": 300
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ProductEntityBaseParameters"
        }
      ],
      "required": [
        "displayName"
      ],
      "description": "Product profile."
    },
    "ProductEntityBaseParameters": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Product description. May include HTML formatting tags.",
          "minLength": 1,
          "maxLength": 1000
        },
        "terms": {
          "type": "string",
          "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process."
        },
        "subscriptionRequired": {
          "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
          "type": "boolean"
        },
        "approvalRequired": {
          "description": "whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false.",
          "type": "boolean"
        },
        "subscriptionsLimit": {
          "type": "integer",
          "format": "int32",
          "description": "Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
        },
        "state": {
          "type": "string",
          "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.",
          "enum": [
            "notPublished",
            "published"
          ],
          "x-ms-enum": {
            "name": "ProductState",
            "modelAsString": false
          }
        }
      },
      "description": "Product Entity Base Parameters"
    },
    "OperationTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the operation in form /operations/{operationId}."
        },
        "name": {
          "type": "string",
          "description": "Operation name.",
          "readOnly": true
        },
        "apiName": {
          "type": "string",
          "description": "Api Name.",
          "readOnly": true
        },
        "apiRevision": {
          "type": "string",
          "description": "Api Revision.",
          "readOnly": true
        },
        "apiVersion": {
          "type": "string",
          "description": "Api Version.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Operation Description.",
          "readOnly": true
        },
        "method": {
          "type": "string",
          "description": "A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.",
          "externalDocs": {
            "description": "As defined by RFC.",
            "url": "http://www.rfc-editor.org/rfc/rfc7230.txt"
          },
          "readOnly": true
        },
        "urlTemplate": {
          "type": "string",
          "description": "Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}",
          "readOnly": true
        }
      },
      "description": "Operation Entity contract Properties."
    },
    "SubscriptionKeyParameterNamesContract": {
      "properties": {
        "header": {
          "type": "string",
          "description": "Subscription key header name."
        },
        "query": {
          "type": "string",
          "description": "Subscription key query string parameter name."
        }
      },
      "description": "Subscription key parameter names details.",
      "example": {
        "subscriptionKeyParameterNames": {
          "query": "customQueryParameterName",
          "header": "customHeaderParameterName"
        }
      }
    },
    "BearerTokenSendingMethodsContract": {
      "type": "string",
      "description": "Form of an authorization grant, which the client uses to request the access token.",
      "enum": [
        "authorizationHeader",
        "query"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "bearerTokenSendingMethods",
        "values": [
          {
            "value": "authorizationHeader",
            "description": "Access token will be transmitted in the Authorization header using Bearer schema"
          },
          {
            "value": "query",
            "description": "Access token will be transmitted as query parameters."
          }
        ]
      }
    },
    "OpenIdAuthenticationSettingsContract": {
      "properties": {
        "openidProviderId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "bearerTokenSendingMethods": {
          "description": "How to send token to the server.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BearerTokenSendingMethodsContract"
          }
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "OAuth2AuthenticationSettingsContract": {
      "properties": {
        "authorizationServerId": {
          "type": "string",
          "description": "OAuth authorization server identifier."
        },
        "scope": {
          "type": "string",
          "description": "operations scope."
        }
      },
      "description": "API OAuth2 Authentication settings details."
    },
    "AuthenticationSettingsContract": {
      "properties": {
        "oAuth2": {
          "$ref": "#/definitions/OAuth2AuthenticationSettingsContract",
          "description": "OAuth2 Authentication settings"
        },
        "openid": {
          "$ref": "#/definitions/OpenIdAuthenticationSettingsContract",
          "description": "OpenID Connect Authentication Settings"
        }
      },
      "description": "API Authentication Settings."
    },
    "ApiContractUpdateProperties": {
      "properties": {
        "displayName": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API update contract properties."
    },
    "ApiTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "API identifier in the form /apis/{apiId}."
        },
        "name": {
          "type": "string",
          "description": "API name.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API.",
          "minLength": 1,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "description": "API contract properties for the Tag Resources."
    },
    "ApiVersionSetContractDetails": {
      "description": "An API Version Set contains the common configuration for a set of API Versions relating ",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for existing API Version Set. Omit this value to create a new Version Set."
        },
        "name": {
          "type": "string",
          "description": "The display Name of the API Version Set."
        },
        "description": {
          "type": "string",
          "description": "Description of API Version Set."
        },
        "versioningScheme": {
          "type": "string",
          "description": "An value that determines where the API Version identifer will be located in a HTTP request.",
          "enum": [
            "Segment",
            "Query",
            "Header"
          ]
        },
        "versionQueryName": {
          "type": "string",
          "description": "Name of query parameter that indicates the API Version if versioningScheme is set to `query`."
        },
        "versionHeaderName": {
          "type": "string",
          "description": "Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`."
        }
      }
    },
    "ApiCreateOrUpdateProperties": {
      "properties": {
        "value": {
          "type": "string",
          "description": "Content value when Importing an API."
        },
        "format": {
          "type": "string",
          "description": "Format of the Content in which the API is getting imported.",
          "enum": [
            "wadl-xml",
            "wadl-link-json",
            "swagger-json",
            "swagger-link-json",
            "wsdl",
            "wsdl-link",
            "openapi",
            "openapi+json",
            "openapi-link"
          ],
          "x-ms-enum": {
            "name": "ContentFormat",
            "modelAsString": true,
            "values": [
              {
                "value": "wadl-xml",
                "description": "The contents are inline and Content type is a WADL document."
              },
              {
                "value": "wadl-link-json",
                "description": "The WADL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "swagger-json",
                "description": "The contents are inline and Content Type is a OpenApi 2.0 Document."
              },
              {
                "value": "swagger-link-json",
                "description": "The Open Api 2.0 document is hosted on a publicly accessible internet address."
              },
              {
                "value": "wsdl",
                "description": "The contents are inline and the document is a WSDL/Soap document."
              },
              {
                "value": "wsdl-link",
                "description": "The WSDL document is hosted on a publicly accessible internet address."
              },
              {
                "value": "openapi",
                "description": "The contents are inline and Content Type is a OpenApi 3.0 Document in YAML format."
              },
              {
                "value": "openapi+json",
                "description": "The contents are inline and Content Type is a OpenApi 3.0 Document in JSON format."
              },
              {
                "value": "openapi-link",
                "description": "The Open Api 3.0 document is hosted on a publicly accessible internet address."
              }
            ]
          }
        },
        "wsdlSelector": {
          "type": "object",
          "description": "Criteria to limit import of WSDL to a subset of the document.",
          "properties": {
            "wsdlServiceName": {
              "type": "string",
              "description": "Name of service to import from WSDL"
            },
            "wsdlEndpointName": {
              "type": "string",
              "description": "Name of endpoint(port) to import from WSDL"
            }
          }
        },
        "apiType": {
          "type": "string",
          "description": "Type of Api to create. \n * `http` creates a SOAP to REST API \n * `soap` creates a SOAP pass-through API .",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "SoapApiType",
          "x-ms-enum": {
            "name": "SoapApiType",
            "modelAsString": true,
            "values": [
              {
                "value": "http",
                "description": "Imports a SOAP API having a RESTful front end.",
                "name": "SoapToRest"
              },
              {
                "value": "soap",
                "description": "Imports the Soap API having a SOAP front end.",
                "name": "SoapPassThrough"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiContractProperties"
        }
      ],
      "description": "Api Create or Update Properties."
    },
    "ApiContractProperties": {
      "properties": {
        "sourceApiId": {
          "type": "string",
          "description": "API identifier of the source API."
        },
        "displayName": {
          "type": "string",
          "description": "API name. Must be 1 to 300 characters long.",
          "minLength": 1,
          "maxLength": 300
        },
        "serviceUrl": {
          "type": "string",
          "description": "Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.",
          "minLength": 0,
          "maxLength": 2000
        },
        "path": {
          "type": "string",
          "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
          "minLength": 0,
          "maxLength": 400
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "http",
              "https"
            ],
            "x-ms-enum": {
              "name": "Protocol",
              "modelAsString": false
            }
          },
          "description": "Describes on which protocols the operations in this API can be invoked."
        },
        "apiVersionSet": {
          "description": "Version set details",
          "$ref": "#/definitions/ApiVersionSetContractDetails"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ApiEntityBaseContract"
        }
      ],
      "required": [
        "path"
      ],
      "description": "Api Entity Properties"
    },
    "ApiEntityBaseContract": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the API. May include HTML formatting tags."
        },
        "authenticationSettings": {
          "$ref": "#/definitions/AuthenticationSettingsContract",
          "description": "Collection of authentication settings included into this API."
        },
        "subscriptionKeyParameterNames": {
          "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
          "description": "Protocols over which API is made available."
        },
        "type": {
          "type": "string",
          "description": "Type of API.",
          "enum": [
            "http",
            "soap"
          ],
          "x-ms-client-name": "ApiType",
          "x-ms-enum": {
            "name": "ApiType",
            "modelAsString": true
          }
        },
        "apiRevision": {
          "type": "string",
          "description": "Describes the Revision of the Api. If no value is provided, default revision 1 is created",
          "minLength": 1,
          "maxLength": 100
        },
        "apiVersion": {
          "type": "string",
          "description": "Indicates the Version identifier of the API if the API is versioned",
          "maxLength": 100
        },
        "isCurrent": {
          "type": "boolean",
          "description": "Indicates if API revision is current api revision."
        },
        "isOnline": {
          "type": "boolean",
          "description": "Indicates if API revision is accessible via the gateway.",
          "readOnly": true
        },
        "apiRevisionDescription": {
          "type": "string",
          "description": "Description of the Api Revision.",
          "maxLength": 256
        },
        "apiVersionDescription": {
          "type": "string",
          "description": "Description of the Api Version.",
          "maxLength": 256
        },
        "apiVersionSetId": {
          "type": "string",
          "description": "A resource identifier for the related ApiVersionSet."
        },
        "subscriptionRequired": {
          "type": "boolean",
          "description": "Specifies whether an API or Product subscription is required for accessing the API."
        }
      },
      "description": "API base contract details."
    },
    "TagTagResourceContractProperties": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Tag identifier"
        },
        "name": {
          "type": "string",
          "description": "Tag Name",
          "minLength": 1,
          "maxLength": 160
        }
      },
      "description": "Contract defining the Tag property in the Tag Resource Contract"
    },
    "TagResourceContract": {
      "properties": {
        "tag": {
          "$ref": "#/definitions/TagTagResourceContractProperties",
          "description": "Tag associated with the resource."
        },
        "api": {
          "$ref": "#/definitions/ApiTagResourceContractProperties",
          "description": "Api associated with the tag."
        },
        "operation": {
          "$ref": "#/definitions/OperationTagResourceContractProperties",
          "description": "Operation associated with the tag."
        },
        "product": {
          "$ref": "#/definitions/ProductTagResourceContractProperties",
          "description": "Product associated with the tag."
        }
      },
      "required": [
        "tag"
      ],
      "description": "TagResource contract properties."
    },
    "TagResourceCollection": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResourceContract"
          },
          "description": "Page values."
        },
        "nextLink": {
          "type": "string",
          "description": "Next page link if any."
        }
      },
      "description": "Paged Tag list representation."
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Version of the API to be used with the client request."
    },
    "SkipQueryParameter": {
      "name": "$skip",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "description": "Number of records to skip.",
      "minimum": 0,
      "x-ms-parameter-location": "method"
    },
    "TopQueryParameter": {
      "name": "$top",
      "in": "query",
      "required": false,
      "type": "integer",
      "format": "int32",
      "description": "Number of records to return.",
      "minimum": 1,
      "x-ms-parameter-location": "method"
    },
    "ServiceNameParameter": {
      "name": "serviceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the API Management service.",
      "minLength": 1,
      "maxLength": 50,
      "pattern": "^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$",
      "x-ms-parameter-location": "method"
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group.",
      "x-ms-parameter-location": "method"
    }
  },
  "x-internal-service-id": "apimanagement",
  "x-internal-service-name": "API Management",
  "x-internal-toc-name": "Tag Resource",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "ListByService",
  "x-internal-operation-name": "List By Service"
}