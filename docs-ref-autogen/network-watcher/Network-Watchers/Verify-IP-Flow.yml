### YamlMime:RESTOperation
uid: management.azure.com.network-watcher.networkwatchers.verifyipflow
name: Verify IP Flow
service: Network Watcher
groupName: Network Watchers
apiVersion: 2021-08-01
summary: Verify IP flow from the specified VM to a location given the currently configured NSG rules.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify?api-version=2021-08-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: networkWatcherName
  in: path
  isRequired: true
  description: The name of the network watcher.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Request successful. The operation returns the result of IP flow verification.
  types:
  - uid: VerificationIPFlowResult
- name: 202 Accepted
  description: Accepted and the operation will complete asynchronously.
  types:
  - uid: VerificationIPFlowResult
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: targetResourceId
    in: body
    isRequired: true
    description: The ID of the target resource to perform next-hop on.
    types:
    - uid: string
  - name: direction
    in: body
    isRequired: true
    description: The direction of the packet represented as a 5-tuple.
    types:
    - uid: Direction
  - name: protocol
    in: body
    isRequired: true
    description: Protocol to be verified on.
    types:
    - uid: IpFlowProtocol
  - name: localPort
    in: body
    isRequired: true
    description: The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
    types:
    - uid: string
  - name: remotePort
    in: body
    isRequired: true
    description: The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
    types:
    - uid: string
  - name: localIPAddress
    in: body
    isRequired: true
    description: The local IP address. Acceptable values are valid IPv4 addresses.
    types:
    - uid: string
  - name: remoteIPAddress
    in: body
    isRequired: true
    description: The remote IP address. Acceptable values are valid IPv4 addresses.
    types:
    - uid: string
  - name: targetNicResourceId
    in: body
    description: The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
    types:
    - uid: string
requestHeader: []
definitions:
- name: VerificationIPFlowResult
  description: Results of IP flow verification on the target resource.
  kind: object
  properties:
  - name: access
    description: Indicates whether the traffic is allowed or denied.
    types:
    - uid: Access
  - name: ruleName
    description: Name of the rule. If input is not matched against any security rule, it is not displayed.
    types:
    - uid: string
- name: ErrorResponse
  description: The error object.
  kind: object
  properties:
  - name: error
    description: "Error  \nThe error details object."
    types:
    - uid: ErrorDetails
- name: VerificationIPFlowParameters
  description: Parameters that define the IP flow to be verified.
  kind: object
  properties:
  - name: targetResourceId
    description: The ID of the target resource to perform next-hop on.
    types:
    - uid: string
  - name: direction
    description: The direction of the packet represented as a 5-tuple.
    types:
    - uid: Direction
  - name: protocol
    description: Protocol to be verified on.
    types:
    - uid: IpFlowProtocol
  - name: localPort
    description: The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
    types:
    - uid: string
  - name: remotePort
    description: The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
    types:
    - uid: string
  - name: localIPAddress
    description: The local IP address. Acceptable values are valid IPv4 addresses.
    types:
    - uid: string
  - name: remoteIPAddress
    description: The remote IP address. Acceptable values are valid IPv4 addresses.
    types:
    - uid: string
  - name: targetNicResourceId
    description: The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
    types:
    - uid: string
- name: Access
  description: Access to be allowed or denied.
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
- name: ErrorDetails
  description: Common error details representation.
  kind: object
  properties:
  - name: code
    description: Error code.
    types:
    - uid: string
  - name: target
    description: Error target.
    types:
    - uid: string
  - name: message
    description: Error message.
    types:
    - uid: string
- name: Direction
  description: The direction of the traffic.
  kind: enum
  properties:
  - name: Inbound
    types:
    - uid: string
  - name: Outbound
    types:
    - uid: string
- name: IpFlowProtocol
  description: Protocol to be verified on.
  kind: enum
  properties:
  - name: TCP
    types:
    - uid: string
  - name: UDP
    types:
    - uid: string
examples:
- name: Ip flow verify
  request:
    uri: POST https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/ipFlowVerify?api-version=2021-08-01
    body: >-
      {
        "targetResourceId": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1",
        "direction": "Outbound",
        "protocol": "TCP",
        "localPort": "80",
        "remotePort": "80",
        "localIPAddress": "10.2.0.4",
        "remoteIPAddress": "121.10.1.1"
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/ipFlowVerify?api-version=2021-08-01

      {
        "targetResourceId": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1",
        "direction": "Outbound",
        "protocol": "TCP",
        "localPort": "80",
        "remotePort": "80",
        "localIPAddress": "10.2.0.4",
        "remoteIPAddress": "121.10.1.1"
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.network.models.Direction;
      import com.azure.resourcemanager.network.models.IpFlowProtocol;
      import com.azure.resourcemanager.network.models.VerificationIpFlowParameters;

      /** Samples for NetworkWatchers VerifyIpFlow. */
      public final class Main {
          /*
           * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-08-01/examples/NetworkWatcherIpFlowVerify.json
           */
          /**
           * Sample code: Ip flow verify.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void ipFlowVerify(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .networks()
                  .manager()
                  .serviceClient()
                  .getNetworkWatchers()
                  .verifyIpFlow(
                      "rg1",
                      "nw1",
                      new VerificationIpFlowParameters()
                          .withTargetResourceId(
                              "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1")
                          .withDirection(Direction.OUTBOUND)
                          .withProtocol(IpFlowProtocol.TCP)
                          .withLocalPort("80")
                          .withRemotePort("80")
                          .withLocalIpAddress("10.2.0.4")
                          .withRemoteIpAddress("121.10.1.1"),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2021-08-01/examples/NetworkWatcherIpFlowVerify.json
      func ExampleWatchersClient_BeginVerifyIPFlow() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewWatchersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginVerifyIPFlow(ctx,
      		"rg1",
      		"nw1",
      		armnetwork.VerificationIPFlowParameters{
      			Direction:        to.Ptr(armnetwork.DirectionOutbound),
      			LocalIPAddress:   to.Ptr("10.2.0.4"),
      			LocalPort:        to.Ptr("80"),
      			RemoteIPAddress:  to.Ptr("121.10.1.1"),
      			RemotePort:       to.Ptr("80"),
      			TargetResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1"),
      			Protocol:         to.Ptr(armnetwork.IPFlowProtocolTCP),
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv1.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Verify IP flow from the specified VM to a location given the currently configured NSG rules.
       *
       * @summary Verify IP flow from the specified VM to a location given the currently configured NSG rules.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-08-01/examples/NetworkWatcherIpFlowVerify.json
       */
      async function ipFlowVerify() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const networkWatcherName = "nw1";
        const parameters = {
          direction: "Outbound",
          localIPAddress: "10.2.0.4",
          localPort: "80",
          remoteIPAddress: "121.10.1.1",
          remotePort: "80",
          targetResourceId:
            "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Compute/virtualMachines/vm1",
          protocol: "TCP",
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.networkWatchers.beginVerifyIPFlowAndWait(
          resourceGroupName,
          networkWatcherName,
          parameters
        );
        console.log(result);
      }

      ipFlowVerify().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_28.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "access": "Allow",
        "ruleName": "Rule1"
      }
  - statusCode: "202"
    headers:
    - name: Location
      value: https:/management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkWatchers/nw1/ipFlowVerify?api-version=2021-08-01
    body: >-
      {
        "access": "Allow",
        "ruleName": "Rule1"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Network Watcher service - Verify IP flow from the specified VM to a location given the currently configured NSG rules.
errorCodes: []
