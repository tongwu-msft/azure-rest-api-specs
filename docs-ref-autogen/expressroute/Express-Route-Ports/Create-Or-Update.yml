### YamlMime:RESTOperation
uid: management.azure.com.expressroute.expressrouteports.createorupdate
name: Create Or Update
service: ExpressRoute
groupName: Express Route Ports
apiVersion: 2022-05-01
summary: Creates or updates the specified ExpressRoutePort resource.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}?api-version=2022-05-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: expressRoutePortName
  in: path
  isRequired: true
  description: The name of the ExpressRoutePort resource.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Update successful. The operation returns the resulting ExpressRoutePort resource.
  types:
  - uid: ExpressRoutePort
- name: 201 Created
  description: Create successful. The operation returns the resulting ExpressRoutePort resource.
  types:
  - uid: ExpressRoutePort
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: identity
    in: body
    description: The identity of ExpressRoutePort, if configured.
    types:
    - uid: ManagedServiceIdentity
  - name: properties.peeringLocation
    in: body
    description: The name of the peering location that the ExpressRoutePort is mapped to physically.
    types:
    - uid: string
  - name: properties.bandwidthInGbps
    in: body
    description: Bandwidth of procured ports in Gbps.
    types:
    - uid: integer
  - name: properties.encapsulation
    in: body
    description: Encapsulation method on physical ports.
    types:
    - uid: ExpressRoutePortsEncapsulation
  - name: properties.links
    in: body
    description: "ExpressRouteLink Sub-Resources  \nThe set of physical links of the ExpressRoutePort resource."
    types:
    - uid: ExpressRouteLink
      isArray: true
  - name: properties.billingType
    in: body
    description: The billing type of the ExpressRoutePort resource.
    types:
    - uid: ExpressRoutePortsBillingType
  - name: id
    in: body
    description: Resource ID.
    types:
    - uid: string
  - name: location
    in: body
    description: Resource location.
    types:
    - uid: string
  - name: tags
    in: body
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: ManagedServiceIdentity
  description: Identity for the resource.
  kind: object
  properties:
  - name: principalId
    isReadyOnly: true
    description: The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
    types:
    - uid: string
  - name: tenantId
    isReadyOnly: true
    description: The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
    types:
    - uid: string
  - name: type
    description: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
    types:
    - uid: ResourceIdentityType
  - name: userAssignedIdentities
    description: "The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'."
    types:
    - uid: UserAssignedIdentities
- name: ExpressRouteLink
  description: ExpressRouteLink
  kind: object
  properties:
  - name: name
    description: Name of child port resource that is unique among child port resources of the parent.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.routerName
    isReadyOnly: true
    description: Name of Azure router associated with physical port.
    types:
    - uid: string
  - name: properties.interfaceName
    isReadyOnly: true
    description: Name of Azure router interface.
    types:
    - uid: string
  - name: properties.patchPanelId
    isReadyOnly: true
    description: Mapping between physical port to patch panel port.
    types:
    - uid: string
  - name: properties.rackId
    isReadyOnly: true
    description: Mapping of physical patch panel to rack.
    types:
    - uid: string
  - name: properties.coloLocation
    isReadyOnly: true
    description: Cololocation for ExpressRoute Hybrid Direct.
    types:
    - uid: string
  - name: properties.connectorType
    isReadyOnly: true
    description: Physical fiber port type.
    types:
    - uid: ExpressRouteLinkConnectorType
  - name: properties.adminState
    description: Administrative state of the physical port.
    types:
    - uid: ExpressRouteLinkAdminState
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the express route link resource.
    types:
    - uid: ProvisioningState
  - name: properties.macSecConfig
    description: "Definition of ExpressRouteLink Mac Security configuration.  \nMacSec configuration."
    types:
    - uid: ExpressRouteLinkMacSecConfig
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: SubResource
  description: Reference to another subresource.
  kind: object
  properties:
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: ExpressRoutePort
  description: ExpressRoute Port
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: identity
    description: The identity of ExpressRoutePort, if configured.
    types:
    - uid: ManagedServiceIdentity
  - name: properties.peeringLocation
    description: The name of the peering location that the ExpressRoutePort is mapped to physically.
    types:
    - uid: string
  - name: properties.bandwidthInGbps
    description: Bandwidth of procured ports in Gbps.
    types:
    - uid: integer
  - name: properties.provisionedBandwidthInGbps
    isReadyOnly: true
    description: Aggregate Gbps of associated circuit bandwidths.
    types:
    - uid: number
  - name: properties.mtu
    isReadyOnly: true
    description: Maximum transmission unit of the physical port pair(s).
    types:
    - uid: string
  - name: properties.encapsulation
    description: Encapsulation method on physical ports.
    types:
    - uid: ExpressRoutePortsEncapsulation
  - name: properties.etherType
    isReadyOnly: true
    description: Ether type of the physical port.
    types:
    - uid: string
  - name: properties.allocationDate
    isReadyOnly: true
    description: Date of the physical port allocation to be used in Letter of Authorization.
    types:
    - uid: string
  - name: properties.links
    description: "ExpressRouteLink Sub-Resources  \nThe set of physical links of the ExpressRoutePort resource."
    types:
    - uid: ExpressRouteLink
      isArray: true
  - name: properties.circuits
    isReadyOnly: true
    description: Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the express route port resource.
    types:
    - uid: ProvisioningState
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the express route port resource.
    types:
    - uid: string
  - name: properties.billingType
    description: The billing type of the ExpressRoutePort resource.
    types:
    - uid: ExpressRoutePortsBillingType
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: CloudError
  description: An error response from the service.
  kind: object
  properties:
  - name: error
    description: Cloud error body.
    types:
    - uid: CloudErrorBody
- name: ResourceIdentityType
  description: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
  kind: enum
  properties:
  - name: SystemAssigned
    types:
    - uid: string
  - name: UserAssigned
    types:
    - uid: string
  - name: SystemAssigned, UserAssigned
    types:
    - uid: string
  - name: None
    types:
    - uid: string
- name: UserAssignedIdentities
  description: "The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'."
  kind: object
  properties:
  - name: ''
    description: ''
    types:
    - uid: ''
- name: ExpressRouteLinkConnectorType
  description: Physical fiber port type.
  kind: enum
  properties:
  - name: LC
    types:
    - uid: string
  - name: SC
    types:
    - uid: string
- name: ExpressRouteLinkAdminState
  description: Administrative state of the physical port.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: ProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: ExpressRouteLinkMacSecConfig
  description: Definition of ExpressRouteLink Mac Security configuration.
  kind: object
  properties:
  - name: cknSecretIdentifier
    description: Keyvault Secret Identifier URL containing Mac security CKN key.
    types:
    - uid: string
  - name: cakSecretIdentifier
    description: Keyvault Secret Identifier URL containing Mac security CAK key.
    types:
    - uid: string
  - name: cipher
    description: Mac security cipher.
    types:
    - uid: ExpressRouteLinkMacSecCipher
  - name: sciState
    description: Sci mode enabled/disabled.
    types:
    - uid: ExpressRouteLinkMacSecSciState
- name: ExpressRoutePortsEncapsulation
  description: Encapsulation method on physical ports.
  kind: enum
  properties:
  - name: Dot1Q
    types:
    - uid: string
  - name: QinQ
    types:
    - uid: string
- name: ExpressRoutePortsBillingType
  description: The billing type of the ExpressRoutePort resource.
  kind: enum
  properties:
  - name: MeteredData
    types:
    - uid: string
  - name: UnlimitedData
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response from the service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
- name: ExpressRouteLinkMacSecCipher
  description: Mac security cipher.
  kind: enum
  properties:
  - name: GcmAes256
    types:
    - uid: string
  - name: GcmAes128
    types:
    - uid: string
  - name: GcmAesXpn128
    types:
    - uid: string
  - name: GcmAesXpn256
    types:
    - uid: string
- name: ExpressRouteLinkMacSecSciState
  description: Sci mode enabled/disabled.
  kind: enum
  properties:
  - name: Disabled
    types:
    - uid: string
  - name: Enabled
    types:
    - uid: string
examples:
- name: ExpressRoutePortCreate
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ExpressRoutePorts/portName?api-version=2022-05-01
    body: >-
      {
        "location": "westus",
        "properties": {
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ExpressRoutePorts/portName?api-version=2022-05-01

      {
        "location": "westus",
        "properties": {
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData"
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/ExpressRoutePortCreate.json
      func ExampleExpressRoutePortsClient_BeginCreateOrUpdate_expressRoutePortCreate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewExpressRoutePortsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "portName", armnetwork.ExpressRoutePort{
      		Location: to.Ptr("westus"),
      		Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
      			BandwidthInGbps: to.Ptr[int32](100),
      			BillingType:     to.Ptr(armnetwork.ExpressRoutePortsBillingTypeUnlimitedData),
      			Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
      			PeeringLocation: to.Ptr("peeringLocationName"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified ExpressRoutePort resource.
       *
       * @summary Creates or updates the specified ExpressRoutePort resource.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/ExpressRoutePortCreate.json
       */
      async function expressRoutePortCreate() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const expressRoutePortName = "portName";
        const parameters = {
          bandwidthInGbps: 100,
          billingType: "UnlimitedData",
          encapsulation: "QinQ",
          location: "westus",
          peeringLocation: "peeringLocationName",
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.expressRoutePorts.beginCreateOrUpdateAndWait(
          resourceGroupName,
          expressRoutePortName,
          parameters
        );
        console.log(result);
      }

      expressRoutePortCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "portName",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName",
        "type": "Microsoft.Network/expressRoutePorts",
        "location": "westus",
        "properties": {
          "provisioningState": "Succeeded",
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "provisionedBandwidthInGbps": 0,
          "mtu": "1500",
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData",
          "etherType": "0x8100",
          "allocationDate": "Friday, July 1, 2018",
          "links": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1",
              "name": "link1",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router1",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId1",
                "rackId": "rackId1",
                "connectorType": "LC",
                "adminState": "Disabled"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2",
              "name": "link2",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router2",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId2",
                "rackId": "rackId2",
                "connectorType": "LC",
                "adminState": "Disabled"
              }
            }
          ],
          "circuits": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "portName",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName",
        "type": "Microsoft.Network/expressRoutePorts",
        "location": "westus",
        "properties": {
          "provisioningState": "Succeeded",
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "provisionedBandwidthInGbps": 0,
          "mtu": "1500",
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData",
          "etherType": "0x8100",
          "allocationDate": "Friday, July 1, 2018",
          "links": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1",
              "name": "link1",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router1",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId1",
                "rackId": "rackId1",
                "connectorType": "LC",
                "adminState": "Disabled"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2",
              "name": "link2",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router2",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId2",
                "rackId": "rackId2",
                "connectorType": "LC",
                "adminState": "Disabled"
              }
            }
          ],
          "circuits": []
        }
      }
- name: ExpressRoutePortUpdateLink
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ExpressRoutePorts/portName?api-version=2022-05-01
    body: >-
      {
        "location": "westus",
        "properties": {
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData",
          "links": [
            {
              "name": "link1",
              "properties": {
                "adminState": "Enabled"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ExpressRoutePorts/portName?api-version=2022-05-01

      {
        "location": "westus",
        "properties": {
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData",
          "links": [
            {
              "name": "link1",
              "properties": {
                "adminState": "Enabled"
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/ExpressRoutePortUpdateLink.json
      func ExampleExpressRoutePortsClient_BeginCreateOrUpdate_expressRoutePortUpdateLink() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewExpressRoutePortsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "portName", armnetwork.ExpressRoutePort{
      		Location: to.Ptr("westus"),
      		Properties: &armnetwork.ExpressRoutePortPropertiesFormat{
      			BandwidthInGbps: to.Ptr[int32](100),
      			BillingType:     to.Ptr(armnetwork.ExpressRoutePortsBillingTypeUnlimitedData),
      			Encapsulation:   to.Ptr(armnetwork.ExpressRoutePortsEncapsulationQinQ),
      			Links: []*armnetwork.ExpressRouteLink{
      				{
      					Name: to.Ptr("link1"),
      					Properties: &armnetwork.ExpressRouteLinkPropertiesFormat{
      						AdminState: to.Ptr(armnetwork.ExpressRouteLinkAdminStateEnabled),
      					},
      				}},
      			PeeringLocation: to.Ptr("peeringLocationName"),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified ExpressRoutePort resource.
       *
       * @summary Creates or updates the specified ExpressRoutePort resource.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/ExpressRoutePortUpdateLink.json
       */
      async function expressRoutePortUpdateLink() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const expressRoutePortName = "portName";
        const parameters = {
          bandwidthInGbps: 100,
          billingType: "UnlimitedData",
          encapsulation: "QinQ",
          links: [{ name: "link1", adminState: "Enabled" }],
          location: "westus",
          peeringLocation: "peeringLocationName",
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.expressRoutePorts.beginCreateOrUpdateAndWait(
          resourceGroupName,
          expressRoutePortName,
          parameters
        );
        console.log(result);
      }

      expressRoutePortUpdateLink().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "portName",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName",
        "type": "Microsoft.Network/expressRoutePorts",
        "location": "westus",
        "properties": {
          "provisioningState": "Succeeded",
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "provisionedBandwidthInGbps": 0,
          "mtu": "1500",
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData",
          "etherType": "0x8100",
          "allocationDate": "Friday, July 1, 2018",
          "links": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1",
              "name": "link1",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router1",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId1",
                "rackId": "rackId1",
                "connectorType": "LC",
                "adminState": "Enabled"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2",
              "name": "link2",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router2",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId2",
                "rackId": "rackId2",
                "connectorType": "LC",
                "adminState": "Disabled"
              }
            }
          ],
          "circuits": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "portName",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName",
        "type": "Microsoft.Network/expressRoutePorts",
        "location": "westus",
        "properties": {
          "provisioningState": "Succeeded",
          "peeringLocation": "peeringLocationName",
          "bandwidthInGbps": 100,
          "provisionedBandwidthInGbps": 0,
          "mtu": "1500",
          "encapsulation": "QinQ",
          "billingType": "UnlimitedData",
          "etherType": "0x8100",
          "allocationDate": "Friday, July 1, 2018",
          "links": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link1",
              "name": "link1",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router1",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId1",
                "rackId": "rackId1",
                "connectorType": "LC",
                "adminState": "Enabled"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/expressRoutePorts/portName/links/link2",
              "name": "link2",
              "properties": {
                "provisioningState": "Succeeded",
                "routerName": "router2",
                "interfaceName": "Ethernet 0/0",
                "patchPanelId": "patchPanelId2",
                "rackId": "rackId2",
                "connectorType": "LC",
                "adminState": "Disabled"
              }
            }
          ],
          "circuits": []
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about ExpressRoute service - Creates or updates the specified ExpressRoutePort resource.
errorCodes: []
