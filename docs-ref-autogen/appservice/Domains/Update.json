{
  "swagger": "2.0",
  "info": {
    "version": "2015-04-01",
    "title": "Domains API Client"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}": {
      "patch": {
        "tags": [
          "Domains"
        ],
        "summary": "Creates or updates a domain.",
        "description": "Creates or updates a domain.",
        "operationId": "Domains_Update",
        "parameters": [
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string",
            "pattern": "[a-zA-Z0-9][a-zA-Z0-9\\.-]+"
          },
          {
            "name": "domain",
            "in": "body",
            "description": "Domain registration information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainPatchResource"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Domain purchase is in progress.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "200": {
            "description": "Domain purchase was successful.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "x-internal-toc-name": "Update"
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Address information for domain registration.",
      "required": [
        "address1",
        "city",
        "country",
        "postalCode",
        "state"
      ],
      "type": "object",
      "properties": {
        "address1": {
          "description": "First line of an Address.",
          "type": "string"
        },
        "address2": {
          "description": "The second line of the Address. Optional.",
          "type": "string"
        },
        "city": {
          "description": "The city for the address.",
          "type": "string"
        },
        "country": {
          "description": "The country for the address.",
          "type": "string"
        },
        "postalCode": {
          "description": "The postal code for the address.",
          "type": "string"
        },
        "state": {
          "description": "The state or province for the address.",
          "type": "string"
        }
      }
    },
    "Contact": {
      "description": "Contact information for domain registration. If 'Domain Privacy' option is not selected then the contact information is made publicly available through the Whois \ndirectories as per ICANN requirements.",
      "required": [
        "email",
        "nameFirst",
        "nameLast",
        "phone"
      ],
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/Address",
          "description": "Mailing address."
        },
        "email": {
          "description": "Email address.",
          "type": "string"
        },
        "fax": {
          "description": "Fax number.",
          "type": "string"
        },
        "jobTitle": {
          "description": "Job title.",
          "type": "string"
        },
        "nameFirst": {
          "description": "First name.",
          "type": "string"
        },
        "nameLast": {
          "description": "Last name.",
          "type": "string"
        },
        "nameMiddle": {
          "description": "Middle name.",
          "type": "string"
        },
        "organization": {
          "description": "Organization contact belongs to.",
          "type": "string"
        },
        "phone": {
          "description": "Phone number.",
          "type": "string"
        }
      }
    },
    "Domain": {
      "description": "Information about a domain.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "Domain resource specific properties",
          "required": [
            "contactAdmin",
            "contactBilling",
            "contactRegistrant",
            "contactTech",
            "consent"
          ],
          "properties": {
            "contactAdmin": {
              "$ref": "#/definitions/Contact",
              "description": "Administrative contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactBilling": {
              "$ref": "#/definitions/Contact",
              "description": "Billing contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactRegistrant": {
              "$ref": "#/definitions/Contact",
              "description": "Registrant contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactTech": {
              "$ref": "#/definitions/Contact",
              "description": "Technical contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "registrationStatus": {
              "description": "Domain registration status.",
              "enum": [
                "Active",
                "Awaiting",
                "Cancelled",
                "Confiscated",
                "Disabled",
                "Excluded",
                "Expired",
                "Failed",
                "Held",
                "Locked",
                "Parked",
                "Pending",
                "Reserved",
                "Reverted",
                "Suspended",
                "Transferred",
                "Unknown",
                "Unlocked",
                "Unparked",
                "Updated",
                "JsonConverterFailed"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "DomainStatus",
                "modelAsString": false
              }
            },
            "provisioningState": {
              "description": "Domain provisioning state.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            },
            "nameServers": {
              "description": "Name servers.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "privacy": {
              "description": "<code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "createdTime": {
              "format": "date-time",
              "description": "Domain creation timestamp.",
              "type": "string",
              "readOnly": true
            },
            "expirationTime": {
              "format": "date-time",
              "description": "Domain expiration timestamp.",
              "type": "string",
              "readOnly": true
            },
            "lastRenewedTime": {
              "format": "date-time",
              "description": "Timestamp when the domain was renewed last time.",
              "type": "string",
              "readOnly": true
            },
            "autoRenew": {
              "description": "<code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.",
              "default": true,
              "type": "boolean"
            },
            "readyForDnsRecordManagement": {
              "description": "<code>true</code> if Azure can assign this domain to App Service apps; otherwise, <code>false</code>. This value will be <code>true</code> if domain registration status is active and \n it is hosted on name servers Azure has programmatic access to.",
              "type": "boolean",
              "readOnly": true
            },
            "managedHostNames": {
              "description": "All hostnames derived from the domain and assigned to Azure resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostName"
              },
              "readOnly": true
            },
            "consent": {
              "$ref": "#/definitions/DomainPurchaseConsent",
              "description": "Legal agreement consent.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "domainNotRenewableReasons": {
              "description": "Reasons why domain is not renewable.",
              "type": "array",
              "items": {
                "enum": [
                  "RegistrationStatusNotSupportedForRenewal",
                  "ExpirationNotInRenewalTimeRange",
                  "SubscriptionNotActive"
                ],
                "type": "string"
              },
              "readOnly": true
            },
            "dnsType": {
              "description": "Current DNS type",
              "enum": [
                "AzureDns",
                "DefaultDomainRegistrarDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "DnsType",
                "modelAsString": false
              }
            },
            "dnsZoneId": {
              "description": "Azure DNS Zone to use",
              "type": "string"
            },
            "targetDnsType": {
              "description": "Target DNS type (would be used for migration)",
              "enum": [
                "AzureDns",
                "DefaultDomainRegistrarDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "DnsType",
                "modelAsString": false
              }
            },
            "authCode": {
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainAvailablilityCheckResult": {
      "description": "Domain availability check result.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the domain.",
          "type": "string"
        },
        "available": {
          "description": "<code>true</code> if domain can be purchased using CreateDomain API; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "domainType": {
          "description": "Valid values are Regular domain: Azure will charge the full price of domain registration, SoftDeleted: Purchasing this domain will simply restore it and this operation will not cost anything.",
          "enum": [
            "Regular",
            "SoftDeleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DomainType",
            "modelAsString": false
          }
        }
      }
    },
    "DomainCollection": {
      "description": "Collection of domains.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DomainControlCenterSsoRequest": {
      "description": "Single sign-on request information for domain management.",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL where the single sign-on request is to be made.",
          "type": "string",
          "readOnly": true
        },
        "postParameterKey": {
          "description": "Post parameter key.",
          "type": "string",
          "readOnly": true
        },
        "postParameterValue": {
          "description": "Post parameter value. Client should use 'application/x-www-form-urlencoded' encoding for this value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DomainOwnershipIdentifier": {
      "description": "Domain ownership Identifier.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "DomainOwnershipIdentifier resource specific properties",
          "properties": {
            "ownershipId": {
              "description": "Ownership Id.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainOwnershipIdentifierCollection": {
      "description": "Collection of domain ownership identifiers.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainOwnershipIdentifier"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DomainPatchResource": {
      "description": "ARM resource for a domain.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "DomainPatchResource resource specific properties",
          "required": [
            "contactAdmin",
            "contactBilling",
            "contactRegistrant",
            "contactTech",
            "consent"
          ],
          "properties": {
            "contactAdmin": {
              "$ref": "#/definitions/Contact",
              "description": "Administrative contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactBilling": {
              "$ref": "#/definitions/Contact",
              "description": "Billing contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactRegistrant": {
              "$ref": "#/definitions/Contact",
              "description": "Registrant contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactTech": {
              "$ref": "#/definitions/Contact",
              "description": "Technical contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "registrationStatus": {
              "description": "Domain registration status.",
              "enum": [
                "Active",
                "Awaiting",
                "Cancelled",
                "Confiscated",
                "Disabled",
                "Excluded",
                "Expired",
                "Failed",
                "Held",
                "Locked",
                "Parked",
                "Pending",
                "Reserved",
                "Reverted",
                "Suspended",
                "Transferred",
                "Unknown",
                "Unlocked",
                "Unparked",
                "Updated",
                "JsonConverterFailed"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "DomainStatus",
                "modelAsString": false
              }
            },
            "provisioningState": {
              "description": "Domain provisioning state.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            },
            "nameServers": {
              "description": "Name servers.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "privacy": {
              "description": "<code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "createdTime": {
              "format": "date-time",
              "description": "Domain creation timestamp.",
              "type": "string",
              "readOnly": true
            },
            "expirationTime": {
              "format": "date-time",
              "description": "Domain expiration timestamp.",
              "type": "string",
              "readOnly": true
            },
            "lastRenewedTime": {
              "format": "date-time",
              "description": "Timestamp when the domain was renewed last time.",
              "type": "string",
              "readOnly": true
            },
            "autoRenew": {
              "description": "<code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.",
              "default": true,
              "type": "boolean"
            },
            "readyForDnsRecordManagement": {
              "description": "<code>true</code> if Azure can assign this domain to App Service apps; otherwise, <code>false</code>. This value will be <code>true</code> if domain registration status is active and \n it is hosted on name servers Azure has programmatic access to.",
              "type": "boolean",
              "readOnly": true
            },
            "managedHostNames": {
              "description": "All hostnames derived from the domain and assigned to Azure resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostName"
              },
              "readOnly": true
            },
            "consent": {
              "$ref": "#/definitions/DomainPurchaseConsent",
              "description": "Legal agreement consent.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "domainNotRenewableReasons": {
              "description": "Reasons why domain is not renewable.",
              "type": "array",
              "items": {
                "enum": [
                  "RegistrationStatusNotSupportedForRenewal",
                  "ExpirationNotInRenewalTimeRange",
                  "SubscriptionNotActive"
                ],
                "type": "string"
              },
              "readOnly": true
            },
            "dnsType": {
              "description": "Current DNS type",
              "enum": [
                "AzureDns",
                "DefaultDomainRegistrarDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "DnsType",
                "modelAsString": false
              }
            },
            "dnsZoneId": {
              "description": "Azure DNS Zone to use",
              "type": "string"
            },
            "targetDnsType": {
              "description": "Target DNS type (would be used for migration)",
              "enum": [
                "AzureDns",
                "DefaultDomainRegistrarDns"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "DnsType",
                "modelAsString": false
              }
            },
            "authCode": {
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainPurchaseConsent": {
      "description": "Domain purchase consent object, representing acceptance of applicable legal agreements.",
      "type": "object",
      "properties": {
        "agreementKeys": {
          "description": "List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements API under <code>TopLevelDomain</code> resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "agreedBy": {
          "description": "Client IP address.",
          "type": "string"
        },
        "agreedAt": {
          "format": "date-time",
          "description": "Timestamp when the agreements were accepted.",
          "type": "string"
        }
      }
    },
    "DomainRecommendationSearchParameters": {
      "description": "Domain recommendation search parameters.",
      "type": "object",
      "properties": {
        "keywords": {
          "description": "Keywords to be used for generating domain recommendations.",
          "type": "string"
        },
        "maxDomainRecommendations": {
          "format": "int32",
          "description": "Maximum number of recommendations.",
          "type": "integer"
        }
      }
    },
    "HostName": {
      "description": "Details of a hostname derived from a domain.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the hostname.",
          "type": "string"
        },
        "siteNames": {
          "description": "List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "azureResourceName": {
          "description": "Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.",
          "type": "string"
        },
        "azureResourceType": {
          "description": "Type of the Azure resource the hostname is assigned to.",
          "enum": [
            "Website",
            "TrafficManager"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AzureResourceType",
            "modelAsString": false
          }
        },
        "customHostNameDnsRecordType": {
          "description": "Type of the DNS record.",
          "enum": [
            "CName",
            "A"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CustomHostNameDnsRecordType",
            "modelAsString": false
          }
        },
        "hostNameType": {
          "description": "Type of the hostname.",
          "enum": [
            "Verified",
            "Managed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HostNameType",
            "modelAsString": false
          }
        }
      }
    },
    "NameIdentifierCollection": {
      "description": "Collection of domain name identifiers.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdentifier"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ErrorResponse": {
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message indicating why the operation failed.",
          "type": "string"
        }
      },
      "description": "Error Response."
    },
    "NameIdentifier": {
      "description": "Identifies an object.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the object.",
          "type": "string"
        }
      }
    },
    "VnetRoute": {
      "description": "Virtual Network route contract used to pass routing information for a Virtual Network.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "VnetRoute resource specific properties",
          "properties": {
            "name": {
              "description": "The name of this route. This is only returned by the server and does not need to be set by the client.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ],
              "x-ms-client-name": "vnetRouteName"
            },
            "startAddress": {
              "description": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
              "type": "string"
            },
            "endAddress": {
              "description": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
              "type": "string"
            },
            "routeType": {
              "description": "The type of route this is:\nDEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\nINHERITED - Routes inherited from the real Virtual Network routes\nSTATIC - Static route set on the app only\n\nThese values will be used for syncing an app's routes with those from a Virtual Network.",
              "enum": [
                "DEFAULT",
                "INHERITED",
                "STATIC"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "RouteType",
                "modelAsString": true
              }
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "VnetInfo": {
      "description": "Virtual Network information contract.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "VnetInfo resource specific properties",
          "properties": {
            "vnetResourceId": {
              "description": "The Virtual Network's resource ID.",
              "type": "string"
            },
            "certThumbprint": {
              "description": "The client certificate thumbprint.",
              "type": "string",
              "readOnly": true
            },
            "certBlob": {
              "format": "byte",
              "description": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \nPoint-To-Site VPN connection.",
              "type": "string"
            },
            "routes": {
              "description": "The routes that this Virtual Network connection uses.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VnetRoute"
              },
              "readOnly": true
            },
            "resyncRequired": {
              "description": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "dnsServers": {
              "description": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "VnetGateway": {
      "description": "The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "VnetGateway resource specific properties",
          "required": [
            "vpnPackageUri"
          ],
          "properties": {
            "vnetName": {
              "description": "The Virtual Network name.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "vpnPackageUri": {
              "description": "The URI where the VPN package can be downloaded.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "update"
              ]
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "User": {
      "description": "User credentials used for publishing activity.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "User resource specific properties",
          "required": [
            "publishingUserName"
          ],
          "properties": {
            "name": {
              "description": "Username",
              "type": "string",
              "x-ms-client-name": "UserName"
            },
            "publishingUserName": {
              "description": "Username used for publishing.",
              "type": "string"
            },
            "publishingPassword": {
              "format": "password",
              "description": "Password used for publishing.",
              "type": "string"
            },
            "publishingPasswordHash": {
              "format": "password",
              "description": "Password hash used for publishing.",
              "type": "string"
            },
            "publishingPasswordHashSalt": {
              "format": "password",
              "description": "Password hash salt used for publishing.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SnapshotRecoveryTarget": {
      "description": "Specifies the web app that snapshot contents will be written to.",
      "type": "object",
      "properties": {
        "location": {
          "description": "Geographical location of the target web app, e.g. SouthEastAsia, SouthCentralUS",
          "type": "string"
        },
        "id": {
          "description": "ARM resource ID of the target app. \n/subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \n/subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.",
          "type": "string"
        }
      }
    },
    "SnapshotRecoveryRequest": {
      "description": "Details about app recovery operation.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "SnapshotRecoveryRequest resource specific properties",
          "required": [
            "overwrite"
          ],
          "properties": {
            "snapshotTime": {
              "description": "Point in time in which the app recovery should be attempted, formatted as a DateTime string.",
              "type": "string"
            },
            "recoveryTarget": {
              "$ref": "#/definitions/SnapshotRecoveryTarget",
              "description": "Specifies the web app that snapshot contents will be written to."
            },
            "overwrite": {
              "description": "If <code>true</code> the recovery operation can overwrite source app; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "recoverConfiguration": {
              "description": "If true, site configuration, in addition to content, will be reverted.",
              "type": "boolean"
            },
            "ignoreConflictingHostNames": {
              "description": "If true, custom hostname conflicts will be ignored when recovering to a target web app.\nThis setting is only necessary when RecoverConfiguration is enabled.",
              "type": "boolean"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "ResourceMetricAvailability": {
      "description": "Metrics availability and retention.",
      "type": "object",
      "properties": {
        "timeGrain": {
          "description": "Time grain .",
          "type": "string",
          "readOnly": true
        },
        "retention": {
          "description": "Retention period for the current time grain.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceMetricName": {
      "description": "Name of a metric for any resource .",
      "type": "object",
      "properties": {
        "value": {
          "description": "metric name value.",
          "type": "string",
          "readOnly": true
        },
        "localizedValue": {
          "description": "Localized metric name value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceMetricDefinition": {
      "description": "Metadata for the metrics.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ResourceMetricDefinition resource specific properties",
          "properties": {
            "name": {
              "$ref": "#/definitions/ResourceMetricName",
              "description": "Name of the metric.",
              "readOnly": true
            },
            "unit": {
              "description": "Unit of the metric.",
              "type": "string",
              "readOnly": true
            },
            "primaryAggregationType": {
              "description": "Primary aggregation type.",
              "type": "string",
              "readOnly": true
            },
            "metricAvailabilities": {
              "description": "List of time grains supported for the metric together with retention period.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceMetricAvailability"
              },
              "readOnly": true
            },
            "resourceUri": {
              "description": "Resource URI.",
              "type": "string",
              "readOnly": true
            },
            "id": {
              "description": "Resource ID.",
              "type": "string",
              "readOnly": true
            },
            "properties": {
              "description": "Resource metric definition properties.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "PushSettings": {
      "description": "Push settings for the App.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "PushSettings resource specific properties",
          "required": [
            "isPushEnabled"
          ],
          "properties": {
            "isPushEnabled": {
              "description": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
              "type": "boolean"
            },
            "tagWhitelistJson": {
              "description": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
              "type": "string"
            },
            "tagsRequiringAuth": {
              "description": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\nTags can consist of alphanumeric characters and the following:\n'_', '@', '#', '.', ':', '-'. \nValidation should be performed at the PushRequestHandler.",
              "type": "string"
            },
            "dynamicTagsJson": {
              "description": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "Identifier": {
      "description": "A domain specific resource identifier.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "Identifier resource specific properties",
          "properties": {
            "id": {
              "description": "String representation of the identity.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "HybridConnectionKey": {
      "description": "Hybrid Connection key contract. This has the send key name and value for a Hybrid Connection.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "HybridConnectionKey resource specific properties",
          "properties": {
            "sendKeyName": {
              "description": "The name of the send key.",
              "type": "string",
              "readOnly": true
            },
            "sendKeyValue": {
              "description": "The value of the send key.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "HybridConnection": {
      "description": "Hybrid Connection contract. This is used to configure a Hybrid Connection.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyOnlyResource"
        }
      ],
      "properties": {
        "properties": {
          "description": "HybridConnection resource specific properties",
          "properties": {
            "serviceBusNamespace": {
              "description": "The name of the Service Bus namespace.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "relayName": {
              "description": "The name of the Service Bus relay.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "relayArmUri": {
              "description": "The ARM URI to the Service Bus relay.",
              "type": "string"
            },
            "hostname": {
              "description": "The hostname of the endpoint.",
              "type": "string"
            },
            "port": {
              "format": "int32",
              "description": "The port of the endpoint.",
              "type": "integer"
            },
            "sendKeyName": {
              "description": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
              "type": "string"
            },
            "sendKeyValue": {
              "description": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\nnormally, use the POST /listKeys API instead.",
              "type": "string"
            },
            "serviceBusSuffix": {
              "description": "The suffix for the service bus endpoint. By default this is .servicebus.windows.net",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "ProxyOnlyResource": {
      "description": "Azure proxy only resource. This resource is not tracked by Azure Resource Manager.",
      "properties": {
        "id": {
          "description": "Resource Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Resource Name.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "description": "Kind of resource.",
          "type": "string"
        },
        "type": {
          "description": "Resource type.",
          "type": "string",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "ManagedServiceIdentity": {
      "description": "Managed service identity.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of managed service identity.",
          "enum": [
            "SystemAssigned"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ManagedServiceIdentityType",
            "modelAsString": true
          }
        },
        "tenantId": {
          "description": "Tenant of managed service identity.",
          "type": "string",
          "readOnly": true
        },
        "principalId": {
          "description": "Principal Id of managed service identity.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SlotSwapStatus": {
      "description": "The status of the last successful slot swap operation.",
      "type": "object",
      "properties": {
        "timestampUtc": {
          "format": "date-time",
          "description": "The time the last successful slot swap completed.",
          "type": "string",
          "readOnly": true
        },
        "sourceSlotName": {
          "description": "The source slot of the last swap operation.",
          "type": "string",
          "readOnly": true
        },
        "destinationSlotName": {
          "description": "The destination slot of the last swap operation.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CloningInfo": {
      "description": "Information needed for cloning operation.",
      "required": [
        "sourceWebAppId"
      ],
      "type": "object",
      "properties": {
        "correlationId": {
          "format": "uuid",
          "description": "Correlation ID of cloning operation. This ID ties multiple cloning operations\ntogether to use the same snapshot.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "overwrite": {
          "description": "<code>true</code> to overwrite destination app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "cloneCustomHostNames": {
          "description": "<code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "cloneSourceControl": {
          "description": "<code>true</code> to clone source control from source app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "sourceWebAppId": {
          "description": "ARM resource ID of the source app. App resource ID is of the form \n/subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \n/subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.",
          "type": "string"
        },
        "hostingEnvironment": {
          "description": "App Service Environment.",
          "type": "string"
        },
        "appSettingsOverrides": {
          "description": "Application setting overrides for cloned app. If specified, these settings override the settings cloned \nfrom source app. Otherwise, application settings from source app are retained.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "configureLoadBalancing": {
          "description": "<code>true</code> to configure load balancing for source and destination app.",
          "type": "boolean"
        },
        "trafficManagerProfileId": {
          "description": "ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form \n/subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.",
          "type": "string"
        },
        "trafficManagerProfileName": {
          "description": "Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.",
          "type": "string"
        },
        "ignoreQuotas": {
          "description": "<code>true</code> if quotas should be ignored; otherwise, <code>false</code>.",
          "type": "boolean"
        }
      }
    },
    "HostingEnvironmentProfile": {
      "description": "Specification for an App Service Environment to use for this resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Resource ID of the App Service Environment.",
          "type": "string"
        },
        "name": {
          "description": "Name of the App Service Environment.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Resource type of the App Service Environment.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IpSecurityRestriction": {
      "description": "IP security restriction on an app.",
      "required": [
        "ipAddress"
      ],
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "IP address the security restriction is valid for.",
          "type": "string"
        },
        "subnetMask": {
          "description": "Subnet mask for the range of IP addresses the restriction is valid for.",
          "type": "string"
        }
      }
    },
    "ApiDefinitionInfo": {
      "description": "Information about the formal API definition for the app.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL of the API definition.",
          "type": "string"
        }
      }
    },
    "CorsSettings": {
      "description": "Cross-Origin Resource Sharing (CORS) settings for the app.",
      "type": "object",
      "properties": {
        "allowedOrigins": {
          "description": "Gets or sets the list of origins that should be allowed to make cross-origin\ncalls (for example: http://example.com:12345). Use \"*\" to allow all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AutoHealCustomAction": {
      "description": "Custom action to be executed\nwhen an auto heal rule is triggered.",
      "type": "object",
      "properties": {
        "exe": {
          "description": "Executable to be run.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters for the executable.",
          "type": "string"
        }
      }
    },
    "AutoHealActions": {
      "description": "Actions which to take by the auto-heal module when a rule is triggered.",
      "type": "object",
      "properties": {
        "actionType": {
          "description": "Predefined action to be taken.",
          "enum": [
            "Recycle",
            "LogEvent",
            "CustomAction"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AutoHealActionType",
            "modelAsString": false
          }
        },
        "customAction": {
          "$ref": "#/definitions/AutoHealCustomAction",
          "description": "Custom action to be taken."
        },
        "minProcessExecutionTime": {
          "description": "Minimum time the process must execute\nbefore taking the action",
          "type": "string"
        }
      }
    },
    "SlowRequestsBasedTrigger": {
      "description": "Trigger based on request execution time.",
      "type": "object",
      "properties": {
        "timeTaken": {
          "description": "Time taken.",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "Request Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "StatusCodesBasedTrigger": {
      "description": "Trigger based on status code.",
      "type": "object",
      "properties": {
        "status": {
          "format": "int32",
          "description": "HTTP status code.",
          "type": "integer"
        },
        "subStatus": {
          "format": "int32",
          "description": "Request Sub Status.",
          "type": "integer"
        },
        "win32Status": {
          "format": "int32",
          "description": "Win32 error code.",
          "type": "integer"
        },
        "count": {
          "format": "int32",
          "description": "Request Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "RequestsBasedTrigger": {
      "description": "Trigger based on total requests.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int32",
          "description": "Request Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "AutoHealTriggers": {
      "description": "Triggers for auto-heal.",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestsBasedTrigger",
          "description": "A rule based on total requests."
        },
        "privateBytesInKB": {
          "format": "int32",
          "description": "A rule based on private bytes.",
          "type": "integer"
        },
        "statusCodes": {
          "description": "A rule based on status codes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusCodesBasedTrigger"
          }
        },
        "slowRequests": {
          "$ref": "#/definitions/SlowRequestsBasedTrigger",
          "description": "A rule based on request execution time."
        }
      }
    },
    "AutoHealRules": {
      "description": "Rules that can be defined for auto-heal.",
      "type": "object",
      "properties": {
        "triggers": {
          "$ref": "#/definitions/AutoHealTriggers",
          "description": "Conditions that describe when to execute the auto-heal actions."
        },
        "actions": {
          "$ref": "#/definitions/AutoHealActions",
          "description": "Actions to be executed when a rule is triggered."
        }
      }
    },
    "SiteLimits": {
      "description": "Metric limits set on an app.",
      "type": "object",
      "properties": {
        "maxPercentageCpu": {
          "format": "double",
          "description": "Maximum allowed CPU usage percentage.",
          "type": "number"
        },
        "maxMemoryInMb": {
          "format": "int64",
          "description": "Maximum allowed memory usage in MB.",
          "type": "integer"
        },
        "maxDiskSizeInMb": {
          "format": "int64",
          "description": "Maximum allowed disk size usage in MB.",
          "type": "integer"
        }
      }
    },
    "RampUpRule": {
      "description": "Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.",
      "type": "object",
      "properties": {
        "actionHostName": {
          "description": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
          "type": "string"
        },
        "reroutePercentage": {
          "format": "double",
          "description": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
          "type": "number"
        },
        "changeStep": {
          "format": "double",
          "description": "In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code> until it reaches \n<code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specified in <code>ChangeIntervalInMinutes</code>.\nCustom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
          "type": "number"
        },
        "changeIntervalInMinutes": {
          "format": "int32",
          "description": "Specifies interval in minutes to reevaluate ReroutePercentage.",
          "type": "integer"
        },
        "minReroutePercentage": {
          "format": "double",
          "description": "Specifies lower boundary above which ReroutePercentage will stay.",
          "type": "number"
        },
        "maxReroutePercentage": {
          "format": "double",
          "description": "Specifies upper boundary below which ReroutePercentage will stay.",
          "type": "number"
        },
        "changeDecisionCallbackUrl": {
          "description": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\nhttps://www.siteextensions.net/packages/TiPCallback/",
          "type": "string"
        },
        "name": {
          "description": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.",
          "type": "string"
        }
      }
    },
    "Experiments": {
      "description": "Routing rules in production experiments.",
      "type": "object",
      "properties": {
        "rampUpRules": {
          "description": "List of ramp-up rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RampUpRule"
          }
        }
      }
    },
    "VirtualDirectory": {
      "description": "Directory for virtual application.",
      "type": "object",
      "properties": {
        "virtualPath": {
          "description": "Path to virtual application.",
          "type": "string"
        },
        "physicalPath": {
          "description": "Physical path.",
          "type": "string"
        }
      }
    },
    "VirtualApplication": {
      "description": "Virtual application in an app.",
      "type": "object",
      "properties": {
        "virtualPath": {
          "description": "Virtual path.",
          "type": "string"
        },
        "physicalPath": {
          "description": "Physical path.",
          "type": "string"
        },
        "preloadEnabled": {
          "description": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "virtualDirectories": {
          "description": "Virtual directories for virtual application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDirectory"
          }
        }
      }
    },
    "HandlerMapping": {
      "description": "The IIS handler mappings used to define which handler processes HTTP requests with certain extension. \nFor example, it is used to configure php-cgi.exe process to handle all HTTP requests with *.php extension.",
      "type": "object",
      "properties": {
        "extension": {
          "description": "Requests with this extension will be handled using the specified FastCGI application.",
          "type": "string"
        },
        "scriptProcessor": {
          "description": "The absolute path to the FastCGI application.",
          "type": "string"
        },
        "arguments": {
          "description": "Command-line arguments to be passed to the script processor.",
          "type": "string"
        }
      }
    },
    "SiteMachineKey": {
      "description": "MachineKey of an app.",
      "type": "object",
      "properties": {
        "validation": {
          "description": "MachineKey validation.",
          "type": "string"
        },
        "validationKey": {
          "description": "Validation key.",
          "type": "string"
        },
        "decryption": {
          "description": "Algorithm used for decryption.",
          "type": "string"
        },
        "decryptionKey": {
          "description": "Decryption key.",
          "type": "string"
        }
      }
    },
    "ConnStringInfo": {
      "description": "Database connection string information.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of connection string.",
          "type": "string"
        },
        "connectionString": {
          "description": "Connection string value.",
          "type": "string"
        },
        "type": {
          "description": "Type of database.",
          "enum": [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectionStringType",
            "modelAsString": false
          }
        }
      }
    },
    "NameValuePair": {
      "description": "Name value pair.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Pair name.",
          "type": "string"
        },
        "value": {
          "description": "Pair value.",
          "type": "string"
        }
      }
    },
    "SiteConfig": {
      "description": "Configuration of an App Service app.",
      "type": "object",
      "properties": {
        "numberOfWorkers": {
          "format": "int32",
          "description": "Number of workers.",
          "type": "integer"
        },
        "defaultDocuments": {
          "description": "Default documents.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "netFrameworkVersion": {
          "description": ".NET Framework version.",
          "default": "v4.6",
          "type": "string"
        },
        "phpVersion": {
          "description": "Version of PHP.",
          "type": "string"
        },
        "pythonVersion": {
          "description": "Version of Python.",
          "type": "string"
        },
        "nodeVersion": {
          "description": "Version of Node.js.",
          "type": "string"
        },
        "linuxFxVersion": {
          "description": "Linux App Framework and version",
          "type": "string"
        },
        "requestTracingEnabled": {
          "description": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "requestTracingExpirationTime": {
          "format": "date-time",
          "description": "Request tracing expiration time.",
          "type": "string"
        },
        "remoteDebuggingEnabled": {
          "description": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "remoteDebuggingVersion": {
          "description": "Remote debugging version.",
          "type": "string"
        },
        "httpLoggingEnabled": {
          "description": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "logsDirectorySizeLimit": {
          "format": "int32",
          "description": "HTTP logs directory size limit.",
          "type": "integer"
        },
        "detailedErrorLoggingEnabled": {
          "description": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "publishingUsername": {
          "description": "Publishing user name.",
          "type": "string"
        },
        "appSettings": {
          "description": "Application settings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePair"
          }
        },
        "connectionStrings": {
          "description": "Connection strings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnStringInfo"
          }
        },
        "machineKey": {
          "$ref": "#/definitions/SiteMachineKey",
          "description": "Site MachineKey.",
          "readOnly": true
        },
        "handlerMappings": {
          "description": "Handler mappings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HandlerMapping"
          }
        },
        "documentRoot": {
          "description": "Document root.",
          "type": "string"
        },
        "scmType": {
          "description": "SCM type.",
          "enum": [
            "None",
            "Dropbox",
            "Tfs",
            "LocalGit",
            "GitHub",
            "CodePlexGit",
            "CodePlexHg",
            "BitbucketGit",
            "BitbucketHg",
            "ExternalGit",
            "ExternalHg",
            "OneDrive",
            "VSO"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ScmType",
            "modelAsString": true
          }
        },
        "use32BitWorkerProcess": {
          "description": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "webSocketsEnabled": {
          "description": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "alwaysOn": {
          "description": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "javaVersion": {
          "description": "Java version.",
          "type": "string"
        },
        "javaContainer": {
          "description": "Java container.",
          "type": "string"
        },
        "javaContainerVersion": {
          "description": "Java container version.",
          "type": "string"
        },
        "appCommandLine": {
          "description": "App command line to launch.",
          "type": "string"
        },
        "managedPipelineMode": {
          "description": "Managed pipeline mode.",
          "enum": [
            "Integrated",
            "Classic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ManagedPipelineMode",
            "modelAsString": false
          }
        },
        "virtualApplications": {
          "description": "Virtual applications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualApplication"
          }
        },
        "loadBalancing": {
          "description": "Site load balancing.",
          "enum": [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SiteLoadBalancing",
            "modelAsString": false
          }
        },
        "experiments": {
          "$ref": "#/definitions/Experiments",
          "description": "This is work around for polymorphic types."
        },
        "limits": {
          "$ref": "#/definitions/SiteLimits",
          "description": "Site limits."
        },
        "autoHealEnabled": {
          "description": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "autoHealRules": {
          "$ref": "#/definitions/AutoHealRules",
          "description": "Auto Heal rules."
        },
        "tracingOptions": {
          "description": "Tracing options.",
          "type": "string"
        },
        "vnetName": {
          "description": "Virtual Network name.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        },
        "cors": {
          "$ref": "#/definitions/CorsSettings",
          "description": "Cross-Origin Resource Sharing (CORS) settings."
        },
        "push": {
          "$ref": "#/definitions/PushSettings",
          "description": "Push endpoint settings."
        },
        "apiDefinition": {
          "$ref": "#/definitions/ApiDefinitionInfo",
          "description": "Information about the formal API definition for the app."
        },
        "autoSwapSlotName": {
          "description": "Auto-swap slot name.",
          "type": "string"
        },
        "localMySqlEnabled": {
          "description": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
          "default": false,
          "type": "boolean"
        },
        "ipSecurityRestrictions": {
          "description": "IP security restrictions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpSecurityRestriction"
          }
        },
        "http20Enabled": {
          "description": "Http20Enabled: configures a web site to allow clients to connect over http2.0",
          "default": true,
          "type": "boolean"
        },
        "minTlsVersion": {
          "description": "MinTlsVersion: configures the minimum version of TLS required for SSL requests",
          "enum": [
            "1.0",
            "1.1",
            "1.2"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SupportedTlsVersions",
            "modelAsString": true
          }
        }
      }
    },
    "HostNameSslState": {
      "description": "SSL-enabled hostname.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Hostname.",
          "type": "string"
        },
        "sslState": {
          "description": "SSL type.",
          "enum": [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SslState",
            "modelAsString": false
          }
        },
        "virtualIP": {
          "description": "Virtual IP address assigned to the hostname if IP based SSL is enabled.",
          "type": "string"
        },
        "thumbprint": {
          "description": "SSL certificate thumbprint.",
          "type": "string"
        },
        "toUpdate": {
          "description": "Set to <code>true</code> to update existing hostname.",
          "type": "boolean"
        },
        "hostType": {
          "description": "Indicates whether the hostname is a standard or repository hostname.",
          "enum": [
            "Standard",
            "Repository"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HostType",
            "modelAsString": false
          }
        }
      }
    },
    "Site": {
      "description": "A web app, a mobile app backend, or an API app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "Site resource specific properties",
          "properties": {
            "state": {
              "description": "Current state of the app.",
              "type": "string",
              "readOnly": true
            },
            "hostNames": {
              "description": "Hostnames associated with the app.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "repositorySiteName": {
              "description": "Name of the repository site.",
              "type": "string",
              "readOnly": true
            },
            "usageState": {
              "description": "State indicating whether the app has exceeded its quota usage. Read-only.",
              "enum": [
                "Normal",
                "Exceeded"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "UsageState",
                "modelAsString": false
              }
            },
            "enabled": {
              "description": "<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).",
              "type": "boolean"
            },
            "enabledHostNames": {
              "description": "Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,\nthe app is not served on those hostnames.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "availabilityState": {
              "description": "Management information availability state for the app.",
              "enum": [
                "Normal",
                "Limited",
                "DisasterRecoveryMode"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "SiteAvailabilityState",
                "modelAsString": false
              }
            },
            "hostNameSslStates": {
              "description": "Hostname SSL states are used to manage the SSL bindings for app's hostnames.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostNameSslState"
              }
            },
            "serverFarmId": {
              "description": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
              "type": "string"
            },
            "reserved": {
              "description": "<code>true</code> if reserved; otherwise, <code>false</code>.",
              "default": false,
              "type": "boolean",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "lastModifiedTimeUtc": {
              "format": "date-time",
              "description": "Last time the app was modified, in UTC. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "siteConfig": {
              "$ref": "#/definitions/SiteConfig",
              "description": "Configuration of the app."
            },
            "trafficManagerHostNames": {
              "description": "Azure Traffic Manager hostnames associated with the app. Read-only.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "scmSiteAlsoStopped": {
              "description": "<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.",
              "default": false,
              "type": "boolean"
            },
            "targetSwapSlot": {
              "description": "Specifies which deployment slot this app will swap into. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "App Service Environment to use for the app.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "clientAffinityEnabled": {
              "description": "<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.",
              "type": "boolean"
            },
            "clientCertEnabled": {
              "description": "<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.",
              "type": "boolean"
            },
            "hostNamesDisabled": {
              "description": "<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.\n If <code>true</code>, the app is only accessible via API management process.",
              "type": "boolean"
            },
            "outboundIpAddresses": {
              "description": "List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "possibleOutboundIpAddresses": {
              "description": "List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "containerSize": {
              "format": "int32",
              "description": "Size of the function container.",
              "type": "integer"
            },
            "dailyMemoryTimeQuota": {
              "format": "int32",
              "description": "Maximum allowed daily memory-time quota (applicable on dynamic apps only).",
              "type": "integer"
            },
            "suspendedTill": {
              "format": "date-time",
              "description": "App suspended till in case memory-time quota is exceeded.",
              "type": "string",
              "readOnly": true
            },
            "maxNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of workers.\nThis only applies to Functions container.",
              "type": "integer",
              "readOnly": true
            },
            "cloningInfo": {
              "$ref": "#/definitions/CloningInfo",
              "description": "If specified during app creation, the app is cloned from a source app.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "snapshotInfo": {
              "$ref": "#/definitions/SnapshotRecoveryRequest",
              "description": "If specified during app creation, the app is created from a previous snapshot.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "resourceGroup": {
              "description": "Name of the resource group the app belongs to. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "isDefaultContainer": {
              "description": "<code>true</code> if the app is a default container; otherwise, <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "defaultHostName": {
              "description": "Default hostname of the app. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "slotSwapStatus": {
              "$ref": "#/definitions/SlotSwapStatus",
              "description": "Status of the last deployment slot swap operation.",
              "readOnly": true
            },
            "httpsOnly": {
              "description": "HttpsOnly: configures a web site to accept only https requests. Issues redirect for\nhttp requests",
              "type": "boolean"
            }
          },
          "x-ms-client-flatten": true
        },
        "identity": {
          "$ref": "#/definitions/ManagedServiceIdentity"
        }
      }
    },
    "Capability": {
      "description": "Describes the capabilities/features allowed for a specific SKU.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the SKU capability.",
          "type": "string"
        },
        "value": {
          "description": "Value of the SKU capability.",
          "type": "string"
        },
        "reason": {
          "description": "Reason of the SKU capability.",
          "type": "string"
        }
      }
    },
    "SkuCapacity": {
      "description": "Description of the App Service plan scale options.",
      "type": "object",
      "properties": {
        "minimum": {
          "format": "int32",
          "description": "Minimum number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "maximum": {
          "format": "int32",
          "description": "Maximum number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "default": {
          "format": "int32",
          "description": "Default number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "scaleType": {
          "description": "Available scale configurations for an App Service plan.",
          "type": "string"
        }
      }
    },
    "SkuDescription": {
      "description": "Description of a SKU for a scalable resource.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the resource SKU.",
          "type": "string"
        },
        "tier": {
          "description": "Service tier of the resource SKU.",
          "type": "string"
        },
        "size": {
          "description": "Size specifier of the resource SKU.",
          "type": "string"
        },
        "family": {
          "description": "Family code of the resource SKU.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "description": "Current number of instances assigned to the resource.",
          "type": "integer"
        },
        "skuCapacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Min, max, and default scale values of the SKU."
        },
        "locations": {
          "description": "Locations of the SKU.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capabilities": {
          "description": "Capabilities of the SKU, e.g., is traffic manager enabled?",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    },
    "AppServicePlan": {
      "description": "App Service plan.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "AppServicePlan resource specific properties",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name for the App Service plan.",
              "type": "string"
            },
            "workerTierName": {
              "description": "Target worker tier assigned to the App Service plan.",
              "type": "string"
            },
            "status": {
              "description": "App Service plan status.",
              "enum": [
                "Ready",
                "Pending",
                "Creating"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "StatusOptions",
                "modelAsString": false
              }
            },
            "subscription": {
              "description": "App Service plan subscription.",
              "type": "string",
              "readOnly": true
            },
            "adminSiteName": {
              "description": "App Service plan administration site.",
              "type": "string"
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "Specification for the App Service Environment to use for the App Service plan.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "maximumNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of instances that can be assigned to this App Service plan.",
              "type": "integer",
              "readOnly": true
            },
            "geoRegion": {
              "description": "Geographical location for the App Service plan.",
              "type": "string",
              "readOnly": true
            },
            "perSiteScaling": {
              "description": "If <code>true</code>, apps assigned to this App Service plan can be scaled independently.\nIf <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.",
              "default": false,
              "type": "boolean"
            },
            "numberOfSites": {
              "format": "int32",
              "description": "Number of apps assigned to this App Service plan.",
              "type": "integer",
              "readOnly": true
            },
            "isSpot": {
              "description": "If <code>true</code>, this App Service Plan owns spot instances.",
              "type": "boolean"
            },
            "spotExpirationTime": {
              "format": "date-time",
              "description": "The time when the server farm expires. Valid only if it is a spot server farm.",
              "type": "string"
            },
            "resourceGroup": {
              "description": "Resource group of the App Service plan.",
              "type": "string",
              "readOnly": true
            },
            "reserved": {
              "description": "If Linux app service plan <code>true</code>, <code>false</code> otherwise.",
              "default": false,
              "type": "boolean",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "targetWorkerCount": {
              "format": "int32",
              "description": "Scaling worker count.",
              "type": "integer"
            },
            "targetWorkerSizeId": {
              "format": "int32",
              "description": "Scaling worker size ID.",
              "type": "integer"
            },
            "provisioningState": {
              "description": "Provisioning state of the App Service Environment.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            }
          },
          "x-ms-client-flatten": true
        },
        "sku": {
          "$ref": "#/definitions/SkuDescription"
        }
      }
    },
    "Resource": {
      "description": "Azure resource. This resource is tracked in Azure Resource Manager",
      "required": [
        "location"
      ],
      "properties": {
        "id": {
          "description": "Resource Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Resource Name.",
          "type": "string",
          "readOnly": true
        },
        "kind": {
          "description": "Kind of resource.",
          "type": "string"
        },
        "location": {
          "description": "Resource Location.",
          "type": "string"
        },
        "type": {
          "description": "Resource type.",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "description": "Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    }
  },
  "parameters": {
    "subscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).",
      "required": true,
      "type": "string"
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "Name of the resource group to which the resource belongs.",
      "required": true,
      "type": "string",
      "maxLength": 90,
      "minLength": 1,
      "pattern": "^[-\\w\\._\\(\\)]+[^\\.]$",
      "x-ms-parameter-location": "method"
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "API Version",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "x-internal-service-id": "appservice",
  "x-internal-service-name": "App Service",
  "x-internal-toc-name": "Domains",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "Update",
  "x-internal-operation-name": "Update"
}