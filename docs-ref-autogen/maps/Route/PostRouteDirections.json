{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Azure Maps Route Service",
    "description": "Azure Maps Route REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported.",
      "scopes": {
        "user_impersonation": "Impersonates a user's Azure Active Directory account."
      }
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "description": "This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "azure_auth": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "responses": {
    "202": {
      "description": "Request Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
      "headers": {
        "Location": {
          "type": "string",
          "description": "New URL to check for the results of the long running process."
        }
      }
    },
    "400": {
      "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "401": {
      "description": "Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Bearer realm=\"https://atlas.microsoft.com/\", error=\"invalid_token\", error_description=\"The access token expired\""
        }
      }
    },
    "403": {
      "description": "Permission, capacity, or authentication issues.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404": {
      "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500": {
      "description": "An error occurred while processing the request. Please try again later.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "202Async": {
      "description": "**Supported only for async request.**\nRequest Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
      "headers": {
        "Location": {
          "type": "string",
          "description": "New URL to check for the results of the long running process."
        }
      }
    }
  },
  "parameters": {
    "ClientId": {
      "name": "x-ms-client-id",
      "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.    ",
      "type": "string",
      "in": "header",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "SubscriptionKey": {
      "name": "subscription-key",
      "description": "One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 1.0",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "JsonFormat": {
      "name": "format",
      "description": "Desired format of the response. Only `json` format is supported.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json"
      ],
      "x-ms-enum": {
        "name": "JsonFormat",
        "modelAsString": false,
        "values": [
          {
            "value": "json",
            "description": "[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TextFormat": {
      "name": "format",
      "description": "Desired format of the response. Value can be either _json_ or _xml_.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json",
        "xml"
      ],
      "x-ms-enum": {
        "name": "TextFormat",
        "modelAsString": false,
        "values": [
          {
            "value": "json",
            "description": "[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)"
          },
          {
            "value": "xml",
            "description": "[The Extensible Markup Language](https://www.w3.org/TR/xml/)"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "VehicleLoadType": {
      "name": "vehicleLoadType",
      "in": "query",
      "description": "Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.",
      "required": false,
      "type": "string",
      "enum": [
        "USHazmatClass1",
        "USHazmatClass2",
        "USHazmatClass3",
        "USHazmatClass4",
        "USHazmatClass5",
        "USHazmatClass6",
        "USHazmatClass7",
        "USHazmatClass8",
        "USHazmatClass9",
        "otherHazmatExplosive",
        "otherHazmatGeneral",
        "otherHazmatHarmfulToWater"
      ],
      "x-ms-enum": {
        "name": "VehicleLoadType",
        "modelAsString": false,
        "values": [
          {
            "value": "USHazmatClass1",
            "description": "Explosives"
          },
          {
            "value": "USHazmatClass2",
            "description": "Compressed gas"
          },
          {
            "value": "USHazmatClass3",
            "description": "Flammable liquids"
          },
          {
            "value": "USHazmatClass4",
            "description": "Flammable solids"
          },
          {
            "value": "USHazmatClass5",
            "description": "Oxidizers"
          },
          {
            "value": "USHazmatClass6",
            "description": "Poisons"
          },
          {
            "value": "USHazmatClass7",
            "description": "Radioactive"
          },
          {
            "value": "USHazmatClass8",
            "description": "Corrosives"
          },
          {
            "value": "USHazmatClass9",
            "description": "Miscellaneous"
          },
          {
            "value": "otherHazmatExplosive",
            "description": "Explosives"
          },
          {
            "value": "otherHazmatGeneral",
            "description": "Miscellaneous"
          },
          {
            "value": "otherHazmatHarmfulToWater",
            "description": "Harmful to water"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "RouteType": {
      "name": "routeType",
      "in": "query",
      "description": "The type of route requested.",
      "required": false,
      "type": "string",
      "default": "fastest",
      "enum": [
        "fastest",
        "shortest",
        "eco",
        "thrilling"
      ],
      "x-ms-enum": {
        "name": "RouteType",
        "modelAsString": false,
        "values": [
          {
            "value": "fastest",
            "description": "The fastest route."
          },
          {
            "value": "shortest",
            "description": "The shortest route by distance."
          },
          {
            "value": "eco",
            "description": "A route balanced by economy and speed."
          },
          {
            "value": "thrilling",
            "description": "Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with `routeType`=thrilling"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "Windingness": {
      "name": "windingness",
      "in": "query",
      "description": "Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.",
      "required": false,
      "type": "string",
      "default": "normal",
      "enum": [
        "low",
        "normal",
        "high"
      ],
      "x-ms-enum": {
        "name": "Windingness",
        "modelAsString": false,
        "values": [
          {
            "value": "low",
            "description": "low"
          },
          {
            "value": "normal",
            "description": "normal"
          },
          {
            "value": "high",
            "description": "high"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "Hilliness": {
      "name": "hilliness",
      "in": "query",
      "description": "Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.",
      "required": false,
      "type": "string",
      "default": "normal",
      "enum": [
        "low",
        "normal",
        "high"
      ],
      "x-ms-enum": {
        "name": "Hilliness",
        "modelAsString": false,
        "values": [
          {
            "value": "low",
            "description": "low"
          },
          {
            "value": "normal",
            "description": "normal"
          },
          {
            "value": "high",
            "description": "high"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TravelMode": {
      "name": "travelMode",
      "in": "query",
      "description": "The mode of travel for the requested route. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be other. Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used",
      "required": false,
      "type": "string",
      "default": "car",
      "enum": [
        "car",
        "truck",
        "taxi",
        "bus",
        "van",
        "motorcycle",
        "bicycle",
        "pedestrian"
      ],
      "x-ms-enum": {
        "name": "TravelMode",
        "modelAsString": false,
        "values": [
          {
            "value": "car",
            "description": "car"
          },
          {
            "value": "truck",
            "description": "truck"
          },
          {
            "value": "taxi",
            "description": "taxi"
          },
          {
            "value": "bus",
            "description": "bus"
          },
          {
            "value": "van",
            "description": "van"
          },
          {
            "value": "motorcycle",
            "description": "motorcycle"
          },
          {
            "value": "bicycle",
            "description": "bicycle"
          },
          {
            "value": "pedestrian",
            "description": "pedestrian"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "Avoid": {
      "name": "avoid",
      "in": "query",
      "description": "Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times in one request, for example, '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the value alreadyUsedRoads must not be used.",
      "required": false,
      "type": "string",
      "enum": [
        "tollRoads",
        "motorways",
        "ferries",
        "unpavedRoads",
        "carpools",
        "alreadyUsedRoads",
        "borderCrossings"
      ],
      "x-ms-enum": {
        "name": "Avoid",
        "modelAsString": false,
        "values": [
          {
            "value": "tollRoads",
            "description": "Avoids toll roads."
          },
          {
            "value": "motorways",
            "description": "Avoids motorways"
          },
          {
            "value": "ferries",
            "description": "Avoids ferries"
          },
          {
            "value": "unpavedRoads",
            "description": "Avoids unpaved roads"
          },
          {
            "value": "carpools",
            "description": "Avoids routes that require the use of carpool (HOV/High Occupancy Vehicle) lanes."
          },
          {
            "value": "alreadyUsedRoads",
            "description": "Avoids using the same road multiple times. Most useful in conjunction with `routeType`=thrilling."
          },
          {
            "value": "borderCrossings",
            "description": "Avoids border crossings in route calculation."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "VehicleEngineType": {
      "name": "vehicleEngineType",
      "in": "query",
      "description": "Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.",
      "required": false,
      "type": "string",
      "enum": [
        "combustion",
        "electric"
      ],
      "default": "combustion",
      "x-ms-enum": {
        "name": "VehicleEngineType",
        "modelAsString": false,
        "values": [
          {
            "value": "combustion",
            "description": "Internal combustion engine."
          },
          {
            "value": "electric",
            "description": "Electric engine."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ConstantSpeedConsumptionInLitersPerHundredkm": {
      "name": "constantSpeedConsumptionInLitersPerHundredkm",
      "in": "query",
      "description": "\n\nSpecifies the speed-dependent component of consumption.\n\nProvided as an unordered list of colon-delimited speed & consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n * by linear interpolation, if the given speed lies in between two speeds in the list\n\n * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list\n\nThe list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.\n\nConsumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.\n\nSimilarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller speed.\n\nThe valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\nSensible Values : 50,6.3:130,11.5\n\n**Note** : This parameter is required for **The Combustion Consumption Model**.",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "CurrentFuelInLiters": {
      "name": "currentFuelInLiters",
      "in": "query",
      "description": "Specifies the current supply of fuel in liters.\n\nSensible Values : 55",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "AuxiliaryPowerInLitersPerHour": {
      "name": "auxiliaryPowerInLitersPerHour",
      "in": "query",
      "description": "Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.\n\nIt can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.\n\nSensible Values : 0.2",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "FuelEnergyDensityInMJoulesPerLiter": {
      "name": "fuelEnergyDensityInMJoulesPerLiter",
      "in": "query",
      "description": "Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\nThis parameter is required if any ***Efficiency** parameter is set.\n\nSensible Values : 34.2",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "AccelerationEfficiency": {
      "name": "accelerationEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates _(i.e. KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **decelerationEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**decelerationEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "DecelerationEfficiency": {
      "name": "decelerationEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates _(i.e. ChemicalEnergySaved/KineticEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **accelerationEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**accelerationEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "UphillEfficiency": {
      "name": "uphillEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation _(i.e. PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **downhillEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**downhillEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "DownhillEfficiency": {
      "name": "downhillEfficiency",
      "in": "query",
      "description": "Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation _(i.e. ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\nMust be paired with **uphillEfficiency**.\n\nThe range of values allowed are 0.0 to 1/**uphillEfficiency**.\n\nSensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73",
      "required": false,
      "type": "number",
      "format": "float",
      "x-ms-parameter-location": "method"
    },
    "ConstantSpeedConsumptionInkWhPerHundredkm": {
      "name": "constantSpeedConsumptionInkWhPerHundredkm",
      "in": "query",
      "description": "Specifies the speed-dependent component of consumption.\n\nProvided as an unordered list of speed/consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n* by linear interpolation, if the given speed lies in between two speeds in the list\n\n* by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list\n\nThe list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.\n\nConsumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.\n\nSimilarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller  speed.\n\nThe valid range for the consumption values(expressed in kWh/100km) is between 0.01 and 100000.0.\n\nSensible Values : 50,8.2:130,21.3\n\nThis parameter is required for **Electric consumption model**.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "CurrentChargeInkWh": {
      "name": "currentChargeInkWh",
      "in": "query",
      "description": "Specifies the current electric energy supply in kilowatt hours (kWh).\n\nThis parameter co-exists with **maxChargeInkWh** parameter.\n\nThe range of values allowed are 0.0 to **maxChargeInkWh**.\n\nSensible Values : 43",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "MaxChargeInkWh": {
      "name": "maxChargeInkWh",
      "in": "query",
      "description": "Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.\n\nThis parameter co-exists with **currentChargeInkWh** parameter.\n\nMinimum value has to be greater than or equal to **currentChargeInkWh**.\n\nSensible Values : 85",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "AuxiliaryPowerInkW": {
      "name": "auxiliaryPowerInkW",
      "in": "query",
      "description": "Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts (kW).\n\nIt can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.\n\nSensible Values : 1.7",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "VehicleWeightMatrix": {
      "name": "vehicleWeight",
      "in": "query",
      "description": "Weight of the vehicle in kilograms.",
      "required": false,
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleWeight": {
      "name": "vehicleWeight",
      "in": "query",
      "description": "Weight of the vehicle in kilograms.\n\n* It is mandatory if any of the *Efficiency parameters are set.\n\n* It must be strictly positive when used in the context of the Consumption Model. Weight restrictions are considered.\n\n* If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-zero, then weight restrictions are considered.\n\n* In all other cases, this parameter is ignored.\n\nSensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900",
      "required": false,
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleMaxSpeed": {
      "name": "vehicleMaxSpeed",
      "in": "query",
      "description": "Maximum speed of the vehicle in km/hour. A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning. A non-zero value may be overridden during route planning.",
      "required": false,
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleLength": {
      "name": "vehicleLength",
      "in": "query",
      "description": "Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.",
      "required": false,
      "type": "number",
      "format": "float",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleHeight": {
      "name": "vehicleHeight",
      "in": "query",
      "description": "Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.",
      "required": false,
      "type": "number",
      "format": "float",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleWidth": {
      "name": "vehicleWidth",
      "in": "query",
      "description": "Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.",
      "required": false,
      "type": "number",
      "format": "float",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleAxleWeight": {
      "name": "vehicleAxleWeight",
      "in": "query",
      "description": "Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.",
      "required": false,
      "type": "integer",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "VehicleCommercial": {
      "name": "vehicleCommercial",
      "in": "query",
      "description": "Vehicle is used for commercial purposes and thus may not be allowed to drive  on some roads.",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "DepartAt": {
      "name": "departAt",
      "in": "query",
      "description": "The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).",
      "type": "string",
      "format": "date-time",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "ArriveAt": {
      "name": "arriveAt",
      "in": "query",
      "description": "The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.",
      "type": "string",
      "format": "date-time",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "SectionType": {
      "name": "sectionType",
      "in": "query",
      "description": "Specifies which of the section types is reported in the route response. <br><br>For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car",
      "required": false,
      "type": "string",
      "default": "travelMode",
      "enum": [
        "carTrain",
        "country",
        "ferry",
        "motorway",
        "pedestrian",
        "tollRoad",
        "tollVignette",
        "traffic",
        "travelMode",
        "tunnel"
      ],
      "x-ms-enum": {
        "name": "SectionType",
        "modelAsString": false,
        "values": [
          {
            "value": "carTrain",
            "description": "Get sections if the route includes car trains."
          },
          {
            "value": "country",
            "description": "Countries the route has parts in."
          },
          {
            "value": "ferry",
            "description": "Get sections if the route includes ferries."
          },
          {
            "value": "motorway",
            "description": "Get sections if the route includes motorways."
          },
          {
            "value": "pedestrian",
            "description": "Get sections which are suited for pedestrians."
          },
          {
            "value": "tollRoad",
            "description": "Get sections which require a toll to be payed."
          },
          {
            "value": "tollVignette",
            "description": "Get sections which require a toll vignette to be present."
          },
          {
            "value": "traffic",
            "description": "Get sections which contain traffic information."
          },
          {
            "value": "travelMode",
            "description": "Get sections in relation to the request parameter `travelMode`."
          },
          {
            "value": "tunnel",
            "description": "Get sections if the route includes tunnels."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ComputeBestOrder": {
      "name": "computeBestOrder",
      "in": "query",
      "description": "Re-order the route waypoints using a fast heuristic algorithm to reduce the route length. Yields best results when used in conjunction with routeType _shortest_. Notice that origin and destination are excluded from the optimized waypoint indices. To include origin and destination in the response, please increase all the indices by 1 to account for the origin, and then add the destination as the final index. Possible values are true or false. True computes a better order if possible, but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. False will use the locations in the given order and not allowed to be used in conjunction with routeRepresentation _none_.",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "RouteRepresentation": {
      "name": "routeRepresentation",
      "in": "query",
      "description": "Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.",
      "required": false,
      "type": "string",
      "default": "polyline",
      "enum": [
        "polyline",
        "summaryOnly",
        "none"
      ],
      "x-ms-enum": {
        "name": "RouteRepresentation",
        "modelAsString": false,
        "values": [
          {
            "value": "polyline",
            "description": "Includes route geometry in the response."
          },
          {
            "value": "summaryOnly",
            "description": "Summary as per polyline but excluding the point geometry elements for the routes in the response."
          },
          {
            "value": "none",
            "description": "Includes only the optimized waypoint indices but does not include the route geometry in the response."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "ComputeTravelTimeFor": {
      "name": "computeTravelTimeFor",
      "in": "query",
      "description": "Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.",
      "required": false,
      "type": "string",
      "default": "none",
      "enum": [
        "none",
        "all"
      ],
      "x-ms-enum": {
        "name": "ComputeTravelTimeFor",
        "modelAsString": false,
        "values": [
          {
            "value": "none",
            "description": "Does not compute additional travel times."
          },
          {
            "value": "all",
            "description": "Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "VehicleHeading": {
      "name": "vehicleHeading",
      "in": "query",
      "description": "The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359",
      "required": false,
      "type": "integer",
      "minimum": 0,
      "maximum": 359,
      "x-ms-parameter-location": "method"
    },
    "Report": {
      "name": "report",
      "in": "query",
      "description": "Specifies which data should be reported for diagnosis purposes. The only possible value is _effectiveSettings_. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Traffic": {
      "name": "traffic",
      "in": "query",
      "description": "Possible values: \n  * true - Do consider all available traffic information during routing\n  * false - Ignore current traffic data during routing. Note that although the current traffic data is ignored \n  during routing, the effect of historic traffic on effective road speeds is still incorporated.",
      "required": false,
      "type": "boolean",
      "default": true,
      "x-ms-parameter-location": "method"
    },
    "AlternativeRouteType": {
      "name": "alternativeType",
      "in": "query",
      "description": "Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.",
      "required": false,
      "type": "string",
      "default": "anyRoute",
      "enum": [
        "anyRoute",
        "betterRoute"
      ],
      "x-ms-enum": {
        "name": "AlternativeRouteType",
        "modelAsString": false,
        "values": [
          {
            "value": "anyRoute",
            "description": "Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality."
          },
          {
            "value": "betterRoute",
            "description": "Return an alternative route only if it is better than the reference route according to the given planning criteria."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "RouteInstructionsType": {
      "name": "instructionsType",
      "in": "query",
      "description": "If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none",
      "required": false,
      "type": "string",
      "enum": [
        "coded",
        "text",
        "tagged"
      ],
      "x-ms-enum": {
        "name": "RouteInstructionsType",
        "modelAsString": false,
        "values": [
          {
            "value": "coded",
            "description": "Returns raw instruction data without human-readable messages."
          },
          {
            "value": "text",
            "description": "Returns raw instructions data with human-readable messages in plain text."
          },
          {
            "value": "tagged",
            "description": "Returns raw instruction data with tagged human-readable messages to permit formatting."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/route/directions/{format}": {
      "post": {
        "x-publish": true,
        "description": "**Applies to**: S0 and S1 pricing tiers.\n\n\nReturns  a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of a vehicle-specific Consumption Model. Please check [Consumption Model](https://docs.microsoft.com/en-us/azure/azure-maps/consumption-model) for detailed explanation of the concepts and parameters involved.",
        "operationId": "Route_PostRouteDirections",
        "x-ms-examples": {
          "PostRouteDirections": {
            "parameters": {
              "format": "json",
              "api-version": "1.0",
              "query": "52.50931,13.42936:52.50274,13.43872",
              "subscription-key": "[subscription-key]",
              "routeDirectionsRequestBody": {
                "supportingPoints": {
                  "type": "GeometryCollection",
                  "geometries": [
                    {
                      "type": "Point",
                      "coordinates": [
                        13.42936,
                        52.5093
                      ]
                    },
                    {
                      "type": "Point",
                      "coordinates": [
                        13.42859,
                        52.50844
                      ]
                    }
                  ]
                },
                "avoidVignette": [
                  "AUS",
                  "CHE"
                ],
                "avoidAreas": {
                  "type": "MultiPolygon",
                  "coordinates": [
                    [
                      [
                        [
                          -122.39456176757811,
                          47.489368981370724
                        ],
                        [
                          -122.00454711914061,
                          47.489368981370724
                        ],
                        [
                          -122.00454711914061,
                          47.651512680662222
                        ],
                        [
                          -122.39456176757811,
                          47.651512680662222
                        ],
                        [
                          -122.39456176757811,
                          47.489368981370724
                        ]
                      ]
                    ],
                    [
                      [
                        [
                          100,
                          0
                        ],
                        [
                          101,
                          0
                        ],
                        [
                          101,
                          1
                        ],
                        [
                          100,
                          1
                        ],
                        [
                          100,
                          0
                        ]
                      ]
                    ]
                  ]
                }
              }
            },
            "responses": {
              "200": {
                "body": {
                  "formatVersion": "0.0.12",
                  "routes": [
                    {
                      "summary": {
                        "lengthInMeters": 1147,
                        "travelTimeInSeconds": 162,
                        "trafficDelayInSeconds": 0,
                        "departureTime": "2017-09-07T16:56:58+00:00",
                        "arrivalTime": "2017-09-07T16:59:40+00:00"
                      },
                      "legs": [
                        {
                          "summary": {
                            "lengthInMeters": 1147,
                            "travelTimeInSeconds": 162,
                            "trafficDelayInSeconds": 0,
                            "departureTime": "2017-09-07T16:56:58+00:00",
                            "arrivalTime": "2017-09-07T16:59:40+00:00"
                          },
                          "points": [
                            {
                              "latitude": 52.50931,
                              "longitude": 13.42937
                            },
                            {
                              "latitude": 52.50904,
                              "longitude": 13.42912
                            },
                            {
                              "latitude": 52.50894,
                              "longitude": 13.42904
                            },
                            {
                              "latitude": 52.50867,
                              "longitude": 13.42879
                            },
                            {
                              "latitude": 52.5084,
                              "longitude": 13.42857
                            },
                            {
                              "latitude": 52.50791,
                              "longitude": 13.42824
                            },
                            {
                              "latitude": 52.50757,
                              "longitude": 13.42772
                            },
                            {
                              "latitude": 52.50735,
                              "longitude": 13.42823
                            },
                            {
                              "latitude": 52.5073,
                              "longitude": 13.42836
                            },
                            {
                              "latitude": 52.50573,
                              "longitude": 13.43194
                            },
                            {
                              "latitude": 52.50512,
                              "longitude": 13.43336
                            },
                            {
                              "latitude": 52.50464,
                              "longitude": 13.43451
                            },
                            {
                              "latitude": 52.5045,
                              "longitude": 13.43481
                            },
                            {
                              "latitude": 52.50443,
                              "longitude": 13.43498
                            },
                            {
                              "latitude": 52.50343,
                              "longitude": 13.43737
                            },
                            {
                              "latitude": 52.50274,
                              "longitude": 13.43872
                            }
                          ]
                        }
                      ],
                      "sections": [
                        {
                          "startPointIndex": 0,
                          "endPointIndex": 15,
                          "sectionType": "TRAVEL_MODE",
                          "travelMode": "car"
                        }
                      ]
                    }
                  ]
                }
              },
              "400": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "400 BadRequest",
                    "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
                  }
                }
              },
              "401": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "401 Unauthorized",
                    "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
                  }
                }
              },
              "403": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "403 Forbidden",
                    "message": "Permission, capacity, or authentication issues."
                  }
                }
              },
              "404": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "404 NotFound",
                    "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
                  }
                }
              },
              "500": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "500 InternalServerError",
                    "message": "An error occurred while processing the request. Please try again later."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/SubscriptionKey"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/TextFormat"
          },
          {
            "name": "query",
            "in": "query",
            "description": "The Coordinates through which the route is calculated. Needs two coordinates at least. Delimited by colon. First one is the origin and the last is the destination of the route. The coordinates are in a  lat,long format. Optional coordinates in between act as WayPoints in the route.",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxAlternatives",
            "in": "query",
            "description": "Number of desired alternative routes to be calculated. Default: 0, minimum: 0 and maximum: 5",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": 0
          },
          {
            "$ref": "#/parameters/AlternativeRouteType"
          },
          {
            "name": "minDeviationDistance",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "minDeviationTime",
            "in": "query",
            "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to a value greater than zero has the following consequences:\n  - The origin point of the _calculateRoute_ Request must be on\n    (or very near) the input reference route.\n    - If this is not the case, an error is returned.\n    - However, the origin point does not need to be at the beginning\n      of the input reference route (it can be thought of as the current\n      vehicle position on the reference route).\n  - The reference route, returned as the first route in the _calculateRoute_\n    Response, will start at the origin point specified in the _calculateRoute_\n    Request. The initial part of the input reference route up until the origin\n    point will be excluded from the Response.\n  - The values of _minDeviationDistance_ and _minDeviationTime_ determine\n    how far alternative routes will be guaranteed to follow the reference\n    route from the origin point onwards.\n  - The route must use _departAt_.\n  - The _vehicleHeading_ is ignored.",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "$ref": "#/parameters/RouteInstructionsType"
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language parameter determines the language of the guidance messages. It does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when instructionsType=coded. Allowed values are (a subset of) the IETF language tags described",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ComputeBestOrder"
          },
          {
            "$ref": "#/parameters/RouteRepresentation"
          },
          {
            "$ref": "#/parameters/ComputeTravelTimeFor"
          },
          {
            "$ref": "#/parameters/VehicleHeading"
          },
          {
            "$ref": "#/parameters/Report"
          },
          {
            "$ref": "#/parameters/SectionType"
          },
          {
            "$ref": "#/parameters/ArriveAt"
          },
          {
            "$ref": "#/parameters/DepartAt"
          },
          {
            "$ref": "#/parameters/VehicleAxleWeight"
          },
          {
            "$ref": "#/parameters/VehicleLength"
          },
          {
            "$ref": "#/parameters/VehicleHeight"
          },
          {
            "$ref": "#/parameters/VehicleWidth"
          },
          {
            "$ref": "#/parameters/VehicleMaxSpeed"
          },
          {
            "$ref": "#/parameters/VehicleWeight"
          },
          {
            "$ref": "#/parameters/VehicleCommercial"
          },
          {
            "$ref": "#/parameters/Windingness"
          },
          {
            "$ref": "#/parameters/Hilliness"
          },
          {
            "$ref": "#/parameters/TravelMode"
          },
          {
            "$ref": "#/parameters/Avoid"
          },
          {
            "$ref": "#/parameters/Traffic"
          },
          {
            "$ref": "#/parameters/RouteType"
          },
          {
            "$ref": "#/parameters/VehicleLoadType"
          },
          {
            "$ref": "#/parameters/VehicleEngineType"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInLitersPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentFuelInLiters"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInLitersPerHour"
          },
          {
            "$ref": "#/parameters/FuelEnergyDensityInMJoulesPerLiter"
          },
          {
            "$ref": "#/parameters/AccelerationEfficiency"
          },
          {
            "$ref": "#/parameters/DecelerationEfficiency"
          },
          {
            "$ref": "#/parameters/UphillEfficiency"
          },
          {
            "$ref": "#/parameters/DownhillEfficiency"
          },
          {
            "$ref": "#/parameters/ConstantSpeedConsumptionInkWhPerHundredkm"
          },
          {
            "$ref": "#/parameters/CurrentChargeInkWh"
          },
          {
            "$ref": "#/parameters/MaxChargeInkWh"
          },
          {
            "$ref": "#/parameters/AuxiliaryPowerInkW"
          },
          {
            "name": "routeDirectionsRequestBody",
            "description": "Used for reconstructing a route and for calculating zero or more alternative routes to this reference route.  The provided sequence of coordinates is used as input for route reconstruction. The alternative routes  are calculated between the origin and destination points specified in the base path parameter locations.  If both minDeviationDistance and minDeviationTime are set to zero, then these origin and destination points  are expected to be at (or very near) the beginning and end of the reference route, respectively. Intermediate  locations (waypoints) are not supported when using supportingPoints.\n\nSetting at least one of minDeviationDistance or minDeviationTime to a value greater than zero has the  following consequences:\n\n*  The origin point of the calculateRoute request must be on (or very near) the input reference route. If  this is not the case, an error is returned. However, the origin point does not need to be at the beginning of  the input reference route (it can be thought of as the current vehicle position on the reference route).\n*  The reference route, returned as the first route in the calculateRoute response, will start at the origin  point specified in the calculateRoute request. The initial part of the input reference route up until the  origin point will be excluded from the response.\n*  The values of minDeviationDistance and minDeviationTime determine how far alternative routes will be  guaranteed to follow the reference route from the origin point onwards.\n*  The route must use departAt.\n*  The vehicleHeading is ignored.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteDirectionsRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RouteDirectionsResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "produces": [
          "application/json",
          "application/xml"
        ],
        "consumes": [],
        "x-internal-toc-name": "Post Route Directions"
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "description": "This response object is returned when an error occurs in the Maps API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Maps API",
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The HTTP status code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        }
      }
    },
    "Redirect": {
      "type": "object",
      "description": "This object is returned when the request is accepted but the processing has not been completed. The location header in the response contains the new URL to retry."
    },
    "BatchResponse": {
      "description": "This object is returned from a successful Batch service call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary for the batch request",
          "type": "object",
          "readOnly": true,
          "properties": {
            "successfulRequests": {
              "description": "Number of successful requests in the batch",
              "type": "integer",
              "readOnly": true
            },
            "totalRequests": {
              "description": "Total number of requests in the batch",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "batchItems": {
          "description": "Array containing the batch results",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GeoJSONGeometry": {
      "description": "A valid `GeoJSON` geometry object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.",
      "type": "object",
      "discriminator": "type",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Specifies the `GeoJSON` geometry type. Must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection.",
          "type": "string",
          "enum": [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection"
          ],
          "x-ms-enum": {
            "name": "GeoJSONGeometryType",
            "modelAsString": false,
            "values": [
              {
                "value": "Point",
                "description": "`GeoJSON Point` geometry."
              },
              {
                "value": "MultiPoint",
                "description": "`GeoJSON MultiPoint` geometry."
              },
              {
                "value": "LineString",
                "description": "`GeoJSON LineString` geometry."
              },
              {
                "value": "MultiLineString",
                "description": "`GeoJSON MultiLineString` geometry."
              },
              {
                "value": "Polygon",
                "description": "`GeoJSON Polygon` geometry."
              },
              {
                "value": "MultiPolygon",
                "description": "`GeoJSON MultiPolygon` geometry."
              },
              {
                "value": "GeometryCollection",
                "description": "`GeoJSON GeometryCollection` geometry."
              }
            ]
          }
        }
      }
    },
    "MultiPoint": {
      "description": "A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        {
          "properties": {
            "type": {
              "description": "Specifies the `type` for the geometry. Value should always be equal to \"MultiPoint\".",
              "type": "string"
            },
            "coordinates": {
              "description": "Coordinates for the `MultiPoint` geometry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJSONPosition"
              }
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "GeoJSONLinearRing": {
      "description": "Though a linear ring is not explicitly represented as a GeoJSON geometry type, it helps in defining the polygon as an array of linear rings. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GeoJSONPosition"
      }
    },
    "GeoJSONPosition": {
      "description": "A valid `GeoJSON Position` geometry type. A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.",
      "type": "array",
      "items": {
        "type": "number",
        "format": "double"
      }
    },
    "Point": {
      "description": "A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        {
          "properties": {
            "type": {
              "description": "Specifies the `type` for the geometry. Value should always be equal to \"Point\".",
              "type": "string"
            },
            "coordinates": {
              "$ref": "#/definitions/GeoJSONPosition"
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "MultiPolygon": {
      "description": "A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        {
          "properties": {
            "type": {
              "description": "Specifies the `type` for the object. Value should always be equal to \"MultiPolygon\".",
              "type": "string"
            },
            "coordinates": {
              "description": "Contains a list of valid `GeoJSON` Polygon objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/GeoJSONLinearRing"
                }
              }
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "GeoJSONGeometryCollection": {
      "description": "A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Specifies the `type` for the object. Value should always be equal to \"GeometryCollection\".",
          "type": "string"
        },
        "geometries": {
          "description": "Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeoJSONGeometry"
          }
        }
      },
      "required": [
        "geometries"
      ]
    },
    "BatchRequestBody": {
      "description": "This type represents the request body for the Batch service.",
      "type": "object",
      "properties": {
        "batchItems": {
          "description": "The list of queries/requests to process",
          "type": "array",
          "items": {
            "description": "Batch Query object",
            "type": "object",
            "properties": {
              "query": {
                "description": "Partial query string",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Coordinate": {
      "description": "A location represented as a latitude and longitude.",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "Latitude property",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "longitude": {
          "description": "Longitude property",
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      }
    },
    "RouteDirectionsRequestBody": {
      "type": "object",
      "description": "Post body parameters for Route directions.",
      "properties": {
        "supportingPoints": {
          "description": "A GeoJSON Geometry collection representing sequence of coordinates used as input for route reconstruction and for calculating zero or more alternative routes to this reference route.\n  - The provided sequence of supporting points is used as input for route reconstruction.\n  - The alternative routes are calculated between the origin and destination points specified in the base path parameter locations.\n  - If both _minDeviationDistance_ and _minDeviationTime_ are set to zero, then these origin and destination points are\n  expected to be at (or very near) the beginning and end of the reference route, respectively.\n  - Intermediate locations (_waypoints_) are not supported when using <_supportingPoints_>.\n  - The reference route may contain traffic incidents of type _ROAD_CLOSURE_, which are\n  ignored for the calculation of the reference route's travel time and traffic delay.",
          "allOf": [
            {
              "$ref": "#/definitions/GeoJSONGeometryCollection"
            },
            {
              "properties": {
                "geometries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Point"
                  }
                }
              }
            }
          ]
        },
        "avoidVignette": {
          "description": "This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which all toll roads with vignettes are to be avoided, e.g. \"AUS,CHE\". Toll roads with vignettes in countries not in the list are unaffected. Note: It is an error to specify both **avoidVignette** and **allowVignette**.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowVignette": {
          "description": "This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which toll roads with vignettes are allowed, e.g. \"AUS,CHE\". Specifying **allowVignette** with some countries X is equivalent to specifying **avoidVignette** with all countries but X. Specifying **allowVignette** with an empty list is the same as avoiding all toll roads with vignettes. Note: It is an error to specify both **avoidVignette** and **allowVignette**.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "avoidAreas": {
          "description": "A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle polygons are supported. The maximum size of a rectangle is about 160x160 km. It cannot cross the 180th meridian. It must be between -80 and +80 degrees of latitude.",
          "$ref": "#/definitions/MultiPolygon"
        }
      }
    },
    "RouteDirectionsResponse": {
      "description": "This object is returned from a successful Route Directions call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "routes": {
          "description": "Routes array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteDirectionsResult"
          }
        },
        "optimizedWaypoints": {
          "description": "Optimized sequence of waypoints. It shows the index from the user provided waypoint sequence for the original and optimized list. For instance, a response: \n\n```\n<optimizedWaypoints>\n<waypoint providedIndex=\"0\" optimizedIndex=\"1\"/>\n<waypoint providedIndex=\"1\" optimizedIndex=\"2\"/>\n<waypoint providedIndex=\"2\" optimizedIndex=\"0\"/>\n</optimizedWaypoints>\n```\n\nmeans that the original sequence is [0, 1, 2] and optimized sequence is [1, 2, 0]. Since the index starts by 0 the original is \"first, second, third\" while the optimized is \"second, third, first\".",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteOptimizedWaypoint"
          }
        },
        "report": {
          "$ref": "#/definitions/RouteResponseReport"
        }
      }
    },
    "RouteDirectionsResult": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/RouteDirectionsSummary"
        },
        "legs": {
          "description": "Legs array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteResultLeg"
          }
        },
        "sections": {
          "description": "Sections array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteResultSection"
          }
        },
        "guidance": {
          "$ref": "#/definitions/RouteResultGuidance"
        }
      }
    },
    "RouteDirectionsSummary": {
      "description": "Summary object",
      "type": "object",
      "readOnly": true,
      "properties": {
        "lengthInMeters": {
          "description": "Length In Meters property",
          "type": "integer",
          "readOnly": true
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        },
        "trafficDelayInSeconds": {
          "description": "Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0. To return additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to be added.",
          "type": "integer",
          "readOnly": true
        },
        "departureTime": {
          "description": "Departure Time property",
          "type": "string",
          "readOnly": true
        },
        "arrivalTime": {
          "description": "Arrival Time property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteOptimizedWaypoint": {
      "description": "Optimized way point object.",
      "type": "object",
      "properties": {
        "providedIndex": {
          "description": "Way point index provided by the user.",
          "type": "integer",
          "readOnly": true
        },
        "optimizedIndex": {
          "description": "Optimized way point index from the system.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteResultLeg": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/RouteResultLegSummary"
        },
        "points": {
          "description": "Points array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Coordinate"
          }
        }
      }
    },
    "RouteResultLegSummary": {
      "description": "Summary object for route section.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "lengthInMeters": {
          "description": "Length In Meters property",
          "type": "integer",
          "readOnly": true
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.",
          "type": "integer",
          "readOnly": true
        },
        "trafficDelayInSeconds": {
          "description": "Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0. To return additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to be added.",
          "type": "integer",
          "readOnly": true
        },
        "departureTime": {
          "description": "Departure Time property",
          "type": "string",
          "readOnly": true
        },
        "arrivalTime": {
          "description": "Arrival Time property",
          "type": "string",
          "readOnly": true
        },
        "noTrafficTravelTimeInSeconds": {
          "description": "Estimated travel time calculated as if there are no delays on the route due to traffic conditions (e.g. congestion). Included only if computeTravelTimeFor = all is used in the query.",
          "type": "integer",
          "readOnly": true
        },
        "historicTrafficTravelTimeInSeconds": {
          "description": "Estimated travel time calculated using time-dependent historic traffic data. Included only if computeTravelTimeFor = all is used in the query.",
          "type": "integer",
          "readOnly": true
        },
        "liveTrafficIncidentsTravelTimeInSeconds": {
          "description": "Estimated travel time calculated using real-time speed data. Included only if computeTravelTimeFor = all is used in the query.",
          "type": "integer",
          "readOnly": true
        },
        "fuelConsumptionInLiters": {
          "description": "Estimated fuel consumption in liters using the Combustion Consumption Model. Included if vehicleEngineType is set to _combustion_ and constantSpeedConsumptionInLitersPerHundredkm is specified. The value will be non-negative.",
          "type": "number",
          "format": "float",
          "readOnly": true
        },
        "batteryConsumptionInkWh": {
          "description": "Estimated electric energy consumption in kilowatt hours (kWh) using the Electric Consumption Model. Included if vehicleEngineType is set to electric and constantSpeedConsumptionInkWhPerHundredkm is specified. The value of batteryConsumptionInkWh includes the recuperated electric energy and can therefore be negative (which indicates gaining energy). If both maxChargeInkWh and currentChargeInkWh are specified, recuperation will be capped to ensure that the battery charge level never exceeds maxChargeInkWh. If neither maxChargeInkWh nor currentChargeInkWh are specified, unconstrained recuperation is assumed in the consumption calculation.",
          "type": "number",
          "format": "float",
          "readOnly": true
        }
      }
    },
    "RouteResultSection": {
      "type": "object",
      "properties": {
        "startPointIndex": {
          "description": "Start Point Index property",
          "type": "integer",
          "readOnly": true
        },
        "endPointIndex": {
          "description": "End Point Index property",
          "type": "integer",
          "readOnly": true
        },
        "sectionType": {
          "description": "Section Type property",
          "type": "string",
          "readOnly": true
        },
        "travelMode": {
          "description": "Travel Mode property",
          "type": "string",
          "readOnly": true
        },
        "simpleCategory": {
          "description": "Type of the incident. Can currently be JAM, ROAD_WORK, ROAD_CLOSURE, or OTHER. See \"tec\" for detailed information.",
          "type": "string",
          "readOnly": true
        },
        "effectiveSpeedInKmh": {
          "description": "Effective speed of the incident in km/h, averaged over its entire length.",
          "type": "integer",
          "readOnly": true
        },
        "delayInSeconds": {
          "description": "Delay in seconds caused by the incident.",
          "type": "integer",
          "readOnly": true
        },
        "magnitudeOfDelay": {
          "description": "The magnitude of delay caused by the incident. These values correspond to the values of the response field <ty> of the Get Traffic Incident Detail API. ",
          "readOnly": true,
          "type": "string",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "x-ms-enum": {
            "name": "MagnitudeOfDelay",
            "modelAsString": false,
            "values": [
              {
                "value": "0",
                "description": "Unknown."
              },
              {
                "value": "1",
                "description": "Minor."
              },
              {
                "value": "2",
                "description": "Moderate."
              },
              {
                "value": "3",
                "description": "Major."
              },
              {
                "value": "4",
                "description": "Undefined, used for road closures and other indefinite delays."
              }
            ]
          }
        },
        "tec": {
          "$ref": "#/definitions/RouteResultSectionTec"
        }
      }
    },
    "RouteResultSectionTec": {
      "description": "Details of the traffic event, using definitions in the TPEG2-TEC standard. Can contain <effectCode> and <causes> elements.",
      "type": "object",
      "properties": {
        "effectCode": {
          "description": "The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as defined in the TPEG2-TEC standard. Can be used to color-code traffic events according to severity.",
          "type": "integer",
          "readOnly": true
        },
        "causes": {
          "description": "List of <cause> elements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteResultSectionTecCause"
          }
        }
      }
    },
    "RouteResultSectionTecCause": {
      "description": "The cause of the traffic event. Can contain <mainCauseCode> and <subCauseCode> elements. Can be used to define iconography and descriptions.",
      "type": "object",
      "properties": {
        "mainCauseCode": {
          "description": "The main cause of the traffic event. Contains a value in the tec002:CauseCode table, as defined in the TPEG2-TEC standard.",
          "type": "integer",
          "readOnly": true
        },
        "subCauseCode": {
          "description": "The subcause of the traffic event. Contains a value in the sub cause table defined by the mainCauseCode, as defined in the TPEG2-TEC standard.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteResultInstruction": {
      "description": "A set of attributes describing a maneuver, e.g. 'Turn right', 'Keep left', 'Take the ferry', 'Take the motorway', 'Arrive'.",
      "type": "object",
      "properties": {
        "routeOffsetInMeters": {
          "description": "Distance from the start of the route to the point of the instruction.",
          "type": "integer",
          "readOnly": true
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time up to the point corresponding to routeOffsetInMeters.",
          "type": "integer",
          "readOnly": true
        },
        "point": {
          "$ref": "#/definitions/Coordinate"
        },
        "instructionType": {
          "description": "Type of the instruction, e.g., turn or change of road form.",
          "type": "string",
          "enum": [
            "TURN",
            "ROAD_CHANGE",
            "LOCATION_DEPARTURE",
            "LOCATION_ARRIVAL",
            "DIRECTION_INFO",
            "LOCATION_WAYPOINT"
          ],
          "x-ms-enum": {
            "name": "GuidanceInstructionType",
            "modelAsString": false,
            "values": [
              {
                "value": "TURN",
                "description": "Turn."
              },
              {
                "value": "ROAD_CHANGE",
                "description": "Road Change."
              },
              {
                "value": "LOCATION_DEPARTURE",
                "description": "Departure location."
              },
              {
                "value": "LOCATION_ARRIVAL",
                "description": "Arrival location."
              },
              {
                "value": "DIRECTION_INFO",
                "description": "Direction information."
              },
              {
                "value": "LOCATION_WAYPOINT",
                "description": "Way point location."
              }
            ]
          }
        },
        "street": {
          "description": "Street name of the next significant road segment after the maneuver, or of the street that should be followed.",
          "type": "string",
          "readOnly": true
        },
        "countryCode": {
          "description": "3-character [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-3 country code. E.g. USA.",
          "type": "string",
          "readOnly": true
        },
        "possibleCombineWithNext": {
          "description": "It is possible to optionally combine the instruction with the next one. This can be used to build messages like \"Turn left and then turn right\".",
          "type": "boolean",
          "readOnly": true
        },
        "drivingSide": {
          "description": "Indicates left-hand vs. right-hand side driving at the point of the maneuver.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "LEFT",
            "RIGHT"
          ],
          "x-ms-enum": {
            "name": "DrivingSide",
            "modelAsString": false,
            "values": [
              {
                "value": "LEFT",
                "description": "Left side."
              },
              {
                "value": "RIGHT",
                "description": "Right side."
              }
            ]
          }
        },
        "maneuver": {
          "description": "A code identifying the maneuver.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "ARRIVE",
            "ARRIVE_LEFT",
            "ARRIVE_RIGHT",
            "DEPART",
            "STRAIGHT",
            "KEEP_RIGHT",
            "BEAR_RIGHT",
            "TURN_RIGHT",
            "SHARP_RIGHT",
            "KEEP_LEFT",
            "BEAR_LEFT",
            "TURN_LEFT",
            "SHARP_LEFT",
            "MAKE_UTURN",
            "ENTER_MOTORWAY",
            "ENTER_FREEWAY",
            "ENTER_HIGHWAY",
            "TAKE_EXIT",
            "MOTORWAY_EXIT_LEFT",
            "MOTORWAY_EXIT_RIGHT",
            "TAKE_FERRY",
            "ROUNDABOUT_CROSS",
            "ROUNDABOUT_RIGHT",
            "ROUNDABOUT_LEFT",
            "ROUNDABOUT_BACK",
            "TRY_MAKE_UTURN",
            "FOLLOW",
            "SWITCH_PARALLEL_ROAD",
            "SWITCH_MAIN_ROAD",
            "ENTRANCE_RAMP",
            "WAYPOINT_LEFT",
            "WAYPOINT_RIGHT",
            "WAYPOINT_REACHED"
          ],
          "x-ms-enum": {
            "name": "GuidanceManeuver",
            "modelAsString": false,
            "values": [
              {
                "value": "ARRIVE",
                "description": "You have arrived."
              },
              {
                "value": "ARRIVE_LEFT",
                "description": "You have arrived. Your destination is on the left."
              },
              {
                "value": "ARRIVE_RIGHT",
                "description": "You have arrived. Your destination is on the right."
              },
              {
                "value": "DEPART",
                "description": "Leave."
              },
              {
                "value": "STRAIGHT",
                "description": "Keep straight on."
              },
              {
                "value": "KEEP_RIGHT",
                "description": "Keep right."
              },
              {
                "value": "BEAR_RIGHT",
                "description": "Bear right."
              },
              {
                "value": "TURN_RIGHT",
                "description": "Turn right."
              },
              {
                "value": "SHARP_RIGHT",
                "description": "Turn sharp right."
              },
              {
                "value": "KEEP_LEFT",
                "description": "Keep left."
              },
              {
                "value": "BEAR_LEFT",
                "description": "Bear left."
              },
              {
                "value": "TURN_LEFT",
                "description": "Turn left."
              },
              {
                "value": "SHARP_LEFT",
                "description": "Turn sharp left."
              },
              {
                "value": "MAKE_UTURN",
                "description": "Make a U-turn."
              },
              {
                "value": "ENTER_MOTORWAY",
                "description": "Take the motorway."
              },
              {
                "value": "ENTER_FREEWAY",
                "description": "Take the freeway."
              },
              {
                "value": "ENTER_HIGHWAY",
                "description": "Take the highway."
              },
              {
                "value": "TAKE_EXIT",
                "description": "Take the exit."
              },
              {
                "value": "MOTORWAY_EXIT_LEFT",
                "description": "Take the left exit."
              },
              {
                "value": "MOTORWAY_EXIT_RIGHT",
                "description": "Take the right exit."
              },
              {
                "value": "TAKE_FERRY",
                "description": "Take the ferry."
              },
              {
                "value": "ROUNDABOUT_CROSS",
                "description": "Cross the roundabout."
              },
              {
                "value": "ROUNDABOUT_RIGHT",
                "description": "At the roundabout take the exit on the right."
              },
              {
                "value": "ROUNDABOUT_LEFT",
                "description": "At the roundabout take the exit on the left."
              },
              {
                "value": "ROUNDABOUT_BACK",
                "description": "Go around the roundabout."
              },
              {
                "value": "TRY_MAKE_UTURN",
                "description": "Try to make a U-turn."
              },
              {
                "value": "FOLLOW",
                "description": "Follow."
              },
              {
                "value": "SWITCH_PARALLEL_ROAD",
                "description": "Switch to the parallel road."
              },
              {
                "value": "SWITCH_MAIN_ROAD",
                "description": "Switch to the main road."
              },
              {
                "value": "ENTRANCE_RAMP",
                "description": "Take the ramp."
              },
              {
                "value": "WAYPOINT_LEFT",
                "description": "You have reached the waypoint. It is on the left."
              },
              {
                "value": "WAYPOINT_RIGHT",
                "description": "You have reached the waypoint. It is on the right."
              },
              {
                "value": "WAYPOINT_REACHED",
                "description": "You have reached the waypoint."
              }
            ]
          }
        },
        "message": {
          "description": "A human-readable message for the maneuver.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteResultInstructionGroup": {
      "description": "Groups a sequence of instruction elements which are related to each other. The sequence range is constrained with firstInstructionIndex and lastInstructionIndex. When human-readable text messages are requested for guidance (instructionType=text or tagged), then the instructionGroup has a summary message returned when available.",
      "type": "object",
      "properties": {
        "firstInstructionIndex": {
          "description": "Index of the first instruction.",
          "type": "integer",
          "readOnly": true
        },
        "lastInstructionIndex": {
          "description": "Index of the last instruction.",
          "type": "integer",
          "readOnly": true
        },
        "groupLengthInMeters": {
          "description": "Length of the group.",
          "type": "integer",
          "readOnly": true
        },
        "groupMessage": {
          "description": "Summary message when human-readable text messages are requested for guidance (instructionType=text or tagged).",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteResultGuidance": {
      "description": "Contains guidance related elements. This field is present only when guidance was requested and is available.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "instructions": {
          "description": "A list of instructions describing maneuvers.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteResultInstruction"
          }
        },
        "instructionGroups": {
          "description": "Groups a sequence of instruction elements which are related to each other.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteResultInstructionGroup"
          }
        }
      }
    },
    "RouteRangeResponse": {
      "description": "This object is returned from a successful Route Reachable Range call",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "reachableRange": {
          "$ref": "#/definitions/RouteRange"
        },
        "report": {
          "$ref": "#/definitions/RouteResponseReport"
        }
      }
    },
    "RouteRange": {
      "description": "Reachable Range",
      "type": "object",
      "properties": {
        "center": {
          "description": "Center point of the reachable range",
          "$ref": "#/definitions/Coordinate"
        },
        "boundary": {
          "description": "Polygon boundary of the reachable range represented as a list of points.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Coordinate"
          }
        }
      }
    },
    "RouteResponseReport": {
      "description": "Reports the effective settings used in the current call.",
      "type": "object",
      "properties": {
        "effectiveSettings": {
          "description": "Effective parameters or data used when calling this Route API.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/RouteResponseReportEffectiveSetting"
          }
        }
      }
    },
    "RouteResponseReportEffectiveSetting": {
      "description": "Effective parameter or data used when calling this Route API.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Name of the parameter used.",
          "type": "string",
          "readOnly": true
        },
        "value": {
          "description": "Value of the parameter used.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RouteMatrixResponse": {
      "description": "This object is returned from a successful Route Matrix call. For ex, if 2 origins and 3 destinations are provided, there are going to 2 arrays with 3 elements in each. Each element's content depends on the options provided in the query.",
      "type": "object",
      "properties": {
        "formatVersion": {
          "description": "Format Version property",
          "type": "string",
          "readOnly": true
        },
        "matrix": {
          "description": "Results as a 2 dimensional array of route summaries.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/definitions/RouteMatrixResult"
            }
          }
        },
        "summary": {
          "$ref": "#/definitions/RouteMatrixSummary"
        }
      }
    },
    "RouteMatrixSummary": {
      "description": "Summary object",
      "type": "object",
      "readOnly": true,
      "properties": {
        "successfulRoutes": {
          "description": "Number of successful routes in the response.",
          "type": "integer",
          "readOnly": true
        },
        "totalRoutes": {
          "description": "Total number of routes requested. Number of cells in the input matrix.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RouteMatrixResult": {
      "description": "Matrix result object",
      "type": "object",
      "readOnly": true,
      "properties": {
        "statusCode": {
          "description": "StatusCode property for the current cell in the input matrix.",
          "type": "integer",
          "readOnly": true
        },
        "response": {
          "$ref": "#/definitions/RouteMatrixResultResponse"
        }
      }
    },
    "RouteMatrixResultResponse": {
      "description": "Response object of the current cell in the input matrix.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "routeSummary": {
          "$ref": "#/definitions/RouteResultLegSummary"
        }
      }
    },
    "RouteMatrixRequestBody": {
      "description": "An object with a matrix of coordinates.",
      "type": "object",
      "properties": {
        "origins": {
          "$ref": "#/definitions/MultiPoint"
        },
        "destinations": {
          "$ref": "#/definitions/MultiPoint"
        }
      }
    }
  },
  "x-internal-service-id": "maps",
  "x-internal-service-name": "Maps",
  "x-internal-toc-name": "Route",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "PostRouteDirections",
  "x-internal-operation-name": "Post Route Directions"
}