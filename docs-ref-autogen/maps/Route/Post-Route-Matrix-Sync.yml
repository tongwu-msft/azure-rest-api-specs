### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.route.postroutematrixsync
name: Post Route Matrix Sync
service: Maps
groupName: Route
apiVersion: "1.0"
summary: "\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) POST request. For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.\n\n\nFor each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.\n\n\nThe maximum size of a matrix for async request is **700** and for sync request it's **100** (the number of origins multiplied by the number of destinations).\n\n\n\n### Submit Synchronous Route Matrix Request\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than or equal to 100, you might want to make synchronous request. The maximum size of a matrix for this API is **100** (the number of origins multiplied by the number of destinations). With that constraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not need to be square).\n\n```\nPOST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}\n```\n\n### Submit Asynchronous Route Matrix Request\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing requests. When you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available. If `waitForResults` parameter in the request is set to true, user will get a 200 response if the request is finished under 120 seconds.\n\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the number of destinations). With that constraint in mind, examples of possible matrix dimensions are: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.\n\n\n\n\n```\nPOST https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}\n```\n\nHere's a typical sequence of asynchronous operations:\n1. Client sends a Route Matrix POST request to Azure Maps\n\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` -  Route Matrix request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Route Matrix request. This could either be a 400 Bad Request or any other Error status code.\n\n\n3. If the Matrix Route request was accepted successfully, the Location header in the response contains the URL to download the results of the request. This status URI looks like the following:\n\n  ```\n    GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n  ```\n\n\n4. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\n### Download Sync Results\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code for successful request and a response array. The response body will contain the data and there will be no possibility to retrieve the results later.\n\n### Download Async Results\nWhen a request issues a `202 Accepted` response, the request is being processed using our async pipeline. You will be given a URL to check the progress of your  async request in the location header of the response. This status URI looks like the following:\n```\n  GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}\n```\n\nThe URL provided by the location header will return the following responses when a `GET` request is issued.\n\n  > HTTP `202 Accepted` - Matrix request was accepted but is still being processed. Please try again in some time.\n\n  > HTTP `200 OK` - Matrix request successfully processed. The response body contains all of the results."
consumes: []
produces:
- application/json
paths:
- content: POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0
- content: POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&waitForResults={waitForResults}&computeTravelTimeFor={computeTravelTimeFor}&sectionType={sectionType}&arriveAt={arriveAt}&departAt={departAt}&vehicleAxleWeight={vehicleAxleWeight}&vehicleLength={vehicleLength}&vehicleHeight={vehicleHeight}&vehicleWidth={vehicleWidth}&vehicleMaxSpeed={vehicleMaxSpeed}&vehicleWeight={vehicleWeight}&windingness={windingness}&hilliness={hilliness}&travelMode={travelMode}&avoid={avoid}&traffic={traffic}&routeType={routeType}&vehicleLoadType={vehicleLoadType}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API.
  types:
  - uid: string
- name: waitForResults
  in: query
  description: Boolean to indicate whether to execute the request synchronously. If set to true, user will get a 200 response if the request is finished under 120 seconds. Otherwise, user will get a 202 response right away. Please refer to the API description for more details on 202 response. **Supported only for async request**.
  types:
  - uid: boolean
- name: computeTravelTimeFor
  in: query
  description: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
  types:
  - uid: ComputeTravelTime
- name: sectionType
  in: query
  description: Specifies which of the section types is reported in the route response. <br><br>For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car
  types:
  - uid: SectionType
- name: arriveAt
  in: query
  description: The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.
  types:
  - uid: string
  format: date-time
- name: departAt
  in: query
  description: The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).
  types:
  - uid: string
  format: date-time
- name: vehicleAxleWeight
  in: query
  description: Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.
  types:
  - uid: integer
- name: vehicleLength
  in: query
  description: Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.
  types:
  - uid: number
  format: double
- name: vehicleHeight
  in: query
  description: Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.
  types:
  - uid: number
  format: double
- name: vehicleWidth
  in: query
  description: Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.
  types:
  - uid: number
  format: double
- name: vehicleMaxSpeed
  in: query
  description: "Maximum speed of the vehicle in km/hour. The max speed in the vehicle profile is used to check whether a vehicle is allowed on motorways. \n\n* A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning.\n\n* A non-zero value may be overridden during route planning. For example, the current traffic flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will again use 60 km/hour."
  types:
  - uid: integer
- name: vehicleWeight
  in: query
  description: Weight of the vehicle in kilograms.
  types:
  - uid: integer
- name: windingness
  in: query
  description: Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  types:
  - uid: WindingnessLevel
- name: hilliness
  in: query
  description: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  types:
  - uid: InclineLevel
- name: travelMode
  in: query
  description: The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
  types:
  - uid: TravelMode
- name: avoid
  in: query
  description: Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times in one request, for example, '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the value alreadyUsedRoads must not be used.
  types:
  - uid: array
- name: traffic
  in: query
  description: "Possible values: \n  * true - Do consider all available traffic information during routing\n  * false - Ignore current traffic data during routing. Note that although the current traffic data is ignored \n  during routing, the effect of historic traffic on effective road speeds is still incorporated."
  types:
  - uid: boolean
- name: routeType
  in: query
  description: The type of route requested.
  types:
  - uid: RouteType
- name: vehicleLoadType
  in: query
  description: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
  types:
  - uid: VehicleLoadType
responses:
- name: 200 OK
  description: Matrix request successfully processed. The response body contains all of the results.
  types:
  - uid: RouteMatrixResult
- name: Other Status Codes
  description: 'Timeout: The request took longer to finish than the maximum amount of time defined in the api.'
  types:
  - uid: ErrorResponse
- name: Other Status Codes
  description: An unexpected error occurred.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: origins
    in: body
    description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    types:
    - uid: GeoJsonMultiPoint
  - name: destinations
    in: body
    description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    types:
    - uid: GeoJsonMultiPoint
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: ComputeTravelTime
  description: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
  kind: enum
  properties:
  - name: none
    description: Does not compute additional travel times.
    types:
    - uid: string
  - name: all
    description: Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
    types:
    - uid: string
- name: SectionType
  description: Specifies which of the section types is reported in the route response. <br><br>For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car
  kind: enum
  properties:
  - name: carTrain
    description: Sections of the route that are cars or trains.
    types:
    - uid: string
  - name: country
    description: Sections indicating which countries the route is in.
    types:
    - uid: string
  - name: ferry
    description: Sections of the route that are ferries.
    types:
    - uid: string
  - name: motorway
    description: Sections of the route that are motorways.
    types:
    - uid: string
  - name: pedestrian
    description: Sections of the route that are only suited for pedestrians.
    types:
    - uid: string
  - name: tollRoad
    description: Sections of the route that require a toll to be payed.
    types:
    - uid: string
  - name: tollVignette
    description: Sections of the route that require a toll vignette to be present.
    types:
    - uid: string
  - name: traffic
    description: Sections of the route that contain traffic information.
    types:
    - uid: string
  - name: travelMode
    description: Sections in relation to the request parameter `travelMode`.
    types:
    - uid: string
  - name: tunnel
    description: Sections of the route that are tunnels.
    types:
    - uid: string
  - name: carpool
    description: Sections of the route that require use of carpool (HOV/High Occupancy Vehicle) lanes.
    types:
    - uid: string
  - name: urban
    description: Sections of the route that are located within urban areas.
    types:
    - uid: string
- name: WindingnessLevel
  description: Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  kind: enum
  properties:
  - name: low
    description: low
    types:
    - uid: string
  - name: normal
    description: normal
    types:
    - uid: string
  - name: high
    description: high
    types:
    - uid: string
- name: InclineLevel
  description: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  kind: enum
  properties:
  - name: low
    description: low
    types:
    - uid: string
  - name: normal
    description: normal
    types:
    - uid: string
  - name: high
    description: high
    types:
    - uid: string
- name: TravelMode
  description: The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
  kind: enum
  properties:
  - name: car
    description: The returned routes are optimized for cars.
    types:
    - uid: string
  - name: truck
    description: The returned routes are optimized for commercial vehicles, like for trucks.
    types:
    - uid: string
  - name: taxi
    description: The returned routes are optimized for taxis. BETA functionality.
    types:
    - uid: string
  - name: bus
    description: The returned routes are optimized for buses, including the use of bus only lanes. BETA functionality.
    types:
    - uid: string
  - name: van
    description: The returned routes are optimized for vans. BETA functionality.
    types:
    - uid: string
  - name: motorcycle
    description: The returned routes are optimized for motorcycles. BETA functionality.
    types:
    - uid: string
  - name: bicycle
    description: The returned routes are optimized for bicycles, including use of bicycle lanes.
    types:
    - uid: string
  - name: pedestrian
    description: The returned routes are optimized for pedestrians, including the use of sidewalks.
    types:
    - uid: string
- name: RouteType
  description: The type of route requested.
  kind: enum
  properties:
  - name: fastest
    description: The fastest route.
    types:
    - uid: string
  - name: shortest
    description: The shortest route by distance.
    types:
    - uid: string
  - name: eco
    description: A route balanced by economy and speed.
    types:
    - uid: string
  - name: thrilling
    description: Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with `routeType`=thrilling
    types:
    - uid: string
- name: VehicleLoadType
  description: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
  kind: enum
  properties:
  - name: USHazmatClass1
    description: Explosives
    types:
    - uid: string
  - name: USHazmatClass2
    description: Compressed gas
    types:
    - uid: string
  - name: USHazmatClass3
    description: Flammable liquids
    types:
    - uid: string
  - name: USHazmatClass4
    description: Flammable solids
    types:
    - uid: string
  - name: USHazmatClass5
    description: Oxidizers
    types:
    - uid: string
  - name: USHazmatClass6
    description: Poisons
    types:
    - uid: string
  - name: USHazmatClass7
    description: Radioactive
    types:
    - uid: string
  - name: USHazmatClass8
    description: Corrosives
    types:
    - uid: string
  - name: USHazmatClass9
    description: Miscellaneous
    types:
    - uid: string
  - name: otherHazmatExplosive
    description: Explosives
    types:
    - uid: string
  - name: otherHazmatGeneral
    description: Miscellaneous
    types:
    - uid: string
  - name: otherHazmatHarmfulToWater
    description: Harmful to water
    types:
    - uid: string
- name: GeoJsonMultiPoint
  description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPoint
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiPoint` geometry.
    types:
    - uid: array
      isArray: true
- name: RouteMatrixResult
  description: This object is returned from a successful Route Matrix call. For ex, if 2 origins and 3 destinations are provided, there are going to 2 arrays with 3 elements in each. Each element's content depends on the options provided in the query.
  kind: object
  properties:
  - name: formatVersion
    isReadyOnly: true
    description: Format Version property
    types:
    - uid: string
  - name: matrix
    isReadyOnly: true
    description: Results as a 2 dimensional array of route summaries.
    types:
    - uid: array
      isArray: true
  - name: summary
    isReadyOnly: true
    description: Summary object
    types:
    - uid: RouteMatrixSummary
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: RouteMatrixQuery
  description: An object with a matrix of coordinates.
  kind: object
  properties:
  - name: origins
    description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    types:
    - uid: GeoJsonMultiPoint
  - name: destinations
    description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
    types:
    - uid: GeoJsonMultiPoint
- name: RouteMatrixSummary
  description: Summary object
  kind: object
  properties:
  - name: successfulRoutes
    isReadyOnly: true
    description: Number of successful routes in the response.
    types:
    - uid: integer
  - name: totalRoutes
    isReadyOnly: true
    description: Total number of routes requested. Number of cells in the input matrix.
    types:
    - uid: integer
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: Successfully retrieve a route matrix request result synchronously
  request:
    uri: POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&routeType=shortest
    body: >-
      {
        "origins": {
          "type": "MultiPoint",
          "coordinates": [
            [
              4.85106,
              52.36006
            ],
            [
              4.85056,
              52.36187
            ]
          ]
        },
        "destinations": {
          "type": "MultiPoint",
          "coordinates": [
            [
              4.85003,
              52.36241
            ],
            [
              13.42937,
              52.50931
            ]
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&routeType=shortest

      {
        "origins": {
          "type": "MultiPoint",
          "coordinates": [
            [
              4.85106,
              52.36006
            ],
            [
              4.85056,
              52.36187
            ]
          ]
        },
        "destinations": {
          "type": "MultiPoint",
          "coordinates": [
            [
              4.85003,
              52.36241
            ],
            [
              13.42937,
              52.50931
            ]
          ]
        }
      }

      ```

  responses:
  - statusCode: "200"
    body: >-
      {
        "formatVersion": "0.0.1",
        "matrix": [
          [
            {
              "statusCode": 200,
              "response": {
                "routeSummary": {
                  "lengthInMeters": 495,
                  "travelTimeInSeconds": 134,
                  "trafficDelayInSeconds": 0,
                  "departureTime": "2018-07-27T22:55:29+00:00",
                  "arrivalTime": "2018-07-27T22:57:43+00:00"
                }
              }
            },
            {
              "statusCode": 200,
              "response": {
                "routeSummary": {
                  "lengthInMeters": 647651,
                  "travelTimeInSeconds": 26835,
                  "trafficDelayInSeconds": 489,
                  "departureTime": "2018-07-27T22:55:29+00:00",
                  "arrivalTime": "2018-07-28T06:22:44+00:00"
                }
              }
            }
          ],
          [
            {
              "statusCode": 200,
              "response": {
                "routeSummary": {
                  "lengthInMeters": 338,
                  "travelTimeInSeconds": 104,
                  "trafficDelayInSeconds": 0,
                  "departureTime": "2018-07-27T22:55:29+00:00",
                  "arrivalTime": "2018-07-27T22:57:13+00:00"
                }
              }
            },
            {
              "statusCode": 200,
              "response": {
                "routeSummary": {
                  "lengthInMeters": 647494,
                  "travelTimeInSeconds": 26763,
                  "trafficDelayInSeconds": 469,
                  "departureTime": "2018-07-27T22:55:29+00:00",
                  "arrivalTime": "2018-07-28T06:21:32+00:00"
                }
              }
            }
          ]
        ],
        "summary": {
          "successfulRoutes": 4,
          "totalRoutes": 4
        }
      }
  - statusCode: "408"
    body: >-
      {
        "error": {
          "code": "408 Timeout",
          "message": "Timeout: The request took longer to finish than the maximum amount of time defined in the api."
        }
      }
security:
- name: AADToken
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: https://atlas.microsoft.com/.default
    description: https://atlas.microsoft.com/.default
- name: subscription-key
  type: apiKey
  description: >-
    This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.

     For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be securely stored.
  in: query
- name: SAS Token
  type: apiKey
  description: >-
    This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.

     For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.
  in: header
metadata:
  description: "\n\n**Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a "
errorCodes: []
