### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.route.postroutedirections
name: Post Route Directions
service: Maps
groupName: Route
apiVersion: "1.0"
summary: >-
  **Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).



  Returns  a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.


  Information returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.


  Routing service provides a set of parameters for a detailed description of a vehicle-specific Consumption Model. Please check [Consumption Model](https://docs.microsoft.com/azure/azure-maps/consumption-model) for detailed explanation of the concepts and parameters involved.
consumes: []
produces:
- application/json
paths:
- content: POST https://atlas.microsoft.com/route/directions/{format}?api-version=1.0&query={query}
- content: POST https://atlas.microsoft.com/route/directions/{format}?api-version=1.0&query={query}&maxAlternatives={maxAlternatives}&alternativeType={alternativeType}&minDeviationDistance={minDeviationDistance}&minDeviationTime={minDeviationTime}&instructionsType={instructionsType}&language={language}&computeBestOrder={computeBestOrder}&routeRepresentation={routeRepresentation}&computeTravelTimeFor={computeTravelTimeFor}&vehicleHeading={vehicleHeading}&report=effectiveSettings&sectionType={sectionType}&arriveAt={arriveAt}&departAt={departAt}&vehicleAxleWeight={vehicleAxleWeight}&vehicleLength={vehicleLength}&vehicleHeight={vehicleHeight}&vehicleWidth={vehicleWidth}&vehicleMaxSpeed={vehicleMaxSpeed}&vehicleWeight={vehicleWeight}&vehicleCommercial={vehicleCommercial}&windingness={windingness}&hilliness={hilliness}&travelMode={travelMode}&avoid={avoid}&traffic={traffic}&routeType={routeType}&vehicleLoadType={vehicleLoadType}&vehicleEngineType={vehicleEngineType}&constantSpeedConsumptionInLitersPerHundredkm={constantSpeedConsumptionInLitersPerHundredkm}&currentFuelInLiters={currentFuelInLiters}&auxiliaryPowerInLitersPerHour={auxiliaryPowerInLitersPerHour}&fuelEnergyDensityInMJoulesPerLiter={fuelEnergyDensityInMJoulesPerLiter}&accelerationEfficiency={accelerationEfficiency}&decelerationEfficiency={decelerationEfficiency}&uphillEfficiency={uphillEfficiency}&downhillEfficiency={downhillEfficiency}&constantSpeedConsumptionInkWhPerHundredkm={constantSpeedConsumptionInkWhPerHundredkm}&currentChargeInkWh={currentChargeInkWh}&maxChargeInkWh={maxChargeInkWh}&auxiliaryPowerInkW={auxiliaryPowerInkW}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Value can be either _json_ or _xml_.
  types:
  - uid: ResponseFormat
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API.
  types:
  - uid: string
- name: query
  in: query
  isRequired: true
  description: The Coordinates through which the route is calculated, delimited by a colon.  A minimum of two coordinates is required.  The first one is the origin and the last is the destination of the route. Optional coordinates in-between act as WayPoints in the route.  You can pass up to 150 WayPoints.
  types:
  - uid: string
- name: maxAlternatives
  in: query
  description: 'Number of desired alternative routes to be calculated. Default: 0, minimum: 0 and maximum: 5'
  types:
  - uid: integer
- name: alternativeType
  in: query
  description: Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.
  types:
  - uid: AlternativeRouteType
- name: minDeviationDistance
  in: query
  description: All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt
  types:
  - uid: integer
- name: minDeviationTime
  in: query
  description: >-
    All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to a value greater than zero has the following consequences:
      - The origin point of the _calculateRoute_ Request must be on
        (or very near) the input reference route.
        - If this is not the case, an error is returned.
        - However, the origin point does not need to be at the beginning
          of the input reference route (it can be thought of as the current
          vehicle position on the reference route).
      - The reference route, returned as the first route in the _calculateRoute_
        Response, will start at the origin point specified in the _calculateRoute_
        Request. The initial part of the input reference route up until the origin
        point will be excluded from the Response.
      - The values of _minDeviationDistance_ and _minDeviationTime_ determine
        how far alternative routes will be guaranteed to follow the reference
        route from the origin point onwards.
      - The route must use _departAt_.
      - The _vehicleHeading_ is ignored.
  types:
  - uid: integer
- name: instructionsType
  in: query
  description: If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none
  types:
  - uid: RouteInstructionsType
- name: language
  in: query
  description: The language parameter determines the language of the guidance messages. It does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when instructionsType=coded. Allowed values are (a subset of) the IETF language tags described
  types:
  - uid: string
- name: computeBestOrder
  in: query
  description: Re-order the route waypoints using a fast heuristic algorithm to reduce the route length. Yields best results when used in conjunction with routeType _shortest_. Notice that origin and destination are excluded from the optimized waypoint indices. To include origin and destination in the response, please increase all the indices by 1 to account for the origin, and then add the destination as the final index. Possible values are true or false. True computes a better order if possible, but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. False will use the locations in the given order and not allowed to be used in conjunction with routeRepresentation _none_.
  types:
  - uid: boolean
- name: routeRepresentation
  in: query
  description: Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.
  types:
  - uid: RouteRepresentationForBestOrder
- name: computeTravelTimeFor
  in: query
  description: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
  types:
  - uid: ComputeTravelTime
- name: vehicleHeading
  in: query
  description: The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359
  types:
  - uid: integer
- name: report
  in: query
  description: Specifies which data should be reported for diagnosis purposes. The only possible value is _effectiveSettings_. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.
  types:
  - uid: Report
- name: sectionType
  in: query
  description: Specifies which of the section types is reported in the route response. <br><br>For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car
  types:
  - uid: SectionType
- name: arriveAt
  in: query
  description: The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.
  types:
  - uid: string
  format: date-time
- name: departAt
  in: query
  description: The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).
  types:
  - uid: string
  format: date-time
- name: vehicleAxleWeight
  in: query
  description: Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.
  types:
  - uid: integer
- name: vehicleLength
  in: query
  description: Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.
  types:
  - uid: number
  format: double
- name: vehicleHeight
  in: query
  description: Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.
  types:
  - uid: number
  format: double
- name: vehicleWidth
  in: query
  description: Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.
  types:
  - uid: number
  format: double
- name: vehicleMaxSpeed
  in: query
  description: "Maximum speed of the vehicle in km/hour. The max speed in the vehicle profile is used to check whether a vehicle is allowed on motorways. \n\n* A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning.\n\n* A non-zero value may be overridden during route planning. For example, the current traffic flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will again use 60 km/hour."
  types:
  - uid: integer
- name: vehicleWeight
  in: query
  description: >-
    Weight of the vehicle in kilograms.


    * It is mandatory if any of the *Efficiency parameters are set.


    * It must be strictly positive when used in the context of the Consumption Model. Weight restrictions are considered.


    * If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-zero, then weight restrictions are considered.


    * In all other cases, this parameter is ignored.


    Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900
  types:
  - uid: integer
- name: vehicleCommercial
  in: query
  description: Whether the vehicle is used for commercial purposes. Commercial vehicles may not be allowed to drive on some roads.
  types:
  - uid: boolean
- name: windingness
  in: query
  description: Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  types:
  - uid: WindingnessLevel
- name: hilliness
  in: query
  description: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  types:
  - uid: InclineLevel
- name: travelMode
  in: query
  description: The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
  types:
  - uid: TravelMode
- name: avoid
  in: query
  description: Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times in one request, for example, '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the value alreadyUsedRoads must not be used.
  types:
  - uid: array
- name: traffic
  in: query
  description: "Possible values: \n  * true - Do consider all available traffic information during routing\n  * false - Ignore current traffic data during routing. Note that although the current traffic data is ignored \n  during routing, the effect of historic traffic on effective road speeds is still incorporated."
  types:
  - uid: boolean
- name: routeType
  in: query
  description: The type of route requested.
  types:
  - uid: RouteType
- name: vehicleLoadType
  in: query
  description: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
  types:
  - uid: VehicleLoadType
- name: vehicleEngineType
  in: query
  description: Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.
  types:
  - uid: VehicleEngineType
- name: constantSpeedConsumptionInLitersPerHundredkm
  in: query
  description: "\n\nSpecifies the speed-dependent component of consumption.\n\nProvided as an unordered list of colon-delimited speed & consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n * by linear interpolation, if the given speed lies in between two speeds in the list\n\n * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list\n\nThe list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.\n\nConsumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.\n\nSimilarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller speed.\n\nThe valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\nSensible Values : 50,6.3:130,11.5\n\n**Note** : This parameter is required for **The Combustion Consumption Model**."
  types:
  - uid: string
- name: currentFuelInLiters
  in: query
  description: >-
    Specifies the current supply of fuel in liters.


    Sensible Values : 55
  types:
  - uid: number
  format: double
- name: auxiliaryPowerInLitersPerHour
  in: query
  description: >-
    Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.


    It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.


    Sensible Values : 0.2
  types:
  - uid: number
  format: double
- name: fuelEnergyDensityInMJoulesPerLiter
  in: query
  description: >-
    Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.


    This parameter is required if any ***Efficiency** parameter is set.


    Sensible Values : 34.2
  types:
  - uid: number
  format: double
- name: accelerationEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates _(i.e. KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **decelerationEfficiency**.


    The range of values allowed are 0.0 to 1/**decelerationEfficiency**.


    Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66
  types:
  - uid: number
  format: double
- name: decelerationEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates _(i.e. ChemicalEnergySaved/KineticEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **accelerationEfficiency**.


    The range of values allowed are 0.0 to 1/**accelerationEfficiency**.


    Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91
  types:
  - uid: number
  format: double
- name: uphillEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation _(i.e. PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed_ is obtained by converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **downhillEfficiency**.


    The range of values allowed are 0.0 to 1/**downhillEfficiency**.


    Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74
  types:
  - uid: number
  format: double
- name: downhillEfficiency
  in: query
  description: >-
    Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation _(i.e. ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved_ is obtained by converting saved (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.


    Must be paired with **uphillEfficiency**.


    The range of values allowed are 0.0 to 1/**uphillEfficiency**.


    Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73
  types:
  - uid: number
  format: double
- name: constantSpeedConsumptionInkWhPerHundredkm
  in: query
  description: >-
    Specifies the speed-dependent component of consumption.


    Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a consumption curve. Consumption rates for speeds not in the list are found as follows:


    * by linear interpolation, if the given speed lies in between two speeds in the list


    * by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by the nearest two points in the list


    The list must contain between 1 and 25 points (inclusive), and may not contain duplicate points for the same speed. If it only contains a single point, then the consumption rate of that point is used without further processing.


    Consumption specified for the largest speed must be greater than or equal to that of the penultimate largest speed. This ensures that extrapolation does not lead to negative consumption rates.


    Similarly, consumption values specified for the two smallest speeds in the list cannot lead to a negative consumption rate for any smaller  speed.


    The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and 100000.0.


    Sensible Values : 50,8.2:130,21.3


    This parameter is required for **Electric consumption model**.
  types:
  - uid: string
- name: currentChargeInkWh
  in: query
  description: >-
    Specifies the current electric energy supply in kilowatt hours (kWh).


    This parameter co-exists with **maxChargeInkWh** parameter.


    The range of values allowed are 0.0 to **maxChargeInkWh**.


    Sensible Values : 43
  types:
  - uid: number
  format: double
- name: maxChargeInkWh
  in: query
  description: >-
    Specifies the maximum electric energy supply in kilowatt hours (kWh) that may be stored in the vehicle's battery.


    This parameter co-exists with **currentChargeInkWh** parameter.


    Minimum value has to be greater than or equal to **currentChargeInkWh**.


    Sensible Values : 85
  types:
  - uid: number
  format: double
- name: auxiliaryPowerInkW
  in: query
  description: >-
    Specifies the amount of power consumed for sustaining auxiliary systems, in kilowatts (kW).


    It can be used to specify consumption due to devices and systems such as AC systems, radio, heating, etc.


    Sensible Values : 1.7
  types:
  - uid: number
  format: double
responses:
- name: 200 OK
  description: OK
  types:
  - uid: RouteDirections
- name: Other Status Codes
  description: An unexpected error occurred.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: supportingPoints
    in: body
    description: >-
      A GeoJSON Geometry collection representing sequence of coordinates used as input for route reconstruction and for calculating zero or more alternative routes to this reference route.
        - The provided sequence of supporting points is used as input for route reconstruction.
        - The alternative routes are calculated between the origin and destination points specified in the base path parameter locations.
        - If both _minDeviationDistance_ and _minDeviationTime_ are set to zero, then these origin and destination points are
        expected to be at (or very near) the beginning and end of the reference route, respectively.
        - Intermediate locations (_waypoints_) are not supported when using <_supportingPoints_>.
        - The reference route may contain traffic incidents of type _ROAD_CLOSURE_, which are
        ignored for the calculation of the reference route's travel time and traffic delay.
       Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points) for details.
    types:
    - uid: GeoJsonGeometryCollection
  - name: avoidVignette
    in: body
    description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which all toll roads with vignettes are to be avoided, e.g. "AUS,CHE". Toll roads with vignettes in countries not in the list are unaffected. Note: It is an error to specify both **avoidVignette** and **allowVignette**.'
    types:
    - uid: string
      isArray: true
  - name: allowVignette
    in: body
    description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which toll roads with vignettes are allowed, e.g. "AUS,CHE". Specifying **allowVignette** with some countries X is equivalent to specifying **avoidVignette** with all countries but X. Specifying **allowVignette** with an empty list is the same as avoiding all toll roads with vignettes. Note: It is an error to specify both **avoidVignette** and **allowVignette**.'
    types:
    - uid: string
      isArray: true
  - name: avoidAreas
    in: body
    description: A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle polygons are supported. The maximum size of a rectangle is about 160x160 km. Maximum number of avoided areas is **10**. It cannot cross the 180th meridian. It must be between -80 and +80 degrees of latitude.
    types:
    - uid: GeoJsonMultiPolygon
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: ResponseFormat
  description: Desired format of the response. Value can be either _json_ or _xml_.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
  - name: xml
    description: '[The Extensible Markup Language](https://www.w3.org/TR/xml/)'
    types:
    - uid: string
- name: AlternativeRouteType
  description: Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.
  kind: enum
  properties:
  - name: anyRoute
    description: Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality.
    types:
    - uid: string
  - name: betterRoute
    description: Return an alternative route only if it is better than the reference route according to the given planning criteria.
    types:
    - uid: string
- name: RouteInstructionsType
  description: If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none
  kind: enum
  properties:
  - name: coded
    description: Returns raw instruction data without human-readable messages.
    types:
    - uid: string
  - name: text
    description: Returns raw instructions data with human-readable messages in plain text.
    types:
    - uid: string
  - name: tagged
    description: >-
      Returns raw instruction data with tagged human-readable messages to permit formatting. A human-readable message is built up from repeatable identified elements. These are tagged to allow client applications to format them correctly. The following message components are tagged when instructionsType=tagged: street, roadNumber, signpostText, exitNumber, roundaboutExitNumber.


      Example of tagged 'Turn left' message:​


      ```

      Turn left onto <roadNumber>A4</roadNumber>/<roadNumber>E19</roadNumber>

      towards <signpostText>Den Haag</signpostText>

      ```
    types:
    - uid: string
- name: RouteRepresentationForBestOrder
  description: Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.
  kind: enum
  properties:
  - name: polyline
    description: Includes route geometry in the response.
    types:
    - uid: string
  - name: summaryOnly
    description: Summary as per polyline but excluding the point geometry elements for the routes in the response.
    types:
    - uid: string
  - name: none
    description: Includes only the optimized waypoint indices but does not include the route geometry in the response.
    types:
    - uid: string
- name: ComputeTravelTime
  description: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
  kind: enum
  properties:
  - name: none
    description: Does not compute additional travel times.
    types:
    - uid: string
  - name: all
    description: Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
    types:
    - uid: string
- name: Report
  description: Specifies which data should be reported for diagnosis purposes. The only possible value is _effectiveSettings_. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.
  kind: enum
  properties:
  - name: effectiveSettings
    description: Reports the effective parameters or data used when calling the API.
    types:
    - uid: string
- name: SectionType
  description: Specifies which of the section types is reported in the route response. <br><br>For example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car
  kind: enum
  properties:
  - name: carTrain
    description: Sections of the route that are cars or trains.
    types:
    - uid: string
  - name: country
    description: Sections indicating which countries the route is in.
    types:
    - uid: string
  - name: ferry
    description: Sections of the route that are ferries.
    types:
    - uid: string
  - name: motorway
    description: Sections of the route that are motorways.
    types:
    - uid: string
  - name: pedestrian
    description: Sections of the route that are only suited for pedestrians.
    types:
    - uid: string
  - name: tollRoad
    description: Sections of the route that require a toll to be payed.
    types:
    - uid: string
  - name: tollVignette
    description: Sections of the route that require a toll vignette to be present.
    types:
    - uid: string
  - name: traffic
    description: Sections of the route that contain traffic information.
    types:
    - uid: string
  - name: travelMode
    description: Sections in relation to the request parameter `travelMode`.
    types:
    - uid: string
  - name: tunnel
    description: Sections of the route that are tunnels.
    types:
    - uid: string
  - name: carpool
    description: Sections of the route that require use of carpool (HOV/High Occupancy Vehicle) lanes.
    types:
    - uid: string
  - name: urban
    description: Sections of the route that are located within urban areas.
    types:
    - uid: string
- name: WindingnessLevel
  description: Level of turns for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  kind: enum
  properties:
  - name: low
    description: low
    types:
    - uid: string
  - name: normal
    description: normal
    types:
    - uid: string
  - name: high
    description: high
    types:
    - uid: string
- name: InclineLevel
  description: Degree of hilliness for thrilling route. This parameter can only be used in conjunction with `routeType`=thrilling.
  kind: enum
  properties:
  - name: low
    description: low
    types:
    - uid: string
  - name: normal
    description: normal
    types:
    - uid: string
  - name: high
    description: high
    types:
    - uid: string
- name: TravelMode
  description: The mode of travel for the requested route. If not defined, default is 'car'. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
  kind: enum
  properties:
  - name: car
    description: The returned routes are optimized for cars.
    types:
    - uid: string
  - name: truck
    description: The returned routes are optimized for commercial vehicles, like for trucks.
    types:
    - uid: string
  - name: taxi
    description: The returned routes are optimized for taxis. BETA functionality.
    types:
    - uid: string
  - name: bus
    description: The returned routes are optimized for buses, including the use of bus only lanes. BETA functionality.
    types:
    - uid: string
  - name: van
    description: The returned routes are optimized for vans. BETA functionality.
    types:
    - uid: string
  - name: motorcycle
    description: The returned routes are optimized for motorcycles. BETA functionality.
    types:
    - uid: string
  - name: bicycle
    description: The returned routes are optimized for bicycles, including use of bicycle lanes.
    types:
    - uid: string
  - name: pedestrian
    description: The returned routes are optimized for pedestrians, including the use of sidewalks.
    types:
    - uid: string
- name: RouteType
  description: The type of route requested.
  kind: enum
  properties:
  - name: fastest
    description: The fastest route.
    types:
    - uid: string
  - name: shortest
    description: The shortest route by distance.
    types:
    - uid: string
  - name: eco
    description: A route balanced by economy and speed.
    types:
    - uid: string
  - name: thrilling
    description: Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with `routeType`=thrilling
    types:
    - uid: string
- name: VehicleLoadType
  description: Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.
  kind: enum
  properties:
  - name: USHazmatClass1
    description: Explosives
    types:
    - uid: string
  - name: USHazmatClass2
    description: Compressed gas
    types:
    - uid: string
  - name: USHazmatClass3
    description: Flammable liquids
    types:
    - uid: string
  - name: USHazmatClass4
    description: Flammable solids
    types:
    - uid: string
  - name: USHazmatClass5
    description: Oxidizers
    types:
    - uid: string
  - name: USHazmatClass6
    description: Poisons
    types:
    - uid: string
  - name: USHazmatClass7
    description: Radioactive
    types:
    - uid: string
  - name: USHazmatClass8
    description: Corrosives
    types:
    - uid: string
  - name: USHazmatClass9
    description: Miscellaneous
    types:
    - uid: string
  - name: otherHazmatExplosive
    description: Explosives
    types:
    - uid: string
  - name: otherHazmatGeneral
    description: Miscellaneous
    types:
    - uid: string
  - name: otherHazmatHarmfulToWater
    description: Harmful to water
    types:
    - uid: string
- name: VehicleEngineType
  description: Engine type of the vehicle. When a detailed Consumption Model is specified, it must be consistent with the value of **vehicleEngineType**.
  kind: enum
  properties:
  - name: combustion
    description: Internal combustion engine.
    types:
    - uid: string
  - name: electric
    description: Electric engine.
    types:
    - uid: string
- name: GeoJsonGeometryCollection
  description: A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeometryCollection
    typesTitle: string
  - name: geometries
    description: Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: GeoJsonGeometryCollection
      isArray: true
    - uid: GeoJsonMultiPolygon
      isArray: true
    - uid: GeoJsonMultiPoint
      isArray: true
    - uid: GeoJsonPoint
      isArray: true
    - uid: GeoJsonLineString
      isArray: true
    - uid: GeoJsonMultiLineString
      isArray: true
    - uid: GeoJsonPolygon
      isArray: true
    typesTitle: GeoJsonGeometry[]
- name: GeoJsonMultiPolygon
  description: A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPolygon
    typesTitle: string
  - name: coordinates
    description: Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: array
      isArray: true
- name: RouteDirections
  description: This object is returned from a successful Route Directions call
  kind: object
  properties:
  - name: formatVersion
    isReadyOnly: true
    description: Format Version property
    types:
    - uid: string
  - name: routes
    isReadyOnly: true
    description: Routes array
    types:
    - uid: Route
      isArray: true
  - name: optimizedWaypoints
    isReadyOnly: true
    description: "Optimized sequence of waypoints. It shows the index from the user provided waypoint sequence for the original and optimized list. For instance, a response: \n\n```\n<optimizedWaypoints>\n<waypoint providedIndex=\"0\" optimizedIndex=\"1\"/>\n<waypoint providedIndex=\"1\" optimizedIndex=\"2\"/>\n<waypoint providedIndex=\"2\" optimizedIndex=\"0\"/>\n</optimizedWaypoints>\n```\n\nmeans that the original sequence is [0, 1, 2] and optimized sequence is [1, 2, 0]. Since the index starts by 0 the original is \"first, second, third\" while the optimized is \"second, third, first\"."
    types:
    - uid: RouteOptimizedWaypoint
      isArray: true
  - name: report
    description: Reports the effective settings used in the current call.
    types:
    - uid: RouteReport
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: RouteDirectionParameters
  description: Post body parameters for Route directions.
  kind: object
  properties:
  - name: supportingPoints
    description: >-
      A GeoJSON Geometry collection representing sequence of coordinates used as input for route reconstruction and for calculating zero or more alternative routes to this reference route.
        - The provided sequence of supporting points is used as input for route reconstruction.
        - The alternative routes are calculated between the origin and destination points specified in the base path parameter locations.
        - If both _minDeviationDistance_ and _minDeviationTime_ are set to zero, then these origin and destination points are
        expected to be at (or very near) the beginning and end of the reference route, respectively.
        - Intermediate locations (_waypoints_) are not supported when using <_supportingPoints_>.
        - The reference route may contain traffic incidents of type _ROAD_CLOSURE_, which are
        ignored for the calculation of the reference route's travel time and traffic delay.
       Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points) for details.
    types:
    - uid: GeoJsonGeometryCollection
  - name: avoidVignette
    description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which all toll roads with vignettes are to be avoided, e.g. "AUS,CHE". Toll roads with vignettes in countries not in the list are unaffected. Note: It is an error to specify both **avoidVignette** and **allowVignette**.'
    types:
    - uid: string
      isArray: true
  - name: allowVignette
    description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes of countries in which toll roads with vignettes are allowed, e.g. "AUS,CHE". Specifying **allowVignette** with some countries X is equivalent to specifying **avoidVignette** with all countries but X. Specifying **allowVignette** with an empty list is the same as avoiding all toll roads with vignettes. Note: It is an error to specify both **avoidVignette** and **allowVignette**.'
    types:
    - uid: string
      isArray: true
  - name: avoidAreas
    description: A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle polygons are supported. The maximum size of a rectangle is about 160x160 km. Maximum number of avoided areas is **10**. It cannot cross the 180th meridian. It must be between -80 and +80 degrees of latitude.
    types:
    - uid: GeoJsonMultiPolygon
- name: GeoJsonGeometry
  description: A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeoJsonObjectType
- name: Route
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Summary object
    types:
    - uid: RouteSummary
  - name: legs
    isReadyOnly: true
    description: Legs array
    types:
    - uid: RouteLeg
      isArray: true
  - name: sections
    isReadyOnly: true
    description: Sections array
    types:
    - uid: RouteSection
      isArray: true
  - name: guidance
    isReadyOnly: true
    description: Contains guidance related elements. This field is present only when guidance was requested and is available.
    types:
    - uid: RouteGuidance
- name: RouteOptimizedWaypoint
  description: Optimized way point object.
  kind: object
  properties:
  - name: providedIndex
    isReadyOnly: true
    description: Way point index provided by the user.
    types:
    - uid: integer
  - name: optimizedIndex
    isReadyOnly: true
    description: Optimized way point index from the system.
    types:
    - uid: integer
- name: RouteReport
  description: Reports the effective settings used in the current call.
  kind: object
  properties:
  - name: effectiveSettings
    isReadyOnly: true
    description: Effective parameters or data used when calling this Route API.
    types:
    - uid: EffectiveSetting
      isArray: true
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: GeoJsonMultiPoint
  description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPoint
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiPoint` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonPoint
  description: A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Point
    typesTitle: string
  - name: coordinates
    description: A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.
    types:
    - uid: number
      isArray: true
- name: GeoJsonLineString
  description: A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: LineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson LineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiLineString
  description: A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiLineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiLineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonPolygon
  description: A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Polygon
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson Polygon` geometry type.
    types:
    - uid: array
      isArray: true
- name: RouteSummary
  description: Summary object
  kind: object
  properties:
  - name: lengthInMeters
    isReadyOnly: true
    description: Length In Meters property
    types:
    - uid: integer
  - name: travelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.
    types:
    - uid: integer
  - name: trafficDelayInSeconds
    isReadyOnly: true
    description: Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0. To return additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to be added.
    types:
    - uid: integer
  - name: departureTime
    isReadyOnly: true
    description: The estimated departure time for the route or leg.
    types:
    - uid: string
  - name: arrivalTime
    isReadyOnly: true
    description: The estimated arrival time for the route or leg.
    types:
    - uid: string
- name: RouteLeg
  description: A description of a part of a route, comprised of a list of points. Each additional waypoint provided in the request will result in an additional leg in the returned route.
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Summary object for route section.
    types:
    - uid: RouteLegSummary
  - name: points
    isReadyOnly: true
    description: Points array
    types:
    - uid: LatLongPair
      isArray: true
- name: RouteSection
  description: Route sections contain additional information about parts of a route. Each section contains at least the elements `startPointIndex`, `endPointIndex`, and `sectionType`.
  kind: object
  properties:
  - name: startPointIndex
    isReadyOnly: true
    description: Index of the first point (offset 0) in the route this section applies to.
    types:
    - uid: integer
  - name: endPointIndex
    isReadyOnly: true
    description: Index of the last point (offset 0) in the route this section applies to.
    types:
    - uid: integer
  - name: sectionType
    isReadyOnly: true
    description: Section types of the reported route response
    types:
    - uid: ResponseSectionType
  - name: travelMode
    isReadyOnly: true
    description: Travel mode for the calculated route. The value will be set to `other` if the requested mode of transport is not possible in this section
    types:
    - uid: ResponseTravelMode
  - name: simpleCategory
    isReadyOnly: true
    description: Type of the incident. Can currently be JAM, ROAD_WORK, ROAD_CLOSURE, or OTHER. See "tec" for detailed information.
    types:
    - uid: SimpleCategory
  - name: effectiveSpeedInKmh
    isReadyOnly: true
    description: Effective speed of the incident in km/h, averaged over its entire length.
    types:
    - uid: integer
  - name: delayInSeconds
    isReadyOnly: true
    description: Delay in seconds caused by the incident.
    types:
    - uid: integer
  - name: magnitudeOfDelay
    isReadyOnly: true
    description: 'The magnitude of delay caused by the incident. These values correspond to the values of the response field ty of the [Get Traffic Incident Detail API](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentdetail). '
    types:
    - uid: DelayMagnitude
  - name: tec
    description: Details of the traffic event, using definitions in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can contain effectCode and causes elements.
    types:
    - uid: RouteSectionTec
- name: RouteGuidance
  description: Contains guidance related elements. This field is present only when guidance was requested and is available.
  kind: object
  properties:
  - name: instructions
    isReadyOnly: true
    description: A list of instructions describing maneuvers.
    types:
    - uid: RouteInstruction
      isArray: true
  - name: instructionGroups
    isReadyOnly: true
    description: Groups a sequence of instruction elements which are related to each other.
    types:
    - uid: RouteInstructionGroup
      isArray: true
- name: EffectiveSetting
  description: Effective parameter or data used when calling this Route API.
  kind: object
  properties:
  - name: key
    isReadyOnly: true
    description: Name of the parameter used.
    types:
    - uid: string
  - name: value
    isReadyOnly: true
    description: Value of the parameter used.
    types:
    - uid: string
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
- name: RouteLegSummary
  description: Summary object for route section.
  kind: object
  properties:
  - name: lengthInMeters
    isReadyOnly: true
    description: Length In Meters property
    types:
    - uid: integer
  - name: travelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time in seconds property that includes the delay due to real-time traffic. Note that even when traffic=false travelTimeInSeconds still includes the delay due to traffic. If DepartAt is in the future, travel time is calculated using time-dependent historic traffic data.
    types:
    - uid: integer
  - name: trafficDelayInSeconds
    isReadyOnly: true
    description: Estimated delay in seconds caused by the real-time incident(s) according to traffic information. For routes planned with departure time in the future, delays is always 0. To return additional travel times using different types of traffic information, parameter computeTravelTimeFor=all needs to be added.
    types:
    - uid: integer
  - name: departureTime
    isReadyOnly: true
    description: The estimated departure time for the route or leg.
    types:
    - uid: string
  - name: arrivalTime
    isReadyOnly: true
    description: The estimated arrival time for the route or leg.
    types:
    - uid: string
  - name: noTrafficTravelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time calculated as if there are no delays on the route due to traffic conditions (e.g. congestion). Included only if computeTravelTimeFor = all is used in the query.
    types:
    - uid: integer
  - name: historicTrafficTravelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time calculated using time-dependent historic traffic data. Included only if computeTravelTimeFor = all is used in the query.
    types:
    - uid: integer
  - name: liveTrafficIncidentsTravelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time calculated using real-time speed data. Included only if computeTravelTimeFor = all is used in the query.
    types:
    - uid: integer
  - name: fuelConsumptionInLiters
    isReadyOnly: true
    description: Estimated fuel consumption in liters using the Combustion Consumption Model. Included if vehicleEngineType is set to _combustion_ and constantSpeedConsumptionInLitersPerHundredkm is specified. The value will be non-negative.
    types:
    - uid: number
  - name: batteryConsumptionInkWh
    isReadyOnly: true
    description: Estimated electric energy consumption in kilowatt hours (kWh) using the Electric Consumption Model. Included if vehicleEngineType is set to electric and constantSpeedConsumptionInkWhPerHundredkm is specified. The value of batteryConsumptionInkWh includes the recuperated electric energy and can therefore be negative (which indicates gaining energy). If both maxChargeInkWh and currentChargeInkWh are specified, recuperation will be capped to ensure that the battery charge level never exceeds maxChargeInkWh. If neither maxChargeInkWh nor currentChargeInkWh are specified, unconstrained recuperation is assumed in the consumption calculation.
    types:
    - uid: number
- name: LatLongPair
  description: A location represented as a latitude and longitude.
  kind: object
  properties:
  - name: latitude
    description: Latitude property
    types:
    - uid: number
  - name: longitude
    description: Longitude property
    types:
    - uid: number
- name: ResponseSectionType
  description: Section types of the reported route response
  kind: enum
  properties:
  - name: CAR_TRAIN
    description: Sections of the route that are cars or trains.
    types:
    - uid: string
  - name: COUNTRY
    description: Sections indicating which countries the route is in.
    types:
    - uid: string
  - name: FERRY
    description: Sections of the route that are ferries.
    types:
    - uid: string
  - name: MOTORWAY
    description: Sections of the route that are motorways.
    types:
    - uid: string
  - name: PEDESTRIAN
    description: Sections of the route that are only suited for pedestrians.
    types:
    - uid: string
  - name: TOLL_ROAD
    description: Sections of the route that require a toll to be payed.
    types:
    - uid: string
  - name: TOLL_VIGNETTE
    description: Sections of the route that require a toll vignette to be present.
    types:
    - uid: string
  - name: TRAFFIC
    description: Sections of the route that contain traffic information.
    types:
    - uid: string
  - name: TRAVEL_MODE
    description: Sections in relation to the request parameter `travelMode`.
    types:
    - uid: string
  - name: TUNNEL
    description: Sections of the route that are tunnels.
    types:
    - uid: string
  - name: CARPOOL
    description: Sections of the route that require use of carpool (HOV/High Occupancy Vehicle) lanes.
    types:
    - uid: string
  - name: URBAN
    description: Sections of the route that are located within urban areas.
    types:
    - uid: string
- name: ResponseTravelMode
  description: Travel mode for the calculated route. The value will be set to `other` if the requested mode of transport is not possible in this section
  kind: enum
  properties:
  - name: car
    description: The returned routes are optimized for cars.
    types:
    - uid: string
  - name: truck
    description: The returned routes are optimized for commercial vehicles, like for trucks.
    types:
    - uid: string
  - name: taxi
    description: The returned routes are optimized for taxis. BETA functionality.
    types:
    - uid: string
  - name: bus
    description: The returned routes are optimized for buses, including the use of bus only lanes. BETA functionality.
    types:
    - uid: string
  - name: van
    description: The returned routes are optimized for vans. BETA functionality.
    types:
    - uid: string
  - name: motorcycle
    description: The returned routes are optimized for motorcycles. BETA functionality.
    types:
    - uid: string
  - name: bicycle
    description: The returned routes are optimized for bicycles, including use of bicycle lanes.
    types:
    - uid: string
  - name: pedestrian
    description: The returned routes are optimized for pedestrians, including the use of sidewalks.
    types:
    - uid: string
  - name: other
    description: The given mode of transport is not possible in this section
    types:
    - uid: string
- name: SimpleCategory
  description: Type of the incident. Can currently be JAM, ROAD_WORK, ROAD_CLOSURE, or OTHER. See "tec" for detailed information.
  kind: enum
  properties:
  - name: JAM
    description: Traffic jam.
    types:
    - uid: string
  - name: ROAD_WORK
    description: Road work.
    types:
    - uid: string
  - name: ROAD_CLOSURE
    description: Road closure.
    types:
    - uid: string
  - name: OTHER
    description: Other.
    types:
    - uid: string
- name: DelayMagnitude
  description: 'The magnitude of delay caused by the incident. These values correspond to the values of the response field ty of the [Get Traffic Incident Detail API](https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentdetail). '
  kind: enum
  properties:
  - name: "0"
    description: Unknown.
    types:
    - uid: string
  - name: "1"
    description: Minor.
    types:
    - uid: string
  - name: "2"
    description: Moderate.
    types:
    - uid: string
  - name: "3"
    description: Major.
    types:
    - uid: string
  - name: "4"
    description: Undefined, used for road closures and other indefinite delays.
    types:
    - uid: string
- name: RouteSectionTec
  description: Details of the traffic event, using definitions in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can contain effectCode and causes elements.
  kind: object
  properties:
  - name: effectCode
    isReadyOnly: true
    description: The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard. Can be used to color-code traffic events according to severity.
    types:
    - uid: integer
  - name: causes
    description: Causes array
    types:
    - uid: RouteSectionTecCause
      isArray: true
- name: RouteInstruction
  description: A set of attributes describing a maneuver, e.g. 'Turn right', 'Keep left', 'Take the ferry', 'Take the motorway', 'Arrive'.
  kind: object
  properties:
  - name: routeOffsetInMeters
    isReadyOnly: true
    description: Distance from the start of the route to the point of the instruction.
    types:
    - uid: integer
  - name: travelTimeInSeconds
    isReadyOnly: true
    description: Estimated travel time up to the point corresponding to routeOffsetInMeters.
    types:
    - uid: integer
  - name: point
    description: A location represented as a latitude and longitude.
    types:
    - uid: LatLongPair
  - name: pointIndex
    isReadyOnly: true
    description: The index of the point in the list of polyline "points" corresponding to the point of the instruction.
    types:
    - uid: integer
  - name: instructionType
    description: Type of the instruction, e.g., turn or change of road form.
    types:
    - uid: GuidanceInstructionType
  - name: roadNumbers
    isReadyOnly: true
    description: 'The road number(s) of the next significant road segment(s) after the maneuver, or of the road(s) to be followed. Example: ["E34", "N205"]'
    types:
    - uid: string
      isArray: true
  - name: exitNumber
    isReadyOnly: true
    description: The number(s) of a highway exit taken by the current maneuver. If an exit has multiple exit numbers, they will be separated by "," and possibly aggregated by "-", e.g., "10, 13-15".
    types:
    - uid: string
  - name: street
    isReadyOnly: true
    description: Street name of the next significant road segment after the maneuver, or of the street that should be followed.
    types:
    - uid: string
  - name: signpostText
    isReadyOnly: true
    description: The text on a signpost which is most relevant to the maneuver, or to the direction that should be followed.
    types:
    - uid: string
  - name: countryCode
    isReadyOnly: true
    description: 3-character [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-3 country code. E.g. USA.
    types:
    - uid: string
  - name: stateCode
    isReadyOnly: true
    description: A subdivision (e.g., state) of the country, represented by the second part of an [ISO 3166-2](https://www.iso.org/standard/63546.html) code. This is only available for some countries like the US, Canada, and Mexico.
    types:
    - uid: string
  - name: junctionType
    isReadyOnly: true
    description: The type of the junction where the maneuver takes place. For larger roundabouts, two separate instructions are generated for entering and leaving the roundabout.
    types:
    - uid: JunctionType
  - name: turnAngleInDecimalDegrees
    isReadyOnly: true
    description: >-
      Indicates the direction of an instruction. If junctionType indicates a turn instruction:

        * 180 = U-turn
        * [-179, -1] = Left turn
        * 0 = Straight on (a '0 degree' turn)
        * [1, 179] = Right turn

      If junctionType indicates a bifurcation instruction:

        * <0 - keep left
        * \>0 - keep right
    types:
    - uid: integer
  - name: roundaboutExitNumber
    isReadyOnly: true
    description: This indicates which exit to take at a roundabout.
    types:
    - uid: string
  - name: possibleCombineWithNext
    isReadyOnly: true
    description: It is possible to optionally combine the instruction with the next one. This can be used to build messages like "Turn left and then turn right".
    types:
    - uid: boolean
  - name: drivingSide
    isReadyOnly: true
    description: Indicates left-hand vs. right-hand side driving at the point of the maneuver.
    types:
    - uid: DrivingSide
  - name: maneuver
    isReadyOnly: true
    description: A code identifying the maneuver.
    types:
    - uid: GuidanceManeuver
  - name: message
    isReadyOnly: true
    description: A human-readable message for the maneuver.
    types:
    - uid: string
  - name: combinedMessage
    isReadyOnly: true
    description: >-
      A human-readable message for the maneuver combined with the message from the next instruction. Sometimes it is possible to combine two successive instructions into a single instruction making it easier to follow. When this is the case the possibleCombineWithNext flag will be true. For example:


      ```

      10. Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam

      11. Follow Einsteinweg/A10/E22 towards Ring Amsterdam

      ```


      The possibleCombineWithNext flag on instruction 10 is true. This indicates to the clients of coded guidance that it can be combined with instruction 11. The instructions will be combined automatically for clients requesting human-readable guidance. The combinedMessage field contains the combined message:


      ```

      Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam

      then follow Einsteinweg/A10/E22 towards Ring Amsterdam.

      ```
    types:
    - uid: string
- name: RouteInstructionGroup
  description: Groups a sequence of instruction elements which are related to each other. The sequence range is constrained with firstInstructionIndex and lastInstructionIndex. When human-readable text messages are requested for guidance (instructionType=text or tagged), then the instructionGroup has a summary message returned when available.
  kind: object
  properties:
  - name: firstInstructionIndex
    isReadyOnly: true
    description: Index of the first instruction in the instructions and belonging to this group.
    types:
    - uid: integer
  - name: lastInstructionIndex
    isReadyOnly: true
    description: Index of the last instruction in the instructions and belonging to this group.
    types:
    - uid: integer
  - name: groupLengthInMeters
    isReadyOnly: true
    description: Length of the group.
    types:
    - uid: integer
  - name: groupMessage
    isReadyOnly: true
    description: Summary message when human-readable text messages are requested for guidance (instructionType=text or tagged).
    types:
    - uid: string
- name: RouteSectionTecCause
  description: The cause of the traffic event. Can contain mainCauseCode and subCauseCode elements. Can be used to define iconography and descriptions.
  kind: object
  properties:
  - name: mainCauseCode
    isReadyOnly: true
    description: The main cause of the traffic event. Contains a value in the tec002:CauseCode table, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard.
    types:
    - uid: integer
  - name: subCauseCode
    isReadyOnly: true
    description: The subcause of the traffic event. Contains a value in the sub cause table defined by the mainCauseCode, as defined in the [TPEG2-TEC](https://www.iso.org/standard/63116.html) standard.
    types:
    - uid: integer
- name: GuidanceInstructionType
  description: Type of the instruction, e.g., turn or change of road form.
  kind: enum
  properties:
  - name: TURN
    description: Turn.
    types:
    - uid: string
  - name: ROAD_CHANGE
    description: Road Change.
    types:
    - uid: string
  - name: LOCATION_DEPARTURE
    description: Departure location.
    types:
    - uid: string
  - name: LOCATION_ARRIVAL
    description: Arrival location.
    types:
    - uid: string
  - name: DIRECTION_INFO
    description: Direction information.
    types:
    - uid: string
  - name: LOCATION_WAYPOINT
    description: Way point location.
    types:
    - uid: string
- name: JunctionType
  description: The type of the junction where the maneuver takes place. For larger roundabouts, two separate instructions are generated for entering and leaving the roundabout.
  kind: enum
  properties:
  - name: REGULAR
    description: regular
    types:
    - uid: string
  - name: ROUNDABOUT
    description: roundabout
    types:
    - uid: string
  - name: BIFURCATION
    description: bifurcation
    types:
    - uid: string
- name: DrivingSide
  description: Indicates left-hand vs. right-hand side driving at the point of the maneuver.
  kind: enum
  properties:
  - name: LEFT
    description: Left side.
    types:
    - uid: string
  - name: RIGHT
    description: Right side.
    types:
    - uid: string
- name: GuidanceManeuver
  description: A code identifying the maneuver.
  kind: enum
  properties:
  - name: ARRIVE
    description: You have arrived.
    types:
    - uid: string
  - name: ARRIVE_LEFT
    description: You have arrived. Your destination is on the left.
    types:
    - uid: string
  - name: ARRIVE_RIGHT
    description: You have arrived. Your destination is on the right.
    types:
    - uid: string
  - name: DEPART
    description: Leave.
    types:
    - uid: string
  - name: STRAIGHT
    description: Keep straight on.
    types:
    - uid: string
  - name: KEEP_RIGHT
    description: Keep right.
    types:
    - uid: string
  - name: BEAR_RIGHT
    description: Bear right.
    types:
    - uid: string
  - name: TURN_RIGHT
    description: Turn right.
    types:
    - uid: string
  - name: SHARP_RIGHT
    description: Turn sharp right.
    types:
    - uid: string
  - name: KEEP_LEFT
    description: Keep left.
    types:
    - uid: string
  - name: BEAR_LEFT
    description: Bear left.
    types:
    - uid: string
  - name: TURN_LEFT
    description: Turn left.
    types:
    - uid: string
  - name: SHARP_LEFT
    description: Turn sharp left.
    types:
    - uid: string
  - name: MAKE_UTURN
    description: Make a U-turn.
    types:
    - uid: string
  - name: ENTER_MOTORWAY
    description: Take the motorway.
    types:
    - uid: string
  - name: ENTER_FREEWAY
    description: Take the freeway.
    types:
    - uid: string
  - name: ENTER_HIGHWAY
    description: Take the highway.
    types:
    - uid: string
  - name: TAKE_EXIT
    description: Take the exit.
    types:
    - uid: string
  - name: MOTORWAY_EXIT_LEFT
    description: Take the left exit.
    types:
    - uid: string
  - name: MOTORWAY_EXIT_RIGHT
    description: Take the right exit.
    types:
    - uid: string
  - name: TAKE_FERRY
    description: Take the ferry.
    types:
    - uid: string
  - name: ROUNDABOUT_CROSS
    description: Cross the roundabout.
    types:
    - uid: string
  - name: ROUNDABOUT_RIGHT
    description: At the roundabout take the exit on the right.
    types:
    - uid: string
  - name: ROUNDABOUT_LEFT
    description: At the roundabout take the exit on the left.
    types:
    - uid: string
  - name: ROUNDABOUT_BACK
    description: Go around the roundabout.
    types:
    - uid: string
  - name: TRY_MAKE_UTURN
    description: Try to make a U-turn.
    types:
    - uid: string
  - name: FOLLOW
    description: Follow.
    types:
    - uid: string
  - name: SWITCH_PARALLEL_ROAD
    description: Switch to the parallel road.
    types:
    - uid: string
  - name: SWITCH_MAIN_ROAD
    description: Switch to the main road.
    types:
    - uid: string
  - name: ENTRANCE_RAMP
    description: Take the ramp.
    types:
    - uid: string
  - name: WAYPOINT_LEFT
    description: You have reached the waypoint. It is on the left.
    types:
    - uid: string
  - name: WAYPOINT_RIGHT
    description: You have reached the waypoint. It is on the right.
    types:
    - uid: string
  - name: WAYPOINT_REACHED
    description: You have reached the waypoint.
    types:
    - uid: string
examples:
- name: Successfully retrieve a route between an origin and a destination with additional parameters in the body
  request:
    uri: POST https://atlas.microsoft.com/route/directions/json?api-version=1.0&query=52.50931,13.42936:52.50274,13.43872&report=effectiveSettings
    body: >-
      {
        "supportingPoints": {
          "type": "GeometryCollection",
          "geometries": [
            {
              "type": "Point",
              "coordinates": [
                13.42936,
                52.5093
              ]
            },
            {
              "type": "Point",
              "coordinates": [
                13.42859,
                52.50844
              ]
            }
          ]
        },
        "avoidVignette": [
          "AUS",
          "CHE"
        ],
        "avoidAreas": {
          "type": "MultiPolygon",
          "coordinates": [
            [
              [
                [
                  -122.39456176757811,
                  47.489368981370724
                ],
                [
                  -122.00454711914061,
                  47.489368981370724
                ],
                [
                  -122.00454711914061,
                  47.65151268066222
                ],
                [
                  -122.39456176757811,
                  47.65151268066222
                ],
                [
                  -122.39456176757811,
                  47.489368981370724
                ]
              ]
            ],
            [
              [
                [
                  100,
                  0
                ],
                [
                  101,
                  0
                ],
                [
                  101,
                  1
                ],
                [
                  100,
                  1
                ],
                [
                  100,
                  0
                ]
              ]
            ]
          ]
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "formatVersion": "0.0.12",
        "routes": [
          {
            "summary": {
              "lengthInMeters": 1147,
              "travelTimeInSeconds": 162,
              "trafficDelayInSeconds": 0,
              "departureTime": "2017-09-07T16:56:58+00:00",
              "arrivalTime": "2017-09-07T16:59:40+00:00"
            },
            "legs": [
              {
                "summary": {
                  "lengthInMeters": 1147,
                  "travelTimeInSeconds": 162,
                  "trafficDelayInSeconds": 0,
                  "departureTime": "2017-09-07T16:56:58+00:00",
                  "arrivalTime": "2017-09-07T16:59:40+00:00"
                },
                "points": [
                  {
                    "latitude": 52.50931,
                    "longitude": 13.42937
                  },
                  {
                    "latitude": 52.50904,
                    "longitude": 13.42912
                  },
                  {
                    "latitude": 52.50894,
                    "longitude": 13.42904
                  },
                  {
                    "latitude": 52.50867,
                    "longitude": 13.42879
                  },
                  {
                    "latitude": 52.5084,
                    "longitude": 13.42857
                  },
                  {
                    "latitude": 52.50791,
                    "longitude": 13.42824
                  },
                  {
                    "latitude": 52.50757,
                    "longitude": 13.42772
                  },
                  {
                    "latitude": 52.50735,
                    "longitude": 13.42823
                  },
                  {
                    "latitude": 52.5073,
                    "longitude": 13.42836
                  },
                  {
                    "latitude": 52.50573,
                    "longitude": 13.43194
                  },
                  {
                    "latitude": 52.50512,
                    "longitude": 13.43336
                  },
                  {
                    "latitude": 52.50464,
                    "longitude": 13.43451
                  },
                  {
                    "latitude": 52.5045,
                    "longitude": 13.43481
                  },
                  {
                    "latitude": 52.50443,
                    "longitude": 13.43498
                  },
                  {
                    "latitude": 52.50343,
                    "longitude": 13.43737
                  },
                  {
                    "latitude": 52.50274,
                    "longitude": 13.43872
                  }
                ]
              }
            ],
            "sections": [
              {
                "startPointIndex": 0,
                "endPointIndex": 15,
                "sectionType": "TRAVEL_MODE",
                "travelMode": "car"
              }
            ]
          }
        ]
      }
security:
- name: AADToken
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: https://atlas.microsoft.com/.default
    description: https://atlas.microsoft.com/.default
- name: subscription-key
  type: apiKey
  description: >-
    This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.

     For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be securely stored.
  in: query
- name: SAS Token
  type: apiKey
  description: >-
    This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.

     For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.
  in: header
metadata:
  description: >-
    **Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).



    Returns  a route between an origin and a destination, passing through waypoints if t
errorCodes: []
