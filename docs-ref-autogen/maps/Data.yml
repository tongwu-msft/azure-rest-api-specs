### YamlMime:RESTOperationGroup
uid: atlas.microsoft.com.maps.data
name: Data
apiVersion: "1.0"
service: Maps
operations:
- uid: atlas.microsoft.com.maps.data.deletepreview
  summary: "**Data Delete API**\n\n**Applies to:** S1 pricing tier.\n<br>\n\nThis API allows the caller to delete a previously uploaded data content.<br>    \nYou can use this API in a scenario like removing geofences previously uploaded using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). You can also use this API to delete old/unused uploaded content and create space for new content.\n\n\n### Submit Delete Request\n\nTo delete your content you will issue a `DELETE` request where the path will contain the `udid` of the data to delete.<br>    \nFor example, to delete a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response. \n\n\n### Delete Data Response\n\nThe Data Delete API returns a HTTP `204 No Content` response with an empty body, if the data resource was deleted successfully.<br>    \nA HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.    "
- uid: atlas.microsoft.com.maps.data.downloadpreview
  summary: "**Data Download API**\n\n**Applies to:** S1 pricing tier.\n<br>\n\nThis API allows the caller to download a previously uploaded data content.<br>    \nYou can use this API in a scenario like downloading an existing collection of geofences uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). \n\n\n### Submit Download Request\n\nTo download your content you will use a `GET` request where the path will contain the `udid` of the data to download. Optionally, you can also pass in an `Accept` header to specify a preference for the `Content-Type` of the data response. <br>\nFor example, to download a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response and set the `Accept` header to either one of the following media types: \n    \n  - `application/json`\n  - `application/vnd.geo+json`\n  - `application/octet-stream`\n\n\n### Download Data Response\n\nThe Download API will return a HTTP `200 OK` response if the data resource with the passed-in `udid` is found, where the response body will contain the content of the data resource.<br>\nA HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.<br>\n\nHere's a sample response body for a simple geofence represented in `GeoJSON` uploaded previously using the Upload API:\n<br>\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```"
- uid: atlas.microsoft.com.maps.data.listpreview
  summary: "**Data List API**\n\n**Applies to:** S1 pricing tier.\n<br>\n\nThis API allows the caller to fetch a list of all content uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview).   \n\n\n### Submit List Request\n\nTo list all your map data content you will issue a `GET` request with no additional parameters.\n\n\n### List Data Response\n\nThe Data List API returns the complete list of all data in `json` format. The response contains the following details for each data resource:\n\n  > udid - The unique data id for the data resource.\n\n  > location - The location of the data resource. Execute a HTTP `GET` on this location to download the data.\n\n\nHere's a sample response returning the `udid` and `location` of 3 data resources:  \n\n<br>\n\n```json\n{\n    \"mapDataList\": \n    [\n        {\n            \"udid\": \"9a1288fa-1858-4a3b-b68d-13a8j5af7d7c\",\n            \"location\": \"https://atlas.microsoft.com/mapData/9a1288fa-1858-4a3b-b68d-13a8j5af7d7c?api-version=1.0\",\n            \"sizeInBytes\": 29920,\n            \"uploadStatus\": \"Completed\"\n        },\n        {\n            \"udid\": \"8b1288fa-1958-4a2b-b68e-13a7i5af7d7c\",\n            \"location\": \"https://atlas.microsoft.com/mapData/8b1288fa-1958-4a2b-b68e-13a7i5af7d7c?api-version=1.0\",\n            \"sizeInBytes\": 1339,\n            \"uploadStatus\": \"Completed\"\n        },\n        {\n            \"udid\": \"7c1288fa-2058-4a1b-b68f-13a6h5af7d7c\",\n            \"location\": \"https://atlas.microsoft.com/mapData/7c1288fa-2058-4a1b-b68f-13a6h5af7d7c?api-version=1.0\",\n            \"sizeInBytes\": 1650,\n            \"uploadStatus\": \"Pending\"\n        }]\n}\n```\n\n<br>"
- uid: atlas.microsoft.com.maps.data.updatepreview
  summary: "**Data Update API**\n\n**Applies to:** S1 pricing tier.\n<br>\n\nThis API allows the caller to update a previously uploaded data content.<br>    \nYou can use this API in a scenario like adding/removing geofences to/from an existing collection of geofences uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). <br>\nPlease note that the Update API will *replace/override* the existing data content. \n\n### Submit Update Request\n\nTo update your content you will use a `PUT` request where the request body will contain the new data that will replace the existing data, the `Content-Type` header will be set to the content type of the data and the path will contain the `udid` of the data to update. <br>    \nFor example, to update a collection of geofences previously uploaded using the Upload API, set the request body to the new geofence content, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response and set the `Content-Type` header to either one of the following media types: \n    \n  - `application/json`\n  - `application/vnd.geo+json`\n  - `application/octet-stream`\n\n\nHere's a sample request body for updating a simple Geofence represented as a circle geometry in `GeoJSON` using a center point and a radius:\n\n<br>\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```\n\n<br>The previously uploaded geofence had a radius of 100m. This request will update it to 500m.<br>\nThe Data Update API is a long-running request with the following sequence of operations:\n<br>\n#### Send the update request\n\n1. Client sends a Data Update `PUT` request to Azure Maps\n\n2. The server will respond with one of the following:\n \n   > HTTP `202 Accepted` - Update request has been accepted (but not completed yet).\n\n   > HTTP `Error` - There was an error processing your Update request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the Update request was accepted successfully, the `Location` header in the response contains the _status URI_ to check the current status of the long-running update request. This _status URI_ looks like the following:    \n    \n```\nhttps://atlas.microsoft.com/mapData/operations/{updateOperationStatusId}?api-version=1.0    \n```\n\n<br> Note: Please remember to add AUTH information (subscription-key/azure_auth - See [Security](#security)) to the _status URI_ before running it.\n\n<br>\n\n#### Update request \"Accepted\" but still \"In Progress\"\n\n1. Client issues a `GET` request on the _status URI_ obtained above to check the current status of the update request.\n\n2. At this point, if the update request is still being _processed_ by Azure Maps, the client receives a HTTP `200 OK` with the response body containing the current status for the request:\n\n\n```json\n{\n    \"operationId\": \"{operationId}\",\n    \"status\": \"Running\"\n}\n```\n\n<br>\n\n#### Update request \"Completed\" successfully\n\n1. Client issues another `GET` request on the _status URI_ to check the current update status.\n\n2. At this point, if the update request processing has completed successfully, the client receives a HTTP `201 Created` response.\n\n3. The update request was successful and the data has been updated. The response body(and the `Location` header) contains the `resourceLocation` of the updated content and looks like the following: \n\n\n```json\n{\n    \"operationId\": \"{operationId}\",\n    \"status\": \"Succeeded\",\n    \"resourceLocation\": \"https://atlas.microsoft.com/mapData/metadata/{resourceId}?api-version=1.0\"\n}\n```\n\n4. At this point, the client can issue another `GET` request on the `resourceLocation` URI to access the content metadata. The response body contains a unique data id `udid` for the updated content, the `location` to access/download the content in the future and some other metadata about the content like `created`/`updated` date, `size` etc. This looks something like:\n\n\n```json\n{\n    \"udid\": \"{udid}\",\n    \"location\": \"https://atlas.microsoft.com/mapData/{udid}?api-version=1.0\",\n    \"created\": \"2020-02-03T02:32:25.0509366+00:00,\n    \"updated\": \"2020-02-11T06:12:13.0309351+00:00,\n    \"sizeInBytes\": 766,\n    \"uploadStatus\": \"Completed\"\n}\n```\n\n<br>\n\n#### Update request \"Failed\"\n\n1. Client issues another `GET` request on the _status URI_ to check the current update status.\n\n2. At this point, if the upload request processing has failed, the client receives a HTTP `200 OK` response with the response body containing a list of errors.\n\n3. The request has failed and the data has not been created. The response body will contain a list of errors encountered while processing the update request:\n\n\n```json\n{\n    \"error\": \n    {\n      \"code\": \"400 Bad Request\",\n      \"message\": \"Upload request failed. Your data has been removed as we encountered the following problems with it: Map data is not a valid GeoJSON geometry.\"\n    }         \n}\n```\n\n<br>\n\n### Data Update Limits\n\nPlease, be aware that currently every Azure Maps account gets a free storage limit of 50 MB. This means that you can either upload 1 document of size 50 MB or 5 documents, each of size 10 MB or 100 documents, each of size 500 KB and so on. Once the free storage limit is reached, all the new Update API calls will return a `409 Conflict` http error response. You can always use the [Data Delete API](https://docs.microsoft.com/en-us/rest/api/maps/data/deletepreview) to delete old/unused content and create space for new uploads/updates.\n\n<br>"
- uid: atlas.microsoft.com.maps.data.uploadpreview
  summary: "**Data Upload API**\n\n**Applies to:** S1 pricing tier.\n<br>\n\nThis API allows the caller to upload data content to the Azure Maps service.<br>    \nYou can use this API in a scenario like uploading a collection of Geofences in `GeoJSON` format for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). \n\n### Submit Upload Request\n\nTo upload your content you will use a `POST` request where the request body will contain the data to upload, the `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter can contain the sharing level for the data and the `Content-Type` header will be set to the content type of the data. <br>    \nFor example, to upload a collection of geofences in `GeoJSON` format, set the request body to the geofence content, set the `dataFormat` query parameter to _geojson_ and set the `Content-Type` header to either one of the following media types: \n    \n  - `application/json`\n  - `application/vnd.geo+json`\n  - `application/octet-stream`    \n\n\nHere's a sample request body for uploading a simple Geofence represented as a circle geometry in `GeoJSON` using a center point and a radius:\n\n<br>\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```   \n\n<br>The Data Upload API is a long-running request with the following sequence of operations:\n<br>\n#### Send the upload request\n\n1. Client sends a Data Upload `POST` request to Azure Maps\n\n2. The server will respond with one of the following:\n \n   > HTTP `202 Accepted` - Upload request has been accepted (but not completed yet).\n\n   > HTTP `Error` - There was an error processing your Upload request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the Upload request was accepted successfully, the `Location` header in the response contains the _status URI_ to check the current status of the long-running upload request. This _status URI_ looks like the following:    \n    \n```\nhttps://atlas.microsoft.com/mapData/operations/{uploadOperationStatusId}?api-version=1.0\n```\n\n<br> Note: Please remember to add AUTH information (subscription-key/azure_auth - See [Security](#security)) to the _status URI_ before running it.\n\n<br>\n\n#### Upload request \"Accepted\" but still \"In Progress\"\n\n1. Client issues a `GET` request on the _status URI_ obtained above to check the current status of the upload request.\n\n2. At this point, if the upload request is still being _processed_ by Azure Maps, the client receives a HTTP `200 OK` with the response body containing the current status for the request:\n\n\n```json\n{\n    \"operationId\": \"{operationId}\",\n    \"status\": \"Running\"\n}\n```\n\n<br>\n\n#### Upload request \"Completed\" successfully\n\n1. Client issues another `GET` request on the _status URI_ to check the current upload status.\n\n2. At this point, if the upload request has been processed and completed successfully, the client receives a HTTP `201 Created` response.\n\n3. The upload request was successful and the data has been created. The response body (and the `Location` header) contains the `resourceLocation` of the uploaded content and looks like the following: \n\n\n```json\n{\n    \"operationId\": \"{operationId}\",\n    \"status\": \"Succeeded\",\n    \"resourceLocation\": \"https://atlas.microsoft.com/mapData/metadata/{resourceId}?api-version=1.0\"\n}  \n```\n\n\n4. At this point, the client can issue another `GET` request on the `resourceLocation` URI to access the content metadata. The response body contains a unique data id `udid` for the uploaded content, the `location` to access/download the content in the future and some other metadata about the content like `created`/`updated` date, `size` etc. This looks something like:\n\n\n```json\n{\n    \"udid\": \"{udid}\",\n    \"location\": \"https://atlas.microsoft.com/mapData/{udid}?api-version=1.0\",\n    \"created\": \"2020-02-03T02:32:25.0509366+00:00,\n    \"updated\": \"2020-02-11T06:12:13.0309351+00:00,\n    \"sizeInBytes\": 766,\n    \"uploadStatus\": \"Completed\"\n}\n```\n\n<br>\n\n#### Upload request \"Failed\"\n\n1. Client issues another `GET` request on the _status URI_ to check the current upload status.\n\n2. At this point, if the upload request processing has failed, the client receives a HTTP `200 OK` response with the response body containing a list of errors.\n\n3. The request has failed and the data has not been created. The response body will contain a list of errors encountered while processing the upload request:\n\n\n```json\n{\n    \"error\": \n    {\n      \"code\": \"400 Bad Request\",\n      \"message\": \"Upload request failed. Your data has been removed as we encountered the following problems with it: Map data is not a valid GeoJSON geometry.\"\n    }         \n}\n```\n\n<br>\n\n### Data Upload Limits\n\nPlease, be aware that currently every Azure Maps account gets a free storage limit of 50 MB. This means that you can either upload 1 document of size 50 MB or 5 documents, each of size 10 MB or 100 documents, each of size 500 KB and so on. Once the free storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response. You can always use the [Data Delete API](https://docs.microsoft.com/en-us/rest/api/maps/data/deletepreview) to delete old/unused content and create space for new uploads.\n\n<br>"
