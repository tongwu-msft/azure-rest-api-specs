### YamlMime:RESTOperation
uid: maps.wfs.getfeaturespreview
name: Get Features Preview
service: Maps Creator
groupName: WFS
apiVersion: "1.0"
summary: "Creator makes it possible to develop applications based on your private indoor  map data using Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview). \nA dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.\nThe Get Features API returns the list of features in the given collection."
consumes: []
produces:
- application/json
- application/xml
paths:
- content: GET https://{geography}.atlas.microsoft.com/wfs/datasets/{datasetid}/collections/{collectionId}/items?api-version=1.0
- content: GET https://{geography}.atlas.microsoft.com/wfs/datasets/{datasetid}/collections/{collectionId}/items?subscription-key={subscription-key}&api-version=1.0&limit={limit}&bbox={bbox}&filter={filter}
  isOptional: true
uriParameters:
- name: geography
  in: path
  isRequired: true
  description: This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu.
  types:
  - uid: string
- name: datasetid
  in: path
  isRequired: true
  description: The identifier for the dataset to query from.
  types:
  - uid: string
- name: collectionId
  in: path
  isRequired: true
  description: Identifier (name) of a specific collection
  types:
  - uid: string
- name: subscription-key
  in: query
  description: One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: limit
  in: query
  description: >-
    The optional limit parameter limits the number of features that are presented in the response document.

    Only features that are on the first level of the collection in the response document are counted. Nested objects contained within the explicitly requested features shall not be counted.

    * Minimum = 1 * Maximum = 50 * Default = 10
  types:
  - uid: number
- name: bbox
  in: query
  description: >-
    Only features that have a geometry that intersects the supplied bounding box are selected.

    * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2

    The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.

    For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
  types:
  - uid: string
- name: filter
  in: query
  description: >-
    Filter expression to search for features with specific property values in a given collection. Only feature properties of scalar type and equals operator are supported.

    This is a special parameter where the parameter name is the property name. The scheme for this parameter is {property name}={property value}. Unless "filter" is one of the property names in the collection, "filter" should not be used as a parameter name. To search for features with "name" property value "21N13", use "name=21N13".

    Multiple filters are supported and should be represented as multiple query parameters. E.g., <property1>=<value1>&<property2>=<value2> String values are case sensitive.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Ok
  types:
  - uid: FeatureCollectionGeoJSON
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ODataErrorResponse
- name: 401 Unauthorized
  headers:
  - name: WWW-Authenticate
    value: string
  description: Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.
  types:
  - uid: ODataErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ODataErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ODataErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ODataErrorResponse
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: FeatureCollectionGeoJSON
  kind: object
  properties:
  - name: type
    description: ''
    types:
    - uid: string
  - name: numberReturned
    description: ''
    types:
    - uid: integer
  - name: features
    description: GeoJSON Feature
    types:
    - uid: FeatureGeoJSON
      isArray: true
  - name: links
    description: Links to other WFS endpoints
    types:
    - uid: Link
      isArray: true
- name: ODataErrorResponse
  description: This response object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
- name: FeatureGeoJSON
  description: GeoJSON Feature
  kind: object
  properties:
  - name: type
    description: feature
    types:
    - uid: string
  - name: geometry
    description: This represents the geometry for one or more geographical features (parks, state boundary etc.) and should be a `GeoJSON` compliant type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details.
    types:
    - uid: object
  - name: properties
    description: Additional properties of the feature.
    types:
    - uid: object
  - name: id
    description: Identifier for the feature.
    types:
    - uid: string
  - name: featureType
    description: The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value.
    types:
    - uid: string
- name: Link
  description: Links to other WFS endpoints
  kind: object
  properties:
  - name: href
    description: ''
    types:
    - uid: string
  - name: rel
    description: ''
    types:
    - uid: string
  - name: type
    description: ''
    types:
    - uid: string
  - name: hreflang
    description: ''
    types:
    - uid: string
  - name: title
    description: ''
    types:
    - uid: string
- name: ODataError
  description: This object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The ODataError code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
  - name: details
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
      isArray: true
  - name: target
    isReadyOnly: true
    description: If available, the target causing the error.
    types:
    - uid: string
examples:
- name: Getitems
  request:
    uri: GET https://us.atlas.microsoft.com/wfs/datasets/018fda98-e638-0edf-5ef7-28491ff3bed4/collections/unit/items?subscription-key=[subscription-key]&api-version=1.0&limit=1&bbox=-122, 47, -120, 46
  responses:
  - statusCode: "200"
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "feature",
            "geometry": {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    139.63304057829211,
                    35.457686686108559
                  ],
                  [
                    139.63296283234274,
                    35.457783904258683
                  ],
                  [
                    139.63308672404617,
                    35.457850229062018
                  ],
                  [
                    139.63314516916711,
                    35.457777145699858
                  ],
                  [
                    139.63312747036289,
                    35.457767670747167
                  ],
                  [
                    139.63314677109963,
                    35.457743535881377
                  ],
                  [
                    139.63304057829211,
                    35.457686686108559
                  ]
                ]
              ]
            },
            "properties": {
              "originalId": "ddbbb583-4621-4e11-8859-299d1057e843",
              "categoryId": "CTG10",
              "isOpenArea": false,
              "navigableBy": [
                "pedestrian"
              ],
              "isRoutable": false,
              "routeThroughBehavior": "allowed",
              "nonPublic": false,
              "levelId": "LVL18",
              "occupants": [],
              "addressId": "DIR16",
              "addressRoomNumber": "",
              "name": "21N13",
              "nameSubtitle": "",
              "nameAlt": ""
            },
            "id": "UNIT39",
            "featureType": ""
          }
        ],
        "numberReturned": 1,
        "links": [
          {
            "href": "https://us.atlas.microsoft.com/wfs/dataset/4a25a249-8bd4-3f78-8cd8-eff11751d35b/collections/unit/items?api-version=1.0&limit=1",
            "rel": "self"
          },
          {
            "href": "https://us.atlas.microsoft.com/wfs/dataset/4a25a249-8bd4-3f78-8cd8-eff11751d35b/collections/unit?api-version=1.0",
            "rel": "data"
          },
          {
            "href": "https://us.atlas.microsoft.com/wfs/dataset/4a25a249-8bd4-3f78-8cd8-eff11751d35b/collections/unit/items?n=PMRG4ZLYOQRDUMJMEJYHEZLWEI5C2ML5&api-version=1.0&limit=1",
            "rel": "next"
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes: []
- name: subscription-key
  type: apiKey
  description: This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.
  in: query
errorCodes: []
