### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.weather.gettropicalstormforecast
name: Get Tropical Storm Forecast
service: Maps
groupName: Weather
apiVersion: "1.1"
summary: >-
  **Get Tropical Storm Forecasts**


  **Applies to**: see pricing [tiers](https://aka.ms/AzureMapsPricingTier).


  Get individual government-issued tropical storm forecasts. Information about the forecasted tropical storms includes, location, status, date the forecast was created, window, wind speed and wind radii.
consumes: []
produces:
- application/json
paths:
- content: GET https://atlas.microsoft.com/weather/tropical/storms/forecasts/json?api-version=1.1&year={year}&basinId={basinId}&govId={govId}
- content: GET https://atlas.microsoft.com/weather/tropical/storms/forecasts/json?api-version=1.1&year={year}&basinId={basinId}&govId={govId}&unit={unit}&details={details}&radiiGeometry={radiiGeometry}&windowGeometry={windowGeometry}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API.
  types:
  - uid: string
- name: year
  in: query
  isRequired: true
  description: Year of the cyclone(s)
  types:
  - uid: integer
  format: int32
- name: basinId
  in: query
  isRequired: true
  description: Basin identifier
  types:
  - uid: basinId
- name: govId
  in: query
  isRequired: true
  description: Government storm Id
  types:
  - uid: integer
  format: int32
- name: unit
  in: query
  description: Specifies to return the data in either metric units or imperial units. Default value is metric.
  types:
  - uid: WeatherDataUnit
- name: details
  in: query
  description: When true, wind radii summary data is included in the response
  types:
  - uid: boolean
- name: radiiGeometry
  in: query
  description: When true, wind radii summary data and geoJSON details are included in the response
  types:
  - uid: boolean
- name: windowGeometry
  in: query
  description: When true, window geometry data (geoJSON) is included in the response
  types:
  - uid: boolean
responses:
- name: 200 OK
  description: OK
  types:
  - uid: StormForecastResult
- name: Other Status Codes
  description: An unexpected error occurred.
  types:
  - uid: ErrorResponse
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: basinId
  description: Basin identifier
  kind: enum
  properties:
  - name: AL
    description: Atlantic
    types:
    - uid: string
  - name: EP
    description: Eastern Pacific
    types:
    - uid: string
  - name: SI
    description: Southwest Indian Ocean
    types:
    - uid: string
  - name: NI
    description: North Indian Ocean
    types:
    - uid: string
  - name: CP
    description: Central Pacific
    types:
    - uid: string
  - name: NP
    description: Northwest Pacific
    types:
    - uid: string
  - name: SP
    description: South Pacific
    types:
    - uid: string
- name: WeatherDataUnit
  description: Specifies to return the data in either metric units or imperial units. Default value is metric.
  kind: enum
  properties:
  - name: metric
    description: Return data in metric units. Some example units of metric system are Celsius and kilometer.
    types:
    - uid: string
  - name: imperial
    description: Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
    types:
    - uid: string
- name: StormForecastResult
  description: The list of Government-issued forecasts
  kind: object
  properties:
  - name: results
    description: The list of Government-issued forecasts
    types:
    - uid: StormForecast
      isArray: true
  - name: nextLink
    description: The is the link to the next page of the features returned. If it's the last page, no this field.
    types:
    - uid: string
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: StormForecast
  description: Government-issued storm forecast
  kind: object
  properties:
  - name: dateTime
    description: Datetime the forecast is valid, displayed in ISO8601 format.
    types:
    - uid: string
  - name: initializedDateTime
    description: Datetime the forecast was created, displayed in ISO8601 format.
    types:
    - uid: string
  - name: location
    description: Coordinates of the storm
    types:
    - uid: LatLongPair
  - name: maxWindGust
    description: Maximum wind gust speed associated with the storm. May be NULL.
    types:
    - uid: WeatherUnit
  - name: sustainedWind
    description: Maximum sustained wind speed associated with the storm. May be NULL.
    types:
    - uid: WeatherUnit
  - name: status
    description: Storm status
    types:
    - uid: string
  - name: window
    description: Contains information about the forecast window for the storm during the specified time period (not the entire cone). If windowGeometry=true in the request, this object will include geoJSON details for window geometry.
    types:
    - uid: WeatherWindow
  - name: windRadiiSummary
    description: Displayed when details=true or radiiGeometry=true in the request.
    types:
    - uid: StormWindRadiiSummary
      isArray: true
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: LatLongPair
  description: A location represented as a latitude and longitude.
  kind: object
  properties:
  - name: latitude
    description: Latitude property
    types:
    - uid: number
  - name: longitude
    description: Longitude property
    types:
    - uid: number
- name: WeatherUnit
  description: Specific value of a given unit related to weather.
  kind: object
  properties:
  - name: value
    description: Rounded value.
    types:
    - uid: number
  - name: unit
    description: Type of unit for the returned value.
    types:
    - uid: string
  - name: unitType
    description: Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    types:
    - uid: UnitType
- name: WeatherWindow
  description: Forecast window for the storm
  kind: object
  properties:
  - name: left
    description: Location of the point on the left side of the window at the time of the timeframe.
    types:
    - uid: LatLongPair
  - name: right
    description: Location of the point on the right side of the window at the end of the timeframe.
    types:
    - uid: LatLongPair
  - name: beginDateTime
    description: DateTime of the beginning of the window of movement, displayed in ISO8601 format.
    types:
    - uid: string
  - name: endDateTime
    description: DateTime of the end of the window of movement, displayed in ISO8601 format.
    types:
    - uid: string
  - name: beginStatus
    description: Storm status at the beginning of the window.
    types:
    - uid: string
  - name: endStatus
    description: Storm status at the end of the window.
    types:
    - uid: string
  - name: geometry
    description: Displayed when windowGeometry=true in request. GeoJSON object containing coordinates describing the window of movement during the specified timeframe.
    types:
    - uid: GeoJsonPoint
    - uid: GeoJsonMultiPoint
    - uid: GeoJsonLineString
    - uid: GeoJsonMultiLineString
    - uid: GeoJsonPolygon
    - uid: GeoJsonMultiPolygon
    - uid: GeoJsonGeometryCollection
    typesTitle: GeoJsonGeometry
- name: StormWindRadiiSummary
  description: Displayed when details=true or radiiGeometry=true in the request.
  kind: object
  properties:
  - name: dateTime
    description: DateTime for which the wind radii summary data is valid, displayed in ISO8601 format.
    types:
    - uid: string
  - name: windSpeed
    description: Wind speed associated with the radiusSectorData.
    types:
    - uid: WeatherUnit
  - name: radiusSectorData
    description: Contains the information needed to plot wind radius quadrants. Bearing 0–90 = NE quadrant; 90–180 = SE quadrant; 180–270 = SW quadrant; 270–360 = NW quadrant.
    types:
    - uid: RadiusSector
      isArray: true
  - name: radiiGeometry
    description: GeoJSON object. Displayed when radiiGeometry=true in request. Describes the outline of the wind radius quadrants.
    types:
    - uid: GeoJsonPoint
    - uid: GeoJsonMultiPoint
    - uid: GeoJsonLineString
    - uid: GeoJsonMultiLineString
    - uid: GeoJsonPolygon
    - uid: GeoJsonMultiPolygon
    - uid: GeoJsonGeometryCollection
    typesTitle: GeoJsonGeometry
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
- name: UnitType
  description: Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
  kind: enum
  properties:
  - name: "0"
    types:
    - uid: Integer
  - name: "1"
    types:
    - uid: Integer
  - name: "2"
    types:
    - uid: Integer
  - name: "3"
    types:
    - uid: Integer
  - name: "4"
    types:
    - uid: Integer
  - name: "5"
    types:
    - uid: Integer
  - name: "6"
    types:
    - uid: Integer
  - name: "7"
    types:
    - uid: Integer
  - name: "8"
    types:
    - uid: Integer
  - name: "9"
    types:
    - uid: Integer
  - name: "10"
    types:
    - uid: Integer
  - name: "11"
    types:
    - uid: Integer
  - name: "12"
    types:
    - uid: Integer
  - name: "13"
    types:
    - uid: Integer
  - name: "14"
    types:
    - uid: Integer
  - name: "15"
    types:
    - uid: Integer
  - name: "16"
    types:
    - uid: Integer
  - name: "17"
    types:
    - uid: Integer
  - name: "18"
    types:
    - uid: Integer
  - name: "19"
    types:
    - uid: Integer
  - name: "20"
    types:
    - uid: Integer
  - name: "21"
    types:
    - uid: Integer
  - name: "22"
    types:
    - uid: Integer
  - name: "31"
    types:
    - uid: Integer
- name: GeoJsonGeometry
  description: A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeoJsonObjectType
- name: RadiusSector
  description: Bearing 0–90 = NE quadrant; 90–180 = SE quadrant; 180–270 = SW quadrant; 270–360 = NW quadrant.
  kind: object
  properties:
  - name: beginBearing
    description: Bearing, in degrees, of the beginning of the quadrant.
    types:
    - uid: number
  - name: endBearing
    description: Bearing, in degrees, of the end of the quadrant.
    types:
    - uid: number
  - name: range
    description: The radius of the quadrant, in nautical miles.
    types:
    - uid: number
- name: GeoJsonPoint
  description: A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Point
    typesTitle: string
  - name: coordinates
    description: A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.
    types:
    - uid: number
      isArray: true
- name: GeoJsonMultiPoint
  description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPoint
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiPoint` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonLineString
  description: A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: LineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson LineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiLineString
  description: A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiLineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiLineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonPolygon
  description: A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Polygon
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson Polygon` geometry type.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiPolygon
  description: A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPolygon
    typesTitle: string
  - name: coordinates
    description: Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: array
      isArray: true
- name: GeoJsonGeometryCollection
  description: A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeometryCollection
    typesTitle: string
  - name: geometries
    description: Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: GeoJsonPoint
      isArray: true
    - uid: GeoJsonMultiPoint
      isArray: true
    - uid: GeoJsonLineString
      isArray: true
    - uid: GeoJsonMultiLineString
      isArray: true
    - uid: GeoJsonPolygon
      isArray: true
    - uid: GeoJsonMultiPolygon
      isArray: true
    - uid: GeoJsonGeometryCollection
      isArray: true
    typesTitle: GeoJsonGeometry[]
examples:
- name: Get Tropical Storm Forecasts
  request:
    uri: GET https://atlas.microsoft.com/weather/tropical/storms/forecasts/json?api-version=1.1&year=2021&basinId=NP&govId=2
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      GET https://atlas.microsoft.com/weather/tropical/storms/forecasts/json?api-version=1.1&year=2021&basinId=NP&govId=2
      ```

  responses:
  - statusCode: "200"
    body: >-
      {
        "results": [
          {
            "dateTime": "2021-04-25T06:00:00+00:00",
            "initializedDateTime": "2021-04-24T18:00:00+00:00",
            "location": {
              "latitude": 22,
              "longitude": 137.8
            },
            "maxWindGust": {
              "value": 92.6,
              "unit": "km/h",
              "unitType": 7
            },
            "sustainedWind": {
              "value": 74.1,
              "unit": "km/h",
              "unitType": 7
            },
            "status": "Tropical Storm",
            "window": {
              "left": {
                "latitude": 22.56387,
                "longitude": 137.739517
              },
              "right": {
                "latitude": 21.4361,
                "longitude": 137.860489
              }
            }
          },
          {
            "dateTime": "2021-04-25T18:00:00+00:00",
            "initializedDateTime": "2021-04-24T18:00:00+00:00",
            "location": {
              "latitude": 23.7,
              "longitude": 142.4
            },
            "maxWindGust": {
              "value": 92.6,
              "unit": "km/h",
              "unitType": 7
            },
            "sustainedWind": {
              "value": 74.1,
              "unit": "km/h",
              "unitType": 7
            },
            "status": "Tropical Storm",
            "window": {
              "left": {
                "latitude": 24.45283,
                "longitude": 142.055313
              },
              "right": {
                "latitude": 22.94641,
                "longitude": 142.744675
              }
            }
          }
        ]
      }
security:
- name: AADToken
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: https://atlas.microsoft.com/.default
    description: https://atlas.microsoft.com/.default
- name: subscription-key
  type: apiKey
  description: >-
    This is a shared key that is provisioned when you [Create an Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.

     With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.

     For publicly exposed applications, our recommendation is to use the [confidential client applications](https://docs.microsoft.com/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.
  in: query
- name: SAS Token
  type: apiKey
  description: >-
    This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.

     For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.
  in: header
metadata:
  description: >-
    Get Tropical Storm Forecasts

    Applies to: see pricing tiers.

    Get individual government-issued tropical storm forecasts.
errorCodes: []
