### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.weather.getweatheralongroutepreview
name: Get Weather Along Route Preview
service: Maps
groupName: Weather
apiVersion: "1.0"
summary: "**Get Weather along route**\n   \n   \n **Applies to**: S1 pricing tier.\n\n Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts, weather hazard assessments, and notifications along a route described as a sequence of waypoints. \n This includes a list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might be used to paint each portion of a route according to how safe it is for the driver. When submitting the waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or shortly after. Data is updated every five minutes. \n \n The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows you to first request a route between an origin and a destination and use that as an input for Weather Along Route endpoint.\n \n In addition, the service supports scenarios to generate weather notifications for waypoints that experience an increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing the end product to display a heavy rain notification before the driver reaches that waypoint. \n The trigger for when to display the notification for a waypoint could be based, for example, on a [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the waypoint.\n\n The API covers all regions of the planet except latitudes above Greenland and Antarctica."
consumes: []
produces:
- application/json
paths:
- content: GET https://atlas.microsoft.com/weather/route/json?api-version=1.0&query={query}
- content: GET https://atlas.microsoft.com/weather/route/json?subscription-key={subscription-key}&api-version=1.0&query={query}&language={language}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: subscription-key
  in: query
  description: One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: query
  in: query
  isRequired: true
  description: "Coordinates through which the route is calculated, separated by colon (:) and entered in chronological order. A minimum of two waypoints is required. A single API call may contain up to 60 waypoints. \nA waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where\n  * `Latitude` - Latitude coordinate in decimal degrees.\n  * `Longitude` - Longitude coordinate in decimal degrees.\n  * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes.\n  * `Heading` - An optional value indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees. If not provided, a heading will automatically be derived based on the position of neighboring waypoints. \nIt is recommended to stay within, or close to, the distance that can be traveled within 120-mins or shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events not being captured between waypoints. Information can and should be updated along the route (especially for trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that forecast information for content such as precipitation type and intensity is accurate as storms develop and dissipate over time."
  types:
  - uid: string
- name: language
  in: query
  description: "Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.  Default value is en-us. \n\nPlease refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details."
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: WeatherAlongRouteResponse
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ODataErrorResponse
- name: 401 Unauthorized
  headers:
  - name: WWW-Authenticate
    value: string
  description: Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.
  types:
  - uid: ODataErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ODataErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ODataErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ODataErrorResponse
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: WeatherAlongRouteResponse
  description: This object is returned from a successful Weather Along Route.
  kind: object
  properties:
  - name: summary
    description: ''
    types:
    - uid: WeatherAlongRouteSummary
  - name: waypoints
    description: Data for each waypoint returned in the same order as specified in the request.
    types:
    - uid: Waypoint
      isArray: true
- name: ODataErrorResponse
  description: This response object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
- name: WeatherAlongRouteSummary
  kind: object
  properties:
  - name: iconCode
    description: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    types:
    - uid: integer
  - name: hazards
    description: ''
    types:
    - uid: Hazards
- name: Waypoint
  kind: object
  properties:
  - name: iconCode
    description: Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    types:
    - uid: integer
  - name: shortPhrase
    description: A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    types:
    - uid: string
  - name: isDayTime
    description: Indicates the time of the day. True indicates 'day',', false indicates 'night.
    types:
    - uid: boolean
  - name: cloudCover
    description: Percent representing cloud cover.
    types:
    - uid: integer
  - name: temperature
    description: ''
    types:
    - uid: WeatherUnit
  - name: wind
    description: Wind details being returned including speed and direction.
    types:
    - uid: Wind
  - name: windGust
    description: Wind details being returned including speed and direction.
    types:
    - uid: Wind
  - name: precipitation
    description: ''
    types:
    - uid: WeatherAlongRoutePrecipitation
  - name: lightningCount
    description: Estimation of thunderstorm intensity on an open scale. A value of 0 means there is no thunderstorm; values of 1 and higher mean there is a thunderstorm in increasing intensity.
    types:
    - uid: integer
  - name: sunGlare
    description: A rating that indicates how blinding the sun is for the driver.
    types:
    - uid: SunGlare
  - name: hazards
    description: ''
    types:
    - uid: Hazards
  - name: notifications
    description: ''
    types:
    - uid: Notification
      isArray: true
- name: ODataError
  description: This object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The ODataError code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
  - name: details
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
      isArray: true
  - name: target
    isReadyOnly: true
    description: If available, the target causing the error.
    types:
    - uid: string
- name: Hazards
  kind: object
  properties:
  - name: maxHazardIndex
    description: >-
      A severity/hazard index.
        * `0` - No hazard.
        * `1` - Be informed, be aware.
        * `2` - Pay attention, be prepared.
        * `3` - Take action.
        * `4` - Life threatening, emergency.
    types:
    - uid: integer
  - name: hazardDetails
    description: Details of the weather hazards affecting the trip.
    types:
    - uid: HazardDetail
      isArray: true
- name: WeatherUnit
  kind: object
  properties:
  - name: value
    description: Rounded value.
    types:
    - uid: number
  - name: unit
    description: Type of unit for the returned value.
    types:
    - uid: string
  - name: unitType
    description: Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    types:
    - uid: integer
- name: Wind
  description: Wind details being returned including speed and direction.
  kind: object
  properties:
  - name: direction
    description: Wind direction
    types:
    - uid: WindDirection
  - name: speed
    description: Speed of the wind in specified unit.
    types:
    - uid: WindSpeed
- name: WeatherAlongRoutePrecipitation
  kind: object
  properties:
  - name: dbz
    description: The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to 100.0.
    types:
    - uid: number
  - name: type
    description: 'Precipitation type. If precipitation should occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX."'
    types:
    - uid: string
- name: SunGlare
  description: A rating that indicates how blinding the sun is for the driver.
  kind: object
  properties:
  - name: calculatedVehicleHeading
    description: If the vehicle heading value is not provided for a waypoint, then the service will calculate a heading based upon the location of neighboring waypoints if provided.
    types:
    - uid: integer
  - name: glareIndex
    description: An index from 0 to 100 indicating sun glare intensity for a driver. A value of 50 and above can be considered a hazard for some drivers and a value of 100 signifies the driver is driving straight into the sun and atmospheric conditions are clear allowing for the full intensity of the sun to blind the driver.
    types:
    - uid: integer
- name: Notification
  kind: object
  properties:
  - name: type
    description: A type of notification generated to warn drivers of the onset of a hazard, or increase in intensity of a hazard.
    types:
    - uid: string
  - name: hazardIndex
    description: >-
      A severity/hazard index.
        * `0` - No hazard.
        * `1` - Be informed, be aware.
        * `2` - Pay attention, be prepared.
        * `3` - Take action.
        * `4` - Life threatening, emergency.
    types:
    - uid: integer
  - name: hazardCode
    description: 'A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow, LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning, TsunamiWarning, SevereThunderstormWarning.'
    types:
    - uid: string
  - name: shortPhrase
    description: A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    types:
    - uid: string
- name: HazardDetail
  kind: object
  properties:
  - name: hazardIndex
    description: >-
      A severity/hazard index.
        * `0` - No hazard.
        * `1` - Be informed, be aware.
        * `2` - Pay attention, be prepared.
        * `3` - Take action.
        * `4` - Life threatening, emergency.
    types:
    - uid: integer
  - name: hazardCode
    description: 'A unique identifier (non-displayable) for each type of hazard: LightRain, ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow, LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning, SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning, TornadoWarning, TsunamiWarning, SevereThunderstormWarning.'
    types:
    - uid: string
  - name: shortPhrase
    description: A displayable short phrase describing the forecasted conditions and precipitation intensity/type.
    types:
    - uid: string
- name: WindDirection
  description: Wind direction
  kind: object
  properties:
  - name: degrees
    description: Wind direction in Azimuth degrees,  starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359.
    types:
    - uid: integer
  - name: localizedDescription
    description: Direction abbreviation in the specified language.
    types:
    - uid: string
- name: WindSpeed
  description: Speed of wind in specified unit.
  kind: object
  properties:
  - name: value
    description: Rounded value of the speed.
    types:
    - uid: number
  - name: unit
    description: Type of unit for the speed value.
    types:
    - uid: string
  - name: unitType
    description: Numeric ID value associated with the type of unit being displayed. Can be used for unit translation. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
    types:
    - uid: integer
examples:
- name: WeatherAlongRoute
  request:
    uri: GET https://atlas.microsoft.com/weather/route/json?api-version=1.0&query=38.907,-77.037,0:38.907,-77.009,10:38.926,-76.928,20:39.033,-76.852,30:39.168,-76.732,40:39.269,-76.634,50:39.287,-76.612,60
  responses:
  - statusCode: "200"
    body: >-
      {
        "summary": {
          "iconCode": 35,
          "hazards": {
            "maxHazardIndex": 0
          }
        },
        "waypoints": [
          {
            "iconCode": 38,
            "shortPhrase": "Mostly cloudy",
            "isDayTime": false,
            "cloudCover": 70,
            "temperature": {
              "value": 3.4,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 142
              },
              "speed": {
                "value": 2,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 3,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 90,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          },
          {
            "iconCode": 38,
            "shortPhrase": "Mostly cloudy",
            "isDayTime": false,
            "cloudCover": 65,
            "temperature": {
              "value": 3.4,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 166
              },
              "speed": {
                "value": 1,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 2,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 77,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          },
          {
            "iconCode": 35,
            "shortPhrase": "Partly cloudy",
            "isDayTime": false,
            "cloudCover": 43,
            "temperature": {
              "value": 3.2,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 163
              },
              "speed": {
                "value": 2,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 2,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 44,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          },
          {
            "iconCode": 35,
            "shortPhrase": "Partly cloudy",
            "isDayTime": false,
            "cloudCover": 34,
            "temperature": {
              "value": 1.6,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 189
              },
              "speed": {
                "value": 2,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 4,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 32,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          },
          {
            "iconCode": 38,
            "shortPhrase": "Mostly cloudy",
            "isDayTime": false,
            "cloudCover": 54,
            "temperature": {
              "value": 0.5,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 202
              },
              "speed": {
                "value": 4,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 5,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 36,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          },
          {
            "iconCode": 35,
            "shortPhrase": "Partly cloudy",
            "isDayTime": false,
            "cloudCover": 46,
            "temperature": {
              "value": 2.4,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 222
              },
              "speed": {
                "value": 4,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 5,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 38,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          },
          {
            "iconCode": 35,
            "shortPhrase": "Partly cloudy",
            "isDayTime": false,
            "cloudCover": 39,
            "temperature": {
              "value": 2.3,
              "unit": "C",
              "unitType": 17
            },
            "wind": {
              "direction": {
                "degrees": 231
              },
              "speed": {
                "value": 4,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "windGust": {
              "speed": {
                "value": 5,
                "unit": "km/h",
                "unitType": 7
              }
            },
            "precipitation": {
              "dbz": 0,
              "type": "SNOW"
            },
            "lightningCount": 0,
            "sunGlare": {
              "calculatedVehicleHeading": 43,
              "glareIndex": 0
            },
            "hazards": {
              "maxHazardIndex": 0
            },
            "notifications": []
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes: []
- name: subscription-key
  type: apiKey
  description: This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.
  in: query
errorCodes: []
