### YamlMime:RESTOperationGroup
uid: atlas.microsoft.com.maps.search
name: Search
apiVersion: "1.0"
service: Maps
operations:
- uid: atlas.microsoft.com.maps.search.getsearchaddress
  summary: >-
    **Address Geocoding**


    **Applies to**: S0 and S1 pricing tiers.



    In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocode endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No POIs will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties, states etc.
- uid: atlas.microsoft.com.maps.search.getsearchaddressreverse
  summary: >-
    **Reverse Geocode to an Address**


    **Applies to**: S0 and S1 pricing tiers.



    There may be times when you need to translate a  coordinate (example: 37.786505, -122.3862) into a human understandable street address. Most often  this is needed in tracking applications where you  receive a GPS feed from the device or asset and  wish to know what address where the coordinate is  located. This endpoint will return address  information for a given coordinate.
- uid: atlas.microsoft.com.maps.search.getsearchaddressreversecrossstreet
  summary: >-
    **Reverse Geocode to a Cross Street**


    **Applies to**: S0 and S1 pricing tiers.



    There may be times when you need to translate a  coordinate (example: 37.786505, -122.3862) into a human understandable cross street. Most often this  is needed in tracking applications where you  receive a GPS feed from the device or asset and wish to know what address where the coordinate is  located.

    This endpoint will return cross street information  for a given coordinate.
- uid: atlas.microsoft.com.maps.search.getsearchaddressstructured
  summary: >-
    **Structured Address Geocoding**


    **Applies to**: S0 and S1 pricing tiers.



    Azure Address Geocoding can also be accessed for  structured address look up exclusively. The geocoding search index will be queried for everything above the  street level data. No POIs will be returned. Note that the geocoder is very tolerant of typos and incomplete  addresses. It will also handle everything from exact  street addresses or street or intersections as well as higher level geographies such as city centers,  counties, states etc.
- uid: atlas.microsoft.com.maps.search.getsearchfuzzy
  summary: "\n**Free Form Search**\n\n**Applies to**: S0 and S1 pricing tiers.\n\n\nThe basic default API is Free Form Search which handles the most fuzzy of inputs handling any combination of address or POI tokens. This search API is the canonical 'single line search'. The Free Form Search API is a seamless combination of POI search and geocoding. The API can also be weighted with a contextual position (lat./lon. pair), or fully constrained by a coordinate and radius, or it can be executed more generally without any geo biasing anchor point.<br><br>We strongly advise you to use the 'countrySet' parameter to specify only the countries for which your application needs coverage, as the default behavior will be to search the entire world, potentially returning unnecessary results.<br><br> E.g.: `countrySet`=US,FR <br><br>Please see [Search Coverage](https://docs.microsoft.com/en-us/azure/location-based-services/geocoding-coverage) for a complete list of all the supported countries.<br><br>Most Search queries default to `maxFuzzyLevel`=2 to gain performance and also reduce unusual results. This new default can be overridden as needed per request by passing in the query param `maxFuzzyLevel`=3 or 4."
- uid: atlas.microsoft.com.maps.search.getsearchnearby
  summary: >-
    **Nearby Search**


    **Applies to**: S0 and S1 pricing tiers.



    If you have a use case for only retrieving POI results around a specific location, the nearby search method may be the right choice. This endpoint will only return POI results, and does not take in a search query parameter.
- uid: atlas.microsoft.com.maps.search.getsearchpoi
  summary: >-
    **Get POI by Name**


    **Applies to**: S0 and S1 pricing tiers.



    If your search use case only requires POI results, you may use the POI endpoint for searching. This endpoint will only return POI results.
- uid: atlas.microsoft.com.maps.search.getsearchpoicategory
  summary: >-
    **Get POI by Category**


    **Applies to**: S0 and S1 pricing tiers.



    If your search use case only requires POI results filtered by category, you may use the category endpoint. This endpoint will only return POI results which are categorized as specified.<br><br>List of available categories can be found [here](https://docs.microsoft.com/en-us/azure/azure-maps/search-categories).
- uid: atlas.microsoft.com.maps.search.getsearchpolygonpreview
  summary: >-
    **Get Polygon**


    **Applies to**: S1 pricing tier. Access from S0 pricing tier will be deprecated after February 4th' 2019.



    The Get Polygon service allows you to request the geometry data such as a city or country  outline for a set of entities, previously retrieved from an Online Search request in GeoJSON format. The geometry  ID is returned in the dataSources object under "geometry" and "id" in either a Search Address or Search Fuzzy call.


    Please note that any geometry ID retrieved from an Online Search endpoint has a limited lifetime. The client  should not store geometry IDs in persistent storage for later referral, as the stability of these identifiers is  not guaranteed for a long period of time. It is expected that a request to the Polygon method is made within a  few minutes of the request to the Online Search method that provided the ID. The service allows for batch  requests up to 20 identifiers.
- uid: atlas.microsoft.com.maps.search.postsearchaddressbatchpreview
  summary: "\n## Search Address Batch API\n\n**Applies to**: S1 pricing tier. Access from S0 pricing tier will be deprecated after February 4th' 2019.\n\nThe Search Address Batch API allows the caller to batch up to 10,000 [Search Address API](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchaddress) queries/requests using just a single API call.\n### Submit Batch Request\nTo send the _search address_ queries you will use a `POST` request where the request body will contain the `queries` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a sample request body containing 5 _search address_ queries:  \n<br>\n```json\n{\n    \"queries\": [\n        \"?query=400 Broad St, Seattle, WA 98109&limit=3\",\n        \"?query=One, Microsoft Way, Redmond, WA 98052&limit=3\",\n        \"?query=350 5th Ave, New York, NY 10118&limit=1\",\n        \"?query=Pike Pl, Seattle, WA 98101&lat=47.610970&lon=-122.342469&radius=1000\",\n        \"?query=Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France&limit=1\"\n    ]\n}\n```\n<br> A _search address_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _search address_ [URI parameters](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchaddress#uri-parameters). The string values in the _search address_ query must be properly escaped (e.g. \" character should be escaped with \\\\ ) and it should also be properly URL-encoded.    \n<br>\nThe maximum number of queries that can be specified in the batch is **10,000** and the batch should contain at least **1** query.   \n<br>\nPlease note that the Search Address Batch API is a long-running request. Here's a typical sequence of operations:\n1. Client sends a Search Address Batch `POST` request to Azure Maps\n2. The server will respond with one of the following:\n    \n    > HTTP `202 Accepted` - Batch request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.\n4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.\n\n<br>\n### Download Batch Results\nTo download the batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:\n<br>\n```\nhttps://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}\n```\n<br> Here's the typical sequence of operations for downloading the batch results:\n1. Client sends a `GET` request using the _download URL_.\n2. The server will respond with one of the following:\n    \n    > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.\n\n    > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.\n\n<br>\n### Batch Response Model\nWhen downloading the results of a batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response also includes a `batchResults` array which contains a response for each and every query in the batch request. Also, the `batchResults` will contain the results in the exact same order the original queries were sent in the batch request. Each entry in `batchResults` is of one of the following types:\n\n  - [`SearchAddressResponse`](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchaddress#searchaddressresponse) - If the query completed successfully.\n\n  - `Error` - If the query failed. The result will contain a `status code` and a `message` in this case.\n  \n<br> Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:\n<br>\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 2,\n        \"totalRequests\": 3\n    },\n    \"batchResults\": [\n        {\n            \"summary\": {\n                \"query\": \"one microsoft way redmond wa 98052\"\n            },\n            \"results\": [\n                {\n                    \"position\": {\n                        \"lat\": 47.63989,\n                        \"lon\": -122.12509\n                    }\n                }\n            ]\n        },\n        {\n            \"summary\": {\n                \"query\": \"pike pl seattle wa 98101\"\n            },\n            \"results\": [\n                {\n                    \"position\": {\n                        \"lat\": 47.60963,\n                        \"lon\": -122.34215\n                    }\n                }\n            ]\n        },\n        {\n            \"statusCode\": 400,\n            \"message\": \"Bad Request\"\n        }\n    ]\n}\n```\n<br>\n### Data Retention Period\nPlease, be aware that batch results are available for download for **14** days, after which the request for results download will return `400 Bad Request` response.\n<br>"
- uid: atlas.microsoft.com.maps.search.postsearchaddressreversebatchpreview
  summary: "## Search Address Reverse Batch API\n\n**Applies to**: S1 pricing tier. Access from S0 pricing tier will be deprecated after February 4th' 2019.\n\nThe Search Address Reverse Batch API allows the caller to batch up to 10,000 [Search Address Reverse API](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchaddressreverse) queries/requests using just a single API call.\n### Submit Batch Request\nTo send the _search address reverse_ queries you will use a `POST` request where the request body will contain the `queries` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:\n<br>\n```json\n{\n    \"queries\": [\n        \"?query=48.858561,2.294911\",\n        \"?query=47.639765,-122.127896&radius=5000&limit=2\",\n        \"?query=47.621028,-122.348170\",\n        \"?query=43.722990,10.396695\",\n        \"?query=40.750958,-73.982336\"\n    ]\n}\n```\n<br> A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI parameters](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string values in the _search address reverse_ query must be properly escaped (e.g. \" character should be escaped with \\\\ ) and it should also be properly URL-encoded.  \n<br>\nThe maximum number of queries that can be specified in the batch is **10,000** and the batch should contain at least **1** query.   \n<br>\nPlease note that the Search Address Reverse Batch API is a long-running request. Here's a typical sequence of operations:\n1. Client sends a Search Address Reverse Batch `POST` request to Azure Maps\n2. The server will respond with one of the following:\n    \n    > HTTP `202 Accepted` - Batch request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.\n4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.\n\n<br>\n### Download Batch Results\nTo download the batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:   \n<br>\n```\nhttps://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}\n```\n<br> Here's the typical sequence of operations for downloading the batch results:\n1. Client sends a `GET` request using the _download URL_.\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.\n\n    > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.\n\n<br>\n### Batch Response Model\nWhen downloading the results of a batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response also includes a `batchResults` array which contains a response for each and every query in the batch request. Also, the `batchResults` will contain the results in the exact same order the original queries were sent in the batch request. Each entry in `batchResults` is of one of the following types:\n\n  - [`SearchAddressReverseResponse`](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse) - If the query completed successfully.\n\n  - `Error` - If the query failed. The result will contain a `status code` and a `message` in this case.\n  \n<br> Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:\n<br>\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 2,\n        \"totalRequests\": 3\n    },\n    \"batchResults\": [\n        {\n            \"summary\": {\n                \"queryTime\": 11\n            },\n            \"addresses\": [\n                {\n                    \"address\": {\n                        \"country\": \"France\",\n                        \"freeformAddress\": \"Avenue Anatole France, 75007 Paris\"\n                    },\n                    \"position\": \"48.858490,2.294820\"\n                }\n            ]\n        },\n        {\n            \"summary\": {\n                \"queryTime\": 1\n            },\n            \"addresses\": [\n                {\n                    \"address\": {\n                        \"country\": \"United States of America\",\n                        \"freeformAddress\": \"157th Pl NE, Redmond WA 98052\"\n                    },\n                    \"position\": \"47.640470,-122.129430\"\n                }\n            ]\n        },\n        {\n            \"statusCode\": 400,\n            \"message\": \"Bad Request\"\n        }\n    ]\n}\n```\n<br>\n### Data Retention Period\nPlease, be aware that batch results are available for download for **14** days, after which the request for results download will return `400 Bad Request` response.\n<br>"
- uid: atlas.microsoft.com.maps.search.postsearchalongroute
  summary: >-
    **Applies to**: S0 and S1 pricing tiers.



    The Search Along Route endpoint allows you to perform a fuzzy search for POIs along a specified route. This search is constrained by specifying the `maxDetourTime` limiting measure.<br><br>To send the route-points you will use a `POST` request where the request body will contain the `route` object represented as a `GeoJSON LineString` type and the `Content-Type` header will be set to `application/json`. Each route-point in `route` is represented as a `GeoJSON Position` type i.e. an array where the _longitude_ value is followed by the _latitude_ value and the _altitude_ value is ignored. The `route` should contain at least 2 route-points.<br><br>It is possible that original route will be altered, some of it's points may be skipped. If the route that passes through the found point is faster than the original one, the `detourTime` value in the response is negative.
- uid: atlas.microsoft.com.maps.search.postsearchfuzzybatchpreview
  summary: "## Search Fuzzy Batch API\n\n**Applies to**: S1 pricing tier. Access from S0 pricing tier will be deprecated after February 4th' 2019.\n\nThe Search Fuzzy Batch API allows the caller to batch up to 10,000 [Search Fuzzy API](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchfuzzy) queries/requests using just a single API call.\n### Submit Batch Request\nTo send the _search fuzzy_ queries you will use a `POST` request where the request body will contain the `queries` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a sample request body containing 5 _search fuzzy_ queries:\n<br>\n```json\n{\n    \"queries\": [\n        \"?query=atm&lat=47.639769&lon=-122.128362&radius=5000&limit=5\",\n        \"?query=Statue Of Liberty&limit=2\",\n        \"?query=Starbucks&lat=47.639769&lon=-122.128362&radius=5000\",\n        \"?query=Space Needle\",\n        \"?query=pizza&limit=10\"\n    ]\n}\n```    \n<br> A _search fuzzy_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _search fuzzy_ [URI parameters](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchfuzzy#uri-parameters). The string values in the _search fuzzy_ query must be properly escaped (e.g. \" character should be escaped with \\\\ ) and it should also be properly URL-encoded.     \n<br>\nThe maximum number of queries that can be specified in the batch is **10,000** and the batch should contain at least **1** query.    \n<br>\nPlease note that the Search Fuzzy Batch API is a long-running request. Here's a typical sequence of operations:\n1. Client sends a Search Fuzzy Batch `POST` request to Azure Maps\n2. The server will respond with one of the following:\n \n    > HTTP `202 Accepted` - Batch request has been accepted.\n\n    > HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.\n4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.\n\n<br>\n### Download Batch Results\nTo download the batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:\n<br>\n```\nhttps://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}    \n```\n<br>     Here's the typical sequence of operations for downloading the batch results:\n1. Client sends a `GET` request using the _download URL_.\n2. The server will respond with one of the following:\n\n    > HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.\n\n    > HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.\n\n<br>\n### Batch Response Model\nWhen downloading the results of a batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests` i.e. queries which were executed successfully. The batch response also includes a `batchResults` array which contains a response for each and every query in the batch request. Also, the `batchResults` will contain the results in the exact same order the original queries were sent in the batch request. Each entry in `batchResults` is of one of the following types:\n\n  - [`SearchFuzzyResponse`](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchfuzzy#searchfuzzyresponse) - If the query completed successfully.\n\n  - `Error` - If the query failed. The result will contain a `status code` and a `message` in this case.\n\n<br>     Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:\n<br>\n```json\n{\n    \"summary\": {\n        \"successfulRequests\": 2,\n        \"totalRequests\": 3\n    },\n    \"batchResults\": [\n        {\n            \"summary\": {\n                \"query\": \"atm\"\n            },\n            \"results\": [\n                {\n                    \"type\": \"POI\",\n                    \"poi\": {\n                        \"name\": \"ATM at Wells Fargo\"\n                    },\n                    \"address\": {\n                        \"country\": \"United States Of America\",\n                        \"freeformAddress\": \"3240 157th Ave NE, Redmond, WA 98052\"\n                    }\n                }\n            ]\n        },\n        {\n            \"summary\": {\n                \"query\": \"statue of liberty\"\n            },\n            \"results\": [\n                {\n                    \"type\": \"POI\",\n                    \"poi\": {\n                        \"name\": \"Statue of Liberty\"\n                    },\n                    \"address\": {\n                        \"country\": \"United States Of America\",\n                        \"freeformAddress\": \"New York, NY 10004\"\n                    }\n                }\n            ]\n        },\n        {\n            \"statusCode\": 400,\n            \"message\": \"Bad Request\"\n        }\n    ]\n}\n```\n<br>\n### Data Retention Period\nPlease, be aware that batch results are available for download for **14** days, after which the request for results download will return `400 Bad Request` response.\n<br>"
- uid: atlas.microsoft.com.maps.search.postsearchinsidegeometry
  summary: >-
    **Applies to**: S0 and S1 pricing tiers.


    The Search Geometry endpoint allows you to perform a free form search inside a single geometry or many of them. The search results that fall inside the geometry/geometries will be returned.<br><br>To send the geometry you will use a `POST` request where the request body will contain the `geometry` object represented as a `GeoJSON` type and the `Content-Type` header will be set to `application/json`. The geographical features to be searched can be modeled as Polygon and/or Circle geometries represented using any one of the following `GeoJSON` types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be represented as a `GeoJSON FeatureCollection` object. This is the recommended option if the geometry contains both Polygons and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON Feature` objects. Each `Feature` object should represent either a Polygon or a Circle with the following conditions:<ul style="list-style-type:none"><li>A `Feature` object for the Polygon geometry can have a max of 50 coordinates and it's properties must be empty.</li><li>A `Feature` object for the Circle geometry is composed of a _center_ represented using a `GeoJSON Point` type and a _radius_ value (in meters) which must be specified in the object's properties along with the _subType_ property whose value should be 'Circle'.</li></ul><br> Please see the Examples section below for a sample `FeatureCollection` representation.<br><br></li><li>**GeoJSON GeometryCollection**<br>The `geometry` can be represented as a `GeoJSON GeometryCollection` object. This is the recommended option if the geometry contains a list of Polygons only. The `GeometryCollection` can contain a max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max of 50 coordinates. Please see the Examples section below for a sample `GeometryCollection` representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can be represented as a `GeoJSON Polygon` object. This is the recommended option if the geometry contains a single Polygon. The `Polygon` object can have a max of 50 coordinates. Please see the Examples section below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
