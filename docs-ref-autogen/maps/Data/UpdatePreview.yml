### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.data.updatepreview
name: Update Preview
service: Maps
groupName: Data
apiVersion: "1.0"
summary: "**Data Update API**\n\n**Applies to:** S1 pricing tier.\n<br>\n\nThis API allows the caller to update a previously uploaded data content.<br>    \nYou can use this API in a scenario like adding/removing geofences to/from an existing collection of geofences uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). <br>\nPlease note that the Update API will *replace/override* the existing data content. \n\n### Submit Update Request\n\nTo update your content you will use a `PUT` request where the request body will contain the new data that will replace the existing data, the `Content-Type` header will be set to the content type of the data and the path will contain the `udid` of the data to update. <br>    \nFor example, to update a collection of geofences previously uploaded using the Upload API, set the request body to the new geofence content, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response and set the `Content-Type` header to either one of the following media types: \n    \n  - `application/json`\n  - `application/vnd.geo+json`\n  - `application/octet-stream`\n\n\nHere's a sample request body for updating a simple Geofence represented as a circle geometry in `GeoJSON` using a center point and a radius:\n\n<br>\n\n```json\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [-122.126986, 47.639754]\n        },\n        \"properties\": {\n            \"geometryId\": \"001\",\n            \"radius\": 500\n        }\n    }]\n}\n```\n\n<br>The previously uploaded geofence had a radius of 100m. This request will update it to 500m.<br>\nThe Data Update API is a long-running request with the following sequence of operations:\n<br>\n#### Send the update request\n\n1. Client sends a Data Update `PUT` request to Azure Maps\n\n2. The server will respond with one of the following:\n \n   > HTTP `202 Accepted` - Update request has been accepted (but not completed yet).\n\n   > HTTP `Error` - There was an error processing your Update request. This could either be a `400 Bad Request` or any other `Error` status code.\n\n3. If the Update request was accepted successfully, the `Location` header in the response contains the _status URI_ to check the current status of the long-running update request. This _status URI_ looks like the following:    \n    \n```\nhttps://atlas.microsoft.com/mapData/{updateStatusId}/status?api-version=1.0    \n```\n\n<br> Note: Please remember to add AUTH information (subscription-key/azure_auth - See [Security](#security)) to the _status URI_ before running it.\n\n<br>\n\n#### Update request \"Accepted\" but \"In Progress\"\n\n1. Client issues a `GET` request on the _status URI_ obtained above to check the current status of the update request.\n\n2. At this point, if the update request is still being _processed_ by Azure Maps, the client receives a HTTP `202 Accepted` response. The `Location` header in the response contains the _status URI_ to check the current status of the long-running update request. The response body contains a more detailed status for the request which looks like:\n\n\n```json\n{\n    \"status\" : \"In Progress\"         \n}\n```\n\n<br>\n\n#### Update request \"Completed\" successfully\n\n1. Client issues another `GET` request on the _status URI_ to check the current update status.\n\n2. At this point, if the update request processing has completed successfully, the client receives a HTTP `201 Created` response.\n\n3. The update request was successful and the data has been created. The `Location` header in the response contains the URI to access/download the content in the future. The response body contains a unique data id (udid) for the data and looks like:\n\n\n```json\n{\n    \"udid\" : \"d7e5efc8-2239-4387-a286-5bb51aa804e3\"         \n}\n```\n\n<br>\n\n#### Update request \"Failed\"\n\n1. Client issues another `GET` request on the _status URI_ to check the current update status.\n\n2. At this point, if the update request processing has failed, the client receives a HTTP `204 No Content` response.\n\n3. The request has failed and the data has not been created. The response body will contain a list of errors encountered while processing the update request:\n\n\n```json\n{\n    \"error\": \n    {\n      \"code\": \"204 No Content\",\n      \"message\": \"Update data request failed. We encountered the following problems with your data: Data is not a valid GeoJSON\"\n    }         \n}\n```\n\n<br>\n\n### Data Update Limits\n\nPlease, be aware that currently every Azure Maps account gets a free storage limit of 50 MB. This means that you can either upload 1 document of size 50 MB or 5 documents, each of size 10 MB or 100 documents, each of size 500 KB and so on. Once the free storage limit is reached, all the new Update API calls will return a `409 Conflict` http error response. You can always use the [Data Delete API](https://docs.microsoft.com/en-us/rest/api/maps/data/deletepreview) to delete old/unused content and create space for new uploads/updates.\n\n<br>"
consumes: []
produces:
- application/json
paths:
- content: PUT https://atlas.microsoft.com/mapData/{udid}?api-version=1.0
- content: PUT https://atlas.microsoft.com/mapData/{udid}?subscription-key={subscription-key}&api-version=1.0
  isOptional: true
uriParameters:
- name: udid
  in: path
  isRequired: true
  description: The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview) call.
  types:
  - uid: string
- name: subscription-key
  in: query
  description: One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
responses:
- name: 201 Created
  headers:
  - name: Location
    value: string
  - name: Access-Control-Expose-Headers
    value: string
  description: 'Content updated successfully. The `Location` header in the response contains the uri for accessing the content resource, for example - `https://atlas.microsoft.com/mapData/{udid}?api-version=1.0&subscription-key={subscription-key}`. The response body contains a unique data id `udid` for the content, for example - `"udid" : "25084fb7-307a-4720-8f91-7952a0b91012.geojson"`.'
  types:
  - uid: MapDataUpdateResponse
- name: 202 Accepted
  headers:
  - name: Location
    value: string
  - name: Access-Control-Expose-Headers
    value: string
  description: 'Update data request has been `Accepted`. The update process has not completed yet. The `Location` header in the response contains the uri for checking the status of the update, for example - `https://atlas.microsoft.com/mapData/{updateStatusId}/status?api-version=1.0&subscription-key={subscription-key}`. The response body contains the current status for the update, for example - `"status" : "Accepted"`.'
  types:
  - uid: MapDataUpdateRequestAcceptedResponse
- name: 204 No Content
  description: Data update failed. The uploaded content did not satisfy all the validation checks. The response body contains all the errors that were encountered.
  types:
  - uid: ErrorResponse
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ErrorResponse
- name: 401 Unauthorized
  headers:
  - name: WWW-Authenticate
    value: string
  description: Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.
  types:
  - uid: ErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: UpdateContent
    in: body
    description: The new content that will update/replace the previously uploaded content.
    types:
    - uid: object
requestHeader:
- name: x-ms-client-id
  in: header
  description: 'Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.    '
  types:
  - uid: string
definitions:
- name: MapDataUpdateResponse
  description: The response model for the Data Update API for the case when the content was successfully updated. This contains the `udid` for the updated content.
  kind: object
  properties:
  - name: udid
    isReadyOnly: true
    description: The `udid` for the updated content.
    types:
    - uid: string
- name: MapDataUpdateRequestAcceptedResponse
  description: The response model for the Data Update API for the case when the update request was accepted, but the content wasn't updated/replaced yet. This contains the current `status` of the long running update operation.
  kind: object
  properties:
  - name: status
    isReadyOnly: true
    description: Current `status` of the long running update operation.
    types:
    - uid: string
- name: ErrorResponse
  description: This response object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API
    types:
    - uid: Error
- name: Error
  description: This object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The HTTP status code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
examples:
- name: Update previously uploaded GeoJSON data containing geometries that represent a collection of geofences
  request:
    uri: PUT https://atlas.microsoft.com/mapData/25084fb7-307a-4720-8f91-7952a0b91012?subscription-key=[subscription-key]&api-version=1.0
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "geometry": {
              "type": "Point",
              "coordinates": [
                -122.126986,
                47.639754
              ]
            },
            "properties": {
              "geometryId": "001",
              "radius": 500
            }
          }
        ]
      }
  responses:
  - statusCode: "201"
    headers:
    - name: Location
      value: https://atlas.microsoft.com/mapData/{udid}?api-version=1.0
    - name: Access-Control-Expose-Headers
      value: Location
    body: >-
      {
        "udid": "25084fb7-307a-4720-8f91-7952a0b91012"
      }
  - statusCode: "202"
    headers:
    - name: Location
      value: https://atlas.microsoft.com/mapData/{updateStatusId}/status?api-version=1.0
    - name: Access-Control-Expose-Headers
      value: Location
    body: >-
      {
        "status": "Accepted"
      }
  - statusCode: "204"
    body: >-
      {
        "error": {
          "code": "204 No Content",
          "message": "Map data update failed. The uploaded content did not satisfy all the validation checks. The response body contains all the errors that were encountered."
        }
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes: []
- name: subscription-key
  type: apiKey
  description: This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.
  in: query
errorCodes: []
