### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.mobility.gettransitroutepreview
name: Get Transit Route Preview
service: Maps
groupName: Mobility
apiVersion: "1.0"
summary: >-
  **Transit Route API**


  **Applies to**: S1 pricing tier.


  Get Transit Route API will allow trip planning returning the best possible route options between an origin and destination by using multi-modal search. Service provides a variety of travel modes, including walk, bike, and public transit.  The API supports parameters to request one or multiple public transit types such as bus, tram and subway, and prefer a specific transit agency operating in the area. Also, service provides transit fare details and options to choose optimal route with least walk or transfers and specify arrival or departure times when user need to be at a specific destination by a certain time.
consumes: []
produces:
- application/json
paths:
- content: GET https://atlas.microsoft.com/mobility/transit/route/json?api-version=1.0&origin={origin}&destination={destination}
- content: GET https://atlas.microsoft.com/mobility/transit/route/json?subscription-key={subscription-key}&api-version=1.0&metroId={metroId}&origin={origin}&originType={originType}&destination={destination}&destinationType={destinationType}&modeType={modeType}&transitType={transitType}&agency={agency}&agencyType={agencyType}&time={time}&timeType={timeType}&routeType={routeType}&bikeType={bikeType}&language={language}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: subscription-key
  in: query
  description: One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: metroId
  in: query
  description: The unique id of the metro area. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro).
  types:
  - uid: integer
  format: int32
- name: origin
  in: query
  isRequired: true
  description: The origin of the route. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
  types:
  - uid: string
- name: originType
  in: query
  description: The type of the origin. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g., "47.641268,-122.125679”.
  types:
  - uid: OriginType
- name: destination
  in: query
  isRequired: true
  description: The destination of the route. By default the destinationType=position, specified as a comma separated string composed by latitude followed by longitude, e.g. "47.641268,-122.125679”.
  types:
  - uid: string
- name: destinationType
  in: query
  description: The type of the destination.
  types:
  - uid: DestinationType
- name: modeType
  in: query
  description: >-
    The mode of travel for the requested route; as comma separated list. If not specified, all modes will be allowed. All modes might not be available in all metro areas. If valid trip is not found, empty result will be returned. Supported values are:
      * `walk` - Walk (pedestrian)
      * `bike` - Bike
      * `publicTransit` - Public transit
  types:
  - uid: array
- name: transitType
  in: query
  description: >-
    Applicable only with modeType = publicTransit. Allow only a specific set of public transit types (as a comma separated list) to be returned for the route.  Note that the requested transitType may not be available for the entire route. If not specified, all modes will be allowed. Supported values are:
      * `bus` - Bus
      * `cableCar` - Cable car
      * `ferry` - Ferry
      * `funicular` - Funicular
      * `gondola` - Gondola
      * `rail` - Rail
      * `tram` - Tram
      * `subway` - Subway/Metro
  types:
  - uid: array
- name: agency
  in: query
  description: Specifies whether to prefer routes from a specific set of agencies if possible; as a comma separated list. If valid trip isn’t found with the preferred agency, or only one with very long trips or with large number of transfers, itineraries with other agencies will be returned.
  types:
  - uid: array
- name: agencyType
  in: query
  description: Specifies the agency identifier to request routes from preferred agencies. By default the agencyType=agencyId.
  types:
  - uid: AgencyType
- name: time
  in: query
  description: The time of departure or arrival in the local time in ISO format (2019-04-05T14:24:18-04:00). If timeType is not specified, it will be assumed to be 'departure' and time is the current local time at the origin point.
  types:
  - uid: string
- name: timeType
  in: query
  description: Specifies whether the time signifies departure time or arrival time. If not defined, default value is 'departure'.
  types:
  - uid: TimeType
- name: routeType
  in: query
  description: The type of route requested. If not specified, 'optimal' will be used.
  types:
  - uid: TransitRouteType
- name: bikeType
  in: query
  description: Bike type of the bike. Specifies which type of bikes will be used. Only private bikes are supported.
  types:
  - uid: string
- name: language
  in: query
  description: Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: TransitRouteResponse
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ODataErrorResponse
- name: 401 Unauthorized
  headers:
  - name: WWW-Authenticate
    value: string
  description: Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.
  types:
  - uid: ODataErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ODataErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ODataErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ODataErrorResponse
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: OriginType
  description: The type of the origin. By default originType=position, specified as a comma separated string composed by latitude followed by longitude, e.g., "47.641268,-122.125679”.
  kind: enum
  properties:
  - name: position
    description: The origin of the route as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
    types:
    - uid: string
  - name: stopId
    description: The unique Azure Maps identifier for the respective public transit stop. When referring to public transit stops over time, it is recommended to use `stopId` since it will not change, as long as the physical stop exists
    types:
    - uid: string
  - name: stopKey
    description: 'The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to change.<br> **Note**: When this value is used, the metroId parameter is required.'
    types:
    - uid: string
- name: DestinationType
  description: The type of the destination.
  kind: enum
  properties:
  - name: position
    description: The destination of the route as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
    types:
    - uid: string
  - name: stopId
    description: The unique Azure Maps identifier for the respective public transit stop. When referring to public transit stops over time, it is recommended to use `stopId` since it will not change, as long as the physical stop exists.
    types:
    - uid: string
  - name: stopKey
    description: 'The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to change.<br> **Note**: When this value is used, the metroId parameter is required.'
    types:
    - uid: string
- name: AgencyType
  description: Specifies the agency identifier to request routes from preferred agencies. By default the agencyType=agencyId.
  kind: enum
  properties:
  - name: agencyId
    description: The Id of the transit agency, e.g. '5872'
    types:
    - uid: string
  - name: agencyKey
    description: 'The agency’s GTFS Id.<br> **Note**: When this value is used, the metroId parameter is required.'
    types:
    - uid: string
  - name: agencyName
    description: The name of the transit agency, e.g. Metro Transit.
    types:
    - uid: string
- name: TimeType
  description: Specifies whether the time signifies departure time or arrival time. If not defined, default value is 'departure'.
  kind: enum
  properties:
  - name: arrival
    description: arrival at the destination point. Requires that 'time' value must be in the future.
    types:
    - uid: string
  - name: departure
    description: Request departure at the destination point. Requires that 'time' value must be now or in the future.
    types:
    - uid: string
  - name: last
    description: Request the last lines for the day.
    types:
    - uid: string
- name: TransitRouteType
  description: The type of route requested. If not specified, 'optimal' will be used.
  kind: enum
  properties:
  - name: optimal
    description: The best optimal route.
    types:
    - uid: string
  - name: leastWalk
    description: Route with least walk.
    types:
    - uid: string
  - name: leastTransfers
    description: Route with least transfers.
    types:
    - uid: string
- name: TransitRouteResponse
  description: This object is returned from a successful Get Transit Stop Info call
  kind: object
  properties:
  - name: results
    description: ''
    types:
    - uid: ItineraryResult
      isArray: true
- name: ODataErrorResponse
  description: This response object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
- name: ItineraryResult
  kind: object
  properties:
  - name: itineraryId
    description: A unique identifier of the returned itinerary.
    types:
    - uid: string
  - name: departureTime
    description: The date and time of departure from the origin point in ISO 8601 format, e.g. 1996-12-19T16:39:57-08:00.
    types:
    - uid: string
  - name: arrivalTime
    description: The date and time of arrival at the destination point in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.
    types:
    - uid: string
  - name: travelTimeInSeconds
    description: Estimated travel time in seconds.
    types:
    - uid: integer
  - name: numberOfLegs
    description: Number of legs.
    types:
    - uid: integer
  - name: legs
    description: An array summarizing the legs of this itinerary.
    types:
    - uid: RouteItineraryLeg
      isArray: true
  - name: itineraryFare
    description: Itinerary level transit fare information. Returned only if fare information is available for the entire itinerary. [Get Metro Area Info API](https://aka.ms/AzureMapsMobilityMetroAreaInfo) can be requested to confirm if fare information is available in the metro area.
    types:
    - uid: ItineraryFare
- name: ODataError
  description: This object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The ODataError code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
  - name: details
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
      isArray: true
  - name: target
    isReadyOnly: true
    description: If available, the target causing the error.
    types:
    - uid: string
- name: RouteItineraryLeg
  kind: object
  properties:
  - name: legType
    description: The travel mode of the leg.
    types:
    - uid: LegType
  - name: legFare
    description: Leg level public transit fare information. Returned only if fare information is available for the entire itinerary.
    types:
    - uid: LegFare
  - name: legStartTime
    description: Start time for the leg in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.
    types:
    - uid: string
  - name: legEndTime
    description: End time for the leg in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.
    types:
    - uid: string
  - name: caption
    description: For Public Transit legs the caption of the line serving the leg, for example, line number.
    types:
    - uid: string
  - name: lengthInMeters
    description: The total distance of the leg in meters.
    types:
    - uid: integer
- name: ItineraryFare
  description: Itinerary level transit fare information.
  kind: object
  properties:
  - name: price
    description: The total price for all tickets a user is expected to purchase in order to complete this itinerary.
    types:
    - uid: Price
  - name: tickets
    description: An array describing the individual prices of each of the tickets that the user is expected to purchase throughout this itinerary. The list isn’t ordered.
    types:
    - uid: Tickets
      isArray: true
- name: LegType
  kind: enum
  properties:
  - name: Walk
    description: Pedestrian walk
    types:
    - uid: string
  - name: Bicycle
    description: Bicycle
    types:
    - uid: string
  - name: Tram
    description: Tram
    types:
    - uid: string
  - name: Subway
    description: Subway
    types:
    - uid: string
  - name: Rail
    description: Rail
    types:
    - uid: string
  - name: Bus
    description: Bus
    types:
    - uid: string
  - name: Ferry
    description: Ferry
    types:
    - uid: string
  - name: Cable
    description: Cable Car
    types:
    - uid: string
  - name: Gondola
    description: Gondola
    types:
    - uid: string
  - name: Funicular
    description: Funicular
    types:
    - uid: string
  - name: PathWayWalk
    description: A Leg describing a walk within a compound, e.g. Central Station
    types:
    - uid: string
  - name: Wait
    description: A Leg describing a wait for the next public transit leg
    types:
    - uid: string
  - name: WaitOnVehicle
    description: It’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number)
    types:
    - uid: string
- name: LegFare
  description: Leg level public transit fare information. Returned only if fare information is available for the entire itinerary level and supported by the local transit agency.
  kind: object
  properties:
  - name: fares
    description: Detailed fare information for the leg.
    types:
    - uid: Fares
      isArray: true
- name: Price
  kind: object
  properties:
  - name: amount
    description: Price of the ticket in cents. For example, $5.00 is returned as ‘500’.
    types:
    - uid: integer
  - name: currencyCode
    description: Currency code, for example for US dollars “USD”.
    types:
    - uid: string
- name: Tickets
  description: An array describing the individual prices of each of the tickets that the user is expected to purchase throughout this itinerary. The list isn’t ordered.
  kind: object
  properties:
  - name: amount
    description: Price of the ticket in cents. For example, $5.00 is returned as ‘500’.
    types:
    - uid: integer
  - name: currencyCode
    description: Currency code, for example for US dollars “USD”.
    types:
    - uid: string
- name: Fares
  description: Detailed fare information for the leg.
  kind: object
  properties:
  - name: price
    description: The price of the ticket when purchased for the individual leg, not for the entire route at once.
    types:
    - uid: Price
  - name: usage
    description: >-
      Supported values are:

        * pay – user is expected to pay for this ticket in order to consume the current leg
        * transfer – user can use a ticket purchased in a previous leg in order to consume the current leg. In general, when transfer is specified, the number of transfers is counted, and has a limit.
        * continue – user can use a ticket purchased in a previous leg in order to consume the current leg. In general, when continue is specified, the number of transfers isn’t incremented for this leg.
        * upgrade – user is expected to upgrade a ticket purchased in a previous leg in order to consume the current leg.
    types:
    - uid: string
examples:
- name: TransitRoute
  request:
    uri: GET https://atlas.microsoft.com/mobility/transit/route/json?api-version=1.0&origin=41.948437, -87.655334&originType=position&destination=41.878876, -87.635918&destinationType=position&modeType=publicTransit&transitType=bus
  responses:
  - statusCode: "200"
    body: >-
      {
        "results": [
          {
            "itineraryId": "41372ab5-8577-481a-ab24-e84572fe69a5---2020092910DC67FA27034F15A29F4AE5415ADAF2:0---81",
            "departureTime": "2020-09-30T00:30:29Z",
            "arrivalTime": "2020-09-30T01:18:16Z",
            "travelTimeInSeconds": 2867,
            "numberOfLegs": 4,
            "legs": [
              {
                "legType": "Walk",
                "legStartTime": "2020-09-30T00:30:29Z",
                "legEndTime": "2020-09-30T00:34:01Z",
                "caption": "North Clark Street",
                "lengthInMeters": 196
              },
              {
                "legType": "Wait",
                "legStartTime": "2020-09-30T00:34:01Z",
                "legEndTime": "2020-09-30T00:35:02Z",
                "caption": "22"
              },
              {
                "legType": "Bus",
                "legStartTime": "2020-09-30T00:35:02Z",
                "legEndTime": "2020-09-30T01:12:52Z",
                "caption": "22",
                "lengthInMeters": 8463,
                "legFare": {
                  "fares": [
                    {
                      "price": {
                        "amount": 225,
                        "currencyCode": "USD"
                      },
                      "usage": "pay"
                    }
                  ]
                }
              },
              {
                "legType": "Walk",
                "legStartTime": "2020-09-30T01:12:53Z",
                "legEndTime": "2020-09-30T01:18:16Z",
                "lengthInMeters": 421
              }
            ],
            "itineraryFare": {
              "price": {
                "amount": 225,
                "currencyCode": "USD"
              },
              "tickets": [
                {
                  "amount": 225,
                  "currencyCode": "USD"
                }
              ]
            }
          },
          {
            "itineraryId": "41372ab5-8577-481a-ab24-e84572fe69a5---2020092910DC67FA27034F15A29F4AE5415ADAF2:1---81",
            "departureTime": "2020-09-30T00:32:42Z",
            "arrivalTime": "2020-09-30T01:26:29Z",
            "travelTimeInSeconds": 3227,
            "numberOfLegs": 3,
            "legs": [
              {
                "legType": "Walk",
                "legStartTime": "2020-09-30T00:32:42Z",
                "legEndTime": "2020-09-30T00:39:40Z",
                "caption": "West Sheridan Road",
                "lengthInMeters": 480
              },
              {
                "legType": "Wait",
                "legStartTime": "2020-09-30T00:39:40Z",
                "legEndTime": "2020-09-30T00:40:41Z",
                "caption": "151"
              },
              {
                "legType": "Bus",
                "legStartTime": "2020-09-30T00:40:41Z",
                "legEndTime": "2020-09-30T01:26:29Z",
                "caption": "151",
                "lengthInMeters": 10539,
                "legFare": {
                  "fares": [
                    {
                      "price": {
                        "amount": 225,
                        "currencyCode": "USD"
                      },
                      "usage": "pay"
                    }
                  ]
                }
              }
            ],
            "itineraryFare": {
              "price": {
                "amount": 225,
                "currencyCode": "USD"
              },
              "tickets": [
                {
                  "amount": 225,
                  "currencyCode": "USD"
                }
              ]
            }
          },
          {
            "itineraryId": "41372ab5-8577-481a-ab24-e84572fe69a5---2020092910DC67FA27034F15A29F4AE5415ADAF2:2---81",
            "departureTime": "2020-09-30T00:28:04Z",
            "arrivalTime": "2020-09-30T01:24:46Z",
            "travelTimeInSeconds": 3402,
            "numberOfLegs": 7,
            "legs": [
              {
                "legType": "Walk",
                "legStartTime": "2020-09-30T00:28:04Z",
                "legEndTime": "2020-09-30T00:35:40Z",
                "caption": "West Waveland Avenue",
                "lengthInMeters": 522
              },
              {
                "legType": "Wait",
                "legStartTime": "2020-09-30T00:35:40Z",
                "legEndTime": "2020-09-30T00:36:41Z",
                "caption": "8"
              },
              {
                "legType": "Bus",
                "legStartTime": "2020-09-30T00:36:41Z",
                "legEndTime": "2020-09-30T01:09:41Z",
                "caption": "8",
                "lengthInMeters": 8059,
                "legFare": {
                  "fares": [
                    {
                      "price": {
                        "amount": 225,
                        "currencyCode": "USD"
                      },
                      "usage": "pay"
                    }
                  ]
                }
              },
              {
                "legType": "Walk",
                "legStartTime": "2020-09-30T01:09:42Z",
                "legEndTime": "2020-09-30T01:11:59Z",
                "caption": "West Van Buren Street",
                "lengthInMeters": 174
              },
              {
                "legType": "Wait",
                "legStartTime": "2020-09-30T01:11:59Z",
                "legEndTime": "2020-09-30T01:18:43Z",
                "caption": "126"
              },
              {
                "legType": "Bus",
                "legStartTime": "2020-09-30T01:18:43Z",
                "legEndTime": "2020-09-30T01:22:45Z",
                "caption": "126",
                "lengthInMeters": 1092,
                "legFare": {
                  "fares": [
                    {
                      "price": {
                        "amount": 25,
                        "currencyCode": "USD"
                      },
                      "usage": "pay"
                    }
                  ]
                }
              },
              {
                "legType": "Walk",
                "legStartTime": "2020-09-30T01:22:46Z",
                "legEndTime": "2020-09-30T01:24:46Z",
                "lengthInMeters": 102
              }
            ],
            "itineraryFare": {
              "price": {
                "amount": 250,
                "currencyCode": "USD"
              },
              "tickets": [
                {
                  "amount": 225,
                  "currencyCode": "USD"
                },
                {
                  "amount": 25,
                  "currencyCode": "USD"
                }
              ]
            }
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes: []
- name: subscription-key
  type: apiKey
  description: This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.
  in: query
metadata:
  description: >-
    **Transit Route API**


    **Applies to**: S1 pricing tier.


    Get Transit Route API will allow trip planning returning the best possible route options between an origin and destination by using multi-modal search.
errorCodes: []
