### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.mobility.gettransititinerarypreview
name: Get Transit Itinerary Preview
service: Maps
groupName: Mobility
apiVersion: "1.0"
summary: >-
  **Transit Itinerary API**


  **Applies to**: S1 pricing tier.


  Returns data according to an itinerary Id previously returned by [Transit Route API](https://aka.ms/AzureMapsMobilityTransitRoute). The basic info contains data as to the various legs comprising  the itinerary, including the locations, public transit lines, start and end times. User can request additional routing information such as the  shape of the itinerary and detailed itinerary schedules is also available, depending on the options selected.An itinerary is available up to 24  hours following a search request.
consumes: []
produces:
- application/json
paths:
- content: GET https://atlas.microsoft.com/mobility/transit/itinerary/json?api-version=1.0&query={query}
- content: GET https://atlas.microsoft.com/mobility/transit/itinerary/json?subscription-key={subscription-key}&api-version=1.0&query={query}&detailType={detailType}&language={language}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: subscription-key
  in: query
  description: One of the Azure Maps keys provided from an Azure Map Account. Refer to the subscription-key security definition.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: query
  in: query
  isRequired: true
  description: The unique id (itineraryId) of an itinerary previously returned by [Transit Route API](https://aka.ms/AzureMapsMobilityTransitRoute).
  types:
  - uid: string
- name: detailType
  in: query
  description: Specify additional details returned in the transit route itinerary response, as a comma separated list.
  types:
  - uid: DetailType
- name: language
  in: query
  description: Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: TransitItineraryResponse
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ErrorResponse
- name: 401 Unauthorized
  headers:
  - name: WWW-Authenticate
    value: string
  description: Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.
  types:
  - uid: ErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ErrorResponse
requestHeader:
- name: x-ms-client-id
  in: header
  description: 'Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.    '
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: DetailType
  description: Specify additional details returned in the transit route itinerary response, as a comma separated list.
  kind: enum
  properties:
  - name: geometry
    description: Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg passes through. For walk and bike legs, will return also the turn-by-turn navigation data.
    types:
    - uid: string
  - name: schedule
    description: Static schedule data as to all departures of Public Transit legs for the current 24 hours. Data is guaranteed to be returned only between the current day and 3 days forward.
    types:
    - uid: string
- name: TransitItineraryResponse
  description: This object is returned from a successful Get Transit Itinerary call
  kind: object
  properties:
  - name: departureTime
    description: The date and time of departure from the origin point in ISO 8601 format, e.g. 1996-12-19T16:39:57-08:00.
    types:
    - uid: string
  - name: arrivalTime
    description: The date and time of arrival at the destination point in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.
    types:
    - uid: string
  - name: legs
    description: An array summarizing the legs of this itinerary.
    types:
    - uid: Leg
      isArray: true
- name: ErrorResponse
  description: This response object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API
    types:
    - uid: Error
- name: Leg
  kind: object
  properties:
  - name: legType
    description: ''
    types:
    - uid: Walk
    - uid: Bicycle
    - uid: Tram
    - uid: Subway
    - uid: Rail
    - uid: Bus
    - uid: Ferry
    - uid: CableCar
    - uid: Gondola
    - uid: Funicular
    - uid: PathWayWalk
    - uid: Wait
    - uid: waitOnVehicle
    typesTitle: enum
  - name: legStartTime
    description: Start time for the leg.
    types:
    - uid: string
  - name: legEndTime
    description: End time for the leg.
    types:
    - uid: string
  - name: steps
    description: In case of walk or bike leg, the directions.
    types:
    - uid: Step
      isArray: true
  - name: origin
    description: The walk/bike leg’s origin.
    types:
    - uid: LegPoint
  - name: destination
    description: The walk/bike leg’s destination.
    types:
    - uid: LegPoint
  - name: geometry
    description: A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
    types:
    - uid: GeoJSONLineString
  - name: lineGroup
    description: In case of a public transit leg, the line group serving this leg.
    types:
    - uid: LineGroup
  - name: line
    description: In case of a public transit leg, the line serving this leg.
    types:
    - uid: Line
  - name: stops
    description: List of stops comprising the line’s route within the leg (e.g. the stops the leg passes through).
    types:
    - uid: Stop
      isArray: true
  - name: departures
    description: Relevant for Public Transit and Wait legs only
    types:
    - uid: LineArrival
      isArray: true
  - name: waitOnVehicle
    description: Indicates whether it’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number).
    types:
    - uid: string
- name: Error
  description: This object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The HTTP status code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
- name: Step
  kind: object
  properties:
  - name: direction
    description: The walking direction associated with this step.
    types:
    - uid: Direction
  - name: streetName
    description: The name of the street in which this step takes place.
    types:
    - uid: string
- name: LegPoint
  kind: object
  properties:
  - name: position
    description: A location represented as a latitude and longitude.
    types:
    - uid: Coordinate
- name: GeoJSONLineString
  description: A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `type` for the geometry. Value should always be equal to "LineString".
    types:
    - uid: string
  - name: coordinates
    description: Coordinates for the `LineString` geometry.
    types:
    - uid: array
      isArray: true
- name: LineGroup
  description: A line group
  kind: object
  properties:
  - name: lineGroupId
    description: Line group Id. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A.
    types:
    - uid: string
  - name: agencyId
    description: The Id of the transit agency, for example, '5872'.
    types:
    - uid: string
  - name: agencyName
    description: The name of the transit agency, e.g. Metro Transit.
    types:
    - uid: string
  - name: lineNumber
    description: The transit line number.
    types:
    - uid: string
  - name: caption1
    description: A descriptive string. In case caption2 is null, should be used alone as a subtitle to the line number (i.e. Circular). In case caption2 has a value present, should be used in conjunction with it (i.e. Rome ↔ Napoli).
    types:
    - uid: string
  - name: caption2
    description: A desciptive string.
    types:
    - uid: string
  - name: color
    description: HEX color for the line.
    types:
    - uid: string
  - name: transitType
    description: The public transit type of the line.
    types:
    - uid: TransitType
- name: Line
  description: A stop line
  kind: object
  properties:
  - name: lineId
    description: Line Id.
    types:
    - uid: string
  - name: lineGroupId
    description: Line group Id. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A.
    types:
    - uid: string
  - name: direction
    description: Line direction. Possible values 'forward' or 'backward'.
    types:
    - uid: string
  - name: agencyId
    description: The Id of the transit agency, for example, '5872'.
    types:
    - uid: string
  - name: agencyName
    description: The name of the transit agency, for example, 'NJ Transit'.
    types:
    - uid: string
  - name: lineNumber
    description: The transit line number.
    types:
    - uid: string
  - name: origin
    description: The line’s origin, will be present according to metro settings.
    types:
    - uid: string
  - name: lineDestination
    description: The line’s user displayable destination.
    types:
    - uid: string
  - name: mostFrequentPatternId
    description: Most common pattern for the line.
    types:
    - uid: string
  - name: transitType
    description: The public transit type of the line.
    types:
    - uid: TransitType
- name: Stop
  description: The stop's basic info
  kind: object
  properties:
  - name: stopId
    description: The unique Azure Maps identifier for the respective public transit stop. When referring stops overtime, it is suggested to use stopId that will not change if the physical stop exists.
    types:
    - uid: string
  - name: stopKey
    description: The GTFS stop Id. GTFS stop Ids are provided by the transit authority and subject to change.
    types:
    - uid: string
  - name: stopName
    description: The name of the stop.
    types:
    - uid: string
  - name: stopCode
    description: The stop code displayed at the physical stop. Returned if available.
    types:
    - uid: string
  - name: position
    description: The Stop's location, latitude and longitude.
    types:
    - uid: Coordinate
  - name: mainTransitType
    description: The transit type of most lines stopping at this stop. One of Tram, Subway, Rail, Bus, Ferry, CableCar, Gondola, Funicular
    types:
    - uid: string
  - name: mainAgencyId
    description: The Id of the transit agency of most lines stopping at this stop. For example '5872'.
    types:
    - uid: string
  - name: mainAgencyName
    description: The name of the agency of most lines stopping at this stop, for example, 'Metro Transit'.
    types:
    - uid: string
- name: LineArrival
  kind: object
  properties:
  - name: lineId
    description: Line Id.
    types:
    - uid: string
  - name: stopId
    description: The unique Azure Maps identifier for the respective public transit stop. When referring stops overtime, it is suggested to use stopId that will not change if the physical stop exists.
    types:
    - uid: string
  - name: scheduleTime
    description: The date and time of departure from the stop in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.
    types:
    - uid: string
  - name: scheduleType
    description: Whether the result is based on real-time or static data.
    types:
    - uid: ScheduleType
- name: Direction
  description: The walking directions guidance.
  kind: object
  properties:
  - name: relativeDirection
    description: The relative walking direction associated with applicable step.
    types:
    - uid: RelativeDirection
  - name: absoluteDirection
    description: The absolute walking direction associated with this step.
    types:
    - uid: AbsoluteDirection
- name: Coordinate
  description: A location represented as a latitude and longitude.
  kind: object
  properties:
  - name: latitude
    isReadyOnly: true
    description: Latitude property
    types:
    - uid: number
  - name: longitude
    isReadyOnly: true
    description: Longitude property
    types:
    - uid: number
- name: TransitType
  kind: enum
  properties:
  - name: Bus
    description: bus
    types:
    - uid: string
  - name: Cable
    description: cableCar
    types:
    - uid: string
  - name: Ferry
    description: ferry
    types:
    - uid: string
  - name: Funicular
    description: funicular
    types:
    - uid: string
  - name: Gondola
    description: gondola
    types:
    - uid: string
  - name: Rail
    description: rail
    types:
    - uid: string
  - name: Tram
    description: tram
    types:
    - uid: string
  - name: Subway
    description: subway
    types:
    - uid: string
- name: ScheduleType
  description: Whether the result is based on real-time or static data.
  kind: enum
  properties:
  - name: scheduledTime
    description: Returned when estimated time of arrival is based on real-time data.
    types:
    - uid: string
  - name: realTime
    description: Returned when estimated time of arrival is based on static data.
    types:
    - uid: string
- name: RelativeDirection
  description: The relative walking direction associated with applicable step.
  kind: enum
  properties:
  - name: depart
    description: Leave
    types:
    - uid: string
  - name: hardLeft
    description: Turn sharp left.
    types:
    - uid: string
  - name: left
    description: Turn left.
    types:
    - uid: string
  - name: slightlyLeft
    description: Turn slightly left.
    types:
    - uid: string
  - name: continue
    description: Keep going.
    types:
    - uid: string
  - name: slightlyRight
    description: Turn slightly right.
    types:
    - uid: string
  - name: right
    description: Turn right.
    types:
    - uid: string
  - name: hardRight
    description: Turn sharp right.
    types:
    - uid: string
  - name: circleClockwise
    description: Circle clockwise.
    types:
    - uid: string
  - name: circleCounterclockwise
    description: Circle counter clockwise.
    types:
    - uid: string
  - name: elevator
    description: Take the elevator.
    types:
    - uid: string
  - name: uturnLeft
    description: Make a U-turn left.
    types:
    - uid: string
  - name: uturnRight
    description: Make a U-turn right.
    types:
    - uid: string
- name: AbsoluteDirection
  description: The absolute walking direction associated with this step.
  kind: enum
  properties:
  - name: north
    description: North
    types:
    - uid: string
  - name: northeast
    description: NorthEast
    types:
    - uid: string
  - name: east
    description: East
    types:
    - uid: string
  - name: southeast
    description: SouthEast
    types:
    - uid: string
  - name: south
    description: South
    types:
    - uid: string
  - name: southwest
    description: SouthWest
    types:
    - uid: string
  - name: west
    description: West
    types:
    - uid: string
  - name: northwest
    description: NorthWest
    types:
    - uid: string
examples:
- name: TransitItinerary
  request:
    uri: GET https://atlas.microsoft.com/mobility/transit/itinerary/json?api-version=1.0&query=ba9e2070-7f0f-4dd4-b172-a3c7e1e59433---201906049E914282EFC946F19550436A41A8D26E:0---121&detailType=geometry
  responses:
  - statusCode: "200"
    body: >-
      {
        "departureTime": "2019-06-04T16:45:26+00:00",
        "arrivalTime": "2019-06-04T16:48:26+00:00",
        "legs": [
          {
            "legType": "Bicycle",
            "legStartTime": "2019-06-04T16:45:26+00:00",
            "legEndTime": "2019-06-04T16:48:26+00:00",
            "steps": [
              {
                "direction": {
                  "relativeDirection": "depart"
                },
                "streetName": "3rd Avenue"
              },
              {
                "direction": {
                  "relativeDirection": "right"
                },
                "streetName": "Dean Street"
              }
            ],
            "origin": {
              "position": {
                "latitude": 40.680903,
                "longitude": -73.983723
              }
            },
            "destination": {
              "position": {
                "latitude": 40.682051,
                "longitude": -73.976702
              }
            },
            "geometry": {
              "type": "LineString",
              "coordinates": [
                [
                  -73.98373,
                  40.6809
                ],
                [
                  -73.98371,
                  40.68089
                ],
                [
                  -73.98328,
                  40.68152
                ],
                [
                  -73.9831,
                  40.68179
                ],
                [
                  -73.98302,
                  40.68191
                ],
                [
                  -73.9829,
                  40.68208
                ],
                [
                  -73.98286,
                  40.68214
                ],
                [
                  -73.98243,
                  40.68278
                ],
                [
                  -73.98199,
                  40.68342
                ],
                [
                  -73.98161,
                  40.68398
                ],
                [
                  -73.98157,
                  40.68405
                ],
                [
                  -73.9812,
                  40.6839
                ],
                [
                  -73.97984,
                  40.68338
                ],
                [
                  -73.9794,
                  40.6832
                ],
                [
                  -73.97924,
                  40.68314
                ],
                [
                  -73.97912,
                  40.68309
                ],
                [
                  -73.97899,
                  40.68304
                ],
                [
                  -73.97675,
                  40.68217
                ]
              ]
            }
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes: []
- name: subscription-key
  type: apiKey
  description: This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.
  in: query
errorCodes: []
