{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Azure Maps Mobility Service"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported.",
      "scopes": {
        "user_impersonation": "Impersonates a user's Azure Active Directory account."
      }
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "description": "This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "azure_auth": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "responses": {
    "400": {
      "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "401": {
      "description": "Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Bearer realm=\"https://atlas.microsoft.com/\", error=\"invalid_token\", error_description=\"The access token expired\""
        }
      }
    },
    "403": {
      "description": "Permission, capacity, or authentication issues.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404": {
      "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500": {
      "description": "An error occurred while processing the request. Please try again later.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "parameters": {
    "ClientId": {
      "name": "x-ms-client-id",
      "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.    ",
      "type": "string",
      "in": "header",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "SubscriptionKey": {
      "name": "subscription-key",
      "description": "One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 1.0",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "JsonFormat": {
      "name": "format",
      "description": "Desired format of the response. Only `json` format is supported.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json"
      ],
      "x-ms-enum": {
        "name": "JsonFormat",
        "modelAsString": false,
        "values": [
          {
            "value": "json",
            "description": "[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "MetroId": {
      "name": "metroId",
      "description": "The unique id of the metro area. Required parameter specifying the required metro area to search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityMetro).",
      "type": "integer",
      "in": "query",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "MobilityLanguage": {
      "name": "language",
      "description": "Language in which search results will be returned.  Only NGT is supported. Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for details.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/mobility/metroArea/info/{format}": {
      "get": {
        "x-publish": true,
        "operationId": "Mobility_GetMetroAreaInfoPreview",
        "description": "**Metro Area Info API**\n\n**Applies to**: S1 pricing tier.\n\nService allows to request additional information for metro areas in which the Azure Maps Mobility Service is available. Information such as supported transit types, transit agencies and active alerts is available, depending on the options selected.",
        "x-ms-examples": {
          "MetroAreaInfo": {
            "parameters": {
              "api-version": "1.0",
              "format": "json",
              "query": "121",
              "detailType": "agencies"
            },
            "responses": {
              "200": {
                "body": {
                  "metroName": "NYC-NJ",
                  "agencies": [
                    {
                      "agencyId": "121---10368",
                      "agencyKey": "LIBUS",
                      "agencyName": "NICE bus",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---10369",
                      "agencyKey": "GOOGLESTAM_TRANSIT",
                      "agencyName": "CT Transit- Stamford",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---10370",
                      "agencyKey": "0",
                      "agencyName": "Norwalk Transit District",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---516",
                      "agencyKey": "NJB",
                      "agencyName": "NJ Transit",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1175189",
                      "agencyKey": "42700",
                      "agencyName": "Statue Cruises",
                      "transitType": {
                        "transitType": "Ferry",
                        "captionOverride": "Ferry"
                      }
                    },
                    {
                      "agencyId": "121---1058901",
                      "agencyKey": "SCT",
                      "agencyName": "Suffolk County Transit",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1175188",
                      "agencyKey": "42705",
                      "agencyName": "Seastreak",
                      "transitType": {
                        "transitType": "Ferry",
                        "captionOverride": "Ferry"
                      }
                    },
                    {
                      "agencyId": "121---1217492",
                      "agencyKey": "1",
                      "agencyName": "NYC Ferry Shuttle bus",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---726988",
                      "agencyKey": "LI",
                      "agencyName": "LIRR",
                      "transitType": {
                        "transitType": "Rail",
                        "captionOverride": "Rail"
                      }
                    },
                    {
                      "agencyId": "121---1217493",
                      "agencyKey": "1",
                      "agencyName": "NYC Ferry",
                      "transitType": {
                        "transitType": "Ferry",
                        "captionOverride": "Ferry"
                      }
                    },
                    {
                      "agencyId": "121---855111",
                      "agencyKey": "MTA NYCT",
                      "agencyName": "MTA Subway",
                      "transitType": {
                        "transitType": "Subway",
                        "captionOverride": "Subway"
                      }
                    },
                    {
                      "agencyId": "121---855110",
                      "agencyKey": "MTA NYCT",
                      "agencyName": "Staten Island Railway",
                      "transitType": {
                        "transitType": "Rail",
                        "captionOverride": "Rail"
                      }
                    },
                    {
                      "agencyId": "121---5844",
                      "agencyKey": "151",
                      "agencyName": "PATH",
                      "transitType": {
                        "transitType": "Rail",
                        "captionOverride": "Rail"
                      }
                    },
                    {
                      "agencyId": "121---965398",
                      "agencyKey": "631",
                      "agencyName": "Port Authority of NY and NJ",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---865943",
                      "agencyKey": "5942",
                      "agencyName": "Suffolk County Transit",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1020565",
                      "agencyKey": "24415",
                      "agencyName": "Staten Island Ferry",
                      "transitType": {
                        "transitType": "Ferry",
                        "captionOverride": "Ferry"
                      }
                    },
                    {
                      "agencyId": "121---865942",
                      "agencyKey": "14639",
                      "agencyName": "Long Beach NY",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1358024",
                      "agencyKey": "72",
                      "agencyName": "Ulster County Area Transit",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1325321",
                      "agencyKey": "58939",
                      "agencyName": "Hampton Jitney",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1440628",
                      "agencyKey": "63882",
                      "agencyName": "Housatonic Area Regional Transit",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---775148",
                      "agencyKey": "119",
                      "agencyName": "AirTrain",
                      "transitType": {
                        "transitType": "Tram",
                        "captionOverride": "Light Rail"
                      }
                    },
                    {
                      "agencyId": "121---427",
                      "agencyKey": "1",
                      "agencyName": "Metro-North Railroad",
                      "transitType": {
                        "transitType": "Rail",
                        "captionOverride": "Rail"
                      }
                    },
                    {
                      "agencyId": "121---856508",
                      "agencyKey": "5705",
                      "agencyName": "Roosevelt Island Cable Car",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1460323",
                      "agencyKey": "65856",
                      "agencyName": "Downtown Alliance",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---856507",
                      "agencyKey": "5705",
                      "agencyName": "Roosevelt Island Cable Car",
                      "transitType": {
                        "transitType": "CableCar",
                        "captionOverride": "Cable car"
                      }
                    },
                    {
                      "agencyId": "121---1227748",
                      "agencyKey": "SLE",
                      "agencyName": "Shore Line East",
                      "transitType": {
                        "transitType": "Rail",
                        "captionOverride": "Rail"
                      }
                    },
                    {
                      "agencyId": "121---856506",
                      "agencyKey": "5703",
                      "agencyName": "NY Waterway",
                      "transitType": {
                        "transitType": "Ferry",
                        "captionOverride": "Ferry"
                      }
                    },
                    {
                      "agencyId": "121---1367715",
                      "agencyKey": "67",
                      "agencyName": "Dutchess County Public Transit",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---10169",
                      "agencyKey": "NJT",
                      "agencyName": "NJ Transit Rail",
                      "transitType": {
                        "transitType": "Rail",
                        "captionOverride": "Rail"
                      }
                    },
                    {
                      "agencyId": "121---10170",
                      "agencyKey": "NJT",
                      "agencyName": "NJ Transit Rail",
                      "transitType": {
                        "transitType": "Tram",
                        "captionOverride": "Light Rail"
                      }
                    },
                    {
                      "agencyId": "121---857463",
                      "agencyKey": "MTA NYCT",
                      "agencyName": "MTA Bus",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---11515",
                      "agencyKey": "WCDOT",
                      "agencyName": "Bee-Line Bus",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    },
                    {
                      "agencyId": "121---1177901",
                      "agencyKey": "0",
                      "agencyName": "LANTA",
                      "transitType": {
                        "transitType": "Bus",
                        "captionOverride": "Bus"
                      }
                    }
                  ]
                }
              },
              "400": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "400 BadRequest",
                    "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
                  }
                }
              },
              "401": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "401 Unauthorized",
                    "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
                  }
                }
              },
              "403": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "403 Forbidden",
                    "message": "Permission, capacity, or authentication issues."
                  }
                }
              },
              "404": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "404 NotFound",
                    "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
                  }
                }
              },
              "500": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "500 InternalServerError",
                    "message": "An error occurred while processing the request. Please try again later."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/SubscriptionKey"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/JsonFormat"
          },
          {
            "name": "query",
            "description": "metroId. The unique id of the metro area. Required parameter specifying the required metro area to search in. Can be retrieved via [Get Metro Area API](https://aka.ms/AzureMapsMobilityTransitRoute).",
            "in": "query",
            "required": true,
            "type": "integer"
          },
          {
            "name": "detailType",
            "description": "Specify details requested respective to the metro area as a comma separated list. Supported values are:\n  * `agencies` - Return a list of all public transit agencies operating in the given metro area.\n  * `alerts` - Returns a list of all active service alerts, that are defined in the metro or agency level, and are not connected to a specific line or stop.\n  * `alertDetails` - Applicable only when alerts are requested. Returns details of the alerts.\n  * `transitTypes` - Returns a list of all supported transit types in the given metro area.",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "agencies",
                "alerts",
                "alertDetails",
                "transitTypes"
              ],
              "x-ms-enum": {
                "name": "MetroAreaDetailType",
                "modelAsString": false,
                "values": [
                  {
                    "value": "agencies",
                    "description": "Return a list of all public transit agencies operating in the given metro area."
                  },
                  {
                    "value": "alerts",
                    "description": "Returns a list of all active service alerts, that are defined in the metro or agency level, and are not connected to a specific line or stop."
                  },
                  {
                    "value": "alertDetails",
                    "description": "Applicable only when alerts are requested. Returns details of the alerts."
                  },
                  {
                    "value": "transitTypes",
                    "description": "Returns a list of all supported transit types in the given metro area."
                  }
                ]
              }
            },
            "x-ms-parameter-location": "method"
          },
          {
            "$ref": "#/parameters/MobilityLanguage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MetroAreaInfoResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [],
        "x-internal-toc-name": "Get Metro Area Info Preview"
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "description": "This response object is returned when an error occurs in the Maps API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Maps API",
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The HTTP status code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        }
      }
    },
    "Coordinate": {
      "description": "A location represented as a latitude and longitude.",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "Latitude property",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "longitude": {
          "description": "Longitude property",
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      }
    },
    "GeoJSONGeometry": {
      "description": "A valid `GeoJSON` geometry object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.",
      "type": "object",
      "discriminator": "type",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Specifies the `GeoJSON` geometry type. Must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection.",
          "type": "string",
          "enum": [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection"
          ],
          "x-ms-enum": {
            "name": "GeoJSONGeometryType",
            "modelAsString": false,
            "values": [
              {
                "value": "Point",
                "description": "`GeoJSON Point` geometry."
              },
              {
                "value": "MultiPoint",
                "description": "`GeoJSON MultiPoint` geometry."
              },
              {
                "value": "LineString",
                "description": "`GeoJSON LineString` geometry."
              },
              {
                "value": "MultiLineString",
                "description": "`GeoJSON MultiLineString` geometry."
              },
              {
                "value": "Polygon",
                "description": "`GeoJSON Polygon` geometry."
              },
              {
                "value": "MultiPolygon",
                "description": "`GeoJSON MultiPolygon` geometry."
              },
              {
                "value": "GeometryCollection",
                "description": "`GeoJSON GeometryCollection` geometry."
              }
            ]
          }
        }
      }
    },
    "Polygon": {
      "description": "A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.    ",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        {
          "properties": {
            "type": {
              "description": "Specifies the `type` for the object. Value should always be equal to \"Polygon\".",
              "type": "string"
            },
            "coordinates": {
              "description": "Coordinates for the `Polygon` geometry type.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJSONLinearRing"
              }
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "LineString": {
      "description": "A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        {
          "properties": {
            "type": {
              "description": "Specifies the `type` for the geometry. Value should always be equal to \"LineString\".",
              "type": "string"
            },
            "coordinates": {
              "description": "Coordinates for the `LineString` geometry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJSONPosition"
              }
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "GeoJSONLinearRing": {
      "description": "Though a linear ring is not explicitly represented as a GeoJSON geometry type, it helps in defining the polygon as an array of linear rings. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GeoJSONPosition"
      }
    },
    "GeoJSONPosition": {
      "description": "A valid `GeoJSON Position` geometry type. A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.",
      "type": "array",
      "items": {
        "type": "number",
        "format": "double"
      }
    },
    "MetroAreaResponse": {
      "description": "This object is returned from a successful Get Metro Area call",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetroAreaResult"
          }
        }
      }
    },
    "MetroAreaInfoResponse": {
      "description": "This object is returned from a successful Metro Area call.",
      "type": "object",
      "properties": {
        "metroName": {
          "type": "string",
          "description": "The name of the metro area."
        },
        "transitTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransitTypeResult"
          }
        },
        "agencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agency"
          }
        },
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Alert"
          }
        }
      }
    },
    "NearbyTransitResponse": {
      "description": "This object is returned from a successful Get Nearby Transit call",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransitObjectResult"
          }
        }
      }
    },
    "TransitStopInfoResponse": {
      "description": "This object is returned from a successful Get Transit Stop Info call",
      "type": "object",
      "properties": {
        "stop": {
          "$ref": "#/definitions/Stop"
        },
        "lines": {
          "$ref": "#/definitions/Lines"
        },
        "lineGroups": {
          "$ref": "#/definitions/LineGroups"
        },
        "alerts": {
          "$ref": "#/definitions/Alerts"
        }
      }
    },
    "TransitRouteResponse": {
      "description": "This object is returned from a successful Get Transit Stop Info call",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItineraryResult"
          }
        }
      }
    },
    "TransitItineraryResponse": {
      "description": "This object is returned from a successful Get Transit Itinerary call",
      "type": "object",
      "properties": {
        "departureTime": {
          "description": "The date and time of departure from the origin point in ISO 8601 format, e.g. 1996-12-19T16:39:57-08:00.",
          "type": "string"
        },
        "arrivalTime": {
          "description": "The date and time of arrival at the destination point in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.",
          "type": "string"
        },
        "legs": {
          "$ref": "#/definitions/ItinerarySummary"
        }
      }
    },
    "CarShareResponse": {
      "description": "Details of the car share vehicle. Name is always returned. Level of other returned details depends on car share operator.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Car share provider specific value – most often will be the vehicle's license plate.",
          "type": "string"
        },
        "model": {
          "description": "Model of the car.",
          "type": "string"
        },
        "seatCount": {
          "description": "Total number of seats in the vehicle.",
          "type": "integer"
        },
        "fuelLevel": {
          "description": "Percentage of fuel indicating the fuel level, 100 being full, 0 empty. Unit: percentage (%).",
          "type": "integer"
        },
        "batteryLevel": {
          "description": "Percentage of battery indicating the battery level, 100 being full, 0 empty. Unit: percentage (%).",
          "type": "integer"
        },
        "pricing": {
          "description": "Pricing details including currency, reservation price and usage price.",
          "$ref": "#/definitions/Pricing"
        },
        "position": {
          "description": "Last known location of the vehicle.",
          "$ref": "#/definitions/Coordinate"
        },
        "operatorInfo": {
          "description": "Details of the share operator.",
          "$ref": "#/definitions/OperatorInfo"
        }
      }
    },
    "TransitDockInfoResponse": {
      "description": "This object is returned from a successful Transit Dock Info call.",
      "type": "object",
      "properties": {
        "availableVehicles": {
          "description": "Number of available bikes / scooters in the given bike or scooter docking station.",
          "type": "integer"
        },
        "vacantLocations": {
          "description": "Number of vacant dock locations in the given bike or scooter docking station.",
          "type": "integer"
        },
        "position": {
          "description": "The dock's position.",
          "$ref": "#/definitions/Coordinate"
        },
        "lastUpdated": {
          "description": "When the vacancy and availability information was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "operatorInfo": {
          "description": "Details of the share operator. Id is always returned. Level of other returned details depends on the operator.",
          "$ref": "#/definitions/OperatorInfo"
        }
      }
    },
    "TransitLineInfoResponse": {
      "description": "This object is returned from a successful Transit Line Info call.",
      "type": "object",
      "properties": {
        "lineGroup": {
          "description": "Groups together all lines that are logically part of the same group. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A.",
          "$ref": "#/definitions/LineGroup"
        },
        "lines": {
          "description": "The line group’s basic info and list of the lines.",
          "$ref": "#/definitions/Lines"
        },
        "stops": {
          "description": "List of stops the line group goes through.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stop"
          }
        },
        "patterns": {
          "description": "List of patterns this group is comprised of. A pattern consists of a stop sequence and shape per a line in GeoJSON format.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pattern"
          }
        },
        "schedule": {
          "description": "Line schedule for the current 24h. May be null in case no schedule exists for the current time.",
          "$ref": "#/definitions/LineArrival"
        }
      }
    },
    "RealTimeArrivalsResponse": {
      "description": "This object is returned from a successful Get Real Time Arrival Info call.",
      "type": "object",
      "properties": {
        "results": {
          "description": "Results array. Contains results related details.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealTimeArrivalResult"
          }
        }
      }
    },
    "MetroAreaResult": {
      "description": "Details of the metro area.",
      "type": "object",
      "properties": {
        "metroId": {
          "description": "The metro area's Id for use with other API calls.",
          "type": "integer"
        },
        "metroName": {
          "description": "The main display name of the metro.",
          "type": "string"
        },
        "geometry": {
          "$ref": "#/definitions/Polygon"
        },
        "viewport": {
          "$ref": "#/definitions/ResultViewport"
        }
      }
    },
    "ResultViewport": {
      "description": "The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport.",
      "type": "object",
      "properties": {
        "topLeftPoint": {
          "$ref": "#/definitions/Coordinate"
        },
        "btmRightPoint": {
          "$ref": "#/definitions/Coordinate"
        }
      }
    },
    "TransitObjectResult": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The object identifier found as a result of the query, for example, stopId for stops.",
          "type": "string"
        },
        "type": {
          "description": "The type of object found as a result of the query.",
          "type": "string"
        },
        "objectDetails": {
          "description": "The object specific details.",
          "type": "object"
        },
        "position": {
          "description": "The transit object's position.",
          "$ref": "#/definitions/Coordinate"
        },
        "viewport": {
          "$ref": "#/definitions/ResultViewport"
        }
      }
    },
    "Stop": {
      "description": "The stop's basic info",
      "type": "object",
      "properties": {
        "stopId": {
          "description": "The unique Azure Maps identifier for the respective public transit stop. When referring stops overtime, it is suggested to use stopId that will not change if the physical stop exists.",
          "type": "string"
        },
        "stopKey": {
          "description": "The GTFS stop Id. GTFS stop Ids are provided by the transit authority and subject to change.",
          "type": "string"
        },
        "stopName": {
          "description": "The name of the stop.",
          "type": "string"
        },
        "stopCode": {
          "description": "The stop code displayed at the physical stop. Returned if available.",
          "type": "string"
        },
        "position": {
          "description": "The Stop's location, latitude and longitude.",
          "$ref": "#/definitions/Coordinate"
        },
        "mainTransitType": {
          "description": "The transit type of most lines stopping at this stop. One of Tram, Subway, Rail, Bus, Ferry, CableCar, Gondola, Funicular",
          "type": "string"
        },
        "mainAgencyId": {
          "description": "The Id of the transit agency of most lines stopping at this stop. For example '5872'.",
          "type": "string"
        },
        "mainAgencyName": {
          "description": "The name of the agency of most lines stopping at this stop, for example, 'Metro Transit'.",
          "type": "string"
        }
      }
    },
    "Lines": {
      "description": "A list of stop lines",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Line"
      }
    },
    "Line": {
      "description": "A stop line",
      "type": "object",
      "properties": {
        "lineId": {
          "description": "Line Id.",
          "type": "string"
        },
        "lineGroupId": {
          "description": "Line group Id. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A.",
          "type": "string"
        },
        "direction": {
          "description": "Line direction. Possible values 'forward' or 'backward'.",
          "type": "string"
        },
        "agencyId": {
          "description": "The Id of the transit agency, for example, '5872'.",
          "type": "string"
        },
        "agencyName": {
          "description": "The name of the transit agency, for example, 'NJ Transit'.",
          "type": "string"
        },
        "lineNumber": {
          "description": "The transit line number.",
          "type": "string"
        },
        "origin": {
          "description": "The line’s origin, will be present according to metro settings.",
          "type": "string"
        },
        "lineDestination": {
          "description": "The line’s user displayable destination.",
          "type": "string"
        },
        "mostFrequentPatternId": {
          "description": "Most common pattern for the line.",
          "type": "string"
        },
        "transitType": {
          "description": "The public transit type of the line.",
          "$ref": "#/definitions/TransitType"
        }
      }
    },
    "LineGroups": {
      "description": "A list of line groups",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LineGroup"
      }
    },
    "LineGroup": {
      "description": "A line group",
      "type": "object",
      "properties": {
        "lineGroupId": {
          "description": "Line group Id. Typically contains 2 lines having the same agency and line, one going from A to B, and the other from B to A.",
          "type": "string"
        },
        "agencyId": {
          "description": "The Id of the transit agency, for example, '5872'.",
          "type": "string"
        },
        "agencyName": {
          "description": "The name of the transit agency, e.g. Metro Transit.",
          "type": "string"
        },
        "lineNumber": {
          "description": "The transit line number.",
          "type": "string"
        },
        "caption1": {
          "description": "A descriptive string. In case caption2 is null, should be used alone as a subtitle to the line number (i.e. Circular). In case caption2 has a value present, should be used in conjunction with it (i.e. Rome ↔ Napoli).",
          "type": "string"
        },
        "caption2": {
          "description": "A descriptive string.",
          "type": "string"
        },
        "color": {
          "description": "HEX color for the line.",
          "type": "string"
        },
        "transitType": {
          "description": "The public transit type of the line.",
          "$ref": "#/definitions/TransitType"
        }
      }
    },
    "Alerts": {
      "description": "A list of stop alerts",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Alert"
      }
    },
    "Alert": {
      "description": "Basic information associated with the active alert.",
      "type": "object",
      "properties": {
        "alertSummary": {
          "description": "Text summarizing the alert.",
          "type": "string"
        },
        "publicationDate": {
          "description": "The date and time in ISO 8601 format, e.g. 2019-04-05T14:24:18-04:00.",
          "type": "string",
          "format": "date-time"
        },
        "category": {
          "description": "The category of the alert. One of None, Regular, Info, Modified, Critical.",
          "type": "string"
        },
        "alertLevel": {
          "description": "The level at which the respective alert extents to. One of Metro, Agency, Line, Stop.",
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/AlertDetail"
        }
      }
    },
    "AlertDetail": {
      "description": "A list of alert details.",
      "type": "object",
      "properties": {
        "agencyId": {
          "description": "The Id of the relevant transit agency, for example, '5872'.",
          "type": "string"
        },
        "agencyName": {
          "description": "Name of the relevant transit agency, e.g. Metro Transit.",
          "type": "string"
        },
        "title": {
          "description": "The title of the alert.",
          "type": "string"
        },
        "description": {
          "description": "A short description of the alert.",
          "$ref": "#/definitions/AlertDescription"
        },
        "activeFrom": {
          "description": "The start time of the alert in the local time in ISO format (2019-04-05T14:24:18-04:00).",
          "type": "string",
          "format": "date-time"
        },
        "activeTo": {
          "description": "The estimated end time of the alert in the local time in ISO format (2019-04-05T14:24:18-04:00).",
          "type": "string",
          "format": "date-time"
        },
        "effect": {
          "description": "Service Alert effect - one of SA_NO_SERVICE, SA_REDUCED_SERVICE, SA_SIGNIFICANT_DELAYS, SA_DETOUR, SA_ADDITIONAL_SERVICE, SA_MODIFIED_SERVICE, SA_OTHER_EFFECT, SA_STOP_MOVED, SA_GOOD_SERVICE, SA_SLEEPING, SA_OTHER_EFFECT",
          "type": "string"
        }
      }
    },
    "ItineraryResult": {
      "type": "object",
      "properties": {
        "itineraryId": {
          "description": "A unique identifier of the returned itinerary.",
          "type": "string"
        },
        "departureTime": {
          "description": "The date and time of departure from the origin point in ISO 8601 format, e.g. 1996-12-19T16:39:57-08:00.",
          "type": "string",
          "format": "date-time"
        },
        "arrivalTime": {
          "description": "The date and time of arrival at the destination point in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.",
          "type": "string",
          "format": "date-time"
        },
        "travelTimeInSeconds": {
          "description": "Estimated travel time in seconds.",
          "type": "integer"
        },
        "numberOfLegs": {
          "description": "Number of legs.",
          "type": "integer"
        },
        "legs": {
          "description": "An array summarizing the legs of this itinerary.",
          "$ref": "#/definitions/RouteItinerarySummary"
        }
      }
    },
    "RouteItinerarySummary": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/RouteItineraryLeg"
      }
    },
    "RouteItineraryLeg": {
      "type": "object",
      "properties": {
        "legType": {
          "description": "The travel mode of the leg.",
          "$ref": "#/definitions/LegType"
        },
        "legStartTime": {
          "description": "Start time for the leg in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.",
          "type": "string"
        },
        "legEndTime": {
          "description": "End time for the leg in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.",
          "type": "string"
        },
        "caption": {
          "description": "For Public Transit legs the caption of the line serving the leg, for example, line number.",
          "type": "string"
        },
        "lengthInMeters": {
          "description": "The total distance of the leg in meters.",
          "type": "integer"
        }
      }
    },
    "ItinerarySummary": {
      "description": "An array summarizing the legs of this itinerary.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Leg"
      }
    },
    "Leg": {
      "type": "object",
      "properties": {
        "legType": {
          "description": "The travel mode of the leg.",
          "$ref": "#/definitions/LegType"
        },
        "legStartTime": {
          "description": "Start time for the leg.",
          "type": "string"
        },
        "legEndTime": {
          "description": "End time for the leg.",
          "type": "string"
        },
        "steps": {
          "description": "In case of walk or bike leg, the directions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Step"
          }
        },
        "origin": {
          "description": "The walk/bike leg’s origin.",
          "$ref": "#/definitions/LegPoint"
        },
        "destination": {
          "description": "The walk/bike leg’s destination.",
          "$ref": "#/definitions/LegPoint"
        },
        "geometry": {
          "$ref": "#/definitions/LineString"
        },
        "lineGroup": {
          "description": "In case of a public transit leg, the line group serving this leg.",
          "$ref": "#/definitions/LineGroup"
        },
        "line": {
          "description": "In case of a public transit leg, the line serving this leg.",
          "$ref": "#/definitions/Line"
        },
        "stops": {
          "description": "List of stops comprising the line’s route within the leg (e.g. the stops the leg passes through).",
          "$ref": "#/definitions/Stops"
        },
        "departures": {
          "description": "Relevant for Public Transit and Wait legs only",
          "$ref": "#/definitions/Departures"
        },
        "waitOnVehicle": {
          "description": "Indicates whether it’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number).",
          "type": "string"
        }
      }
    },
    "LegType": {
      "type": "string",
      "enum": [
        "Walk",
        "Bicycle",
        "Tram",
        "Subway",
        "Rail",
        "Bus",
        "Ferry",
        "Cable",
        "Gondola",
        "Funicular",
        "PathWayWalk",
        "Wait",
        "WaitOnVehicle"
      ],
      "x-ms-enum": {
        "name": "LegType",
        "modelAsString": false,
        "values": [
          {
            "value": "Walk",
            "description": "Pedestrian walk"
          },
          {
            "value": "Bicycle",
            "description": "Bicycle"
          },
          {
            "value": "Tram",
            "description": "Tram"
          },
          {
            "value": "Subway",
            "description": "Subway"
          },
          {
            "value": "Rail",
            "description": "Rail"
          },
          {
            "value": "Bus",
            "description": "Bus"
          },
          {
            "value": "Ferry",
            "description": "Ferry"
          },
          {
            "value": "Cable",
            "description": "Cable Car"
          },
          {
            "value": "Gondola",
            "description": "Gondola"
          },
          {
            "value": "Funicular",
            "description": "Funicular"
          },
          {
            "value": "PathWayWalk",
            "description": "A Leg describing a walk within a compound, e.g. Central Station"
          },
          {
            "value": "Wait",
            "description": "A Leg describing a wait for the next public transit leg"
          },
          {
            "value": "WaitOnVehicle",
            "description": "It’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change its line number)"
          }
        ]
      }
    },
    "LegPoint": {
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/Coordinate"
        }
      }
    },
    "Stops": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Stop"
      }
    },
    "Step": {
      "type": "object",
      "properties": {
        "direction": {
          "description": "The walking direction associated with this step.",
          "$ref": "#/definitions/Direction"
        },
        "streetName": {
          "description": "The name of the street in which this step takes place.",
          "type": "string"
        }
      }
    },
    "Direction": {
      "description": "The walking directions guidance.",
      "type": "object",
      "properties": {
        "relativeDirection": {
          "description": "The relative walking direction associated with applicable step.",
          "type": "string",
          "enum": [
            "depart",
            "hardLeft",
            "left",
            "slightlyLeft",
            "continue",
            "slightlyRight",
            "right",
            "hardRight",
            "circleClockwise",
            "circleCounterclockwise",
            "elevator",
            "uturnLeft",
            "uturnRight"
          ],
          "x-ms-enum": {
            "name": "RelativeDirection",
            "modelAsString": false,
            "values": [
              {
                "value": "depart",
                "description": "Leave"
              },
              {
                "value": "hardLeft",
                "description": "Turn sharp left."
              },
              {
                "value": "left",
                "description": "Turn left."
              },
              {
                "value": "slightlyLeft",
                "description": "Turn slightly left."
              },
              {
                "value": "continue",
                "description": "Keep going."
              },
              {
                "value": "slightlyRight",
                "description": "Turn slightly right."
              },
              {
                "value": "right",
                "description": "Turn right."
              },
              {
                "value": "hardRight",
                "description": "Turn sharp right."
              },
              {
                "value": "circleClockwise",
                "description": "Circle clockwise."
              },
              {
                "value": "circleCounterclockwise",
                "description": "Circle counter clockwise."
              },
              {
                "value": "elevator",
                "description": "Take the elevator."
              },
              {
                "value": "uturnLeft",
                "description": "Make a U-turn left."
              },
              {
                "value": "uturnRight",
                "description": "Make a U-turn right."
              }
            ]
          }
        },
        "absoluteDirection": {
          "description": "The absolute walking direction associated with this step.",
          "type": "string",
          "enum": [
            "north",
            "northeast",
            "east",
            "southeast",
            "south",
            "southwest",
            "west",
            "northwest"
          ],
          "x-ms-enum": {
            "name": "AbsoluteDirection",
            "modelAsString": false,
            "values": [
              {
                "value": "north",
                "description": "North"
              },
              {
                "value": "northeast",
                "description": "NorthEast"
              },
              {
                "value": "east",
                "description": "East"
              },
              {
                "value": "southeast",
                "description": "SouthEast"
              },
              {
                "value": "south",
                "description": "South"
              },
              {
                "value": "southwest",
                "description": "SouthWest"
              },
              {
                "value": "west",
                "description": "West"
              },
              {
                "value": "northwest",
                "description": "NorthWest"
              }
            ]
          }
        }
      }
    },
    "Departures": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/LineArrival"
      }
    },
    "LineArrival": {
      "type": "object",
      "properties": {
        "lineId": {
          "description": "Line Id.",
          "type": "string"
        },
        "stopId": {
          "description": "The unique Azure Maps identifier for the respective public transit stop. When referring stops overtime, it is suggested to use stopId that will not change if the physical stop exists.",
          "type": "string"
        },
        "scheduleTime": {
          "description": "The date and time of departure from the stop in ISO 8601 format, e.g. 1996-12-19T19:39:57-08:00.",
          "type": "string",
          "format": "date-time"
        },
        "scheduleType": {
          "description": "Whether the result is based on real-time or static data.",
          "$ref": "#/definitions/ScheduleType"
        }
      }
    },
    "Pricing": {
      "type": "object",
      "description": "Pricing details including currency, reservation price and usage price.",
      "properties": {
        "currency": {
          "description": "The [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) of returned prices. Will be returned in case any of the other pricing fields were returned.",
          "type": "string"
        },
        "usagePrice": {
          "description": "The price per minute charged when the vehicle is in use.",
          "type": "string"
        },
        "reservationPrice": {
          "description": "The price per minute charged when the vehicle has been reserved but not yet in use.",
          "type": "string"
        }
      }
    },
    "OperatorInfo": {
      "description": "Contains information about the operator. Apart form Id and name, all other fields are optional and nor always returned.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Id of the operator operating this object.",
          "type": "string"
        },
        "name": {
          "description": "The name of the operator operating this object.",
          "type": "string"
        },
        "description": {
          "description": "Short description about the operator.",
          "type": "string"
        },
        "siteUrl": {
          "description": "Operator's home page.",
          "type": "string"
        }
      }
    },
    "Pattern": {
      "type": "object",
      "description": "Stop-shape-segments of the trip pattern, which are an ordered list of the stops and the shapes connecting them.",
      "properties": {
        "patternId": {
          "description": "Pattern Id, for example, '3267995'.",
          "type": "string"
        },
        "lineId": {
          "description": "Line Id.",
          "type": "string"
        },
        "stopIds": {
          "description": "Stops the line goes through.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "geometry": {
          "description": "Stop sequence and shape per a line in GeoJSON format.",
          "$ref": "#/definitions/LineString"
        }
      }
    },
    "TransitTypeResult": {
      "type": "object",
      "properties": {
        "transitType": {
          "description": "Supported public transit type.",
          "$ref": "#/definitions/TransitType"
        },
        "captionOverride": {
          "description": "For metro areas in which local name is different than the GFTS supported transit type, original name is returned.",
          "type": "string"
        }
      }
    },
    "Agency": {
      "type": "object",
      "description": "Details of the agency.",
      "properties": {
        "agencyId": {
          "description": "The Id of the relevant transit agency, for example, '5872'",
          "type": "string"
        },
        "agencyKey": {
          "description": "The agency’s GTFS Id.",
          "type": "string"
        },
        "agencyName": {
          "description": "Name of the relevant transit agency, e.g. Metro Transit.",
          "type": "string"
        },
        "transitType": {
          "description": "Supported public transit type. One of Tram, Subway, Rail, Bus, Ferry, CableCar, Gondola, Funicular.",
          "$ref": "#/definitions/TransitTypeResult"
        }
      }
    },
    "TransitType": {
      "type": "string",
      "enum": [
        "Bus",
        "CableCar",
        "Ferry",
        "Funicular",
        "Gondola",
        "Rail",
        "Tram",
        "Subway"
      ],
      "x-ms-enum": {
        "name": "TransitType",
        "modelAsString": false,
        "values": [
          {
            "value": "Bus",
            "description": "bus"
          },
          {
            "value": "CableCar",
            "description": "cableCar"
          },
          {
            "value": "Ferry",
            "description": "ferry"
          },
          {
            "value": "Funicular",
            "description": "funicular"
          },
          {
            "value": "Gondola",
            "description": "gondola"
          },
          {
            "value": "Rail",
            "description": "rail"
          },
          {
            "value": "Tram",
            "description": "tram"
          },
          {
            "value": "Subway",
            "description": "subway"
          }
        ]
      }
    },
    "AlertDescription": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Description of the alert.",
          "type": "string"
        },
        "format": {
          "description": "Format of the alert description.",
          "type": "string"
        },
        "sourceUrl": {
          "description": "Source URL.",
          "type": "string"
        }
      }
    },
    "RealTimeArrivalResult": {
      "description": "Contains real-time arrival related details.",
      "type": "object",
      "properties": {
        "arrivalMinutes": {
          "description": "The estimated time of arrival in minutes.",
          "type": "integer"
        },
        "scheduleType": {
          "description": "Whether the result is based on real-time or static data.",
          "$ref": "#/definitions/ScheduleType"
        },
        "patternId": {
          "description": "The pattern Id.",
          "type": "string"
        },
        "line": {
          "description": "The public transit type of the line.",
          "$ref": "#/definitions/Line"
        },
        "stop": {
          "description": "Object for the given stop.",
          "$ref": "#/definitions/Stop"
        }
      }
    },
    "ScheduleType": {
      "description": "Whether the result is based on real-time or static data.",
      "type": "string",
      "enum": [
        "scheduledTime",
        "realTime"
      ],
      "x-ms-enum": {
        "name": "ScheduleType",
        "modelAsString": false,
        "values": [
          {
            "value": "scheduledTime",
            "description": "Returned when estimated time of arrival is based on real-time data."
          },
          {
            "value": "realTime",
            "description": "Returned when estimated time of arrival is based on static data."
          }
        ]
      }
    }
  },
  "x-internal-service-id": "maps",
  "x-internal-service-name": "Maps",
  "x-internal-toc-name": "Mobility",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "GetMetroAreaInfoPreview",
  "x-internal-operation-name": "Get Metro Area Info Preview"
}