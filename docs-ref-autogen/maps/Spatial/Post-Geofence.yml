### YamlMime:RESTOperation
uid: maps.spatial.postgeofence
name: Post Geofence
service: Maps
groupName: Spatial
apiVersion: "1.0"
summary: >-
  **Search Geofence Post API**

  **Applies to:** S1 Pricing tier.

  The Geofence Post API allows you to retrieve the proximity of a coordinate to a  provided geofence or set of fences. With POST call, you do not have to upload the fence data in advance, instead you supply the location of the object you are tracking in query parameters as well as the fence or set of fences data in post request body. See [Geofencing GeoJSON data](https://docs.microsoft.com/en-us/azure/azure-maps/geofence-geojson) for more details on the geofence data format. The response will contain information about the distance from the outer edge of the geofence. A negative value signifies that the  coordinate is inside of the fence while a positive value means that it is outside of the fence.<br><br>This API can be used for a variety of scenarios that include things like asset  tracking, fleet management, or setting up alerts for moving objects.


  The API supports [integration with Event Grid](https://docs.microsoft.com/azure/azure-maps/azure-maps-event-grid-integration).  The isAsync parameter is used to enable integration with Event Grid (disabled by default).
consumes: []
produces:
- application/json
paths:
- content: POST https://{geography}.atlas.microsoft.com/spatial/geofence/json?api-version=1.0&deviceId={deviceId}&lat={lat}&lon={lon}
- content: POST https://{geography}.atlas.microsoft.com/spatial/geofence/json?api-version=1.0&deviceId={deviceId}&lat={lat}&lon={lon}&z={z}&userTime={userTime}&searchBuffer={searchBuffer}&isAsync={isAsync}&mode={mode}
  isOptional: true
uriParameters:
- name: geography
  in: path
  isRequired: true
  description: This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu.
  types:
  - uid: string
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API.
  types:
  - uid: string
- name: deviceId
  in: query
  isRequired: true
  description: ID of the device
  types:
  - uid: string
- name: lat
  in: query
  isRequired: true
  description: 'The latitude of the location being passed.  Example: 48.36.'
  types:
  - uid: number
- name: lon
  in: query
  isRequired: true
  description: 'The longitude of the location being passed.  Example: -124.63.'
  types:
  - uid: number
- name: z
  in: query
  description: 'The sea level in meter of the location being passed. If this parameter is presented, 2D extrusion geofencing is applied. Example: 200.'
  types:
  - uid: number
- name: userTime
  in: query
  description: The user request time. If not presented in the request, the default value is DateTime.UtcNow.
  types:
  - uid: string
  format: date-time
- name: searchBuffer
  in: query
  description: The radius of the buffer around the geofence in meters that defines how far to search inside and outside the border of the fence against the coordinate that was provided when calculating the result.  The minimum value is 0, and the maximum is 500.  The default value is 50.
  types:
  - uid: number
- name: isAsync
  in: query
  description: If true, the request will use async event mechanism; if false, the request will be synchronized and do not trigger any event. The default value is false.
  types:
  - uid: boolean
- name: mode
  in: query
  description: Mode of the geofencing async event mechanism.
  types:
  - uid: GeofenceMode
responses:
- name: 200 OK
  headers:
  - name: X-Correlation-id
    value: string
  description: OK The X-Correlation-id header value is present in an async call's response and the Event Grid event data. It helps correlate the async callâ€™s response with the corresponding Event Grid event.
  types:
  - uid: Geofence
- name: Other Status Codes
  description: An unexpected error occurred.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: type
    in: body
    isRequired: true
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: FeatureCollection
    typesTitle: string
  - name: features
    in: body
    isRequired: true
    description: Contains a list of valid `GeoJSON Feature` objects.
    types:
    - uid: GeoJsonFeature
      isArray: true
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: GeofenceMode
  description: Mode of the geofencing async event mechanism.
  kind: enum
  properties:
  - name: All
    description: Publish all the query results to Azure Maps account event subscription.
    types:
    - uid: string
  - name: EnterAndExit
    description: Only publish result when user location is considered as crossing geofencing boarder.
    types:
    - uid: string
- name: GeoJsonFeature
  description: A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Feature
    typesTitle: string
  - name: geometry
    description: A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
    types:
    - uid: GeoJsonPoint
    - uid: GeoJsonMultiPoint
    - uid: GeoJsonLineString
    - uid: GeoJsonMultiLineString
    - uid: GeoJsonPolygon
    - uid: GeoJsonMultiPolygon
    - uid: GeoJsonGeometryCollection
    typesTitle: GeoJsonGeometry
  - name: id
    description: Identifier for the feature.
    types:
    - uid: string
  - name: featureType
    description: The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value.
    types:
    - uid: string
- name: Geofence
  description: This object is returned from a geofence proximity call.
  kind: object
  properties:
  - name: geometries
    isReadyOnly: true
    description: Lists the fence geometries that contain the coordinate position or overlap the searchBuffer around the position.
    types:
    - uid: GeofenceGeometry
      isArray: true
  - name: expiredGeofenceGeometryId
    isReadyOnly: true
    description: Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
    types:
    - uid: string
      isArray: true
  - name: invalidPeriodGeofenceGeometryId
    isReadyOnly: true
    description: Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
    types:
    - uid: string
      isArray: true
  - name: isEventPublished
    isReadyOnly: true
    description: True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. This will only be presented in response when 'isAsync' query parameter is set to true.
    types:
    - uid: boolean
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: GeoJsonFeatureCollection
  description: A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: FeatureCollection
    typesTitle: string
  - name: features
    description: Contains a list of valid `GeoJSON Feature` objects.
    types:
    - uid: GeoJsonFeature
      isArray: true
- name: GeoJsonGeometry
  description: A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeoJsonObjectType
- name: GeofenceGeometry
  description: The geofencing geometry.
  kind: object
  properties:
  - name: deviceId
    isReadyOnly: true
    description: ID of the device.
    types:
    - uid: string
  - name: udId
    isReadyOnly: true
    description: The unique id returned from [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON FeatureCollection object. Please refer to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature's properties should  contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
    types:
    - uid: string
  - name: geometryId
    isReadyOnly: true
    description: The unique id identifies a geometry.
    types:
    - uid: string
  - name: distance
    isReadyOnly: true
    description: Distance from the coordinate to the closest border of the geofence (in meters except when special values -999/999 are used). Positive means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence.
    types:
    - uid: number
  - name: nearestLat
    isReadyOnly: true
    description: Latitude of the nearest point of the geometry.
    types:
    - uid: number
  - name: nearestLon
    isReadyOnly: true
    description: Longitude of the nearest point of the geometry.
    types:
    - uid: number
  - name: nearestZ
    isReadyOnly: true
    description: Sea level in meter of the nearest point on the 2D extrusion geometry. This will only be presented in response when value is provided for 'zInMeter' in the request.
    types:
    - uid: number
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: GeoJsonPoint
  description: A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Point
    typesTitle: string
  - name: coordinates
    description: A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.
    types:
    - uid: number
      isArray: true
- name: GeoJsonMultiPoint
  description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPoint
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiPoint` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonLineString
  description: A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: LineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson LineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiLineString
  description: A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiLineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiLineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonPolygon
  description: A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Polygon
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson Polygon` geometry type.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiPolygon
  description: A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPolygon
    typesTitle: string
  - name: coordinates
    description: Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: array
      isArray: true
- name: GeoJsonGeometryCollection
  description: A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeometryCollection
    typesTitle: string
  - name: geometries
    description: Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: GeoJsonPoint
      isArray: true
    - uid: GeoJsonMultiPoint
      isArray: true
    - uid: GeoJsonLineString
      isArray: true
    - uid: GeoJsonMultiLineString
      isArray: true
    - uid: GeoJsonPolygon
      isArray: true
    - uid: GeoJsonMultiPolygon
      isArray: true
    - uid: GeoJsonGeometryCollection
      isArray: true
    typesTitle: GeoJsonGeometry[]
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: PostGeofence
  request:
    uri: POST https://us.atlas.microsoft.com/spatial/geofence/json?api-version=1.0&deviceId=unique_device_name_under_account&lat=48.36&lon=-124.63&userTime={userTime}&searchBuffer=50&isAsync=True&mode=EnterAndExit
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "geometry": {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    -122.13241226662022,
                    47.617011400917221
                  ],
                  [
                    -122.12810106940353,
                    47.6169969269402
                  ],
                  [
                    -122.12824948956276,
                    47.619076837513489
                  ],
                  [
                    -122.12833297981392,
                    47.621929787055336
                  ],
                  [
                    -122.12971398040168,
                    47.62184100705295
                  ],
                  [
                    -122.1318413862121,
                    47.62195364373008
                  ],
                  [
                    -122.13231034769727,
                    47.617163326181213
                  ],
                  [
                    -122.13241226662022,
                    47.617011400917221
                  ]
                ]
              ]
            },
            "properties": {
              "geometryId": "2",
              "name": "Crossroad Mall"
            }
          },
          {
            "type": "Feature",
            "geometry": {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    -122.15342205632391,
                    47.609818185466253
                  ],
                  [
                    -122.153451623509,
                    47.606287331460038
                  ],
                  [
                    -122.14971782206638,
                    47.606250040787046
                  ],
                  [
                    -122.14817354810637,
                    47.606391046012305
                  ],
                  [
                    -122.14827351288071,
                    47.609833167963558
                  ],
                  [
                    -122.15225500989803,
                    47.609826136787518
                  ],
                  [
                    -122.15342205632391,
                    47.609818185466253
                  ]
                ]
              ]
            },
            "properties": {
              "geometryId": "1",
              "name": "Sammamish High school"
            }
          }
        ]
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "geometries": [
          {
            "deviceId": "unique_device_name_under_account",
            "geometryId": "2",
            "distance": -999,
            "nearestLat": 47.621954,
            "nearestLon": -122.131841
          },
          {
            "deviceId": "unique_device_name_under_account",
            "geometryId": "1",
            "distance": 999,
            "nearestLat": 47.609833,
            "nearestLon": -122.148274
          }
        ],
        "expiredGeofenceGeometryId": [],
        "invalidPeriodGeofenceGeometryId": [],
        "isEventPublished": true
      }
security:
- name: AADToken
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: https://atlas.microsoft.com/.default
    description: https://atlas.microsoft.com/.default
- name: subscription-key
  type: apiKey
  description: >-
    This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.

     For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be securely stored.
  in: query
- name: SAS Token
  type: apiKey
  description: >-
    This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.

     For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.
  in: header
metadata:
  description: >-
    **Search Geofence Post API**

    **Applies to:** S1 Pricing tier.

    The Geofence Post API allows you to retrieve the proximity of a coordinate to a  provided geofence
errorCodes: []
