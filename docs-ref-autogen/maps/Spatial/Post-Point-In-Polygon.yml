### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.spatial.postpointinpolygon
name: Post Point In Polygon
service: Maps
groupName: Spatial
apiVersion: "1.0"
summary: >-
  **Applies to**: S1 pricing tier.


  This API returns a boolean value indicating whether a point is inside a set of polygons. The user data may contain Polygon and MultiPolygon geometries, other geometries will be ignored if provided. If the point is inside or on the boundary of one of these polygons, the value returned is true. In all other cases, the value returned is false. When the point is inside multiple polygons, the result will give intersecting geometries section to show all valid geometries (referenced by geometryId) in user data. The maximum number of vertices accepted to form a Polygon is 10,000.
consumes: []
produces:
- application/json
paths:
- content: POST https://atlas.microsoft.com/spatial/pointInPolygon/json?api-version=1.0&lat={lat}&lon={lon}
- content: POST https://atlas.microsoft.com/spatial/pointInPolygon/json?subscription-key={subscription-key}&api-version=1.0&lat={lat}&lon={lon}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: subscription-key
  in: query
  description: One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: lat
  in: query
  isRequired: true
  description: 'The base point latitude of the location being passed.  Example: 47.622942.'
  types:
  - uid: number
- name: lon
  in: query
  isRequired: true
  description: 'The base point longitude of the location being passed.  Example: -122.316456.'
  types:
  - uid: number
responses:
- name: 200 OK
  description: OK
  types:
  - uid: PostPointInPolygonResponse
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ODataErrorResponse
- name: 401 Unauthorized
  headers:
  - name: WWW-Authenticate
    value: string
  description: Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.
  types:
  - uid: ODataErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ODataErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ODataErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ODataErrorResponse
requestBody:
- name: default
  parameters:
  - name: type
    in: body
    isRequired: true
    description: Specifies the `type` for the object. Value should always be equal to "FeatureCollection".
    types:
    - uid: string
  - name: features
    in: body
    isRequired: true
    description: Contains a list of valid `GeoJSON Feature` objects.
    types:
    - uid: Features
      isArray: true
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: Features
  description: Contains a list of valid `GeoJSON Feature` objects.
  kind: object
  properties:
  - name: type
    description: Specifies the `type` for the object. Value should always be equal to "Feature".
    types:
    - uid: string
  - name: geometry
    description: A valid `GeoJSON` geometry object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
    types:
    - uid: GeoJSONGeometry
  - name: properties
    description: Properties can contain any additional metadata about the `Feature`. Value can be any JSON object or a JSON null value
    types:
    - uid: object
- name: PostPointInPolygonResponse
  description: Returns true if point is within the polygon, false otherwise
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Point In Polygon Summary object
    types:
    - uid: PostPointInPolygonSummary
  - name: result
    description: Point In Polygon Result Object
    types:
    - uid: PointInPolygonResult
- name: ODataErrorResponse
  description: This response object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
- name: GeoJSONFeatureCollection
  description: A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `type` for the object. Value should always be equal to "FeatureCollection".
    types:
    - uid: string
  - name: features
    description: Contains a list of valid `GeoJSON Feature` objects.
    types:
    - uid: Features
      isArray: true
- name: PostPointInPolygonSummary
  description: Point In Polygon Summary object
  kind: object
  properties:
  - name: sourcePoint
    description: A location represented as a latitude and longitude
    types:
    - uid: SpatialCoordinate
  - name: udid
    isReadyOnly: true
    description: A unique data id (udid) for the uploaded content. Udid is not applicable for POST spatial operations(set to null)
    types:
    - uid: string
  - name: information
    isReadyOnly: true
    description: Processing information
    types:
    - uid: string
- name: PointInPolygonResult
  description: Point In Polygon Result Object
  kind: object
  properties:
  - name: pointInPolygons
    isReadyOnly: true
    description: Point In Polygons Property
    types:
    - uid: boolean
  - name: intersectingGeometries
    isReadyOnly: true
    description: Geometries array
    types:
    - uid: string
      isArray: true
- name: ODataError
  description: This object is returned when an error occurs in the Maps API.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The ODataError code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
  - name: details
    description: This object is returned when an error occurs in the Maps API.
    types:
    - uid: ODataError
      isArray: true
  - name: target
    isReadyOnly: true
    description: If available, the target causing the error.
    types:
    - uid: string
- name: SpatialCoordinate
  description: A location represented as a latitude and longitude
  kind: object
  properties:
  - name: lat
    isReadyOnly: true
    description: Latitude property
    types:
    - uid: number
  - name: lon
    isReadyOnly: true
    description: Longitude property
    types:
    - uid: number
examples:
- name: PostPointInPolygon
  request:
    uri: POST https://atlas.microsoft.com/spatial/pointInPolygon/json?subscription-key=[subscription-key]&api-version=1.0&lat=33.5362475&lon=-111.9267386
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "properties": {
              "geometryId": 1001
            },
            "geometry": {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    -111.9267386,
                    33.5362475
                  ],
                  [
                    -111.9627875,
                    33.5104882
                  ],
                  [
                    -111.9027061,
                    33.5004686
                  ],
                  [
                    -111.9267386,
                    33.5362475
                  ]
                ]
              ]
            }
          }
        ]
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "summary": {
          "sourcePoint": {
            "lat": 33.5362475,
            "lon": -111.9267386
          },
          "udid": null,
          "information": "1 polygons processed in user data"
        },
        "result": {
          "pointInPolygons": true,
          "intersectingGeometries": [
            "1001"
          ]
        }
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "ClientParams",
          "message": "Lat and/or lon parameters are invalid.",
          "innererror": {
            "code": "InvalidLatLon",
            "message": "lon parameter value should between -180 and 180 inclusive"
          }
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes: []
- name: subscription-key
  type: apiKey
  description: This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.
  in: query
metadata:
  description: >-
    **Applies to**: S1 pricing tier.


    This API returns a boolean value indicating whether a point is inside a set of polygons.
errorCodes: []
