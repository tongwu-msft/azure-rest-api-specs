### YamlMime:RESTOperation
uid: maps.spatial.postpointinpolygon
name: Post Point In Polygon
service: Maps
groupName: Spatial
apiVersion: "1.0"
summary: >-
  **Applies to**: S1 pricing tier.


  This API returns a boolean value indicating whether a point is inside a set of polygons. The user data may contain Polygon and MultiPolygon geometries, other geometries will be ignored if provided. If the point is inside or on the boundary of one of these polygons, the value returned is true. In all other cases, the value returned is false. When the point is inside multiple polygons, the result will give intersecting geometries section to show all valid geometries (referenced by geometryId) in user data. The maximum number of vertices accepted to form a Polygon is 10,000.
consumes: []
produces:
- application/json
paths:
- content: POST https://{geography}.atlas.microsoft.com/spatial/pointInPolygon/json?api-version=1.0&lat={lat}&lon={lon}
uriParameters:
- name: geography
  in: path
  isRequired: true
  description: This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu.
  types:
  - uid: string
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Only `json` format is supported.
  types:
  - uid: JsonFormat
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API.
  types:
  - uid: string
- name: lat
  in: query
  isRequired: true
  description: 'The latitude of the location being passed.  Example: 48.36.'
  types:
  - uid: number
- name: lon
  in: query
  isRequired: true
  description: 'The longitude of the location being passed.  Example: -124.63.'
  types:
  - uid: number
responses:
- name: 200 OK
  description: OK
  types:
  - uid: PointInPolygonResult
- name: Other Status Codes
  description: An unexpected error occurred.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: type
    in: body
    isRequired: true
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: FeatureCollection
    typesTitle: string
  - name: features
    in: body
    isRequired: true
    description: Contains a list of valid `GeoJSON Feature` objects.
    types:
    - uid: GeoJsonFeature
      isArray: true
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
definitions:
- name: JsonFormat
  description: Desired format of the response. Only `json` format is supported.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
- name: GeoJsonFeature
  description: A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Feature
    typesTitle: string
  - name: geometry
    description: A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
    types:
    - uid: GeoJsonPoint
    - uid: GeoJsonMultiPoint
    - uid: GeoJsonLineString
    - uid: GeoJsonMultiLineString
    - uid: GeoJsonPolygon
    - uid: GeoJsonMultiPolygon
    - uid: GeoJsonGeometryCollection
    typesTitle: GeoJsonGeometry
  - name: id
    description: Identifier for the feature.
    types:
    - uid: string
  - name: featureType
    description: The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value.
    types:
    - uid: string
- name: PointInPolygonResult
  description: Returns true if point is within the polygon, false otherwise
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Point In Polygon Summary object
    types:
    - uid: PointInPolygonSummary
  - name: result
    description: Point In Polygon Result Object
    types:
    - uid: Result
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: GeoJsonFeatureCollection
  description: A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: FeatureCollection
    typesTitle: string
  - name: features
    description: Contains a list of valid `GeoJSON Feature` objects.
    types:
    - uid: GeoJsonFeature
      isArray: true
- name: GeoJsonGeometry
  description: A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeoJsonObjectType
- name: PointInPolygonSummary
  description: Point In Polygon Summary object
  kind: object
  properties:
  - name: sourcePoint
    description: A location represented as a latitude and longitude using short names 'lat' & 'lon'.
    types:
    - uid: LatLongPairAbbreviated
  - name: udid
    isReadyOnly: true
    description: A unique data id (udid) for the uploaded content. Udid is not applicable for POST spatial operations(set to null)
    types:
    - uid: string
  - name: information
    isReadyOnly: true
    description: Processing information
    types:
    - uid: string
- name: Result
  description: Point In Polygon Result Object
  kind: object
  properties:
  - name: pointInPolygons
    isReadyOnly: true
    description: Point In Polygons Property
    types:
    - uid: boolean
  - name: intersectingGeometries
    isReadyOnly: true
    description: Geometries array
    types:
    - uid: string
      isArray: true
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: GeoJsonPoint
  description: A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Point
    typesTitle: string
  - name: coordinates
    description: A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.
    types:
    - uid: number
      isArray: true
- name: GeoJsonMultiPoint
  description: A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPoint
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiPoint` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonLineString
  description: A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: LineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson LineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiLineString
  description: A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiLineString
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson MultiLineString` geometry.
    types:
    - uid: array
      isArray: true
- name: GeoJsonPolygon
  description: A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: Polygon
    typesTitle: string
  - name: coordinates
    description: Coordinates for the `GeoJson Polygon` geometry type.
    types:
    - uid: array
      isArray: true
- name: GeoJsonMultiPolygon
  description: A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: MultiPolygon
    typesTitle: string
  - name: coordinates
    description: Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: array
      isArray: true
- name: GeoJsonGeometryCollection
  description: A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details.
  kind: object
  properties:
  - name: type
    description: Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection.
    types:
    - uid: GeometryCollection
    typesTitle: string
  - name: geometries
    description: Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude).
    types:
    - uid: GeoJsonPoint
      isArray: true
    - uid: GeoJsonMultiPoint
      isArray: true
    - uid: GeoJsonLineString
      isArray: true
    - uid: GeoJsonMultiLineString
      isArray: true
    - uid: GeoJsonPolygon
      isArray: true
    - uid: GeoJsonMultiPolygon
      isArray: true
    - uid: GeoJsonGeometryCollection
      isArray: true
    typesTitle: GeoJsonGeometry[]
- name: LatLongPairAbbreviated
  description: A location represented as a latitude and longitude using short names 'lat' & 'lon'.
  kind: object
  properties:
  - name: lat
    description: Latitude property
    types:
    - uid: number
  - name: lon
    description: Longitude property
    types:
    - uid: number
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: PostPointInPolygon
  request:
    uri: POST https://us.atlas.microsoft.com/spatial/pointInPolygon/json?api-version=1.0&lat=33.5362475&lon=-111.9267386
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "properties": {
              "geometryId": 1001
            },
            "geometry": {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    -111.9267386,
                    33.5362475
                  ],
                  [
                    -111.9627875,
                    33.5104882
                  ],
                  [
                    -111.9027061,
                    33.5004686
                  ],
                  [
                    -111.9267386,
                    33.5362475
                  ]
                ]
              ]
            }
          }
        ]
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://us.atlas.microsoft.com/spatial/pointInPolygon/json?api-version=1.0&lat=33.5362475&lon=-111.9267386

      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "properties": {
              "geometryId": 1001
            },
            "geometry": {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    -111.9267386,
                    33.5362475
                  ],
                  [
                    -111.9627875,
                    33.5104882
                  ],
                  [
                    -111.9027061,
                    33.5004686
                  ],
                  [
                    -111.9267386,
                    33.5362475
                  ]
                ]
              ]
            }
          }
        ]
      }

      ```

  responses:
  - statusCode: "200"
    body: >-
      {
        "summary": {
          "sourcePoint": {
            "lat": 33.5362475,
            "lon": -111.9267386
          },
          "udid": null,
          "information": "1 polygons processed in user data"
        },
        "result": {
          "pointInPolygons": true,
          "intersectingGeometries": [
            "1001"
          ]
        }
      }
security:
- name: AADToken
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/azure/active-directory/develop/v1-overview) Flows. When paired with [Azure role-based access](https://docs.microsoft.com/azure/role-based-access-control/overview) control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to. This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0 or v2.0](https://docs.microsoft.com/azure/active-directory/develop/azure-ad-endpoint-comparison) supports Work, School, and Guests but does not support Personal accounts."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: https://atlas.microsoft.com/.default
    description: https://atlas.microsoft.com/.default
- name: subscription-key
  type: apiKey
  description: >-
    This is a shared key that is provisioned when you [Create an Azure Maps account](https://docs.microsoft.com/azure/azure-maps/quick-demo-map-app#create-an-azure-maps-account) in the Azure portal or using PowerShell, CLI, Azure SDKs, or REST API.

     With this key, any application can access all REST API. In other words, this key can be used as a master key in the account that they are issued in.

     For publicly exposed applications, our recommendation is to use the [confidential client applications](https://docs.microsoft.com/azure/azure-maps/authentication-best-practices#confidential-client-applications) approach to access Azure Maps REST APIs so your key can be securely stored.
  in: query
- name: SAS Token
  type: apiKey
  description: >-
    This is a shared access signature token is created from the List SAS operation on the [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this token, any application is authorized to access with Azure role-based access controls and fine-grain control to the expiration, rate, and region(s) of use for the particular token. In other words, the SAS Token can be used to allow applications to control access in a more secured way than the shared key.

     For publicly exposed applications, our recommendation is to configure a specific list of allowed origins on the [Map account resource](https://aka.ms/amauth) to limit rendering abuse and regularly renew the SAS Token.
  in: header
metadata:
  description: >-
    **Applies to**: S1 pricing tier.


    This API returns a boolean value indicating whether a point is inside a set of polygons.
errorCodes: []
