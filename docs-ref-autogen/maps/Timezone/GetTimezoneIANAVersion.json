{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Azure Maps Time Zone Service",
    "description": "Azure Maps Time Zone REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported.",
      "scopes": {
        "user_impersonation": "Impersonates a user's Azure Active Directory account."
      }
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "description": "This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "azure_auth": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "responses": {
    "202": {
      "description": "Request Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
      "schema": {
        "type": "object",
        "description": "This object is returned when the request is accepted but the processing has not been completed. The location header in the response contains the new URL to retry."
      },
      "headers": {
        "Location": {
          "type": "string",
          "description": "New URL to check for the results of the long running process."
        }
      }
    },
    "400": {
      "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "401": {
      "description": "Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Bearer realm=\"https://atlas.microsoft.com/\", error=\"invalid_token\", error_description=\"The access token expired\""
        }
      }
    },
    "403": {
      "description": "Permission, capacity, or authentication issues.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404": {
      "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500": {
      "description": "An error occurred while processing the request. Please try again later.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "parameters": {
    "ClientId": {
      "name": "x-ms-client-id",
      "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.    ",
      "type": "string",
      "in": "header",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "SubscriptionKey": {
      "name": "subscription-key",
      "description": "One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 1.0",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "JsonFormat": {
      "name": "format",
      "description": "Desired format of the response. Only `json` format is supported.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json"
      ],
      "x-ms-enum": {
        "name": "JsonFormat",
        "modelAsString": false,
        "values": [
          {
            "value": "json",
            "description": "[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TimezoneAcceptLanguage": {
      "name": "Accept-Language",
      "in": "header",
      "description": "Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in \"EN\". Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "TimezoneOptions": {
      "name": "options",
      "in": "query",
      "description": "Alternatively, use alias \"o\". Options available for types of information returned in the result.",
      "required": false,
      "type": "string",
      "enum": [
        "none",
        "zoneInfo",
        "transitions",
        "all"
      ],
      "x-ms-enum": {
        "name": "TimezoneOptions",
        "modelAsString": false,
        "values": [
          {
            "value": "none",
            "description": "Do not include zoneinfo or transitions in the result."
          },
          {
            "value": "zoneInfo",
            "description": "Include additional time zone info in the result."
          },
          {
            "value": "transitions",
            "description": "Include transition information in the result (The number of transitions is currently capped at 250)."
          },
          {
            "value": "all",
            "description": "Include both zoneinfo and transitions in the result."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TimezoneTimeStamp": {
      "name": "timeStamp",
      "in": "query",
      "description": "Alternatively, use alias \"stamp\", or \"s\". Reference time, if omitted, the API will use the machine time serving the request.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "format": "date-time"
    },
    "TimezoneTransitionsFrom": {
      "name": "transitionsFrom",
      "in": "query",
      "description": "Alternatively, use alias \"tf\". The start date from which daylight savings time (DST) transitions are requested, only applies when \"options\" = all or \"options\" = transitions.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "format": "date-time"
    },
    "TimezoneTransitionsYears": {
      "name": "transitionsYears",
      "in": "query",
      "description": "Alternatively, use alias \"ty\". The number of years from \"transitionsFrom\" for which DST transitions are requested, only applies when \"options\" = all or \"options\" = transitions.",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/timezone/ianaVersion/{format}": {
      "get": {
        "x-publish": true,
        "description": "__Time Zone IANA Version__\n\n\n**Applies to**: S0 and S1 pricing tiers.\n\n\nThis API returns the current IANA version number.",
        "operationId": "Timezone_GetTimezoneIANAVersion",
        "x-ms-examples": {
          "GetTimezoneIANAVersion": {
            "parameters": {
              "format": "json",
              "api-version": "1.0",
              "subscription-key": "[subscription-key]"
            },
            "responses": {
              "200": {
                "body": {
                  "version": "2017b"
                }
              },
              "400": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "400 BadRequest",
                    "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
                  }
                }
              },
              "401": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "401 Unauthorized",
                    "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
                  }
                }
              },
              "403": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "403 Forbidden",
                    "message": "Permission, capacity, or authentication issues."
                  }
                }
              },
              "404": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "404 NotFound",
                    "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
                  }
                }
              },
              "500": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "500 InternalServerError",
                    "message": "An error occurred while processing the request. Please try again later."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/SubscriptionKey"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/JsonFormat"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TimezoneIanaVersionResult"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "produces": [
          "application/json"
        ],
        "consumes": [],
        "x-internal-toc-name": "Get Timezone IANA Version"
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "description": "This response object is returned when an error occurs in the Maps API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Maps API",
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The HTTP status code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        }
      }
    },
    "Country": {
      "type": "object",
      "description": "A country record.",
      "properties": {
        "Name": {
          "description": "Country Name",
          "type": "string",
          "readOnly": true
        },
        "Code": {
          "description": "ISO-3166 2-letter country code for the country.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TimeTransition": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "Tag": {
          "description": "Tag property",
          "type": "string",
          "readOnly": true
        },
        "StandardOffset": {
          "description": "StandardOffset property",
          "type": "string",
          "readOnly": true
        },
        "DaylightSavings": {
          "description": "DaylightSavings property",
          "type": "string",
          "readOnly": true
        },
        "UtcStart": {
          "description": "Start date, start time for this transition period",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "UtcEnd": {
          "description": "End date, end time for this transition period",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        }
      }
    },
    "TimezoneByIdResult": {
      "description": "This object is returned from a successful Timezone By ID call",
      "type": "object",
      "properties": {
        "Version": {
          "description": "Version property",
          "type": "string",
          "readOnly": true
        },
        "ReferenceUtcTimestamp": {
          "description": "Reference Utc Timestamp property",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "TimeZones": {
          "$ref": "#/definitions/TimeZonesById"
        },
        "Count": {
          "description": "Count property",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "TimezoneByCoordinatesResult": {
      "description": "This object is returned from a successful Timezone By Coordinates call",
      "type": "object",
      "properties": {
        "Version": {
          "description": "Version property",
          "type": "string",
          "readOnly": true
        },
        "ReferenceUtcTimestamp": {
          "description": "Reference Utc Timestamp property",
          "type": "string",
          "readOnly": true,
          "format": "date-time"
        },
        "TimeZones": {
          "$ref": "#/definitions/TimeZonesByCoordinates"
        },
        "Count": {
          "description": "Count property",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "TimezoneEnumWindowsResult": {
      "description": "This object is returned from a successful Timezone Enum Windows call",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TimezoneEnumWindow"
      }
    },
    "TimezoneEnumWindow": {
      "type": "object",
      "properties": {
        "WindowsId": {
          "description": "Windows Id property",
          "type": "string",
          "readOnly": true
        },
        "Territory": {
          "description": "Territory property",
          "type": "string",
          "readOnly": true
        },
        "IanaIds": {
          "description": "IanaIds array",
          "type": "array",
          "items": {
            "type": "string",
            "readOnly": true
          }
        }
      }
    },
    "TimezoneEnumIanaResult": {
      "description": "This object is returned from a successful Timezone Enum IANA call",
      "type": "array",
      "items": {
        "$ref": "#/definitions/IanaId"
      }
    },
    "TimezoneIanaVersionResult": {
      "description": "This object is returned from a successful Timezone IANA Version call",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TimezoneWindowToIanaResult": {
      "description": "This object is returned from a successful Timezone Windows To IANA call",
      "type": "array",
      "items": {
        "$ref": "#/definitions/IanaId"
      }
    },
    "IanaId": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "isAlias": {
          "description": "IsAlias property",
          "type": "boolean",
          "readOnly": true
        },
        "aliasOf": {
          "description": "AliasOf property",
          "type": "string",
          "readOnly": true
        },
        "hasZone1970Location": {
          "description": "HasZone1970Location property",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "TimeZonesById": {
      "description": "TimeZoneById array",
      "type": "array",
      "readOnly": true,
      "items": {
        "$ref": "#/definitions/TimezoneById"
      }
    },
    "TimeZonesByCoordinates": {
      "description": "TimeZoneByCoordinates array",
      "type": "array",
      "readOnly": true,
      "items": {
        "$ref": "#/definitions/TimeZoneByCoordinates"
      }
    },
    "TimezoneById": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "Aliases": {
          "description": "An array of time zone ID aliases.  Only returned when [options]=*zoneinfo* or *all*.\n\nNote: may be null.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "Countries": {
          "description": "An array of country records. Only returned when [options]=*zoneinfo* or *all*.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Country"
          }
        },
        "Names": {
          "$ref": "#/definitions/Names"
        },
        "ReferenceTime": {
          "$ref": "#/definitions/ReferenceTimeById"
        },
        "RepresentativePoint": {
          "$ref": "#/definitions/RepresentativePoint"
        },
        "TimeTransitions": {
          "description": "Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TimeTransition"
          }
        }
      }
    },
    "TimeZoneByCoordinates": {
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "Aliases": {
          "description": "An array of time zone ID aliases.  Only returned when [options]=*zoneinfo* or *all*.\n\nNote: may be null.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "Countries": {
          "description": "An array of country records. Only returned when [options]=*zoneinfo* or *all*.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Country"
          }
        },
        "Names": {
          "$ref": "#/definitions/Names"
        },
        "ReferenceTime": {
          "$ref": "#/definitions/ReferenceTimeByCoordinates"
        },
        "RepresentativePoint": {
          "$ref": "#/definitions/RepresentativePoint"
        },
        "TimeTransitions": {
          "description": "Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TimeTransition"
          }
        }
      }
    },
    "Names": {
      "type": "object",
      "description": "Timezone names object.",
      "properties": {
        "ISO6391LanguageCode": {
          "description": "The ISO 639-1 language code of the Names",
          "type": "string",
          "readOnly": true
        },
        "Generic": {
          "description": "Generic Name",
          "type": "string",
          "readOnly": true
        },
        "Standard": {
          "description": "Standard Name",
          "type": "string",
          "readOnly": true
        },
        "Daylight": {
          "description": "Daylight Name",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ReferenceTimeById": {
      "description": "Details in effect at the local time.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "Tag": {
          "description": "Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).",
          "type": "string",
          "readOnly": true
        },
        "StandardOffset": {
          "description": "UTC offset in effect at the `ReferenceUTCTimestamp`.",
          "type": "string",
          "readOnly": true
        },
        "DaylightSavings": {
          "description": "Time saving in minutes in effect at the `ReferenceUTCTimestamp`.",
          "type": "string",
          "readOnly": true
        },
        "WallTime": {
          "description": "Current wall time at the given time zone as shown in the `Tag` property.",
          "type": "string",
          "readOnly": true
        },
        "PosixTzValidYear": {
          "description": "The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year. ",
          "type": "integer",
          "readOnly": true
        },
        "PosixTz": {
          "description": "POSIX string used to set the time zone environment variable.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ReferenceTimeByCoordinates": {
      "description": "Details in effect at the local time.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "Tag": {
          "description": "Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).",
          "type": "string",
          "readOnly": true
        },
        "StandardOffset": {
          "description": "UTC offset in effect at the `ReferenceUTCTimestamp`.",
          "type": "string",
          "readOnly": true
        },
        "DaylightSavings": {
          "description": "Time saving in minutes in effect at the `ReferenceUTCTimestamp`.",
          "type": "string",
          "readOnly": true
        },
        "WallTime": {
          "description": "Current wall time at the given time zone as shown in the `Tag` property.",
          "type": "string",
          "readOnly": true
        },
        "PosixTzValidYear": {
          "description": "The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year. ",
          "type": "integer",
          "readOnly": true
        },
        "PosixTz": {
          "description": "POSIX string used to set the time zone environment variable.",
          "type": "string",
          "readOnly": true
        },
        "Sunrise": {
          "description": "Sunrise at the given time zone as shown in the `Tag` property.",
          "type": "string",
          "readOnly": true
        },
        "Sunset": {
          "description": "Sunset at the given time zone as shown in the `Tag` property.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RepresentativePoint": {
      "description": "Representative point property",
      "type": "object",
      "readOnly": true,
      "properties": {
        "Latitude": {
          "description": "Latitude property",
          "type": "number",
          "readOnly": true
        },
        "Longitude": {
          "description": "Longitude property",
          "type": "number",
          "readOnly": true
        }
      }
    }
  },
  "x-internal-service-id": "maps",
  "x-internal-service-name": "Maps",
  "x-internal-toc-name": "Timezone",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "GetTimezoneIANAVersion",
  "x-internal-operation-name": "Get Timezone IANA Version"
}