{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Azure Maps Search Service",
    "description": "Azure Maps Search REST APIs"
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported.",
      "scopes": {
        "user_impersonation": "Impersonates a user's Azure Active Directory account."
      }
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "description": "This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "azure_auth": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "responses": {
    "202": {
      "description": "Request Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
      "headers": {
        "Location": {
          "type": "string",
          "description": "New URL to check for the results of the long running process."
        }
      }
    },
    "400": {
      "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "401": {
      "description": "Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Bearer realm=\"https://atlas.microsoft.com/\", error=\"invalid_token\", error_description=\"The access token expired\""
        }
      }
    },
    "403": {
      "description": "Permission, capacity, or authentication issues.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404": {
      "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500": {
      "description": "An error occurred while processing the request. Please try again later.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "202Async": {
      "description": "**Supported only for async request.**\nRequest Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
      "headers": {
        "Location": {
          "type": "string",
          "description": "New URL to check for the results of the long running process."
        }
      }
    }
  },
  "parameters": {
    "ClientId": {
      "name": "x-ms-client-id",
      "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.    ",
      "type": "string",
      "in": "header",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "SubscriptionKey": {
      "name": "subscription-key",
      "description": "One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 1.0",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "JsonFormat": {
      "name": "format",
      "description": "Desired format of the response. Only `json` format is supported.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json"
      ],
      "x-ms-enum": {
        "name": "JsonFormat",
        "modelAsString": false,
        "values": [
          {
            "value": "json",
            "description": "[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "TextFormat": {
      "name": "format",
      "description": "Desired format of the response. Value can be either _json_ or _xml_.",
      "type": "string",
      "in": "path",
      "required": true,
      "enum": [
        "json",
        "xml"
      ],
      "x-ms-enum": {
        "name": "TextFormat",
        "modelAsString": false,
        "values": [
          {
            "value": "json",
            "description": "[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)"
          },
          {
            "value": "xml",
            "description": "[The Extensible Markup Language](https://www.w3.org/TR/xml/)"
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "Limit": {
      "name": "limit",
      "in": "query",
      "description": "Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100",
      "required": false,
      "type": "integer",
      "default": 10,
      "minimum": 1,
      "maximum": 100,
      "x-ms-parameter-location": "method"
    },
    "OptionalBiasLat": {
      "name": "lat",
      "in": "query",
      "description": "Latitude where results should be biased. E.g. 37.337",
      "required": false,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "OptionalBiasLon": {
      "name": "lon",
      "in": "query",
      "description": "Longitude where results should be biased. E.g. -121.89",
      "required": false,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "BoundingBoxTopLeft": {
      "x-client-name": "BoundingBoxTopLeft",
      "name": "topLeft",
      "in": "query",
      "description": "Top left position of the bounding box. E.g. 37.553,-122.453",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "BoundingBoxBottomRight": {
      "x-client-name": "BoundingBoxBottomRight",
      "name": "btmRight",
      "in": "query",
      "description": "Bottom right position of the bounding box. E.g. 37.553,-122.453",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "RequiredBiasLat": {
      "name": "lat",
      "in": "query",
      "description": "Latitude where results should be biased. E.g. 37.337.",
      "required": true,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "RequiredBiasLon": {
      "name": "lon",
      "in": "query",
      "description": "Longitude where results should be biased. E.g. -121.89.",
      "required": true,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "Language": {
      "name": "language",
      "in": "query",
      "description": "Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.\n\nPlease refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Query": {
      "name": "query",
      "in": "query",
      "description": "The applicable query string. Must be properly URL encoded.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Position": {
      "name": "query",
      "in": "query",
      "description": "The applicable query specified as a comma separated string composed by latitude followed by longitude e.g. \"47.641268,-122.125679\".",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "View": {
      "name": "view",
      "in": "query",
      "description": "The View parameter specifies which set of geopolitically disputed content is returned via Azure Maps services, including  borders and labels displayed on the map. The View parameter (also referred to as “user region parameter”) will show the  correct maps for that country/region. By default, the View parameter is set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the location of your users, and then set the View parameter correctly  for that location. Alternatively, you have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request. The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding mapping, of the country where maps, images and other data and third party content that you are authorized to  access via Azure Maps is made available. Example: view=IN.\n\nPlease refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available Views.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SearchIndexSet": {
      "name": "idxSet",
      "in": "query",
      "description": "A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections)",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "Addr",
          "Geo",
          "PAD",
          "POI",
          "Str",
          "Xstr"
        ],
        "x-ms-enum": {
          "name": "SearchIndexSet",
          "modelAsString": false,
          "values": [
            {
              "value": "Addr",
              "description": "Address range interpolation"
            },
            {
              "value": "Geo",
              "description": "Geographies"
            },
            {
              "value": "PAD",
              "description": "Point Addresses"
            },
            {
              "value": "POI",
              "description": "Points of interest"
            },
            {
              "value": "Str",
              "description": "Streets"
            },
            {
              "value": "Xstr",
              "description": "Cross Streets (Intersections)"
            }
          ]
        }
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "ExtendedPostalCodesFor": {
      "name": "extendedPostalCodesFor",
      "in": "query",
      "description": "Indexes for which extended postal codes should be included in the results.\n\nAvailable indexes are: \n\n **Addr** = Address ranges \n\n **Geo** = Geographies \n\n **PAD** = Point Addresses \n\n **POI** = Points of Interest \n\n **Str** = Streets \n\n **XStr** = Cross Streets (intersections)\n\nValue should be a comma separated list of index types (in any order) or **None** for no indexes.\n\nBy default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.\n\nUsage examples:\n\n extendedPostalCodesFor=POI \n\n extendedPostalCodesFor=PAD,Addr,POI \n\n extendedPostalCodesFor=None\n\nExtended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ExtendedPostalCodesForPoi": {
      "name": "extendedPostalCodesFor",
      "in": "query",
      "description": "Indexes for which extended postal codes should be included in the results.\n\nAvailable indexes are: \n\n **POI** = Points of Interest \n\nValue should be **POI** or **None** to disable extended postal codes.\n\nBy default extended postal codes are included.\n\nUsage examples:\n\n extendedPostalCodesFor=POI \n\n extendedPostalCodesFor=None\n\nExtended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Typeahead": {
      "name": "typeahead",
      "in": "query",
      "description": "Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode",
      "required": false,
      "type": "boolean",
      "default": false,
      "x-ms-parameter-location": "method"
    },
    "CountrySet": {
      "name": "countrySet",
      "in": "query",
      "description": "Comma separated string of country codes, e.g. FR,ES. This will limit the search to the specified countries",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "Radius": {
      "name": "radius",
      "in": "query",
      "description": "The radius in meters to for the results to be constrained to the defined area",
      "required": false,
      "type": "number",
      "x-ms-parameter-location": "method"
    },
    "PoiQuery": {
      "name": "query",
      "in": "query",
      "description": "The POI name to search for (e.g., \"statue of liberty\", \"starbucks\", \"pizza\"). Must be properly URL encoded.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "BrandSet": {
      "name": "brandSet",
      "in": "query",
      "description": "A comma-separated list of brand names which could be used to restrict the result to specific brands. Item order does not matter. When multiple brands are provided, only results that belong to (at least) one of the provided list will be returned. Brands that contain a \",\" in their name should be put into quotes.\n\nUsage examples:\n\n brandSet=Foo\n\n brandSet=Foo,Bar\n\n brandSet=\"A,B,C Comma\",Bar",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "ConnectorSet": {
      "name": "connectorSet",
      "in": "query",
      "description": "A comma-separated list of connector types which could be used to restrict the result to Electric Vehicle Station supporting specific connector types. Item order does not matter. When multiple connector types are provided, only results that belong to (at least) one of the provided list will be returned.\n\nAvailable connector types are:\n  * `StandardHouseholdCountrySpecific` - These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage. See also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).\n  * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure.\n  * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.\n  * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point.\n  * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point.\n  * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging.\n  * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure.\n  * `Chademo` - CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging.\n  * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the \"P+N+E, 6h\" configuration.\n  * `IEC60309DCWhite` - Industrial White connector is a DC connector defined in the IEC 60309 standard.\n  * `Tesla` - The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe.\n\nUsage examples:\n\n connectorSet=IEC62196Type2CableAttached\n connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "StandardHouseholdCountrySpecific",
          "IEC62196Type1",
          "IEC62196Type1CCS",
          "IEC62196Type2CableAttached",
          "IEC62196Type2Outlet",
          "IEC62196Type2CCS",
          "IEC62196Type3",
          "Chademo",
          "IEC60309AC1PhaseBlue",
          "IEC60309DCWhite",
          "Tesla"
        ],
        "x-ms-enum": {
          "name": "ConnectorSet",
          "modelAsString": false,
          "values": [
            {
              "value": "StandardHouseholdCountrySpecific",
              "description": "These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage.\n\nSee also: [Plug & socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets)"
            },
            {
              "value": "IEC62196Type1",
              "description": "Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original manufacturer or SAE J1772 after the standard that first published it. Mostly used in combination with 120V single phase or up to 240V single phase infrastructure."
            },
            {
              "value": "IEC62196Type1CCS",
              "description": "Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging."
            },
            {
              "value": "IEC62196Type2CableAttached",
              "description": "Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached to the charging point"
            },
            {
              "value": "IEC62196Type2Outlet",
              "description": "Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the charging point."
            },
            {
              "value": "IEC62196Type2CCS",
              "description": "Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct current (DC) contacts to allow DC fast charging."
            },
            {
              "value": "IEC62196Type3",
              "description": "Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase infrastructure."
            },
            {
              "value": "Chademo",
              "description": "CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging."
            },
            {
              "value": "IEC60309AC1PhaseBlue",
              "description": "Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime referred to as by some combination of the standard, the color and the fact that is a single phase connector. The connector usually has the \"P+N+E, 6h\" configuration."
            },
            {
              "value": "IEC60309DCWhite",
              "description": "Industrial White connector is a DC connector defined in the IEC 60309 standard."
            },
            {
              "value": "Tesla",
              "description": "The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe."
            }
          ]
        }
      },
      "collectionFormat": "csv",
      "x-ms-parameter-location": "method"
    },
    "OpeningHours": {
      "name": "openingHours",
      "description": "Opening hours for a POI (Points of Interest). The availability of opening hours will vary based on the data available.",
      "type": "string",
      "in": "query",
      "required": false,
      "enum": [
        "nextSevenDays"
      ],
      "x-ms-enum": {
        "name": "OpeningHours",
        "modelAsString": false,
        "values": [
          {
            "value": "nextSevenDays",
            "description": "Shows the opening hours for next week, starting with the current day in the local time of the POI."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/search/poi/{format}": {
      "get": {
        "x-publish": true,
        "description": "**Get POI by Name**\n\n**Applies to**: S0 and S1 pricing tiers.\n\n\nPoints of Interest (POI) Search allows you to request POI results by name.  Search supports additional query parameters such as language and filtering results by area of interest driven by country or bounding box.  Endpoint will return only POI results matching the query string. Response includes POI details such as address, coordinate location and category.",
        "operationId": "Search_GetSearchPOI",
        "x-ms-examples": {
          "Search for juice bars within 5 miles of Seattle Downtown and limit the response to 5 results": {
            "parameters": {
              "format": "json",
              "api-version": "1.0",
              "query": "juice bars",
              "subscription-key": "[subscription-key]",
              "limit": 5,
              "lat": 47.606038,
              "lon": -122.333345,
              "radius": 8046
            },
            "responses": {
              "200": {
                "body": {
                  "summary": {
                    "query": "juice bars",
                    "queryType": "NON_NEAR",
                    "queryTime": 36,
                    "numResults": 5,
                    "offset": 0,
                    "totalResults": 12,
                    "fuzzyLevel": 1,
                    "geoBias": {
                      "lat": 47.606038,
                      "lon": -122.333345
                    }
                  },
                  "results": [
                    {
                      "type": "POI",
                      "id": "US/POI/p0/9223158",
                      "score": 5.664,
                      "dist": 667.27101709503472,
                      "info": "search:ta:840539001755244-US",
                      "poi": {
                        "name": "Pressed Juicery",
                        "phone": "+(1)-(206)-6240804",
                        "brands": [
                          {
                            "name": "Pressed Juicery"
                          }
                        ],
                        "url": "www.pressedjuicery.com",
                        "classifications": [
                          {
                            "code": "RESTAURANT",
                            "names": [
                              {
                                "nameLocale": "en-US",
                                "name": "yogurt/juice bar"
                              },
                              {
                                "nameLocale": "en-US",
                                "name": "restaurant"
                              }
                            ]
                          }
                        ]
                      },
                      "address": {
                        "streetNumber": "400",
                        "streetName": "Pine St",
                        "municipalitySubdivision": "Seattle, Central Business District",
                        "municipality": "Seattle",
                        "countrySecondarySubdivision": "King",
                        "countryTertiarySubdivision": "Seattle",
                        "countrySubdivision": "WA",
                        "postalCode": "98101",
                        "extendedPostalCode": "981011628",
                        "countryCode": "US",
                        "country": "United States",
                        "countryCodeISO3": "USA",
                        "freeformAddress": "400 Pine St, Seattle, WA 98101",
                        "localName": "Seattle",
                        "countrySubdivisionName": "Washington"
                      },
                      "position": {
                        "lat": 47.61138,
                        "lon": -122.3374
                      },
                      "viewport": {
                        "topLeftPoint": {
                          "lat": 47.61228,
                          "lon": -122.33873
                        },
                        "btmRightPoint": {
                          "lat": 47.61048,
                          "lon": -122.33607
                        }
                      },
                      "entryPoints": [
                        {
                          "type": "main",
                          "position": {
                            "lat": 47.61134,
                            "lon": -122.33737
                          }
                        }
                      ]
                    },
                    {
                      "type": "POI",
                      "id": "US/POI/p0/9222534",
                      "score": 5.663,
                      "dist": 1101.6849025777729,
                      "info": "search:ta:840539001760125-US",
                      "poi": {
                        "name": "Pressed Juicery",
                        "phone": "+(1)-(206)-4533785",
                        "brands": [
                          {
                            "name": "Pressed Juicery"
                          }
                        ],
                        "url": "www.pressedjuicery.com",
                        "classifications": [
                          {
                            "code": "RESTAURANT",
                            "names": [
                              {
                                "nameLocale": "en-US",
                                "name": "yogurt/juice bar"
                              },
                              {
                                "nameLocale": "en-US",
                                "name": "restaurant"
                              }
                            ]
                          }
                        ]
                      },
                      "address": {
                        "streetNumber": "315",
                        "streetName": "E Pine St",
                        "municipalitySubdivision": "Seattle, Broadway",
                        "municipality": "Seattle",
                        "countrySecondarySubdivision": "King",
                        "countryTertiarySubdivision": "Seattle",
                        "countrySubdivision": "WA",
                        "postalCode": "98122",
                        "extendedPostalCode": "9812200",
                        "countryCode": "US",
                        "country": "United States",
                        "countryCodeISO3": "USA",
                        "freeformAddress": "315 E Pine St, Seattle, WA 98122",
                        "localName": "Seattle",
                        "countrySubdivisionName": "Washington"
                      },
                      "position": {
                        "lat": 47.61518,
                        "lon": -122.32768
                      },
                      "viewport": {
                        "topLeftPoint": {
                          "lat": 47.61608,
                          "lon": -122.32901
                        },
                        "btmRightPoint": {
                          "lat": 47.61428,
                          "lon": -122.32635
                        }
                      },
                      "entryPoints": [
                        {
                          "type": "main",
                          "position": {
                            "lat": 47.61523,
                            "lon": -122.32768
                          }
                        }
                      ]
                    },
                    {
                      "type": "POI",
                      "id": "US/POI/p1/9133689",
                      "score": 5.659,
                      "dist": 2649.8700791555398,
                      "info": "search:ta:840539001339220-US",
                      "poi": {
                        "name": "Pressed Juicery",
                        "phone": "+(1)-(206)-2820651",
                        "brands": [
                          {
                            "name": "Pressed Juicery"
                          }
                        ],
                        "url": "www.pressedjuicery.com",
                        "classifications": [
                          {
                            "code": "RESTAURANT",
                            "names": [
                              {
                                "nameLocale": "en-US",
                                "name": "yogurt/juice bar"
                              },
                              {
                                "nameLocale": "en-US",
                                "name": "restaurant"
                              }
                            ]
                          }
                        ]
                      },
                      "address": {
                        "streetNumber": "604",
                        "streetName": "1st Ave N",
                        "municipalitySubdivision": "Seattle, Lower Queen Anne",
                        "municipality": "Seattle",
                        "countrySecondarySubdivision": "King",
                        "countryTertiarySubdivision": "Seattle",
                        "countrySubdivision": "WA",
                        "postalCode": "98109",
                        "countryCode": "US",
                        "country": "United States",
                        "countryCodeISO3": "USA",
                        "freeformAddress": "604 1st Ave N, Seattle, WA 98109",
                        "localName": "Seattle",
                        "countrySubdivisionName": "Washington"
                      },
                      "position": {
                        "lat": 47.6247,
                        "lon": -122.35533
                      },
                      "viewport": {
                        "topLeftPoint": {
                          "lat": 47.6256,
                          "lon": -122.35666
                        },
                        "btmRightPoint": {
                          "lat": 47.6238,
                          "lon": -122.354
                        }
                      },
                      "entryPoints": [
                        {
                          "type": "main",
                          "position": {
                            "lat": 47.6247,
                            "lon": -122.3554
                          }
                        }
                      ]
                    },
                    {
                      "type": "POI",
                      "id": "US/POI/p1/9131285",
                      "score": 5.646,
                      "dist": 5097.7570190465412,
                      "info": "search:ta:840539001743255-US",
                      "poi": {
                        "name": "Custom Smoothie & Sports Nutrition",
                        "phone": "+(1)-(206)-5475522",
                        "url": "www.customsmoothie.com",
                        "classifications": [
                          {
                            "code": "RESTAURANT",
                            "names": [
                              {
                                "nameLocale": "en-US",
                                "name": "yogurt/juice bar"
                              },
                              {
                                "nameLocale": "en-US",
                                "name": "restaurant"
                              }
                            ]
                          }
                        ]
                      },
                      "address": {
                        "streetNumber": "462",
                        "streetName": "N 34th St",
                        "municipalitySubdivision": "Seattle, Fremont",
                        "municipality": "Seattle",
                        "countrySecondarySubdivision": "King",
                        "countryTertiarySubdivision": "Seattle",
                        "countrySubdivision": "WA",
                        "postalCode": "98103",
                        "extendedPostalCode": "981038600",
                        "countryCode": "US",
                        "country": "United States",
                        "countryCodeISO3": "USA",
                        "freeformAddress": "462 N 34th St, Seattle, WA 98103",
                        "localName": "Seattle",
                        "countrySubdivisionName": "Washington"
                      },
                      "position": {
                        "lat": 47.65016,
                        "lon": -122.35182
                      },
                      "viewport": {
                        "topLeftPoint": {
                          "lat": 47.65106,
                          "lon": -122.35315
                        },
                        "btmRightPoint": {
                          "lat": 47.64926,
                          "lon": -122.35049
                        }
                      },
                      "entryPoints": [
                        {
                          "type": "main",
                          "position": {
                            "lat": 47.64991,
                            "lon": -122.3519
                          }
                        }
                      ]
                    },
                    {
                      "type": "POI",
                      "id": "US/POI/p0/9228250",
                      "score": 5.637,
                      "dist": 6235.7984817582947,
                      "info": "search:ta:840531000416784-US",
                      "poi": {
                        "name": "Jamba Juice",
                        "phone": "+(1)-(206)-6322060",
                        "brands": [
                          {
                            "name": "Jamba Juice"
                          }
                        ],
                        "url": "www.jambajuice.com",
                        "classifications": [
                          {
                            "code": "RESTAURANT",
                            "names": [
                              {
                                "nameLocale": "en-US",
                                "name": "yogurt/juice bar"
                              },
                              {
                                "nameLocale": "en-US",
                                "name": "restaurant"
                              }
                            ]
                          }
                        ]
                      },
                      "address": {
                        "streetNumber": "4555",
                        "streetName": "Stone Way N",
                        "municipalitySubdivision": "Wallingford, Seattle",
                        "municipality": "Seattle",
                        "countrySecondarySubdivision": "King",
                        "countryTertiarySubdivision": "Seattle",
                        "countrySubdivision": "WA",
                        "postalCode": "98103",
                        "extendedPostalCode": "981036600",
                        "countryCode": "US",
                        "country": "United States",
                        "countryCodeISO3": "USA",
                        "freeformAddress": "4555 Stone Way N, Seattle, WA 98103",
                        "localName": "Seattle",
                        "countrySubdivisionName": "Washington"
                      },
                      "position": {
                        "lat": 47.66179,
                        "lon": -122.34233
                      },
                      "viewport": {
                        "topLeftPoint": {
                          "lat": 47.66269,
                          "lon": -122.34367
                        },
                        "btmRightPoint": {
                          "lat": 47.66089,
                          "lon": -122.34099
                        }
                      },
                      "entryPoints": [
                        {
                          "type": "main",
                          "position": {
                            "lat": 47.66188,
                            "lon": -122.34211
                          }
                        }
                      ]
                    }
                  ]
                }
              },
              "400": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "400 BadRequest",
                    "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
                  }
                }
              },
              "401": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "401 Unauthorized",
                    "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
                  }
                }
              },
              "403": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "403 Forbidden",
                    "message": "Permission, capacity, or authentication issues."
                  }
                }
              },
              "404": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "404 NotFound",
                    "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
                  }
                }
              },
              "500": {
                "headers": {},
                "body": {
                  "error": {
                    "code": "500 InternalServerError",
                    "message": "An error occurred while processing the request. Please try again later."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/ClientId"
          },
          {
            "$ref": "#/parameters/SubscriptionKey"
          },
          {
            "$ref": "#/parameters/ApiVersion"
          },
          {
            "$ref": "#/parameters/TextFormat"
          },
          {
            "name": "query",
            "in": "query",
            "description": "The POI name to search for (e.g., \"statue of liberty\", \"starbucks\"), must be properly URL encoded.",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
          },
          {
            "$ref": "#/parameters/Typeahead"
          },
          {
            "$ref": "#/parameters/Limit"
          },
          {
            "name": "ofs",
            "in": "query",
            "description": "Starting offset of the returned results within the full result set. Default: 0, minimum: 0 and maximum: 1900",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1900
          },
          {
            "$ref": "#/parameters/CountrySet"
          },
          {
            "$ref": "#/parameters/OptionalBiasLat"
          },
          {
            "$ref": "#/parameters/OptionalBiasLon"
          },
          {
            "$ref": "#/parameters/Radius"
          },
          {
            "$ref": "#/parameters/BoundingBoxTopLeft"
          },
          {
            "$ref": "#/parameters/BoundingBoxBottomRight"
          },
          {
            "$ref": "#/parameters/Language"
          },
          {
            "$ref": "#/parameters/ExtendedPostalCodesForPoi"
          },
          {
            "$ref": "#/parameters/BrandSet"
          },
          {
            "$ref": "#/parameters/ConnectorSet"
          },
          {
            "$ref": "#/parameters/View"
          },
          {
            "$ref": "#/parameters/OpeningHours"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchPoiResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        },
        "produces": [
          "application/json",
          "application/xml"
        ],
        "consumes": [],
        "x-internal-toc-name": "Get Search POI"
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "description": "This response object is returned when an error occurs in the Maps API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Maps API",
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The HTTP status code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        }
      }
    },
    "BatchResponse": {
      "description": "This object is returned from a successful Batch service call",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary for the batch request",
          "type": "object",
          "readOnly": true,
          "properties": {
            "successfulRequests": {
              "description": "Number of successful requests in the batch",
              "type": "integer",
              "readOnly": true
            },
            "totalRequests": {
              "description": "Total number of requests in the batch",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        "batchItems": {
          "description": "Array containing the batch results",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Geometry": {
      "description": "This represents the geometry for one or more geographical features (parks, state boundary etc.) and should be a `GeoJSON` compliant type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details.",
      "type": "object"
    },
    "BatchRequestBody": {
      "description": "This type represents the request body for the Batch service.",
      "type": "object",
      "properties": {
        "batchItems": {
          "description": "The list of queries/requests to process",
          "type": "array",
          "items": {
            "description": "Batch Query object",
            "type": "object",
            "properties": {
              "query": {
                "description": "Partial query string",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "CoordinateAbbreviated": {
      "description": "A location represented as a latitude and longitude.",
      "type": "object",
      "properties": {
        "lat": {
          "description": "Latitude property",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "lon": {
          "description": "Longitude property",
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      }
    },
    "GeoJSONGeometry": {
      "description": "A valid `GeoJSON` geometry object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details.",
      "type": "object",
      "discriminator": "type",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Specifies the `GeoJSON` geometry type. Must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection.",
          "type": "string",
          "enum": [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection"
          ],
          "x-ms-enum": {
            "name": "GeoJSONGeometryType",
            "modelAsString": false,
            "values": [
              {
                "value": "Point",
                "description": "`GeoJSON Point` geometry."
              },
              {
                "value": "MultiPoint",
                "description": "`GeoJSON MultiPoint` geometry."
              },
              {
                "value": "LineString",
                "description": "`GeoJSON LineString` geometry."
              },
              {
                "value": "MultiLineString",
                "description": "`GeoJSON MultiLineString` geometry."
              },
              {
                "value": "Polygon",
                "description": "`GeoJSON Polygon` geometry."
              },
              {
                "value": "MultiPolygon",
                "description": "`GeoJSON MultiPolygon` geometry."
              },
              {
                "value": "GeometryCollection",
                "description": "`GeoJSON GeometryCollection` geometry."
              }
            ]
          }
        }
      }
    },
    "LineString": {
      "description": "A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GeoJSONGeometry"
        },
        {
          "properties": {
            "type": {
              "description": "Specifies the `type` for the geometry. Value should always be equal to \"LineString\".",
              "type": "string"
            },
            "coordinates": {
              "description": "Coordinates for the `LineString` geometry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeoJSONPosition"
              }
            }
          },
          "required": [
            "coordinates"
          ]
        }
      ]
    },
    "GeoJSONPosition": {
      "description": "A valid `GeoJSON Position` geometry type. A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details.",
      "type": "array",
      "items": {
        "type": "number",
        "format": "double"
      }
    },
    "SearchPolygonResponse": {
      "description": "This object is returned from a successful Search Polygon call",
      "type": "object",
      "properties": {
        "additionalData": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchPolygonResult"
          }
        }
      }
    },
    "SearchPolygonResult": {
      "type": "object",
      "properties": {
        "providerID": {
          "description": "ID of the returned entity",
          "type": "string",
          "readOnly": true
        },
        "error": {
          "description": "Reason for the failure to obtain data for this provider.",
          "type": "string",
          "readOnly": true
        },
        "geometryData": {
          "description": "Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if \"error\" is not present.",
          "$ref": "#/definitions/Geometry"
        }
      }
    },
    "SearchFuzzyResponse": {
      "description": "This object is returned from a successful Search Fuzzy call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchFuzzySummary"
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchFuzzyResult"
          }
        }
      }
    },
    "SearchFuzzySummary": {
      "description": "Summary object for a Search Fuzzy response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "SearchFuzzyResult": {
      "type": "object",
      "properties": {
        "type": {
          "description": "One of:\n* POI\n* Street\n* Geography\n* Point Address\n* Address Range\n* Cross Street",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "poi": {
          "$ref": "#/definitions/SearchResultPoi"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        },
        "addressRanges": {
          "$ref": "#/definitions/SearchResultAddressRanges"
        },
        "dataSources": {
          "$ref": "#/definitions/DataSources"
        }
      }
    },
    "SearchPoiResponse": {
      "description": "This object is returned from a successful Search POI call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchPoiSummary"
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchPoiResult"
          }
        }
      }
    },
    "SearchPoiSummary": {
      "description": "Summary object for a Search POI response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        },
        "geoBias": {
          "$ref": "#/definitions/SearchSummaryGeoBias"
        }
      }
    },
    "SearchPoiResult": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "dist": {
          "$ref": "#/definitions/SearchResultDistance"
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "poi": {
          "$ref": "#/definitions/SearchResultPoi"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        }
      }
    },
    "SearchNearbyResponse": {
      "description": "This object is returned from a successful Search Nearby call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchNearbySummary"
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchNearbyResult"
          }
        }
      }
    },
    "SearchNearbySummary": {
      "description": "Summary object for a Search Nearby response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        },
        "geoBias": {
          "$ref": "#/definitions/SearchSummaryGeoBias"
        }
      }
    },
    "SearchNearbyResult": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "dist": {
          "$ref": "#/definitions/SearchResultDistance"
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "poi": {
          "$ref": "#/definitions/SearchResultPoi"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        }
      }
    },
    "SearchPoiCategoryResponse": {
      "description": "This object is returned from a successful Search POI Category call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchPoiCategorySummary"
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchPoiCategoryResult"
          }
        }
      }
    },
    "SearchPoiCategorySummary": {
      "description": "Summary object for a Search POI Category response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        },
        "geoBias": {
          "$ref": "#/definitions/SearchSummaryGeoBias"
        }
      }
    },
    "SearchPoiCategoryResult": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "dist": {
          "$ref": "#/definitions/SearchResultDistance"
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "poi": {
          "$ref": "#/definitions/SearchResultPoi"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        }
      }
    },
    "SearchAddressResponse": {
      "description": "This object is returned from a successful Search Address call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchAddressSummary"
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAddressResult"
          }
        }
      }
    },
    "SearchAddressSummary": {
      "description": "Summary object for a Search Address response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "SearchAddressResult": {
      "type": "object",
      "properties": {
        "type": {
          "description": "One of:\n* POI\n* Street\n* Geography\n* Point Address\n* Address Range\n* Cross Street",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        },
        "dataSources": {
          "$ref": "#/definitions/DataSources"
        }
      }
    },
    "SearchAddressReverseResponse": {
      "description": "This object is returned from a successful Search Address Reverse call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchAddressReverseSummary"
        },
        "addresses": {
          "description": "Addresses array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAddressReverseResult"
          }
        }
      }
    },
    "SearchAddressReverseSummary": {
      "description": "Summary object for a Search Address Reverse response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "SearchAddressReverseResult": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "type": "string",
          "readOnly": true,
          "description": "Position property in the form of \"{latitude},{longitude}\""
        },
        "matchType": {
          "type": "string",
          "readOnly": true,
          "description": "Information on the type of match.\n\nOne of:\n  * AddressPoint\n  * HouseNumberRange\n  * Street"
        }
      }
    },
    "SearchAddressReverseCrossStreetResponse": {
      "description": "This object is returned from a successful Search Address Reverse CrossStreet call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchAddressReverseCrossStreetSummary"
        },
        "addresses": {
          "description": "Addresses array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAddressReverseCrossStreetResult"
          }
        }
      }
    },
    "SearchAddressReverseCrossStreetSummary": {
      "description": "Summary object for a Search Address Reverse Cross Street response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "SearchAddressReverseCrossStreetResult": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "type": "string",
          "readOnly": true,
          "description": "Position property in the form of \"{latitude},{longitude}\""
        }
      }
    },
    "SearchAddressStructuredResponse": {
      "description": "This object is returned from a successful Search Address Structured call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchAddressStructuredSummary"
        },
        "results": {
          "description": "Results array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAddressStructuredResult"
          }
        }
      }
    },
    "SearchAddressStructuredSummary": {
      "description": "Summary object for a Search Address Structured response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "limit": {
          "description": "Maximum number of responses that will be returned",
          "readOnly": true,
          "type": "integer"
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        },
        "geoBias": {
          "$ref": "#/definitions/SearchSummaryGeoBias"
        }
      }
    },
    "SearchAddressStructuredResult": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "dist": {
          "$ref": "#/definitions/SearchResultDistance"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        },
        "addressRanges": {
          "$ref": "#/definitions/SearchResultAddressRanges"
        }
      }
    },
    "SearchGeometryResponse": {
      "description": "This object is returned from a successful Search By Geometry call",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchGeometrySummary"
        },
        "results": {
          "description": "A list of Search Inside Geometry results.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchGeometryResult"
          }
        }
      }
    },
    "SearchGeometrySummary": {
      "description": "Summary object for a Search Geometry response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "SearchGeometryResult": {
      "description": "This type represents the Search Inside Geometry result object.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "poi": {
          "$ref": "#/definitions/SearchResultPoi"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        }
      }
    },
    "SearchAlongRouteResponse": {
      "description": "This object is returned from a successful Search Along Route call.",
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/SearchAlongRouteSummary"
        },
        "results": {
          "description": "A list of Search Along Route results.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchAlongRouteResult"
          }
        }
      }
    },
    "SearchAlongRouteSummary": {
      "description": "Summary object for a Search Along Route response",
      "type": "object",
      "readOnly": true,
      "properties": {
        "query": {
          "description": "Query property",
          "type": "string",
          "readOnly": true
        },
        "queryType": {
          "description": "QueryType property",
          "type": "string",
          "readOnly": true
        },
        "queryTime": {
          "description": "QueryTime property",
          "type": "integer",
          "readOnly": true
        },
        "numResults": {
          "description": "NumResults property",
          "type": "integer",
          "readOnly": true
        },
        "offset": {
          "description": "Offset property",
          "type": "integer",
          "readOnly": true
        },
        "totalResults": {
          "description": "TotalResults property",
          "type": "integer",
          "readOnly": true
        },
        "fuzzyLevel": {
          "description": "FuzzyLevel property",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "SearchAlongRouteResult": {
      "description": "This type represents the Search Along Route result object.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type property",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Id property",
          "type": "string",
          "readOnly": true
        },
        "score": {
          "$ref": "#/definitions/SearchResultScore"
        },
        "info": {
          "description": "Info property",
          "type": "string",
          "readOnly": true
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "poi": {
          "$ref": "#/definitions/SearchResultPoi"
        },
        "address": {
          "$ref": "#/definitions/SearchResultAddress"
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "viewport": {
          "$ref": "#/definitions/SearchResultViewport"
        },
        "entryPoints": {
          "description": "Entry Points array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultEntryPoint"
          }
        },
        "dist": {
          "$ref": "#/definitions/SearchResultDistance"
        },
        "detourTime": {
          "description": "Detour time in seconds",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "SearchInsideGeometryRequestBody": {
      "description": "This type represents the request body for the Search Inside Geometry service.",
      "type": "object",
      "properties": {
        "geometry": {
          "$ref": "#/definitions/Geometry"
        }
      }
    },
    "SearchAlongRouteRequestBody": {
      "description": "This type represents the request body for the Search Along Route service.",
      "type": "object",
      "properties": {
        "route": {
          "$ref": "#/definitions/LineString"
        }
      }
    },
    "SearchResultPoi": {
      "description": "Details of the poi including the name, phone, url, and categories.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name property",
          "type": "string",
          "readOnly": true
        },
        "phone": {
          "description": "Phone property",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "description": "URL property",
          "type": "string",
          "readOnly": true
        },
        "categories": {
          "description": "__[Deprecated]__ Use classifications instead. Categories array",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string",
            "readOnly": true
          }
        },
        "classifications": {
          "description": "Classification array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchResultPoiClassification"
          }
        },
        "brands": {
          "description": "Brands array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchResultPoiBrand"
          }
        }
      }
    },
    "SearchResultPoiClassification": {
      "description": "The classification for the POI being returned",
      "type": "object",
      "properties": {
        "code": {
          "description": "Code property",
          "type": "string",
          "readOnly": true
        },
        "names": {
          "description": "Names array",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SearchResultPoiClassificationName"
          }
        }
      }
    },
    "SearchResultPoiClassificationName": {
      "description": "Name for the classification",
      "type": "object",
      "properties": {
        "nameLocale": {
          "description": "Name Locale property",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name property",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SearchResultPoiBrand": {
      "description": "The name of the brand for the POI being returned",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the brand",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SearchResultAddress": {
      "description": "The address of the result",
      "type": "object",
      "properties": {
        "buildingNumber": {
          "description": "Building Number property",
          "type": "string",
          "readOnly": true
        },
        "street": {
          "description": "Street property",
          "type": "string",
          "readOnly": true
        },
        "crossStreet": {
          "description": "Cross Street property",
          "type": "string",
          "readOnly": true
        },
        "streetNumber": {
          "description": "Street Number property",
          "type": "string",
          "readOnly": true
        },
        "routeNumbers": {
          "description": "number of routes",
          "type": "array",
          "items": {
            "type": "integer",
            "readOnly": true
          },
          "readOnly": true
        },
        "streetName": {
          "description": "Street Name property",
          "type": "string",
          "readOnly": true
        },
        "streetNameAndNumber": {
          "description": "Street Name and Number property",
          "type": "string",
          "readOnly": true
        },
        "municipality": {
          "description": "Municipality property",
          "type": "string",
          "readOnly": true
        },
        "municipalitySubdivision": {
          "description": "Municipality Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "countryTertiarySubdivision": {
          "description": "Country Tertiary Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "countrySecondarySubdivision": {
          "description": "Country Secondary Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "countrySubdivision": {
          "description": "Country Subdivision property",
          "type": "string",
          "readOnly": true
        },
        "postalCode": {
          "description": "Postal Code property",
          "type": "string",
          "readOnly": true
        },
        "extendedPostalCode": {
          "description": "Extended Postal Code property",
          "type": "string",
          "readOnly": true
        },
        "countryCode": {
          "description": "Country Code property",
          "type": "string",
          "readOnly": true
        },
        "country": {
          "description": "Country property",
          "type": "string",
          "readOnly": true
        },
        "countryCodeISO3": {
          "description": "Country Code ISO3 property",
          "type": "string",
          "readOnly": true
        },
        "freeformAddress": {
          "description": "Free form Address property",
          "type": "string",
          "readOnly": true
        },
        "countrySubdivisionName": {
          "description": "Country Subdividion Name property",
          "type": "string",
          "readOnly": true
        },
        "localName": {
          "description": "An address component which represents the name of a geographic area or locality that groups a number of addressable objects for addressing purposes, without being an administrative unit. This field is used to build the `freeformAddress` property.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SearchResultViewport": {
      "description": "The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport.",
      "type": "object",
      "properties": {
        "topLeftPoint": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "btmRightPoint": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        }
      }
    },
    "SearchResultEntryPoint": {
      "description": "The entry point for the POI being returned.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of entry point. Value can be either _main_ or _minor_.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "main",
            "minor"
          ]
        },
        "position": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        }
      }
    },
    "SearchResultAddressRanges": {
      "description": "Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included.",
      "type": "object",
      "properties": {
        "rangeLeft": {
          "type": "string"
        },
        "rangeRight": {
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        },
        "to": {
          "$ref": "#/definitions/CoordinateAbbreviated"
        }
      }
    },
    "SearchResultScore": {
      "description": "The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.",
      "type": "number",
      "readOnly": true
    },
    "SearchResultDistance": {
      "description": "Straight line distance between the result and geobias location in meters.",
      "type": "number",
      "readOnly": true
    },
    "SearchSummaryGeoBias": {
      "description": "Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal.",
      "type": "object",
      "readOnly": true,
      "properties": {
        "lat": {
          "description": "Latitude property",
          "type": "number",
          "readOnly": true
        },
        "lon": {
          "description": "Longitude property",
          "type": "number",
          "readOnly": true
        }
      }
    },
    "DataSources": {
      "description": "Optional section. Reference ids for use with the [Get Search Polygon](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchpolygon) API.",
      "type": "object",
      "properties": {
        "geometry": {
          "$ref": "#/definitions/DataSourcesGeometry"
        }
      }
    },
    "DataSourcesGeometry": {
      "description": "Information about the geometric shape of the result. Only present if type == Geography.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Pass this as geometryId to the [Get Search Polygon](https://docs.microsoft.com/en-us/rest/api/maps/search/getsearchpolygon) API to fetch geometry information for this result.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "EntityType": {
      "description": "Defines geography entity types.",
      "type": "string",
      "enum": [
        "Country",
        "CountrySubdivision",
        "CountrySecondarySubdivision",
        "CountryTertiarySubdivision",
        "Municipality",
        "MunicipalitySubdivision",
        "Neighbourhood",
        "PostalCodeArea"
      ],
      "x-ms-enum": {
        "name": "EntityType",
        "modelAsString": false,
        "values": [
          {
            "value": "Country",
            "description": "Country name"
          },
          {
            "value": "CountrySubdivision",
            "description": "State or Province"
          },
          {
            "value": "CountrySecondarySubdivision",
            "description": "County"
          },
          {
            "value": "CountryTertiarySubdivision",
            "description": "Named Area"
          },
          {
            "value": "Municipality",
            "description": "City / Town"
          },
          {
            "value": "MunicipalitySubdivision",
            "description": "Sub / Super City"
          },
          {
            "value": "Neighbourhood",
            "description": "Neighbourhood"
          },
          {
            "value": "PostalCodeArea",
            "description": "Postal Code / Zip Code"
          }
        ]
      }
    }
  },
  "x-internal-service-id": "maps",
  "x-internal-service-name": "Maps",
  "x-internal-toc-name": "Search",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "GetSearchPOI",
  "x-internal-operation-name": "Get Search POI"
}