### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.search.postsearchinsidegeometry
name: Post Search Inside Geometry
service: Maps
groupName: Search
apiVersion: "1.0"
summary: The Search Geometry endpoint allows you to perform a free form search inside a single geometry or many of them. The search results that fall inside the geometry/geometries will be returned.<br><br>To send the geometry you will use a `POST` request where the request body will contain the `geometry` object represented as a `GeoJSON` type and the `Content-Type` header will be set to `application/json`. The geographical features to be searched can be modeled as Polygon and/or Circle geometries represented using any one of the following `GeoJSON` types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be represented as a `GeoJSON FeatureCollection` object. This is the recommended option if the geometry contains both Polygons and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON Feature` objects. Each `Feature` object should represent either a Polygon or a Circle with the following conditions:<ul style="list-style-type:none"><li>A `Feature` object for the Polygon geometry can have a max of 50 coordinates and it's properties must be empty.</li><li>A `Feature` object for the Circle geometry is composed of a _center_ represented using a `GeoJSON Point` type and a _radius_ value (in meters) which must be specified in the object's properties along with the _subType_ property whose value should be 'Circle'.</li></ul><br> Please see the Examples section below for a sample `FeatureCollection` representation.<br><br></li><li>**GeoJSON GeometryCollection**<br>The `geometry` can be represented as a `GeoJSON GeometryCollection` object. This is the recommended option if the geometry contains a list of Polygons only. The `GeometryCollection` can contain a max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max of 50 coordinates. Please see the Examples section below for a sample `GeometryCollection` representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can be represented as a `GeoJSON Polygon` object. This is the recommended option if the geometry contains a single Polygon. The `Polygon` object can have a max of 50 coordinates. Please see the Examples section below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
consumes: []
produces:
- application/json
- application/xml
paths:
- content: POST https://atlas.microsoft.com/search/geometry/{format}?subscription-key={subscription-key}&api-version=1.0&query={query}
- content: POST https://atlas.microsoft.com/search/geometry/{format}?subscription-key={subscription-key}&api-version=1.0&query={query}&limit={limit}&language={language}&extendedPostalCodesFor={extendedPostalCodesFor}&idxSet={idxSet}
  isOptional: true
uriParameters:
- name: format
  in: path
  isRequired: true
  description: Desired format of the response. Value can be either _json_ or _xml_.
  types:
  - uid: TextFormat
- name: subscription-key
  in: query
  isRequired: true
  description: Azure Maps subscription key
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API. Current version is 1.0
  types:
  - uid: string
- name: query
  in: query
  isRequired: true
  description: The applicable query string (e.g., "burger joints", "pizza"). Can _also_ be specified as a comma separated string composed by latitude followed by longitude (e.g., "47.641268, -122.125679"). Must be properly URL encoded.
  types:
  - uid: string
- name: limit
  in: query
  description: 'Maximum number of responses that will be returned. Default: 10, minimum: 1 and maximum: 100'
  types:
  - uid: integer
- name: language
  in: query
  description: >-
    Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used.


    Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details.
  types:
  - uid: string
- name: extendedPostalCodesFor
  in: query
  description: "Indexes for which extended postal codes should be included in the results.\n\nAvailable indexes are: \n\n **Addr** = Address ranges \n\n **Geo** = Geographies \n\n **PAD** = Point Addresses \n\n **POI** = Points of Interest \n\n **Str** = Streets \n\n **XStr** = Cross Streets (intersections)\n\nValue should be a comma separated list of index types (in any order) or **None** for no indexes.\n\nBy default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.\n\nUsage examples:\n\n extendedPostalCodesFor=POI \n\n extendedPostalCodesFor=PAD,Addr,POI \n\n extendedPostalCodesFor=None\n\nExtended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent."
  types:
  - uid: string
- name: idxSet
  in: query
  description: 'A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections)'
  types:
  - uid: array
responses:
- name: 200 OK
  description: OK
  types:
  - uid: SearchGeometryResponse
- name: 400 Bad Request
  description: 'Bad request: one or more parameters were incorrectly specified or are mutually exclusive.'
  types:
  - uid: ErrorResponse
- name: 401 Unauthorized
  description: Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.
  types:
  - uid: ErrorResponse
- name: 403 Forbidden
  description: Permission, capacity, or authentication issues.
  types:
  - uid: ErrorResponse
- name: 404 Not Found
  description: 'Not Found: the requested resource could not be found, but it may be available again in the future.'
  types:
  - uid: ErrorResponse
- name: 500 Internal Server Error
  description: An error occurred while processing the request. Please try again later.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: geometry
    in: body
    description: This represents the geometry for one or more geographical features (parks, state boundary etc.) and should be a `GeoJSON` compliant type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details.
    types:
    - uid: object
requestHeader: []
definitions:
- name: TextFormat
  description: Desired format of the response. Value can be either _json_ or _xml_.
  kind: enum
  properties:
  - name: json
    description: '[The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)'
    types:
    - uid: string
  - name: xml
    description: '[The Extensible Markup Language](https://www.w3.org/TR/xml/)'
    types:
    - uid: string
- name: SearchGeometryResponse
  description: This object is returned from a successful Search By Geometry call
  kind: object
  properties:
  - name: summary
    isReadyOnly: true
    description: Summary object for a Search Geometry response
    types:
    - uid: SearchGeometrySummary
  - name: results
    isReadyOnly: true
    description: A list of Search Inside Geometry results.
    types:
    - uid: SearchGeometryResult
      isArray: true
- name: ErrorResponse
  description: This response object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: error
    description: This object is returned when an error occurs in the Maps API
    types:
    - uid: Error
- name: SearchInsideGeometryRequestBody
  description: This type represents the request body for the Search Inside Geometry service.
  kind: object
  properties:
  - name: geometry
    description: This represents the geometry for one or more geographical features (parks, state boundary etc.) and should be a `GeoJSON` compliant type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details.
    types:
    - uid: object
- name: SearchGeometrySummary
  description: Summary object for a Search Geometry response
  kind: object
  properties:
  - name: query
    isReadyOnly: true
    description: Query property
    types:
    - uid: string
  - name: queryType
    isReadyOnly: true
    description: QueryType property
    types:
    - uid: string
  - name: queryTime
    isReadyOnly: true
    description: QueryTime property
    types:
    - uid: integer
  - name: numResults
    isReadyOnly: true
    description: NumResults property
    types:
    - uid: integer
  - name: offset
    isReadyOnly: true
    description: Offset property
    types:
    - uid: integer
  - name: totalResults
    isReadyOnly: true
    description: TotalResults property
    types:
    - uid: integer
  - name: fuzzyLevel
    isReadyOnly: true
    description: FuzzyLevel property
    types:
    - uid: integer
- name: SearchGeometryResult
  description: This type represents the Search Inside Geometry result object.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: Type property
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Id property
    types:
    - uid: string
  - name: score
    isReadyOnly: true
    description: The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set.
    types:
    - uid: number
  - name: info
    isReadyOnly: true
    description: Info property
    types:
    - uid: string
  - name: entityType
    isReadyOnly: true
    description: Entity Type property
    types:
    - uid: string
  - name: poi
    description: Details of the poi including the name, phone, url, and categories.
    types:
    - uid: SearchResultPoi
  - name: address
    description: The address of the result
    types:
    - uid: SearchResultAddress
  - name: position
    description: A location represented as a latitude and longitude.
    types:
    - uid: CoordinateAbbreviated
  - name: viewport
    description: The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport.
    types:
    - uid: SearchResultViewport
  - name: entryPoints
    description: Entry Points array
    types:
    - uid: SearchResultEntryPoint
      isArray: true
- name: Error
  description: This object is returned when an error occurs in the Maps API
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The HTTP status code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: If available, a human readable description of the error.
    types:
    - uid: string
- name: SearchResultPoi
  description: Details of the poi including the name, phone, url, and categories.
  kind: object
  properties:
  - name: name
    isReadyOnly: true
    description: Name property
    types:
    - uid: string
  - name: phone
    isReadyOnly: true
    description: Phone property
    types:
    - uid: string
  - name: url
    isReadyOnly: true
    description: URL property
    types:
    - uid: string
  - name: categories
    isReadyOnly: true
    description: Categories array
    types:
    - uid: string
      isArray: true
  - name: classifications
    isReadyOnly: true
    description: Classification array
    types:
    - uid: SearchResultPoiClassification
      isArray: true
- name: SearchResultAddress
  description: The address of the result
  kind: object
  properties:
  - name: buildingNumber
    isReadyOnly: true
    description: Building Number property
    types:
    - uid: string
  - name: street
    isReadyOnly: true
    description: Street property
    types:
    - uid: string
  - name: crossStreet
    isReadyOnly: true
    description: Cross Street property
    types:
    - uid: string
  - name: streetNumber
    isReadyOnly: true
    description: Street Number property
    types:
    - uid: string
  - name: routeNumbers
    isReadyOnly: true
    description: number of routes
    types:
    - uid: integer
      isArray: true
  - name: streetName
    isReadyOnly: true
    description: Street Name property
    types:
    - uid: string
  - name: streetNameAndNumber
    isReadyOnly: true
    description: Street Name and Number property
    types:
    - uid: string
  - name: municipality
    isReadyOnly: true
    description: Municipality property
    types:
    - uid: string
  - name: municipalitySubdivision
    isReadyOnly: true
    description: Municipality Subdivision property
    types:
    - uid: string
  - name: countryTertiarySubdivision
    isReadyOnly: true
    description: Country Tertiary Subdivision property
    types:
    - uid: string
  - name: countrySecondarySubdivision
    isReadyOnly: true
    description: Country Secondary Subdivision property
    types:
    - uid: string
  - name: countrySubdivision
    isReadyOnly: true
    description: Country Subdivision property
    types:
    - uid: string
  - name: postalCode
    isReadyOnly: true
    description: Postal Code property
    types:
    - uid: string
  - name: extendedPostalCode
    isReadyOnly: true
    description: Extended Postal Code property
    types:
    - uid: string
  - name: countryCode
    isReadyOnly: true
    description: Country Code property
    types:
    - uid: string
  - name: country
    isReadyOnly: true
    description: Country property
    types:
    - uid: string
  - name: countryCodeISO3
    isReadyOnly: true
    description: Country Code ISO3 property
    types:
    - uid: string
  - name: freeformAddress
    isReadyOnly: true
    description: Free form Address property
    types:
    - uid: string
  - name: countrySubdivisionName
    isReadyOnly: true
    description: Country Subdividion Name property
    types:
    - uid: string
- name: CoordinateAbbreviated
  description: A location represented as a latitude and longitude.
  kind: object
  properties:
  - name: lat
    isReadyOnly: true
    description: Latitude property
    types:
    - uid: number
  - name: lon
    isReadyOnly: true
    description: Longitude property
    types:
    - uid: number
- name: SearchResultViewport
  description: The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport.
  kind: object
  properties:
  - name: topLeftPoint
    description: A location represented as a latitude and longitude.
    types:
    - uid: CoordinateAbbreviated
  - name: btmRightPoint
    description: A location represented as a latitude and longitude.
    types:
    - uid: CoordinateAbbreviated
- name: SearchResultEntryPoint
  description: The entry point for the POI being returned.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The type of entry point. Value can be either _main_ or _minor_.
    types:
    - uid: main
    - uid: minor
    typesTitle: enum
  - name: position
    description: A location represented as a latitude and longitude.
    types:
    - uid: CoordinateAbbreviated
- name: SearchResultPoiClassification
  description: The classification for the POI being returned
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: Code property
    types:
    - uid: string
  - name: names
    isReadyOnly: true
    description: Names array
    types:
    - uid: SearchResultPoiClassificationName
      isArray: true
- name: SearchResultPoiClassificationName
  description: Name for the classification
  kind: object
  properties:
  - name: nameLocale
    isReadyOnly: true
    description: Name Locale property
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Name property
    types:
    - uid: string
examples:
- name: Search for pizza places inside a geometry represented as a GeoJSON FeatureCollection type
  request:
    uri: POST https://atlas.microsoft.com/search/geometry/json?subscription-key=[subscription-key]&api-version=1.0&query=pizza&limit=2
    body: >-
      {
        "geometry": {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "geometry": {
                "type": "Polygon",
                "coordinates": [
                  [
                    [
                      -122.143035,
                      47.653536
                    ],
                    [
                      -122.187164,
                      47.617556
                    ],
                    [
                      -122.114981,
                      47.570599
                    ],
                    [
                      -122.132756,
                      47.654009
                    ],
                    [
                      -122.143035,
                      47.653536
                    ]
                  ]
                ]
              },
              "properties": {}
            },
            {
              "type": "Feature",
              "geometry": {
                "type": "Point",
                "coordinates": [
                  -122.126986,
                  47.639754
                ]
              },
              "properties": {
                "subType": "Circle",
                "radius": 100
              }
            }
          ]
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "summary": {
          "query": "pizza",
          "queryType": "NON_NEAR",
          "queryTime": 45,
          "numResults": 2,
          "offset": 0,
          "totalResults": 18,
          "fuzzyLevel": 1
        },
        "results": [
          {
            "type": "POI",
            "id": "US/POI/p1/199865",
            "score": 4,
            "info": "search:decarta:ta:840539000519519-US",
            "poi": {
              "name": "Tutta Bella",
              "phone": "+(1)-(425)-5027402",
              "url": "TuttaBella.com",
              "categories": [
                "pizza",
                "restaurant"
              ],
              "classifications": [
                {
                  "code": "RESTAURANT",
                  "names": [
                    {
                      "nameLocale": "en-US",
                      "name": "restaurant"
                    },
                    {
                      "nameLocale": "en-US",
                      "name": "pizza"
                    }
                  ]
                }
              ]
            },
            "address": {
              "streetNumber": "15600",
              "streetName": "NE 8th St",
              "municipalitySubdivision": "Bellevue, Crossroads",
              "municipality": "Bellevue",
              "countrySecondarySubdivision": "King",
              "countryTertiarySubdivision": "Seattle East",
              "countrySubdivision": "WA",
              "postalCode": "98008",
              "extendedPostalCode": "980084084",
              "countryCode": "US",
              "country": "United States Of America",
              "countryCodeISO3": "USA",
              "freeformAddress": "15600 NE 8th St, Bellevue, WA 98008",
              "countrySubdivisionName": "Washington"
            },
            "position": {
              "lat": 47.61705,
              "lon": -122.13228
            },
            "viewport": {
              "topLeftPoint": {
                "lat": 47.61795,
                "lon": -122.13361
              },
              "btmRightPoint": {
                "lat": 47.61615,
                "lon": -122.13095
              }
            },
            "entryPoints": [
              {
                "type": "main",
                "position": {
                  "lat": 47.61701,
                  "lon": -122.13228
                }
              }
            ]
          },
          {
            "type": "POI",
            "id": "US/POI/p1/205464",
            "score": 4,
            "info": "search:decarta:ta:840539000714286-US",
            "poi": {
              "name": "Q & S Food Co LLC",
              "phone": "+(1)-(425)-7464764",
              "categories": [
                "pizza",
                "restaurant"
              ],
              "classifications": [
                {
                  "code": "RESTAURANT",
                  "names": [
                    {
                      "nameLocale": "en-US",
                      "name": "restaurant"
                    },
                    {
                      "nameLocale": "en-US",
                      "name": "pizza"
                    }
                  ]
                }
              ]
            },
            "address": {
              "streetNumber": "511",
              "streetName": "141st Ave SE",
              "municipalitySubdivision": "Bellevue, West Lake Hills",
              "municipality": "Bellevue, Eastgate",
              "countrySecondarySubdivision": "King",
              "countryTertiarySubdivision": "Seattle East",
              "countrySubdivision": "WA",
              "postalCode": "98007",
              "countryCode": "US",
              "country": "United States Of America",
              "countryCodeISO3": "USA",
              "freeformAddress": "511 141st Ave SE, Bellevue, WA 98007",
              "countrySubdivisionName": "Washington"
            },
            "position": {
              "lat": 47.6051,
              "lon": -122.15226
            },
            "viewport": {
              "topLeftPoint": {
                "lat": 47.606,
                "lon": -122.15359
              },
              "btmRightPoint": {
                "lat": 47.6042,
                "lon": -122.15093
              }
            },
            "entryPoints": [
              {
                "type": "main",
                "position": {
                  "lat": 47.6051,
                  "lon": -122.15219
                }
              }
            ]
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
- name: Search for burger joints inside a geometry represented as a GeoJSON GeometryCollection type
  request:
    uri: POST https://atlas.microsoft.com/search/geometry/json?subscription-key=[subscription-key]&api-version=1.0&query=burger&limit=2
    body: >-
      {
        "geometry": {
          "type": "GeometryCollection",
          "geometries": [
            {
              "type": "Polygon",
              "coordinates": [
                [
                  [
                    -122.43576049804686,
                    37.7524152343544
                  ],
                  [
                    -122.43301391601563,
                    37.706604725423119
                  ],
                  [
                    -122.36434936523438,
                    37.712059855877314
                  ],
                  [
                    -122.43576049804686,
                    37.7524152343544
                  ]
                ]
              ]
            }
          ]
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "summary": {
          "query": "burger",
          "queryType": "NON_NEAR",
          "queryTime": 61,
          "numResults": 2,
          "offset": 0,
          "totalResults": 3,
          "fuzzyLevel": 1
        },
        "results": [
          {
            "type": "POI",
            "id": "US/POI/p0/7608257",
            "score": 4,
            "info": "search:ta:840061003419653-US",
            "poi": {
              "name": "Burger Joint",
              "phone": "+(1)-(415)-3494331",
              "categories": [
                "fast food",
                "restaurant"
              ],
              "classifications": [
                {
                  "code": "RESTAURANT",
                  "names": [
                    {
                      "nameLocale": "en-US",
                      "name": "fast food"
                    },
                    {
                      "nameLocale": "en-US",
                      "name": "restaurant"
                    }
                  ]
                }
              ]
            },
            "address": {
              "streetNumber": "167",
              "streetName": "Leland Ave",
              "municipalitySubdivision": "Visitacion Valley, San Francisco",
              "municipality": "San Francisco",
              "countrySecondarySubdivision": "San Francisco",
              "countryTertiarySubdivision": "San Francisco",
              "countrySubdivision": "CA",
              "postalCode": "94134",
              "extendedPostalCode": "941342844",
              "countryCode": "US",
              "country": "United States Of America",
              "countryCodeISO3": "USA",
              "freeformAddress": "167 Leland Ave, San Francisco, CA 94134",
              "countrySubdivisionName": "California"
            },
            "position": {
              "lat": 37.71223,
              "lon": -122.40702
            },
            "viewport": {
              "topLeftPoint": {
                "lat": 37.71313,
                "lon": -122.40816
              },
              "btmRightPoint": {
                "lat": 37.71133,
                "lon": -122.40588
              }
            },
            "entryPoints": [
              {
                "type": "main",
                "position": {
                  "lat": 37.71241,
                  "lon": -122.40693
                }
              }
            ]
          },
          {
            "type": "POI",
            "id": "US/POI/p1/9012040",
            "score": 4,
            "info": "search:ta:840069006230207-US",
            "poi": {
              "name": "Barneys Gourmet Hamburger",
              "phone": "+(1)-(415)-2827770",
              "url": "www.barneyshamburgers.com",
              "categories": [
                "nightlife"
              ],
              "classifications": [
                {
                  "code": "NIGHTLIFE",
                  "names": [
                    {
                      "nameLocale": "en-US",
                      "name": "nightlife"
                    }
                  ]
                }
              ]
            },
            "address": {
              "streetNumber": "4138",
              "streetName": "24th St",
              "municipalitySubdivision": "San Francisco, Noe Valley",
              "municipality": "San Francisco",
              "countrySecondarySubdivision": "San Francisco",
              "countryTertiarySubdivision": "San Francisco",
              "countrySubdivision": "CA",
              "postalCode": "94114",
              "extendedPostalCode": "941143614",
              "countryCode": "US",
              "country": "United States Of America",
              "countryCodeISO3": "USA",
              "freeformAddress": "4138 24th St, San Francisco, CA 94114",
              "countrySubdivisionName": "California"
            },
            "position": {
              "lat": 37.75129,
              "lon": -122.43499
            },
            "viewport": {
              "topLeftPoint": {
                "lat": 37.75219,
                "lon": -122.43613
              },
              "btmRightPoint": {
                "lat": 37.75039,
                "lon": -122.43385
              }
            },
            "entryPoints": [
              {
                "type": "main",
                "position": {
                  "lat": 37.75124,
                  "lon": -122.43499
                }
              }
            ]
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
- name: Search for subs joints inside a geometry represented as a GeoJSON Polygon type
  request:
    uri: POST https://atlas.microsoft.com/search/geometry/json?subscription-key=[subscription-key]&api-version=1.0&query=subs&limit=2
    body: >-
      {
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -122.43576049804686,
                37.7524152343544
              ],
              [
                -122.43301391601563,
                37.706604725423119
              ],
              [
                -122.36434936523438,
                37.712059855877314
              ],
              [
                -122.43576049804686,
                37.7524152343544
              ]
            ]
          ]
        }
      }
  responses:
  - statusCode: "200"
    body: >-
      {
        "summary": {
          "query": "subs",
          "queryType": "NON_NEAR",
          "queryTime": 27,
          "numResults": 2,
          "offset": 0,
          "totalResults": 3,
          "fuzzyLevel": 1
        },
        "results": [
          {
            "type": "POI",
            "id": "US/POI/p1/6258659",
            "score": 4,
            "info": "search:ta:840061001992959-US",
            "poi": {
              "name": "SUBWAY",
              "phone": "+(1)-(415)-6579898",
              "url": "www.subway.com",
              "categories": [
                "fast food",
                "restaurant"
              ],
              "classifications": [
                {
                  "code": "RESTAURANT",
                  "names": [
                    {
                      "nameLocale": "en-US",
                      "name": "restaurant"
                    },
                    {
                      "nameLocale": "en-US",
                      "name": "fast food"
                    }
                  ]
                }
              ]
            },
            "address": {
              "streetNumber": "2599",
              "streetName": "San Bruno Ave",
              "municipalitySubdivision": "San Francisco, Portola",
              "municipality": "San Francisco",
              "countrySecondarySubdivision": "San Francisco",
              "countryTertiarySubdivision": "San Francisco",
              "countrySubdivision": "CA",
              "postalCode": "94134",
              "extendedPostalCode": "941341539",
              "countryCode": "US",
              "country": "United States Of America",
              "countryCodeISO3": "USA",
              "freeformAddress": "2599 San Bruno Ave, San Francisco, CA 94134",
              "countrySubdivisionName": "California"
            },
            "position": {
              "lat": 37.72902,
              "lon": -122.40387
            },
            "viewport": {
              "topLeftPoint": {
                "lat": 37.72992,
                "lon": -122.40501
              },
              "btmRightPoint": {
                "lat": 37.72812,
                "lon": -122.40273
              }
            },
            "entryPoints": [
              {
                "type": "main",
                "position": {
                  "lat": 37.72894,
                  "lon": -122.40415
                }
              }
            ]
          },
          {
            "type": "POI",
            "id": "US/POI/p0/7583473",
            "score": 4,
            "info": "search:ta:840061001853638-US",
            "poi": {
              "name": "Viking Sub",
              "phone": "+(1)-(415)-5865333",
              "url": "www.vikingsubaqua.com",
              "categories": [
                "restaurant"
              ],
              "classifications": [
                {
                  "code": "RESTAURANT",
                  "names": [
                    {
                      "nameLocale": "en-US",
                      "name": "restaurant"
                    }
                  ]
                }
              ]
            },
            "address": {
              "streetNumber": "2906",
              "streetName": "Diamond St",
              "municipalitySubdivision": "Sunnyside, San Francisco",
              "municipality": "San Francisco",
              "countrySecondarySubdivision": "San Francisco",
              "countryTertiarySubdivision": "San Francisco",
              "countrySubdivision": "CA",
              "postalCode": "94131",
              "countryCode": "US",
              "country": "United States Of America",
              "countryCodeISO3": "USA",
              "freeformAddress": "2906 Diamond St, San Francisco, CA 94131",
              "countrySubdivisionName": "California"
            },
            "position": {
              "lat": 37.7334,
              "lon": -122.43432
            },
            "viewport": {
              "topLeftPoint": {
                "lat": 37.7343,
                "lon": -122.43546
              },
              "btmRightPoint": {
                "lat": 37.7325,
                "lon": -122.43318
              }
            },
            "entryPoints": [
              {
                "type": "main",
                "position": {
                  "lat": 37.73338,
                  "lon": -122.43421
                }
              }
            ]
          }
        ]
      }
  - statusCode: "400"
    body: >-
      {
        "error": {
          "code": "400 BadRequest",
          "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
        }
      }
  - statusCode: "401"
    body: >-
      {
        "error": {
          "code": "401 Unauthorized",
          "message": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription."
        }
      }
  - statusCode: "403"
    body: >-
      {
        "error": {
          "code": "403 Forbidden",
          "message": "Permission, capacity, or authentication issues."
        }
      }
  - statusCode: "404"
    body: >-
      {
        "error": {
          "code": "404 NotFound",
          "message": "Not Found: the requested resource could not be found, but it may be available again in the future."
        }
      }
  - statusCode: "500"
    body: >-
      {
        "error": {
          "code": "500 InternalServerError",
          "message": "An error occurred while processing the request. Please try again later."
        }
      }
security:
- name: Ocp-Apim-Subscription-Key
  type: apiKey
  in: header
- name: subscription-key
  type: apiKey
  in: query
