### YamlMime:RESTOperation
uid: atlas.microsoft.com.maps.searchv2.getgeocoding.getgeocoding
name: Get Geocoding
service: Maps
groupName: Get Geocoding
apiVersion: 2021-11-01-preview
summary: >-
  **Geocoding**


  **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).


  In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No POIs will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties, states etc.
consumes: []
produces:
- application/geo+json
paths:
- content: GET https://atlas.microsoft.com/geocode?api-version=2021-11-01-preview
- content: GET https://atlas.microsoft.com/geocode?api-version=2021-11-01-preview&top={top}&addressLine={addressLine}&countryRegionSet={countryRegionSet}&bbox={bbox}&view={view}&location={location}&adminDistrict={adminDistrict}&adminDistrict2={adminDistrict2}&adminDistrict3={adminDistrict3}&locality={locality}&postalCode={postalCode}&strictMatch={strictMatch}
  isOptional: true
uriParameters:
- name: api-version
  in: query
  isRequired: true
  description: Version number of Azure Maps API.
  types:
  - uid: string
- name: top
  in: query
  description: 'Maximum number of responses that will be returned. Default: 5, minimum: 1 and maximum: 20.'
  types:
  - uid: integer
- name: addressLine
  in: query
  description: The official street line of an address relative to the area, as specified by the locality, or postalCode, properties. Typical use of this element would be to provide a street address or any official address.
  types:
  - uid: string
- name: countryRegionSet
  in: query
  description: Comma separated string of country or region codes(ISO 3166-1 Alpha-2), e.g. FR,ES. This will limit the search to the specified countries. Only the first country code will be used for the Geocoder.
  types:
  - uid: array
- name: bbox
  in: query
  description: >-
    A rectangular area on the earth defined as a bounding box object. The sides of the rectangles are defined by latitude and longitude values. For more information, see Location and Area Types. When you specify this parameter, the geographical area is taken into account when computing the results of a location query.


    Example: lon1,lat1,lon2,lat2
  types:
  - uid: array
- name: view
  in: query
  description: A string that an [ISO 3166-1 Alpha-2 region/country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels to align with the specified user region.
  types:
  - uid: string
- name: location
  in: query
  description: 'A point on the earth specified as a latitude and longitude. When you specify this parameter, the user’s location is taken into account and the results returned may be more relevant to the user. Example: &location=lon,lat'
  types:
  - uid: array
- name: adminDistrict
  in: query
  description: The country subdivision portion of an address, such as WA.
  types:
  - uid: string
- name: adminDistrict2
  in: query
  description: The county for the structured address, such as King.
  types:
  - uid: string
- name: adminDistrict3
  in: query
  description: The named area for the structured address.
  types:
  - uid: string
- name: locality
  in: query
  description: The locality portion of an address, such as Seattle.
  types:
  - uid: string
- name: postalCode
  in: query
  description: The postal code portion of an address.
  types:
  - uid: string
- name: strictMatch
  in: query
  description: Restrict the geocoding result to the country or region that is specified in the countryRegionSet field and the state, province or territory specified in the adminDistrict field.
  types:
  - uid: StrictMatchEnum
responses:
- name: 200 OK
  headers:
  - name: x-ms-request-id
    value: string
  description: OK
  types:
  - uid: GeocodingResponse
- name: Other Status Codes
  description: An unexpected error occurred.
  types:
  - uid: ErrorResponse
requestHeader:
- name: x-ms-client-id
  in: header
  description: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance.
  types:
  - uid: string
- name: Accept-Language
  in: header
  description: "Language in which search results should be returned. \n\nPlease refer to [Supported Languages](https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes) for details."
  types:
  - uid: string
definitions:
- name: StrictMatchEnum
  description: Restrict the geocoding result to the country or region that is specified in the countryRegion field and the state, province or territory specified in the adminDistrict field.
  kind: enum
  properties:
  - name: notstrict
    description: Do not restrict results to the specified countryRegion and adminDistrict.
    types:
    - uid: string
  - name: strict
    description: Restrict results to the specified countryRegion and adminDistrict.
    types:
    - uid: string
- name: GeocodingResponse
  description: This object is returned from a successful Geocoding call
  kind: object
  properties:
  - name: type
    description: ''
    types:
    - uid: FeatureType
  - name: features
    description: ''
    types:
    - uid: FeaturesItem
      isArray: true
  - name: nextLink
    description: The is the link to the next page of the features returned. If it's the last page, no this field.
    types:
    - uid: string
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: FeatureType
  kind: enum
  properties:
  - name: FeatureCollection
    types:
    - uid: string
- name: FeaturesItem
  kind: object
  properties:
  - name: type
    description: must be Feature
    types:
    - uid: Feature
    typesTitle: enum
  - name: id
    description: ID for feature returned
    types:
    - uid: string
  - name: properties
    description: ''
    types:
    - uid: Properties
  - name: geometry
    description: A structure for Point Geometry
    types:
    - uid: GeoJSONPoint
  - name: bbox
    description: Information on the coordinate range for point Geometry.  Please refer to [RFC 7946](https://datatracker.ietf.org/doc/html/rfc7946#section-5) for details.
    types:
    - uid: number
      isArray: true
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: Properties
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: "One of: \n* Address\n* RoadBlock\n* RoadIntersection"
    types:
    - uid: string
  - name: confidence
    description: >-
      The level of confidence that the geocoded location result is a match. Use this value with the match code to determine for more complete information about the match.


      The confidence of a geocoded location is based on many factors including the relative importance of the geocoded location and the user’s location, if specified. The following description provides more information about how confidence scores are assigned and how results are ranked.


      If the confidence is set to `High`, one or more strong matches were found. Multiple `High` confidence matches are sorted in ranked order by importance when applicable. For example, landmarks have importance but addresses do not.


      If a request includes a user location or a map area (see User Context Parameters), then the ranking may change appropriately. For example, a location query for "Paris" returns "Paris, France" and "Paris, TX" both with `High` confidence. "Paris, France" is always ranked first due to importance unless a user location indicates that the user is in or very close to Paris, TX or the map view indicates that the user is searching in that area.


      In some situations, the returned match may not be at the same level as the information provided in the request. For example, a request may specify address information and the geocode service may only be able to match a postal code. In this case, if the geocode service has a confidence that the postal code matches the data, the confidence is set to `Medium` and the match code is set to `UpHierarchy` to specify that it could not match all of the information and had to search up-hierarchy.


      If the location information in the query is ambiguous, and there is no additional information to rank the locations (such as user location or the relative importance of the location), the confidence is set to `Medium`. For example, a location query for "148th Ave, Bellevue" may return "148th Ave SE" and "148th Ave NE" both with `Medium` confidence.


      If the location information in the query does not provide enough information to geocode a specific location, a less precise location value may be returned and the confidence is set to `Medium`. For example, if an address is provided, but a match is not found for the house number, the geocode result with a Roadblock entity type may be returned.
    types:
    - uid: Confidence
  - name: matchCodes
    description: >-
      One or more match code values that represent the geocoding level for each location in the response.


      For example, a geocoded location with match codes of `Good` and `Ambiguous` means that more than one geocode location was found for the location information and that the geocode service did not have search up-hierarchy to find a match.


      Similarly, a geocoded location with match codes of `Ambiguous` and `UpHierarchy` implies that a geocode location could not be found that matched all the provided location information, so the geocode service had to search up-hierarchy and found multiple matches at that level. An example of up an `Ambiguous` and `UpHierarchy` result is when you provide complete address information, but the geocode service cannot locate a match for the street address and instead returns information for more than one RoadBlock value.


      The possible values are:


      `Good`: The location has only one match or all returned matches are considered strong matches. For example, a query for New York returns several Good matches.


      `Ambiguous`: The location is one of a set of possible matches. For example, when you query for the street address 128 Main St., the response may return two locations for 128 North Main St. and 128 South Main St. because there is not enough information to determine which option to choose.


      `UpHierarchy`: The location represents a move up the geographic hierarchy. This occurs when a match for the location request was not found, so a less precise result is returned. For example, if a match for the requested address cannot be found, then a match code of `UpHierarchy` with a RoadBlock entity type may be returned.
    types:
    - uid: string
      isArray: true
  - name: address
    description: The address of the result
    types:
    - uid: Address
  - name: geocodePoints
    description: A collection of geocode points that differ in how they were calculated and their suggested use.
    types:
    - uid: GeocodePoints
      isArray: true
- name: GeoJSONPoint
  description: A structure for Point Geometry
  kind: object
  properties:
  - name: type
    description: Specifies the `type` for the geometry. Value should always be equal to "Point".
    types:
    - uid: Point
    typesTitle: enum
  - name: coordinates
    description: Coordinates for the `Point` geometry.
    types:
    - uid: number
      isArray: true
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
- name: Confidence
  description: >-
    The level of confidence that the geocoded location result is a match. Use this value with the match code to determine for more complete information about the match.


    The confidence of a geocoded location is based on many factors including the relative importance of the geocoded location and the user’s location, if specified. The following description provides more information about how confidence scores are assigned and how results are ranked.


    If the confidence is set to `High`, one or more strong matches were found. Multiple `High` confidence matches are sorted in ranked order by importance when applicable. For example, landmarks have importance but addresses do not.


    If a request includes a user location or a map area (see User Context Parameters), then the ranking may change appropriately. For example, a location query for "Paris" returns "Paris, France" and "Paris, TX" both with `High` confidence. "Paris, France" is always ranked first due to importance unless a user location indicates that the user is in or very close to Paris, TX or the map view indicates that the user is searching in that area.


    In some situations, the returned match may not be at the same level as the information provided in the request. For example, a request may specify address information and the geocode service may only be able to match a postal code. In this case, if the geocode service has a confidence that the postal code matches the data, the confidence is set to `Medium` and the match code is set to `UpHierarchy` to specify that it could not match all of the information and had to search up-hierarchy.


    If the location information in the query is ambiguous, and there is no additional information to rank the locations (such as user location or the relative importance of the location), the confidence is set to `Medium`. For example, a location query for "148th Ave, Bellevue" may return "148th Ave SE" and "148th Ave NE" both with `Medium` confidence.


    If the location information in the query does not provide enough information to geocode a specific location, a less precise location value may be returned and the confidence is set to `Medium`. For example, if an address is provided, but a match is not found for the house number, the geocode result with a Roadblock entity type may be returned.
  kind: enum
  properties:
  - name: High
    types:
    - uid: string
  - name: Medium
    types:
    - uid: string
  - name: Low
    types:
    - uid: string
- name: Address
  description: The address of the result
  kind: object
  properties:
  - name: addressLine
    isReadyOnly: true
    description: AddressLine that includes Street Name and Number
    types:
    - uid: string
  - name: locality
    isReadyOnly: true
    description: locality property
    types:
    - uid: string
  - name: neighborhood
    isReadyOnly: true
    description: neighborhood property
    types:
    - uid: string
  - name: adminDistricts
    description: The subdivision name in the country or region for an address. This element is typically treated as the first order administrative subdivision, but in some cases it also contains the second, third, or fourth order subdivision in a country, dependency, or region.
    types:
    - uid: AdminDistricts
      isArray: true
  - name: postalCode
    isReadyOnly: true
    description: Postal Code property
    types:
    - uid: string
  - name: countryRegion
    description: ''
    types:
    - uid: CountryRegion
  - name: formattedAddress
    isReadyOnly: true
    description: Formatted Address property
    types:
    - uid: string
- name: GeocodePoints
  description: A collection of geocode points that differ in how they were calculated and their suggested use.
  kind: object
  properties:
  - name: geometry
    description: A structure for Point Geometry
    types:
    - uid: GeoJSONPoint
  - name: calculationMethod
    description: >-
      The method that was used to compute the geocode point.

      - `Interpolation`: The geocode point was matched to a point on a road using interpolation.

      - `InterpolationOffset`: The geocode point was matched to a point on a road using interpolation with an additional offset to shift the point to the side of the street.

      - `Parcel`: The geocode point was matched to the center of a parcel.

      - `Rooftop`: The geocode point was matched to the rooftop of a building.
    types:
    - uid: Interpolation
    - uid: InterpolationOffset
    - uid: Parcel
    - uid: Rooftop
    typesTitle: enum
  - name: usageTypes
    description: >-
      The best use for the geocode point.

      Each geocode point is defined as a `Route` point, a `Display` point or both.

      Use `Route` points if you are creating a route to the location. Use `Display` points if you are showing the location on a map. For example, if the location is a park, a `Route` point may specify an entrance to the park where you can enter with a car, and a `Display` point may be a point that specifies the center of the park.
    types:
    - uid: string
      isArray: true
- name: AdminDistricts
  description: The subdivision name in the country or region for an address. This element is typically treated as the first order administrative subdivision, but in some cases it also contains the second, third, or fourth order subdivision in a country, dependency, or region.
  kind: object
  properties:
  - name: name
    description: "The name for the corresponding adminDistrict field, \nFor adminDistrict[0], this could be full name of state such as Washington, \nFor adminDistrict[1], this could be the full name of the county"
    types:
    - uid: string
  - name: shortName
    description: "The short name for the corresponding adminDistrict field, \nFor adminDistrict[0], this could be short name of state such as WA, \nFor adminDistrict[1], this could be the short name of the county"
    types:
    - uid: string
- name: CountryRegion
  kind: object
  properties:
  - name: ISO
    isReadyOnly: true
    description: ISO of country/region
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: name of country/region
    types:
    - uid: string
examples:
- name: Search detail address 15127 NE 24th Street, Redmond, WA
  request:
    uri: GET https://atlas.microsoft.com/geocode?api-version=2021-11-01-preview&addressLine=15127 NE 24th Street&adminDistrict=WA&locality=Redmond
  responses:
  - statusCode: "200"
    headers:
    - name: Content-Type
      value: application/geo+json
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "properties": {
              "address": {
                "countryRegion": {
                  "name": "United States"
                },
                "adminDistricts": [
                  {
                    "shortName": "WA"
                  },
                  {
                    "shortName": "King County"
                  }
                ],
                "formattedAddress": "15127 NE 24th St, Redmond, WA 98052",
                "locality": "Redmond",
                "postalCode": "98052",
                "addressLine": "15127 NE 24th St"
              },
              "type": "Address",
              "confidence": "High",
              "matchCodes": [
                "Good"
              ],
              "geocodePoints": [
                {
                  "geometry": {
                    "type": "Point",
                    "coordinates": [
                      -122.138681,
                      47.630358
                    ]
                  },
                  "calculationMethod": "Rooftop",
                  "usageTypes": [
                    "Display"
                  ]
                },
                {
                  "geometry": {
                    "type": "Point",
                    "coordinates": [
                      -122.1386787,
                      47.6302179
                    ]
                  },
                  "calculationMethod": "Rooftop",
                  "usageTypes": [
                    "Route"
                  ]
                }
              ]
            },
            "geometry": {
              "type": "Point",
              "coordinates": [
                -122.138681,
                47.630358
              ]
            },
            "bbox": [
              -122.14632282407,
              47.626495282429325,
              -122.13103917593001,
              47.634220717570678
            ]
          }
        ]
      }
- name: Search detail address 15127 NE 24th Street, Redmond, WA by addressLine
  request:
    uri: GET https://atlas.microsoft.com/geocode?api-version=2021-11-01-preview&addressLine=15127 NE 24th Street Redmond WA
  responses:
  - statusCode: "200"
    headers:
    - name: Content-Type
      value: application/geo+json
    body: >-
      {
        "type": "FeatureCollection",
        "features": [
          {
            "type": "Feature",
            "properties": {
              "address": {
                "countryRegion": {
                  "name": "United States"
                },
                "adminDistricts": [
                  {
                    "shortName": "WA"
                  },
                  {
                    "shortName": "King County"
                  }
                ],
                "formattedAddress": "15127 NE 24th St, Redmond, WA 98052",
                "locality": "Redmond",
                "postalCode": "98052",
                "addressLine": "15127 NE 24th St"
              },
              "type": "Address",
              "confidence": "Medium",
              "matchCodes": [
                "Good"
              ],
              "geocodePoints": [
                {
                  "geometry": {
                    "type": "Point",
                    "coordinates": [
                      -122.138681,
                      47.630358
                    ]
                  },
                  "calculationMethod": "Rooftop",
                  "usageTypes": [
                    "Display"
                  ]
                },
                {
                  "geometry": {
                    "type": "Point",
                    "coordinates": [
                      -122.1386787,
                      47.6302179
                    ]
                  },
                  "calculationMethod": "Rooftop",
                  "usageTypes": [
                    "Route"
                  ]
                }
              ]
            },
            "geometry": {
              "type": "Point",
              "coordinates": [
                -122.138681,
                47.630358
              ]
            },
            "bbox": [
              -122.14632282407,
              47.626495282429325,
              -122.13103917593001,
              47.634220717570678
            ]
          }
        ]
      }
security:
- name: AADToken
  type: oauth2
  description: "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure role-based access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure role-based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built-in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios, we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Notes\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* \nThe `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* \nThe Azure role-based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.\n* \nUsage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently, Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported."
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: https://atlas.microsoft.com/.default
    description: https://atlas.microsoft.com/.default
- name: subscription-key
  type: apiKey
  description: >-
    This is a shared key that is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, PowerShell, CLI, Azure SDKs, or REST APIs.

     With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.

     For publicly exposed applications, our recommendation is to use server-to-server access of Azure Maps REST APIs where this key can be  securely stored.
  in: header
metadata:
  description: >-
    **Geocoding**


    **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).


    In many cases, the complete search service might be too much, for inst
errorCodes: []
