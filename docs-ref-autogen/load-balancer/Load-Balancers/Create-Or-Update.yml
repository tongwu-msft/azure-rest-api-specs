### YamlMime:RESTOperation
uid: management.azure.com.load-balancer.loadbalancers.createorupdate
name: Create Or Update
service: Load balancer
groupName: Load Balancers
apiVersion: 2022-05-01
summary: Creates or updates a load balancer.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}?api-version=2022-05-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: loadBalancerName
  in: path
  isRequired: true
  description: The name of the load balancer.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 201 Created
  description: Create successful. The operation returns the resulting LoadBalancer resource.
  types:
  - uid: LoadBalancer
- name: 200 OK
  description: Update successful. The operation returns the resulting LoadBalancer resource.
  types:
  - uid: LoadBalancer
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: extendedLocation
    in: body
    description: The extended location of the load balancer.
    types:
    - uid: ExtendedLocation
  - name: sku
    in: body
    description: The load balancer SKU.
    types:
    - uid: LoadBalancerSku
  - name: properties.frontendIPConfigurations
    in: body
    description: Object representing the frontend IPs to be used for the load balancer.
    types:
    - uid: FrontendIPConfiguration
      isArray: true
  - name: properties.backendAddressPools
    in: body
    description: Collection of backend address pools used by a load balancer.
    types:
    - uid: BackendAddressPool
      isArray: true
  - name: properties.loadBalancingRules
    in: body
    description: Object collection representing the load balancing rules Gets the provisioning.
    types:
    - uid: LoadBalancingRule
      isArray: true
  - name: properties.probes
    in: body
    description: Collection of probe objects used in the load balancer.
    types:
    - uid: Probe
      isArray: true
  - name: properties.inboundNatRules
    in: body
    description: Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
    types:
    - uid: InboundNatRule
      isArray: true
  - name: properties.inboundNatPools
    in: body
    description: Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound NAT rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
    types:
    - uid: InboundNatPool
      isArray: true
  - name: properties.outboundRules
    in: body
    description: The outbound rules.
    types:
    - uid: OutboundRule
      isArray: true
  - name: id
    in: body
    description: Resource ID.
    types:
    - uid: string
  - name: location
    in: body
    description: Resource location.
    types:
    - uid: string
  - name: tags
    in: body
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: ExtendedLocation
  description: ExtendedLocation complex type.
  kind: object
  properties:
  - name: name
    description: The name of the extended location.
    types:
    - uid: string
  - name: type
    description: The type of the extended location.
    types:
    - uid: ExtendedLocationTypes
- name: LoadBalancerSku
  description: SKU of a load balancer.
  kind: object
  properties:
  - name: name
    description: Name of a load balancer SKU.
    types:
    - uid: LoadBalancerSkuName
  - name: tier
    description: Tier of a load balancer SKU.
    types:
    - uid: LoadBalancerSkuTier
- name: FrontendIPConfiguration
  description: Frontend IP address of the load balancer.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: zones
    description: A list of availability zones denoting the IP allocated for the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: properties.inboundNatRules
    isReadyOnly: true
    description: An array of references to inbound rules that use this frontend IP.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.inboundNatPools
    isReadyOnly: true
    description: An array of references to inbound pools that use this frontend IP.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.outboundRules
    isReadyOnly: true
    description: An array of references to outbound rules that use this frontend IP.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.loadBalancingRules
    isReadyOnly: true
    description: An array of references to load balancing rules that use this frontend IP.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.privateIPAddress
    description: The private IP address of the IP configuration.
    types:
    - uid: string
  - name: properties.privateIPAllocationMethod
    description: The Private IP allocation method.
    types:
    - uid: IPAllocationMethod
  - name: properties.privateIPAddressVersion
    description: Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
    types:
    - uid: IPVersion
  - name: properties.subnet
    description: The reference to the subnet resource.
    types:
    - uid: Subnet
  - name: properties.publicIPAddress
    description: The reference to the Public IP resource.
    types:
    - uid: PublicIPAddress
  - name: properties.publicIPPrefix
    description: The reference to the Public IP Prefix resource.
    types:
    - uid: SubResource
  - name: properties.gatewayLoadBalancer
    description: The reference to gateway load balancer frontend IP.
    types:
    - uid: SubResource
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the frontend IP configuration resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: BackendAddressPool
  description: Pool of backend IP addresses.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.location
    description: The location of the backend address pool.
    types:
    - uid: string
  - name: properties.tunnelInterfaces
    description: An array of gateway load balancer tunnel interfaces.
    types:
    - uid: GatewayLoadBalancerTunnelInterface
      isArray: true
  - name: properties.loadBalancerBackendAddresses
    description: An array of backend addresses.
    types:
    - uid: LoadBalancerBackendAddress
      isArray: true
  - name: properties.backendIPConfigurations
    isReadyOnly: true
    description: An array of references to IP addresses defined in network interfaces.
    types:
    - uid: NetworkInterfaceIPConfiguration
      isArray: true
  - name: properties.loadBalancingRules
    isReadyOnly: true
    description: An array of references to load balancing rules that use this backend address pool.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.outboundRule
    isReadyOnly: true
    description: A reference to an outbound rule that uses this backend address pool.
    types:
    - uid: SubResource
  - name: properties.outboundRules
    isReadyOnly: true
    description: An array of references to outbound rules that use this backend address pool.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.inboundNatRules
    isReadyOnly: true
    description: An array of references to inbound NAT rules that use this backend address pool.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the backend address pool resource.
    types:
    - uid: ProvisioningState
  - name: properties.drainPeriodInSeconds
    description: Amount of seconds Load Balancer waits for before sending RESET to client and backend address.
    types:
    - uid: integer
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: LoadBalancingRule
  description: A load balancing rule for a load balancer.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.frontendIPConfiguration
    description: A reference to frontend IP addresses.
    types:
    - uid: SubResource
  - name: properties.backendAddressPool
    description: A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
    types:
    - uid: SubResource
  - name: properties.backendAddressPools
    description: An array of references to pool of DIPs.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.probe
    description: The reference to the load balancer probe used by the load balancing rule.
    types:
    - uid: SubResource
  - name: properties.protocol
    description: The reference to the transport protocol used by the load balancing rule.
    types:
    - uid: TransportProtocol
  - name: properties.loadDistribution
    description: The load distribution policy for this rule.
    types:
    - uid: LoadDistribution
  - name: properties.frontendPort
    description: The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables "Any Port".
    types:
    - uid: integer
  - name: properties.backendPort
    description: The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables "Any Port".
    types:
    - uid: integer
  - name: properties.idleTimeoutInMinutes
    description: The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
    types:
    - uid: integer
  - name: properties.enableFloatingIP
    description: Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
    types:
    - uid: boolean
  - name: properties.enableTcpReset
    description: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    types:
    - uid: boolean
  - name: properties.disableOutboundSnat
    description: Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
    types:
    - uid: boolean
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the load balancing rule resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: Probe
  description: A load balancer probe.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.loadBalancingRules
    isReadyOnly: true
    description: The load balancer rules that use this probe.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.protocol
    description: The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
    types:
    - uid: ProbeProtocol
  - name: properties.port
    description: The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
    types:
    - uid: integer
  - name: properties.intervalInSeconds
    description: The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
    types:
    - uid: integer
  - name: properties.numberOfProbes
    description: The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
    types:
    - uid: integer
  - name: properties.probeThreshold
    description: The number of consecutive successful or failed probes in order to allow or deny traffic from being delivered to this endpoint. After failing the number of consecutive probes equal to this value, the endpoint will be taken out of rotation and require the same number of successful consecutive probes to be placed back in rotation.
    types:
    - uid: integer
  - name: properties.requestPath
    description: The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the probe resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: InboundNatRule
  description: Inbound NAT rule of the load balancer.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.frontendIPConfiguration
    description: A reference to frontend IP addresses.
    types:
    - uid: SubResource
  - name: properties.backendIPConfiguration
    isReadyOnly: true
    description: A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
    types:
    - uid: NetworkInterfaceIPConfiguration
  - name: properties.protocol
    description: The reference to the transport protocol used by the load balancing rule.
    types:
    - uid: TransportProtocol
  - name: properties.frontendPort
    description: The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
    types:
    - uid: integer
  - name: properties.backendPort
    description: The port used for the internal endpoint. Acceptable values range from 1 to 65535.
    types:
    - uid: integer
  - name: properties.idleTimeoutInMinutes
    description: The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
    types:
    - uid: integer
  - name: properties.enableFloatingIP
    description: Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
    types:
    - uid: boolean
  - name: properties.enableTcpReset
    description: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    types:
    - uid: boolean
  - name: properties.frontendPortRangeStart
    description: The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534.
    types:
    - uid: integer
  - name: properties.frontendPortRangeEnd
    description: The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534.
    types:
    - uid: integer
  - name: properties.backendAddressPool
    description: A reference to backendAddressPool resource.
    types:
    - uid: SubResource
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the inbound NAT rule resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: InboundNatPool
  description: Inbound NAT pool of the load balancer.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.frontendIPConfiguration
    description: A reference to frontend IP addresses.
    types:
    - uid: SubResource
  - name: properties.protocol
    description: The reference to the transport protocol used by the inbound NAT pool.
    types:
    - uid: TransportProtocol
  - name: properties.frontendPortRangeStart
    description: The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
    types:
    - uid: integer
  - name: properties.frontendPortRangeEnd
    description: The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
    types:
    - uid: integer
  - name: properties.backendPort
    description: The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
    types:
    - uid: integer
  - name: properties.idleTimeoutInMinutes
    description: The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
    types:
    - uid: integer
  - name: properties.enableFloatingIP
    description: Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
    types:
    - uid: boolean
  - name: properties.enableTcpReset
    description: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    types:
    - uid: boolean
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the inbound NAT pool resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: OutboundRule
  description: Outbound rule of the load balancer.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.allocatedOutboundPorts
    description: The number of outbound ports to be used for NAT.
    types:
    - uid: integer
  - name: properties.frontendIPConfigurations
    description: The Frontend IP addresses of the load balancer.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.backendAddressPool
    description: A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
    types:
    - uid: SubResource
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the outbound rule resource.
    types:
    - uid: ProvisioningState
  - name: properties.protocol
    description: The protocol for the outbound rule in load balancer.
    types:
    - uid: LoadBalancerOutboundRuleProtocol
  - name: properties.enableTcpReset
    description: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    types:
    - uid: boolean
  - name: properties.idleTimeoutInMinutes
    description: The timeout for the TCP idle connection.
    types:
    - uid: integer
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: LoadBalancer
  description: LoadBalancer resource.
  kind: object
  properties:
  - name: extendedLocation
    description: The extended location of the load balancer.
    types:
    - uid: ExtendedLocation
  - name: sku
    description: The load balancer SKU.
    types:
    - uid: LoadBalancerSku
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.frontendIPConfigurations
    description: Object representing the frontend IPs to be used for the load balancer.
    types:
    - uid: FrontendIPConfiguration
      isArray: true
  - name: properties.backendAddressPools
    description: Collection of backend address pools used by a load balancer.
    types:
    - uid: BackendAddressPool
      isArray: true
  - name: properties.loadBalancingRules
    description: Object collection representing the load balancing rules Gets the provisioning.
    types:
    - uid: LoadBalancingRule
      isArray: true
  - name: properties.probes
    description: Collection of probe objects used in the load balancer.
    types:
    - uid: Probe
      isArray: true
  - name: properties.inboundNatRules
    description: Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
    types:
    - uid: InboundNatRule
      isArray: true
  - name: properties.inboundNatPools
    description: Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound NAT rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
    types:
    - uid: InboundNatPool
      isArray: true
  - name: properties.outboundRules
    description: The outbound rules.
    types:
    - uid: OutboundRule
      isArray: true
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the load balancer resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the load balancer resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: CloudError
  description: An error response from the service.
  kind: object
  properties:
  - name: error
    description: Cloud error body.
    types:
    - uid: CloudErrorBody
- name: ExtendedLocationTypes
  description: The type of the extended location.
  kind: enum
  properties:
  - name: EdgeZone
    types:
    - uid: string
- name: LoadBalancerSkuName
  description: Name of a load balancer SKU.
  kind: enum
  properties:
  - name: Basic
    types:
    - uid: string
  - name: Standard
    types:
    - uid: string
  - name: Gateway
    types:
    - uid: string
- name: LoadBalancerSkuTier
  description: Tier of a load balancer SKU.
  kind: enum
  properties:
  - name: Regional
    types:
    - uid: string
  - name: Global
    types:
    - uid: string
- name: SubResource
  description: Reference to another subresource.
  kind: object
  properties:
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: IPAllocationMethod
  description: IP address allocation method.
  kind: enum
  properties:
  - name: Static
    types:
    - uid: string
  - name: Dynamic
    types:
    - uid: string
- name: IPVersion
  description: IP address version.
  kind: enum
  properties:
  - name: IPv4
    types:
    - uid: string
  - name: IPv6
    types:
    - uid: string
- name: Subnet
  description: Subnet in a virtual network resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    description: Resource type.
    types:
    - uid: string
  - name: properties.addressPrefix
    description: The address prefix for the subnet.
    types:
    - uid: string
  - name: properties.addressPrefixes
    description: List of address prefixes for the subnet.
    types:
    - uid: string
      isArray: true
  - name: properties.networkSecurityGroup
    description: The reference to the NetworkSecurityGroup resource.
    types:
    - uid: NetworkSecurityGroup
  - name: properties.routeTable
    description: The reference to the RouteTable resource.
    types:
    - uid: RouteTable
  - name: properties.natGateway
    description: Nat gateway associated with this subnet.
    types:
    - uid: SubResource
  - name: properties.serviceEndpoints
    description: An array of service endpoints.
    types:
    - uid: ServiceEndpointPropertiesFormat
      isArray: true
  - name: properties.serviceEndpointPolicies
    description: An array of service endpoint policies.
    types:
    - uid: ServiceEndpointPolicy
      isArray: true
  - name: properties.privateEndpoints
    isReadyOnly: true
    description: An array of references to private endpoints.
    types:
    - uid: PrivateEndpoint
      isArray: true
  - name: properties.ipConfigurations
    isReadyOnly: true
    description: An array of references to the network interface IP configurations using subnet.
    types:
    - uid: IPConfiguration
      isArray: true
  - name: properties.ipConfigurationProfiles
    isReadyOnly: true
    description: Array of IP configuration profiles which reference this subnet.
    types:
    - uid: IPConfigurationProfile
      isArray: true
  - name: properties.ipAllocations
    description: Array of IpAllocation which reference this subnet.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.resourceNavigationLinks
    isReadyOnly: true
    description: An array of references to the external resources using subnet.
    types:
    - uid: ResourceNavigationLink
      isArray: true
  - name: properties.serviceAssociationLinks
    isReadyOnly: true
    description: An array of references to services injecting into this subnet.
    types:
    - uid: ServiceAssociationLink
      isArray: true
  - name: properties.delegations
    description: An array of references to the delegations on the subnet.
    types:
    - uid: Delegation
      isArray: true
  - name: properties.purpose
    isReadyOnly: true
    description: A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the subnet resource.
    types:
    - uid: ProvisioningState
  - name: properties.privateEndpointNetworkPolicies
    description: Enable or Disable apply network policies on private end point in the subnet.
    types:
    - uid: VirtualNetworkPrivateEndpointNetworkPolicies
    defaultValue: Disabled
  - name: properties.privateLinkServiceNetworkPolicies
    description: Enable or Disable apply network policies on private link service in the subnet.
    types:
    - uid: VirtualNetworkPrivateLinkServiceNetworkPolicies
    defaultValue: Enabled
  - name: properties.applicationGatewayIpConfigurations
    description: Application gateway IP configurations of virtual network resource.
    types:
    - uid: ApplicationGatewayIPConfiguration
      isArray: true
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: PublicIPAddress
  description: Public IP address resource.
  kind: object
  properties:
  - name: extendedLocation
    description: The extended location of the public ip address.
    types:
    - uid: ExtendedLocation
  - name: sku
    description: The public IP address SKU.
    types:
    - uid: PublicIPAddressSku
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: zones
    description: A list of availability zones denoting the IP allocated for the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: properties.publicIPAllocationMethod
    description: The public IP address allocation method.
    types:
    - uid: IPAllocationMethod
  - name: properties.publicIPAddressVersion
    description: The public IP address version.
    types:
    - uid: IPVersion
  - name: properties.ipConfiguration
    isReadyOnly: true
    description: The IP configuration associated with the public IP address.
    types:
    - uid: IPConfiguration
  - name: properties.dnsSettings
    description: The FQDN of the DNS record associated with the public IP address.
    types:
    - uid: PublicIPAddressDnsSettings
  - name: properties.ddosSettings
    description: The DDoS protection custom policy associated with the public IP address.
    types:
    - uid: DdosSettings
  - name: properties.ipTags
    description: The list of tags associated with the public IP address.
    types:
    - uid: IpTag
      isArray: true
  - name: properties.ipAddress
    description: The IP address associated with the public IP address resource.
    types:
    - uid: string
  - name: properties.publicIPPrefix
    description: The Public IP Prefix this Public IP Address should be allocated from.
    types:
    - uid: SubResource
  - name: properties.idleTimeoutInMinutes
    description: The idle timeout of the public IP address.
    types:
    - uid: integer
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the public IP address resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the public IP address resource.
    types:
    - uid: ProvisioningState
  - name: properties.servicePublicIPAddress
    description: The service public IP address of the public IP address resource.
    types:
    - uid: PublicIPAddress
  - name: properties.natGateway
    description: The NatGateway for the Public IP address.
    types:
    - uid: NatGateway
  - name: properties.migrationPhase
    description: Migration phase of Public IP Address.
    types:
    - uid: PublicIPAddressMigrationPhase
  - name: properties.linkedPublicIPAddress
    description: The linked public IP address of the public IP address resource.
    types:
    - uid: PublicIPAddress
  - name: properties.deleteOption
    description: Specify what happens to the public IP address when the VM using it is deleted
    types:
    - uid: DeleteOptions
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: ProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: GatewayLoadBalancerTunnelInterface
  description: Gateway load balancer tunnel interface of a load balancer backend address pool.
  kind: object
  properties:
  - name: port
    description: Port of gateway load balancer tunnel interface.
    types:
    - uid: integer
  - name: identifier
    description: Identifier of gateway load balancer tunnel interface.
    types:
    - uid: integer
  - name: protocol
    description: Protocol of gateway load balancer tunnel interface.
    types:
    - uid: GatewayLoadBalancerTunnelProtocol
  - name: type
    description: Traffic type of gateway load balancer tunnel interface.
    types:
    - uid: GatewayLoadBalancerTunnelInterfaceType
- name: LoadBalancerBackendAddress
  description: Load balancer backend addresses.
  kind: object
  properties:
  - name: name
    description: Name of the backend address.
    types:
    - uid: string
  - name: properties.virtualNetwork
    description: Reference to an existing virtual network.
    types:
    - uid: SubResource
  - name: properties.subnet
    description: Reference to an existing subnet.
    types:
    - uid: SubResource
  - name: properties.ipAddress
    description: IP Address belonging to the referenced virtual network.
    types:
    - uid: string
  - name: properties.networkInterfaceIPConfiguration
    isReadyOnly: true
    description: Reference to IP address defined in network interfaces.
    types:
    - uid: SubResource
  - name: properties.loadBalancerFrontendIPConfiguration
    description: Reference to the frontend ip address configuration defined in regional loadbalancer.
    types:
    - uid: SubResource
  - name: properties.inboundNatRulesPortMapping
    isReadyOnly: true
    description: Collection of inbound NAT rule port mappings.
    types:
    - uid: NatRulePortMapping
      isArray: true
  - name: properties.adminState
    description: A list of administrative states which once set can override health probe so that Load Balancer will always forward new connections to backend, or deny new connections and reset existing connections.
    types:
    - uid: LoadBalancerBackendAddressAdminState
- name: NetworkInterfaceIPConfiguration
  description: IPConfiguration in a network interface.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    description: Resource type.
    types:
    - uid: string
  - name: properties.gatewayLoadBalancer
    description: The reference to gateway load balancer frontend IP.
    types:
    - uid: SubResource
  - name: properties.virtualNetworkTaps
    description: The reference to Virtual Network Taps.
    types:
    - uid: VirtualNetworkTap
      isArray: true
  - name: properties.applicationGatewayBackendAddressPools
    description: The reference to ApplicationGatewayBackendAddressPool resource.
    types:
    - uid: ApplicationGatewayBackendAddressPool
      isArray: true
  - name: properties.loadBalancerBackendAddressPools
    description: The reference to LoadBalancerBackendAddressPool resource.
    types:
    - uid: BackendAddressPool
      isArray: true
  - name: properties.loadBalancerInboundNatRules
    description: A list of references of LoadBalancerInboundNatRules.
    types:
    - uid: InboundNatRule
      isArray: true
  - name: properties.privateIPAddress
    description: Private IP address of the IP configuration.
    types:
    - uid: string
  - name: properties.privateIPAllocationMethod
    description: The private IP address allocation method.
    types:
    - uid: IPAllocationMethod
  - name: properties.privateIPAddressVersion
    description: Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
    types:
    - uid: IPVersion
  - name: properties.subnet
    description: Subnet bound to the IP configuration.
    types:
    - uid: Subnet
  - name: properties.primary
    description: Whether this is a primary customer address on the network interface.
    types:
    - uid: boolean
  - name: properties.publicIPAddress
    description: Public IP address bound to the IP configuration.
    types:
    - uid: PublicIPAddress
  - name: properties.applicationSecurityGroups
    description: Application security groups in which the IP configuration is included.
    types:
    - uid: ApplicationSecurityGroup
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the network interface IP configuration.
    types:
    - uid: ProvisioningState
  - name: properties.privateLinkConnectionProperties
    isReadyOnly: true
    description: PrivateLinkConnection properties for the network interface.
    types:
    - uid: NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: TransportProtocol
  description: The transport protocol for the endpoint.
  kind: enum
  properties:
  - name: Udp
    types:
    - uid: string
  - name: Tcp
    types:
    - uid: string
  - name: All
    types:
    - uid: string
- name: LoadDistribution
  description: The load distribution policy for this rule.
  kind: enum
  properties:
  - name: Default
    types:
    - uid: string
  - name: SourceIP
    types:
    - uid: string
  - name: SourceIPProtocol
    types:
    - uid: string
- name: ProbeProtocol
  description: The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
  kind: enum
  properties:
  - name: Http
    types:
    - uid: string
  - name: Tcp
    types:
    - uid: string
  - name: Https
    types:
    - uid: string
- name: LoadBalancerOutboundRuleProtocol
  description: The protocol for the outbound rule in load balancer.
  kind: enum
  properties:
  - name: Tcp
    types:
    - uid: string
  - name: Udp
    types:
    - uid: string
  - name: All
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response from the service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
- name: NetworkSecurityGroup
  description: NetworkSecurityGroup resource.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.flushConnection
    description: When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation.
    types:
    - uid: boolean
  - name: properties.securityRules
    description: A collection of security rules of the network security group.
    types:
    - uid: SecurityRule
      isArray: true
  - name: properties.defaultSecurityRules
    isReadyOnly: true
    description: The default security rules of network security group.
    types:
    - uid: SecurityRule
      isArray: true
  - name: properties.networkInterfaces
    isReadyOnly: true
    description: A collection of references to network interfaces.
    types:
    - uid: NetworkInterface
      isArray: true
  - name: properties.subnets
    isReadyOnly: true
    description: A collection of references to subnets.
    types:
    - uid: Subnet
      isArray: true
  - name: properties.flowLogs
    isReadyOnly: true
    description: A collection of references to flow log resources.
    types:
    - uid: FlowLog
      isArray: true
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the network security group resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the network security group resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: RouteTable
  description: Route table resource.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.routes
    description: Collection of routes contained within a route table.
    types:
    - uid: Route
      isArray: true
  - name: properties.subnets
    isReadyOnly: true
    description: A collection of references to subnets.
    types:
    - uid: Subnet
      isArray: true
  - name: properties.disableBgpRoutePropagation
    description: Whether to disable the routes learned by BGP on that route table. True means disable.
    types:
    - uid: boolean
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the route table resource.
    types:
    - uid: ProvisioningState
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the route table.
    types:
    - uid: string
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: ServiceEndpointPropertiesFormat
  description: The service endpoint properties.
  kind: object
  properties:
  - name: service
    description: The type of the endpoint service.
    types:
    - uid: string
  - name: locations
    description: A list of locations.
    types:
    - uid: string
      isArray: true
  - name: provisioningState
    isReadyOnly: true
    description: The provisioning state of the service endpoint resource.
    types:
    - uid: ProvisioningState
- name: ServiceEndpointPolicy
  description: Service End point policy resource.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: kind
    isReadyOnly: true
    description: Kind of service endpoint policy. This is metadata used for the Azure portal experience.
    types:
    - uid: string
  - name: properties.serviceEndpointPolicyDefinitions
    description: A collection of service endpoint policy definitions of the service endpoint policy.
    types:
    - uid: ServiceEndpointPolicyDefinition
      isArray: true
  - name: properties.subnets
    isReadyOnly: true
    description: A collection of references to subnets.
    types:
    - uid: Subnet
      isArray: true
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the service endpoint policy resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the service endpoint policy resource.
    types:
    - uid: ProvisioningState
  - name: properties.serviceAlias
    description: The alias indicating if the policy belongs to a service
    types:
    - uid: string
  - name: properties.contextualServiceEndpointPolicies
    description: A collection of contextual service endpoint policy.
    types:
    - uid: string
      isArray: true
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: PrivateEndpoint
  description: Private endpoint resource.
  kind: object
  properties:
  - name: extendedLocation
    description: The extended location of the load balancer.
    types:
    - uid: ExtendedLocation
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.subnet
    description: The ID of the subnet from which the private IP will be allocated.
    types:
    - uid: Subnet
  - name: properties.networkInterfaces
    isReadyOnly: true
    description: An array of references to the network interfaces created for this private endpoint.
    types:
    - uid: NetworkInterface
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private endpoint resource.
    types:
    - uid: ProvisioningState
  - name: properties.privateLinkServiceConnections
    description: A grouping of information about the connection to the remote resource.
    types:
    - uid: PrivateLinkServiceConnection
      isArray: true
  - name: properties.manualPrivateLinkServiceConnections
    description: A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
    types:
    - uid: PrivateLinkServiceConnection
      isArray: true
  - name: properties.customDnsConfigs
    description: An array of custom dns configurations.
    types:
    - uid: CustomDnsConfigPropertiesFormat
      isArray: true
  - name: properties.applicationSecurityGroups
    description: Application security groups in which the private endpoint IP configuration is included.
    types:
    - uid: ApplicationSecurityGroup
      isArray: true
  - name: properties.ipConfigurations
    description: A list of IP configurations of the private endpoint. This will be used to map to the First Party Service's endpoints.
    types:
    - uid: PrivateEndpointIPConfiguration
      isArray: true
  - name: properties.customNetworkInterfaceName
    description: The custom name of the network interface attached to the private endpoint.
    types:
    - uid: string
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: IPConfiguration
  description: IP configuration.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.privateIPAddress
    description: The private IP address of the IP configuration.
    types:
    - uid: string
  - name: properties.privateIPAllocationMethod
    description: The private IP address allocation method.
    types:
    - uid: IPAllocationMethod
    defaultValue: Dynamic
  - name: properties.subnet
    description: The reference to the subnet resource.
    types:
    - uid: Subnet
  - name: properties.publicIPAddress
    description: The reference to the public IP resource.
    types:
    - uid: PublicIPAddress
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the IP configuration resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: IPConfigurationProfile
  description: IP configuration profile child resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource. This name can be used to access the resource.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Sub Resource type.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.subnet
    description: The reference to the subnet resource to create a container network interface ip configuration.
    types:
    - uid: Subnet
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the IP configuration profile resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: ResourceNavigationLink
  description: ResourceNavigationLink resource.
  kind: object
  properties:
  - name: name
    description: Name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Resource navigation link identifier.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: properties.linkedResourceType
    description: Resource type of the linked resource.
    types:
    - uid: string
  - name: properties.link
    description: Link to the external resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the resource navigation link resource.
    types:
    - uid: ProvisioningState
- name: ServiceAssociationLink
  description: ServiceAssociationLink resource.
  kind: object
  properties:
  - name: name
    description: Name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: properties.linkedResourceType
    description: Resource type of the linked resource.
    types:
    - uid: string
  - name: properties.link
    description: Link to the external resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the service association link resource.
    types:
    - uid: ProvisioningState
  - name: properties.allowDelete
    description: If true, the resource can be deleted.
    types:
    - uid: boolean
  - name: properties.locations
    description: A list of locations.
    types:
    - uid: string
      isArray: true
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: Delegation
  description: Details the service to which the subnet is delegated.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a subnet. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    description: Resource type.
    types:
    - uid: string
  - name: properties.serviceName
    description: The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
    types:
    - uid: string
  - name: properties.actions
    isReadyOnly: true
    description: The actions permitted to the service upon delegation.
    types:
    - uid: string
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the service delegation resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: VirtualNetworkPrivateEndpointNetworkPolicies
  description: Enable or Disable apply network policies on private end point in the subnet.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: VirtualNetworkPrivateLinkServiceNetworkPolicies
  description: Enable or Disable apply network policies on private link service in the subnet.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: ApplicationGatewayIPConfiguration
  description: IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
  kind: object
  properties:
  - name: name
    description: Name of the IP configuration that is unique within an Application Gateway.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.subnet
    description: Reference to the subnet resource. A subnet from where application gateway gets its private address.
    types:
    - uid: SubResource
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the application gateway IP configuration resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: PublicIPAddressSku
  description: SKU of a public IP address.
  kind: object
  properties:
  - name: name
    description: Name of a public IP address SKU.
    types:
    - uid: PublicIPAddressSkuName
  - name: tier
    description: Tier of a public IP address SKU.
    types:
    - uid: PublicIPAddressSkuTier
- name: PublicIPAddressDnsSettings
  description: Contains FQDN of the DNS record associated with the public IP address.
  kind: object
  properties:
  - name: domainNameLabel
    description: The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
    types:
    - uid: string
  - name: fqdn
    description: The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
    types:
    - uid: string
  - name: reverseFqdn
    description: The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
    types:
    - uid: string
- name: DdosSettings
  description: Contains the DDoS protection settings of the public IP.
  kind: object
  properties:
  - name: protectionMode
    description: The DDoS protection mode of the public IP
    types:
    - uid: DdosSettingsProtectionMode
  - name: ddosProtectionPlan
    description: The DDoS protection plan associated with the public IP. Can only be set if ProtectionMode is Enabled
    types:
    - uid: SubResource
- name: IpTag
  description: Contains the IpTag associated with the object.
  kind: object
  properties:
  - name: ipTagType
    description: 'The IP tag type. Example: FirstPartyUsage.'
    types:
    - uid: string
  - name: tag
    description: 'The value of the IP tag associated with the public IP. Example: SQL.'
    types:
    - uid: string
- name: NatGateway
  description: Nat Gateway resource.
  kind: object
  properties:
  - name: sku
    description: The nat gateway SKU.
    types:
    - uid: NatGatewaySku
  - name: zones
    description: A list of availability zones denoting the zone in which Nat Gateway should be deployed.
    types:
    - uid: string
      isArray: true
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.idleTimeoutInMinutes
    description: The idle timeout of the nat gateway.
    types:
    - uid: integer
  - name: properties.publicIpAddresses
    description: An array of public ip addresses associated with the nat gateway resource.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.publicIpPrefixes
    description: An array of public ip prefixes associated with the nat gateway resource.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.subnets
    isReadyOnly: true
    description: An array of references to the subnets using this nat gateway resource.
    types:
    - uid: SubResource
      isArray: true
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the NAT gateway resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the NAT gateway resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: PublicIPAddressMigrationPhase
  description: Migration phase of Public IP Address.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: Prepare
    types:
    - uid: string
  - name: Commit
    types:
    - uid: string
  - name: Abort
    types:
    - uid: string
  - name: Committed
    types:
    - uid: string
- name: DeleteOptions
  description: Specify what happens to the public IP address when the VM using it is deleted
  kind: enum
  properties:
  - name: Delete
    types:
    - uid: string
  - name: Detach
    types:
    - uid: string
- name: GatewayLoadBalancerTunnelProtocol
  description: Protocol of gateway load balancer tunnel interface.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: Native
    types:
    - uid: string
  - name: VXLAN
    types:
    - uid: string
- name: GatewayLoadBalancerTunnelInterfaceType
  description: Traffic type of gateway load balancer tunnel interface.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: Internal
    types:
    - uid: string
  - name: External
    types:
    - uid: string
- name: NatRulePortMapping
  description: Individual port mappings for inbound NAT rule created for backend pool.
  kind: object
  properties:
  - name: inboundNatRuleName
    description: Name of inbound NAT rule.
    types:
    - uid: string
  - name: frontendPort
    description: Frontend port.
    types:
    - uid: integer
  - name: backendPort
    description: Backend port.
    types:
    - uid: integer
- name: LoadBalancerBackendAddressAdminState
  description: A list of administrative states which once set can override health probe so that Load Balancer will always forward new connections to backend, or deny new connections and reset existing connections.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: Up
    types:
    - uid: string
  - name: Down
    types:
    - uid: string
  - name: Drain
    types:
    - uid: string
- name: VirtualNetworkTap
  description: Virtual Network Tap resource.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.networkInterfaceTapConfigurations
    isReadyOnly: true
    description: Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
    types:
    - uid: NetworkInterfaceTapConfiguration
      isArray: true
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the virtual network tap resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the virtual network tap resource.
    types:
    - uid: ProvisioningState
  - name: properties.destinationNetworkInterfaceIPConfiguration
    description: The reference to the private IP Address of the collector nic that will receive the tap.
    types:
    - uid: NetworkInterfaceIPConfiguration
  - name: properties.destinationLoadBalancerFrontEndIPConfiguration
    description: The reference to the private IP address on the internal Load Balancer that will receive the tap.
    types:
    - uid: FrontendIPConfiguration
  - name: properties.destinationPort
    description: The VXLAN destination port that will receive the tapped traffic.
    types:
    - uid: integer
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: ApplicationGatewayBackendAddressPool
  description: Backend Address Pool of an application gateway.
  kind: object
  properties:
  - name: name
    description: Name of the backend address pool that is unique within an Application Gateway.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.backendIPConfigurations
    isReadyOnly: true
    description: Collection of references to IPs defined in network interfaces.
    types:
    - uid: NetworkInterfaceIPConfiguration
      isArray: true
  - name: properties.backendAddresses
    description: Backend addresses.
    types:
    - uid: ApplicationGatewayBackendAddress
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the backend address pool resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: ApplicationSecurityGroup
  description: An application security group in a resource group.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the application security group resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties
  description: PrivateLinkConnection properties for the network interface.
  kind: object
  properties:
  - name: groupId
    isReadyOnly: true
    description: The group ID for current private link connection.
    types:
    - uid: string
  - name: requiredMemberName
    isReadyOnly: true
    description: The required member name for current private link connection.
    types:
    - uid: string
  - name: fqdns
    isReadyOnly: true
    description: List of FQDNs for current private link connection.
    types:
    - uid: string
      isArray: true
- name: SecurityRule
  description: Network security rule.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    description: The type of the resource.
    types:
    - uid: string
  - name: properties.description
    description: A description for this rule. Restricted to 140 chars.
    types:
    - uid: string
  - name: properties.protocol
    description: Network protocol this rule applies to.
    types:
    - uid: SecurityRuleProtocol
  - name: properties.sourcePortRange
    description: The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
    types:
    - uid: string
  - name: properties.destinationPortRange
    description: The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
    types:
    - uid: string
  - name: properties.sourceAddressPrefix
    description: The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
    types:
    - uid: string
  - name: properties.sourceAddressPrefixes
    description: The CIDR or source IP ranges.
    types:
    - uid: string
      isArray: true
  - name: properties.sourceApplicationSecurityGroups
    description: The application security group specified as source.
    types:
    - uid: ApplicationSecurityGroup
      isArray: true
  - name: properties.destinationAddressPrefix
    description: The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
    types:
    - uid: string
  - name: properties.destinationAddressPrefixes
    description: The destination address prefixes. CIDR or destination IP ranges.
    types:
    - uid: string
      isArray: true
  - name: properties.destinationApplicationSecurityGroups
    description: The application security group specified as destination.
    types:
    - uid: ApplicationSecurityGroup
      isArray: true
  - name: properties.sourcePortRanges
    description: The source port ranges.
    types:
    - uid: string
      isArray: true
  - name: properties.destinationPortRanges
    description: The destination port ranges.
    types:
    - uid: string
      isArray: true
  - name: properties.access
    description: The network traffic is allowed or denied.
    types:
    - uid: SecurityRuleAccess
  - name: properties.priority
    description: The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
    types:
    - uid: integer
  - name: properties.direction
    description: The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    types:
    - uid: SecurityRuleDirection
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the security rule resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: NetworkInterface
  description: A network interface in a resource group.
  kind: object
  properties:
  - name: extendedLocation
    description: The extended location of the network interface.
    types:
    - uid: ExtendedLocation
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.virtualMachine
    isReadyOnly: true
    description: The reference to a virtual machine.
    types:
    - uid: SubResource
  - name: properties.networkSecurityGroup
    description: The reference to the NetworkSecurityGroup resource.
    types:
    - uid: NetworkSecurityGroup
  - name: properties.privateEndpoint
    isReadyOnly: true
    description: A reference to the private endpoint to which the network interface is linked.
    types:
    - uid: PrivateEndpoint
  - name: properties.ipConfigurations
    description: A list of IPConfigurations of the network interface.
    types:
    - uid: NetworkInterfaceIPConfiguration
      isArray: true
  - name: properties.tapConfigurations
    isReadyOnly: true
    description: A list of TapConfigurations of the network interface.
    types:
    - uid: NetworkInterfaceTapConfiguration
      isArray: true
  - name: properties.dnsSettings
    description: The DNS settings in network interface.
    types:
    - uid: NetworkInterfaceDnsSettings
  - name: properties.macAddress
    isReadyOnly: true
    description: The MAC address of the network interface.
    types:
    - uid: string
  - name: properties.primary
    isReadyOnly: true
    description: Whether this is a primary network interface on a virtual machine.
    types:
    - uid: boolean
  - name: properties.vnetEncryptionSupported
    isReadyOnly: true
    description: Whether the virtual machine this nic is attached to supports encryption.
    types:
    - uid: boolean
  - name: properties.enableAcceleratedNetworking
    description: If the network interface is configured for accelerated networking. Not applicable to VM sizes which require accelerated networking.
    types:
    - uid: boolean
  - name: properties.disableTcpStateTracking
    description: Indicates whether to disable tcp state tracking.
    types:
    - uid: boolean
  - name: properties.enableIPForwarding
    description: Indicates whether IP forwarding is enabled on this network interface.
    types:
    - uid: boolean
  - name: properties.hostedWorkloads
    isReadyOnly: true
    description: A list of references to linked BareMetal resources.
    types:
    - uid: string
      isArray: true
  - name: properties.dscpConfiguration
    isReadyOnly: true
    description: A reference to the dscp configuration to which the network interface is linked.
    types:
    - uid: SubResource
  - name: properties.resourceGuid
    isReadyOnly: true
    description: The resource GUID property of the network interface resource.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the network interface resource.
    types:
    - uid: ProvisioningState
  - name: properties.workloadType
    description: WorkloadType of the NetworkInterface for BareMetal resources
    types:
    - uid: string
  - name: properties.nicType
    description: Type of Network Interface resource.
    types:
    - uid: NetworkInterfaceNicType
  - name: properties.privateLinkService
    description: Privatelinkservice of the network interface resource.
    types:
    - uid: PrivateLinkService
  - name: properties.migrationPhase
    description: Migration phase of Network Interface resource.
    types:
    - uid: NetworkInterfaceMigrationPhase
  - name: properties.auxiliaryMode
    description: Auxiliary mode of Network Interface resource.
    types:
    - uid: NetworkInterfaceAuxiliaryMode
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: FlowLog
  description: A flow log resource.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.targetResourceId
    description: ID of network security group to which flow log will be applied.
    types:
    - uid: string
  - name: properties.targetResourceGuid
    isReadyOnly: true
    description: Guid of network security group to which flow log will be applied.
    types:
    - uid: string
  - name: properties.storageId
    description: ID of the storage account which is used to store the flow log.
    types:
    - uid: string
  - name: properties.enabled
    description: Flag to enable/disable flow logging.
    types:
    - uid: boolean
  - name: properties.retentionPolicy
    description: Parameters that define the retention policy for flow log.
    types:
    - uid: RetentionPolicyParameters
  - name: properties.format
    description: Parameters that define the flow log format.
    types:
    - uid: FlowLogFormatParameters
  - name: properties.flowAnalyticsConfiguration
    description: Parameters that define the configuration of traffic analytics.
    types:
    - uid: TrafficAnalyticsProperties
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the flow log.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: Route
  description: Route resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    description: The type of the resource.
    types:
    - uid: string
  - name: properties.addressPrefix
    description: The destination CIDR to which the route applies.
    types:
    - uid: string
  - name: properties.nextHopType
    description: The type of Azure hop the packet should be sent to.
    types:
    - uid: RouteNextHopType
  - name: properties.nextHopIpAddress
    description: The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the route resource.
    types:
    - uid: ProvisioningState
  - name: properties.hasBgpOverride
    description: A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
    types:
    - uid: boolean
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: ServiceEndpointPolicyDefinition
  description: Service Endpoint policy definitions.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    description: The type of the resource.
    types:
    - uid: string
  - name: properties.description
    description: A description for this rule. Restricted to 140 chars.
    types:
    - uid: string
  - name: properties.service
    description: Service endpoint name.
    types:
    - uid: string
  - name: properties.serviceResources
    description: A list of service resources.
    types:
    - uid: string
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the service endpoint policy definition resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: PrivateLinkServiceConnection
  description: PrivateLinkServiceConnection resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The resource type.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private link service connection resource.
    types:
    - uid: ProvisioningState
  - name: properties.privateLinkServiceId
    description: The resource id of private link service.
    types:
    - uid: string
  - name: properties.groupIds
    description: The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
    types:
    - uid: string
      isArray: true
  - name: properties.requestMessage
    description: A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
    types:
    - uid: string
  - name: properties.privateLinkServiceConnectionState
    description: A collection of read-only information about the state of the connection to the remote resource.
    types:
    - uid: PrivateLinkServiceConnectionState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: CustomDnsConfigPropertiesFormat
  description: Contains custom Dns resolution configuration from customer.
  kind: object
  properties:
  - name: fqdn
    description: Fqdn that resolves to private endpoint ip address.
    types:
    - uid: string
  - name: ipAddresses
    description: A list of private ip addresses of the private endpoint.
    types:
    - uid: string
      isArray: true
- name: PrivateEndpointIPConfiguration
  description: An IP Configuration of the private endpoint.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The resource type.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.groupId
    description: The ID of a group obtained from the remote resource that this private endpoint should connect to.
    types:
    - uid: string
  - name: properties.memberName
    description: The member name of a group obtained from the remote resource that this private endpoint should connect to.
    types:
    - uid: string
  - name: properties.privateIPAddress
    description: A private ip address obtained from the private endpoint's subnet.
    types:
    - uid: string
- name: PublicIPAddressSkuName
  description: Name of a public IP address SKU.
  kind: enum
  properties:
  - name: Basic
    types:
    - uid: string
  - name: Standard
    types:
    - uid: string
- name: PublicIPAddressSkuTier
  description: Tier of a public IP address SKU.
  kind: enum
  properties:
  - name: Regional
    types:
    - uid: string
  - name: Global
    types:
    - uid: string
- name: DdosSettingsProtectionMode
  description: The DDoS protection mode of the public IP
  kind: enum
  properties:
  - name: VirtualNetworkInherited
    types:
    - uid: string
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: NatGatewaySku
  description: SKU of nat gateway.
  kind: object
  properties:
  - name: name
    description: Name of Nat Gateway SKU.
    types:
    - uid: NatGatewaySkuName
- name: NetworkInterfaceTapConfiguration
  description: Tap configuration in a Network Interface.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Sub Resource type.
    types:
    - uid: string
  - name: properties.virtualNetworkTap
    description: The reference to the Virtual Network Tap resource.
    types:
    - uid: VirtualNetworkTap
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the network interface tap configuration resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: ApplicationGatewayBackendAddress
  description: Backend address of an application gateway.
  kind: object
  properties:
  - name: fqdn
    description: Fully qualified domain name (FQDN).
    types:
    - uid: string
  - name: ipAddress
    description: IP address.
    types:
    - uid: string
- name: SecurityRuleProtocol
  description: Network protocol this rule applies to.
  kind: enum
  properties:
  - name: Tcp
    types:
    - uid: string
  - name: Udp
    types:
    - uid: string
  - name: Icmp
    types:
    - uid: string
  - name: Esp
    types:
    - uid: string
  - name: '*'
    types:
    - uid: string
  - name: Ah
    types:
    - uid: string
- name: SecurityRuleAccess
  description: Whether network traffic is allowed or denied.
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
- name: SecurityRuleDirection
  description: The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
  kind: enum
  properties:
  - name: Inbound
    types:
    - uid: string
  - name: Outbound
    types:
    - uid: string
- name: NetworkInterfaceDnsSettings
  description: DNS settings of a network interface.
  kind: object
  properties:
  - name: dnsServers
    description: List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
    types:
    - uid: string
      isArray: true
  - name: appliedDnsServers
    isReadyOnly: true
    description: If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
    types:
    - uid: string
      isArray: true
  - name: internalDnsNameLabel
    description: Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
    types:
    - uid: string
  - name: internalFqdn
    isReadyOnly: true
    description: Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
    types:
    - uid: string
  - name: internalDomainNameSuffix
    isReadyOnly: true
    description: Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
    types:
    - uid: string
- name: NetworkInterfaceNicType
  description: Type of Network Interface resource.
  kind: enum
  properties:
  - name: Standard
    types:
    - uid: string
  - name: Elastic
    types:
    - uid: string
- name: PrivateLinkService
  description: Private link service resource.
  kind: object
  properties:
  - name: extendedLocation
    description: The extended location of the load balancer.
    types:
    - uid: ExtendedLocation
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.loadBalancerFrontendIpConfigurations
    description: An array of references to the load balancer IP configurations.
    types:
    - uid: FrontendIPConfiguration
      isArray: true
  - name: properties.ipConfigurations
    description: An array of private link service IP configurations.
    types:
    - uid: PrivateLinkServiceIpConfiguration
      isArray: true
  - name: properties.networkInterfaces
    isReadyOnly: true
    description: An array of references to the network interfaces created for this private link service.
    types:
    - uid: NetworkInterface
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private link service resource.
    types:
    - uid: ProvisioningState
  - name: properties.privateEndpointConnections
    isReadyOnly: true
    description: An array of list about connections to the private endpoint.
    types:
    - uid: PrivateEndpointConnection
      isArray: true
  - name: properties.visibility
    description: The visibility list of the private link service.
    types:
    - uid: Visibility
  - name: properties.autoApproval
    description: The auto-approval list of the private link service.
    types:
    - uid: AutoApproval
  - name: properties.fqdns
    description: The list of Fqdn.
    types:
    - uid: string
      isArray: true
  - name: properties.alias
    isReadyOnly: true
    description: The alias of the private link service.
    types:
    - uid: string
  - name: properties.enableProxyProtocol
    description: Whether the private link service is enabled for proxy protocol or not.
    types:
    - uid: boolean
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: NetworkInterfaceMigrationPhase
  description: Migration phase of Network Interface resource.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: Prepare
    types:
    - uid: string
  - name: Commit
    types:
    - uid: string
  - name: Abort
    types:
    - uid: string
  - name: Committed
    types:
    - uid: string
- name: NetworkInterfaceAuxiliaryMode
  description: Auxiliary mode of Network Interface resource.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: MaxConnections
    types:
    - uid: string
  - name: Floating
    types:
    - uid: string
- name: RetentionPolicyParameters
  description: Parameters that define the retention policy for flow log.
  kind: object
  properties:
  - name: days
    description: Number of days to retain flow log records.
    types:
    - uid: integer
    defaultValue: 0
  - name: enabled
    description: Flag to enable/disable retention.
    types:
    - uid: boolean
    defaultValue: false
- name: FlowLogFormatParameters
  description: Parameters that define the flow log format.
  kind: object
  properties:
  - name: type
    description: The file type of flow log.
    types:
    - uid: FlowLogFormatType
  - name: version
    description: The version (revision) of the flow log.
    types:
    - uid: integer
    defaultValue: 0
- name: TrafficAnalyticsProperties
  description: Parameters that define the configuration of traffic analytics.
  kind: object
  properties:
  - name: networkWatcherFlowAnalyticsConfiguration
    description: Parameters that define the configuration of traffic analytics.
    types:
    - uid: TrafficAnalyticsConfigurationProperties
- name: RouteNextHopType
  description: The type of Azure hop the packet should be sent to.
  kind: enum
  properties:
  - name: VirtualNetworkGateway
    types:
    - uid: string
  - name: VnetLocal
    types:
    - uid: string
  - name: Internet
    types:
    - uid: string
  - name: VirtualAppliance
    types:
    - uid: string
  - name: None
    types:
    - uid: string
- name: PrivateLinkServiceConnectionState
  description: A collection of information about the state of the connection between service consumer and provider.
  kind: object
  properties:
  - name: status
    description: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    types:
    - uid: string
  - name: description
    description: The reason for approval/rejection of the connection.
    types:
    - uid: string
  - name: actionsRequired
    description: A message indicating if changes on the service provider require any updates on the consumer.
    types:
    - uid: string
- name: NatGatewaySkuName
  description: Name of Nat Gateway SKU.
  kind: enum
  properties:
  - name: Standard
    types:
    - uid: string
- name: PrivateLinkServiceIpConfiguration
  description: The private link service ip configuration.
  kind: object
  properties:
  - name: name
    description: The name of private link service ip configuration.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The resource type.
    types:
    - uid: string
  - name: properties.privateIPAddress
    description: The private IP address of the IP configuration.
    types:
    - uid: string
  - name: properties.privateIPAllocationMethod
    description: The private IP address allocation method.
    types:
    - uid: IPAllocationMethod
  - name: properties.subnet
    description: The reference to the subnet resource.
    types:
    - uid: Subnet
  - name: properties.primary
    description: Whether the ip configuration is primary or not.
    types:
    - uid: boolean
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private link service IP configuration resource.
    types:
    - uid: ProvisioningState
  - name: properties.privateIPAddressVersion
    description: Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
    types:
    - uid: IPVersion
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: PrivateEndpointConnection
  description: PrivateEndpointConnection resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The resource type.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.privateEndpoint
    isReadyOnly: true
    description: The resource of private end point.
    types:
    - uid: PrivateEndpoint
  - name: properties.privateLinkServiceConnectionState
    description: A collection of information about the state of the connection between service consumer and provider.
    types:
    - uid: PrivateLinkServiceConnectionState
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private endpoint connection resource.
    types:
    - uid: ProvisioningState
  - name: properties.linkIdentifier
    isReadyOnly: true
    description: The consumer link id.
    types:
    - uid: string
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: Visibility
  description: The visibility list of the private link service.
  kind: object
  properties:
  - name: subscriptions
    description: The list of subscriptions.
    types:
    - uid: string
      isArray: true
- name: AutoApproval
  description: The auto-approval list of the private link service.
  kind: object
  properties:
  - name: subscriptions
    description: The list of subscriptions.
    types:
    - uid: string
      isArray: true
- name: FlowLogFormatType
  description: The file type of flow log.
  kind: enum
  properties:
  - name: JSON
    types:
    - uid: string
- name: TrafficAnalyticsConfigurationProperties
  description: Parameters that define the configuration of traffic analytics.
  kind: object
  properties:
  - name: enabled
    description: Flag to enable/disable traffic analytics.
    types:
    - uid: boolean
  - name: workspaceId
    description: The resource guid of the attached workspace.
    types:
    - uid: string
  - name: workspaceRegion
    description: The location of the attached workspace.
    types:
    - uid: string
  - name: workspaceResourceId
    description: Resource Id of the attached workspace.
    types:
    - uid: string
  - name: trafficAnalyticsInterval
    description: The interval in minutes which would decide how frequently TA service should do flow analytics.
    types:
    - uid: integer
examples:
- name: Create load balancer
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false
              }
            }
          ],
          "inboundNatPools": []
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false
              }
            }
          ],
          "inboundNatPools": []
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreate.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancer() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name:       to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			InboundNatRules: []*armnetwork.InboundNatRule{
      				{
      					Name: to.Ptr("in-nat-rule"),
      					Properties: &armnetwork.InboundNatRulePropertiesFormat{
      						BackendPort:      to.Ptr[int32](3389),
      						EnableFloatingIP: to.Ptr(true),
      						EnableTCPReset:   to.Ptr(false),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](3389),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						BackendPort:      to.Ptr[int32](80),
      						EnableFloatingIP: to.Ptr(true),
      						EnableTCPReset:   to.Ptr(false),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](80),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreate.json
       */
      async function createLoadBalancer() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [{ name: "be-lb" }],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
            },
          ],
          inboundNatPools: [],
          inboundNatRules: [
            {
              name: "in-nat-rule",
              backendPort: 3389,
              enableFloatingIP: true,
              enableTcpReset: false,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 3389,
              idleTimeoutInMinutes: 15,
              protocol: "Tcp",
            },
          ],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              backendPort: 80,
              enableFloatingIP: true,
              enableTcpReset: false,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 80,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "Tcp",
            },
          ],
          location: "eastus",
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancer().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Basic"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false
              }
            }
          ],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Basic"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false
              }
            }
          ],
          "inboundNatPools": []
        }
      }
- name: Create load balancer with Standard SKU
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateStandardSku.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithStandardSku() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name:       to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			InboundNatRules: []*armnetwork.InboundNatRule{
      				{
      					Name: to.Ptr("in-nat-rule"),
      					Properties: &armnetwork.InboundNatRulePropertiesFormat{
      						BackendPort:      to.Ptr[int32](3389),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](3389),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						BackendPort:      to.Ptr[int32](80),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](80),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			OutboundRules: []*armnetwork.OutboundRule{},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateStandardSku.json
       */
      async function createLoadBalancerWithStandardSku() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [{ name: "be-lb" }],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
            },
          ],
          inboundNatPools: [],
          inboundNatRules: [
            {
              name: "in-nat-rule",
              backendPort: 3389,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 3389,
              idleTimeoutInMinutes: 15,
              protocol: "Tcp",
            },
          ],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              backendPort: 80,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 80,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "Tcp",
            },
          ],
          location: "eastus",
          outboundRules: [],
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Standard" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithStandardSku().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
- name: Create load balancer with Global Tier and one regional load balancer in its backend pool
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Standard",
          "tier": "Global"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {
                "loadBalancerBackendAddresses": [
                  {
                    "name": "regional-lb1-address",
                    "properties": {
                      "loadBalancerFrontendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Standard",
          "tier": "Global"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {
                "loadBalancerBackendAddresses": [
                  {
                    "name": "regional-lb1-address",
                    "properties": {
                      "loadBalancerFrontendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"
                      }
                    }
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGlobalTier.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithGlobalTierAndOneRegionalLoadBalancerInItsBackendPool() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name: to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
      						LoadBalancerBackendAddresses: []*armnetwork.LoadBalancerBackendAddress{
      							{
      								Name: to.Ptr("regional-lb1-address"),
      								Properties: &armnetwork.LoadBalancerBackendAddressPropertiesFormat{
      									LoadBalancerFrontendIPConfiguration: &armnetwork.SubResource{
      										ID: to.Ptr("/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"),
      									},
      								},
      							}},
      					},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      				}},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						BackendPort:      to.Ptr[int32](80),
      						EnableFloatingIP: to.Ptr(false),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](80),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
      			Tier: to.Ptr(armnetwork.LoadBalancerSKUTierGlobal),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGlobalTier.json
       */
      async function createLoadBalancerWithGlobalTierAndOneRegionalLoadBalancerInItsBackendPool() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [
            {
              name: "be-lb",
              loadBalancerBackendAddresses: [
                {
                  name: "regional-lb1-address",
                  loadBalancerFrontendIPConfiguration: {
                    id: "/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb",
                  },
                },
              ],
            },
          ],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
            },
          ],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              backendPort: 80,
              enableFloatingIP: false,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 80,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "Tcp",
            },
          ],
          location: "eastus",
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Standard", tier: "Global" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithGlobalTierAndOneRegionalLoadBalancerInItsBackendPool().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard",
          "tier": "Global"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancerBackendAddresses": [
                  {
                    "name": "regional-lb1-address",
                    "properties": {
                      "loadBalancerFrontendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"
                      }
                    }
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ]
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard",
          "tier": "Global"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancerBackendAddresses": [
                  {
                    "name": "regional-lb1-address",
                    "properties": {
                      "loadBalancerFrontendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/regional-lb-rg1/providers/Microsoft.Network/loadBalancers/regional-lb/frontendIPConfigurations/fe-rlb"
                      }
                    }
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ]
        }
      }
- name: Create load balancer with Frontend IP in Zone 1
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              },
              "zones": [
                "1"
              ]
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              },
              "zones": [
                "1"
              ]
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateWithZones.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithFrontendIpInZone1() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name:       to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      					Zones: []*string{
      						to.Ptr("1")},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			InboundNatRules: []*armnetwork.InboundNatRule{
      				{
      					Name: to.Ptr("in-nat-rule"),
      					Properties: &armnetwork.InboundNatRulePropertiesFormat{
      						BackendPort:      to.Ptr[int32](3389),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](3389),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						BackendPort:      to.Ptr[int32](80),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](80),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			OutboundRules: []*armnetwork.OutboundRule{},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateWithZones.json
       */
      async function createLoadBalancerWithFrontendIPInZone1() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [{ name: "be-lb" }],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
              zones: ["1"],
            },
          ],
          inboundNatPools: [],
          inboundNatRules: [
            {
              name: "in-nat-rule",
              backendPort: 3389,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 3389,
              idleTimeoutInMinutes: 15,
              protocol: "Tcp",
            },
          ],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              backendPort: 80,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 80,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "Tcp",
            },
          ],
          location: "eastus",
          outboundRules: [],
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Standard" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithFrontendIPInZone1().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "zones": [
                "1"
              ],
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "zones": [
                "1"
              ],
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
- name: Create load balancer with inbound nat pool
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"
                }
              },
              "name": "test",
              "zones": [],
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"
            }
          ],
          "backendAddressPools": [],
          "loadBalancingRules": [],
          "probes": [],
          "inboundNatRules": [],
          "outboundRules": [],
          "inboundNatPools": [
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"
                },
                "protocol": "Tcp",
                "frontendPortRangeStart": 8080,
                "frontendPortRangeEnd": 8085,
                "backendPort": 8888,
                "idleTimeoutInMinutes": 10,
                "enableFloatingIP": true,
                "enableTcpReset": true
              },
              "name": "test",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"
                }
              },
              "name": "test",
              "zones": [],
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"
            }
          ],
          "backendAddressPools": [],
          "loadBalancingRules": [],
          "probes": [],
          "inboundNatRules": [],
          "outboundRules": [],
          "inboundNatPools": [
            {
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"
                },
                "protocol": "Tcp",
                "frontendPortRangeStart": 8080,
                "frontendPortRangeEnd": 8085,
                "backendPort": 8888,
                "idleTimeoutInMinutes": 10,
                "enableFloatingIP": true,
                "enableTcpReset": true
              },
              "name": "test",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateWithInboundNatPool.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithInboundNatPool() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
      					Name: to.Ptr("test"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						PrivateIPAllocationMethod: to.Ptr(armnetwork.IPAllocationMethodDynamic),
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"),
      						},
      					},
      					Zones: []*string{},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{
      				{
      					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"),
      					Name: to.Ptr("test"),
      					Properties: &armnetwork.InboundNatPoolPropertiesFormat{
      						BackendPort:      to.Ptr[int32](8888),
      						EnableFloatingIP: to.Ptr(true),
      						EnableTCPReset:   to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"),
      						},
      						FrontendPortRangeEnd:   to.Ptr[int32](8085),
      						FrontendPortRangeStart: to.Ptr[int32](8080),
      						IdleTimeoutInMinutes:   to.Ptr[int32](10),
      						Protocol:               to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			InboundNatRules:    []*armnetwork.InboundNatRule{},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{},
      			OutboundRules:      []*armnetwork.OutboundRule{},
      			Probes:             []*armnetwork.Probe{},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateWithInboundNatPool.json
       */
      async function createLoadBalancerWithInboundNatPool() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [],
          frontendIPConfigurations: [
            {
              name: "test",
              id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test",
              privateIPAllocationMethod: "Dynamic",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet",
              },
              zones: [],
            },
          ],
          inboundNatPools: [
            {
              name: "test",
              backendPort: 8888,
              enableFloatingIP: true,
              enableTcpReset: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test",
              },
              frontendPortRangeEnd: 8085,
              frontendPortRangeStart: 8080,
              id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test",
              idleTimeoutInMinutes: 10,
              protocol: "Tcp",
            },
          ],
          inboundNatRules: [],
          loadBalancingRules: [],
          location: "eastus",
          outboundRules: [],
          probes: [],
          sku: { name: "Standard" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithInboundNatPool().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "test",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"
                },
                "inboundNatPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [],
          "loadBalancingRules": [],
          "probes": [],
          "inboundNatRules": [],
          "outboundRules": [],
          "inboundNatPools": [
            {
              "name": "test",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test",
              "type": "Microsoft.Network/loadBalancers/inboundNatPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendPortRangeStart": 8080,
                "frontendPortRangeEnd": 8085,
                "backendPort": 8888,
                "idleTimeoutInMinutes": 10,
                "enableFloatingIP": true,
                "protocol": "Tcp",
                "enableTcpReset": true,
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"
                }
              }
            }
          ]
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "test",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/lbvnet/subnets/lbsubnet"
                },
                "inboundNatPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [],
          "loadBalancingRules": [],
          "probes": [],
          "inboundNatRules": [],
          "outboundRules": [],
          "inboundNatPools": [
            {
              "name": "test",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatPools/test",
              "type": "Microsoft.Network/loadBalancers/inboundNatPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendPortRangeStart": 8080,
                "frontendPortRangeEnd": 8085,
                "backendPort": 8888,
                "idleTimeoutInMinutes": 10,
                "enableFloatingIP": true,
                "protocol": "Tcp",
                "enableTcpReset": true,
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/test"
                }
              }
            }
          ]
        }
      }
- name: Create load balancer with outbound rules
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "frontendPort": 80,
                "backendPort": 80,
                "idleTimeoutInMinutes": 15,
                "enableFloatingIP": true,
                "disableOutboundSnat": true
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": [
            {
              "name": "rule1",
              "properties": {
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "frontendIPConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                  }
                ],
                "protocol": "All"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "frontendPort": 80,
                "backendPort": 80,
                "idleTimeoutInMinutes": 15,
                "enableFloatingIP": true,
                "disableOutboundSnat": true
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": [
            {
              "name": "rule1",
              "properties": {
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "frontendIPConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                  }
                ],
                "protocol": "All"
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateWithOutboundRules.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithOutboundRules() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name:       to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						PublicIPAddress: &armnetwork.PublicIPAddress{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"),
      						},
      					},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			InboundNatRules: []*armnetwork.InboundNatRule{
      				{
      					Name: to.Ptr("in-nat-rule"),
      					Properties: &armnetwork.InboundNatRulePropertiesFormat{
      						BackendPort:      to.Ptr[int32](3389),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](3389),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						BackendPort:         to.Ptr[int32](80),
      						DisableOutboundSnat: to.Ptr(true),
      						EnableFloatingIP:    to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](80),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			OutboundRules: []*armnetwork.OutboundRule{
      				{
      					Name: to.Ptr("rule1"),
      					Properties: &armnetwork.OutboundRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						FrontendIPConfigurations: []*armnetwork.SubResource{
      							{
      								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      							}},
      						Protocol: to.Ptr(armnetwork.LoadBalancerOutboundRuleProtocolAll),
      					},
      				}},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateWithOutboundRules.json
       */
      async function createLoadBalancerWithOutboundRules() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [{ name: "be-lb" }],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              publicIPAddress: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip",
              },
            },
          ],
          inboundNatPools: [],
          inboundNatRules: [
            {
              name: "in-nat-rule",
              backendPort: 3389,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 3389,
              idleTimeoutInMinutes: 15,
              protocol: "Tcp",
            },
          ],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              backendPort: 80,
              disableOutboundSnat: true,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 80,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "Tcp",
            },
          ],
          location: "eastus",
          outboundRules: [
            {
              name: "rule1",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              frontendIPConfigurations: [
                {
                  id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
                },
              ],
              protocol: "All",
            },
          ],
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Standard" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithOutboundRules().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ],
                "outboundRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"
                  }
                ],
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "outboundRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "disableOutboundSnat": true,
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false
              }
            }
          ],
          "outboundRules": [
            {
              "name": "rule1",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1",
              "type": "Microsoft.Network/loadBalancers/outboundRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "allocatedOutboundPorts": 1024,
                "protocol": "All",
                "enableTcpReset": false,
                "idleTimeoutInMinutes": 4,
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "frontendIPConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                  }
                ]
              }
            }
          ],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pip"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ],
                "outboundRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"
                  }
                ],
                "privateIPAddressVersion": "IPv4"
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "outboundRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "disableOutboundSnat": true,
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "enableTcpReset": false
              }
            }
          ],
          "outboundRules": [
            {
              "name": "rule1",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/outboundRules/rule1",
              "type": "Microsoft.Network/loadBalancers/outboundRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "allocatedOutboundPorts": 1024,
                "protocol": "All",
                "enableTcpReset": false,
                "idleTimeoutInMinutes": 4,
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "frontendIPConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                  }
                ]
              }
            }
          ],
          "inboundNatPools": []
        }
      }
- name: Create load balancer with Gateway Load Balancer Consumer configured
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "gatewayLoadBalancer": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "gatewayLoadBalancer": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGatewayLoadBalancerConsumer.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithGatewayLoadBalancerConsumerConfigured() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name:       to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						GatewayLoadBalancer: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"),
      						},
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			InboundNatRules: []*armnetwork.InboundNatRule{
      				{
      					Name: to.Ptr("in-nat-rule"),
      					Properties: &armnetwork.InboundNatRulePropertiesFormat{
      						BackendPort:      to.Ptr[int32](3389),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](3389),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						Protocol:             to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      						},
      						BackendPort:      to.Ptr[int32](80),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](80),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolTCP),
      					},
      				}},
      			OutboundRules: []*armnetwork.OutboundRule{},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUNameStandard),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGatewayLoadBalancerConsumer.json
       */
      async function createLoadBalancerWithGatewayLoadBalancerConsumerConfigured() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [{ name: "be-lb" }],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              gatewayLoadBalancer: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider",
              },
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
            },
          ],
          inboundNatPools: [],
          inboundNatRules: [
            {
              name: "in-nat-rule",
              backendPort: 3389,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 3389,
              idleTimeoutInMinutes: 15,
              protocol: "Tcp",
            },
          ],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              },
              backendPort: 80,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 80,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "Tcp",
            },
          ],
          location: "eastus",
          outboundRules: [],
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Standard" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithGatewayLoadBalancerConsumerConfigured().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ],
                "gatewayLoadBalancer": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ],
                "gatewayLoadBalancer": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb-provider"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                },
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "inboundNatRules": [
            {
              "name": "in-nat-rule",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule",
              "type": "Microsoft.Network/loadBalancers/inboundNatRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 3389,
                "backendPort": 3389,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp"
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
- name: Create load balancer with Gateway Load Balancer Provider configured with one Backend Pool
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Premium"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {
                "tunnelInterfaces": [
                  {
                    "port": 15000,
                    "identifier": 900,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  },
                  {
                    "port": 15001,
                    "identifier": 901,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "All",
                "loadDistribution": "Default",
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Premium"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "properties": {
                "tunnelInterfaces": [
                  {
                    "port": 15000,
                    "identifier": 900,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  },
                  {
                    "port": 15001,
                    "identifier": 901,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "All",
                "loadDistribution": "Default",
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithOneBackendPool.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithGatewayLoadBalancerProviderConfiguredWithOneBackendPool() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name: to.Ptr("be-lb"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{
      						TunnelInterfaces: []*armnetwork.GatewayLoadBalancerTunnelInterface{
      							{
      								Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
      								Identifier: to.Ptr[int32](900),
      								Port:       to.Ptr[int32](15000),
      								Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
      							},
      							{
      								Type:       to.Ptr(armnetwork.GatewayLoadBalancerTunnelInterfaceTypeInternal),
      								Identifier: to.Ptr[int32](901),
      								Port:       to.Ptr[int32](15001),
      								Protocol:   to.Ptr(armnetwork.GatewayLoadBalancerTunnelProtocolVXLAN),
      							}},
      					},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPools: []*armnetwork.SubResource{
      							{
      								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"),
      							}},
      						BackendPort:      to.Ptr[int32](0),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](0),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolAll),
      					},
      				}},
      			OutboundRules: []*armnetwork.OutboundRule{},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUName("Premium")),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithOneBackendPool.json
       */
      async function createLoadBalancerWithGatewayLoadBalancerProviderConfiguredWithOneBackendPool() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [
            {
              name: "be-lb",
              tunnelInterfaces: [
                { type: "Internal", identifier: 900, port: 15000, protocol: "VXLAN" },
                { type: "Internal", identifier: 901, port: 15001, protocol: "VXLAN" },
              ],
            },
          ],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
            },
          ],
          inboundNatPools: [],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPools: [
                {
                  id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
                },
              ],
              backendPort: 0,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 0,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "All",
            },
          ],
          location: "eastus",
          outboundRules: [],
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Premium" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithGatewayLoadBalancerProviderConfiguredWithOneBackendPool().catch(
        console.error
      );

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "tunnelInterfaces": [
                  {
                    "port": 15000,
                    "identifier": 900,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  },
                  {
                    "port": 15001,
                    "identifier": 901,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "tunnelInterfaces": [
                  {
                    "port": 15000,
                    "identifier": 900,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  },
                  {
                    "port": 15001,
                    "identifier": 901,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
- name: Create load balancer with Gateway Load Balancer Provider configured with two Backend Pool
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01
    body: >-
      {
        "location": "eastus",
        "sku": {
          "name": "Premium"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb1",
              "properties": {}
            },
            {
              "name": "be-lb2",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "All",
                "loadDistribution": "Default",
                "backendAddressPool": {},
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb?api-version=2022-05-01

      {
        "location": "eastus",
        "sku": {
          "name": "Premium"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb1",
              "properties": {}
            },
            {
              "name": "be-lb2",
              "properties": {}
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "All",
                "loadDistribution": "Default",
                "backendAddressPool": {},
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1
              }
            }
          ],
          "inboundNatPools": [],
          "outboundRules": []
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithTwoBackendPool.json
      func ExampleLoadBalancersClient_BeginCreateOrUpdate_createLoadBalancerWithGatewayLoadBalancerProviderConfiguredWithTwoBackendPool() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewLoadBalancersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "lb", armnetwork.LoadBalancer{
      		Location: to.Ptr("eastus"),
      		Properties: &armnetwork.LoadBalancerPropertiesFormat{
      			BackendAddressPools: []*armnetwork.BackendAddressPool{
      				{
      					Name:       to.Ptr("be-lb1"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				},
      				{
      					Name:       to.Ptr("be-lb2"),
      					Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
      				}},
      			FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
      				{
      					Name: to.Ptr("fe-lb"),
      					Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
      						Subnet: &armnetwork.Subnet{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"),
      						},
      					},
      				}},
      			InboundNatPools: []*armnetwork.InboundNatPool{},
      			LoadBalancingRules: []*armnetwork.LoadBalancingRule{
      				{
      					Name: to.Ptr("rulelb"),
      					Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
      						BackendAddressPool: &armnetwork.SubResource{},
      						BackendAddressPools: []*armnetwork.SubResource{
      							{
      								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"),
      							},
      							{
      								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"),
      							}},
      						BackendPort:      to.Ptr[int32](0),
      						EnableFloatingIP: to.Ptr(true),
      						FrontendIPConfiguration: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"),
      						},
      						FrontendPort:         to.Ptr[int32](0),
      						IdleTimeoutInMinutes: to.Ptr[int32](15),
      						LoadDistribution:     to.Ptr(armnetwork.LoadDistributionDefault),
      						Probe: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"),
      						},
      						Protocol: to.Ptr(armnetwork.TransportProtocolAll),
      					},
      				}},
      			OutboundRules: []*armnetwork.OutboundRule{},
      			Probes: []*armnetwork.Probe{
      				{
      					Name: to.Ptr("probe-lb"),
      					Properties: &armnetwork.ProbePropertiesFormat{
      						IntervalInSeconds: to.Ptr[int32](15),
      						NumberOfProbes:    to.Ptr[int32](2),
      						Port:              to.Ptr[int32](80),
      						ProbeThreshold:    to.Ptr[int32](1),
      						RequestPath:       to.Ptr("healthcheck.aspx"),
      						Protocol:          to.Ptr(armnetwork.ProbeProtocolHTTP),
      					},
      				}},
      		},
      		SKU: &armnetwork.LoadBalancerSKU{
      			Name: to.Ptr(armnetwork.LoadBalancerSKUName("Premium")),
      		},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.1/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a load balancer.
       *
       * @summary Creates or updates a load balancer.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/LoadBalancerCreateGatewayLoadBalancerProviderWithTwoBackendPool.json
       */
      async function createLoadBalancerWithGatewayLoadBalancerProviderConfiguredWithTwoBackendPool() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const loadBalancerName = "lb";
        const parameters = {
          backendAddressPools: [{ name: "be-lb1" }, { name: "be-lb2" }],
          frontendIPConfigurations: [
            {
              name: "fe-lb",
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb",
              },
            },
          ],
          inboundNatPools: [],
          loadBalancingRules: [
            {
              name: "rulelb",
              backendAddressPool: {},
              backendAddressPools: [
                {
                  id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1",
                },
                {
                  id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2",
                },
              ],
              backendPort: 0,
              enableFloatingIP: true,
              frontendIPConfiguration: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              },
              frontendPort: 0,
              idleTimeoutInMinutes: 15,
              loadDistribution: "Default",
              probe: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              },
              protocol: "All",
            },
          ],
          location: "eastus",
          outboundRules: [],
          probes: [
            {
              name: "probe-lb",
              intervalInSeconds: 15,
              numberOfProbes: 2,
              port: 80,
              probeThreshold: 1,
              requestPath: "healthcheck.aspx",
              protocol: "Http",
            },
          ],
          sku: { name: "Premium" },
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.loadBalancers.beginCreateOrUpdateAndWait(
          resourceGroupName,
          loadBalancerName,
          parameters
        );
        console.log(result);
      }

      createLoadBalancerWithGatewayLoadBalancerProviderConfiguredWithTwoBackendPool().catch(
        console.error
      );

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/inboundNatRules/in-nat-rule"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb1",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "tunnelInterfaces": [
                  {
                    "port": 15000,
                    "identifier": 900,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            },
            {
              "name": "be-lb2",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "tunnelInterfaces": [
                  {
                    "port": 15001,
                    "identifier": 901,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "lb",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb",
        "type": "Microsoft.Network/loadBalancers",
        "etag": "W/\"00000000-0000-0000-0000-00000000\"",
        "location": "eastus",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "resourceGuid": "00000000-0000-0000-0000-00000000",
          "frontendIPConfigurations": [
            {
              "name": "fe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb",
              "type": "Microsoft.Network/loadBalancers/frontendIPConfigurations",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.1.4",
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                },
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "be-lb1",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "tunnelInterfaces": [
                  {
                    "port": 15000,
                    "identifier": 900,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            },
            {
              "name": "be-lb2",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2",
              "type": "Microsoft.Network/loadBalancers/backendAddressPools",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "tunnelInterfaces": [
                  {
                    "port": 15001,
                    "identifier": 901,
                    "protocol": "VXLAN",
                    "type": "Internal"
                  }
                ],
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "loadBalancingRules": [
            {
              "name": "rulelb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb",
              "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "frontendIPConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": true,
                "idleTimeoutInMinutes": 15,
                "protocol": "Tcp",
                "loadDistribution": "Default",
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb1"
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/backendAddressPools/be-lb2"
                  }
                ],
                "probe": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb"
                },
                "disableOutboundSnat": false
              }
            }
          ],
          "probes": [
            {
              "name": "probe-lb",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/probes/probe-lb",
              "type": "Microsoft.Network/loadBalancers/probes",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "properties": {
                "provisioningState": "Succeeded",
                "protocol": "Http",
                "port": 80,
                "requestPath": "healthcheck.aspx",
                "intervalInSeconds": 15,
                "numberOfProbes": 2,
                "probeThreshold": 1,
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/loadBalancingRules/rulelb"
                  }
                ]
              }
            }
          ],
          "outboundRules": [],
          "inboundNatPools": []
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Load balancer service - Creates or updates a load balancer.
errorCodes: []
