### YamlMime:RESTOperation
uid: management.azure.com.storagerp.blobcontainers.createorupdateimmutabilitypolicy
name: Create Or Update Immutability Policy
service: Storage Resource Provider
groupName: Blob Containers
apiVersion: 2021-09-01
summary: Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default?api-version=2021-09-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the user's subscription. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: accountName
  in: path
  isRequired: true
  description: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  types:
  - uid: string
- name: containerName
  in: path
  isRequired: true
  description: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
  types:
  - uid: string
- name: immutabilityPolicyName
  in: path
  isRequired: true
  description: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'
  types:
  - uid: ImmutabilityPolicyName
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  headers:
  - name: ETag
    value: string
  description: OK -- Creates or updates container ImmutabilityPolicy operation completed successfully.
  types:
  - uid: ImmutabilityPolicy
requestBody:
- name: default
  parameters:
  - name: properties.immutabilityPeriodSinceCreationInDays
    in: body
    description: The immutability period for the blobs in the container since the policy creation, in days.
    types:
    - uid: integer
  - name: properties.allowProtectedAppendWrites
    in: body
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
    types:
    - uid: boolean
  - name: properties.allowProtectedAppendWritesAll
    in: body
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
    types:
    - uid: boolean
requestHeader:
- name: If-Match
  in: header
  description: The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied.
  types:
  - uid: string
definitions:
- name: ImmutabilityPolicyName
  description: The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be 'default'
  kind: enum
  properties:
  - name: default
    types:
    - uid: string
- name: ImmutabilityPolicy
  description: The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.
  kind: object
  properties:
  - name: properties.immutabilityPeriodSinceCreationInDays
    description: The immutability period for the blobs in the container since the policy creation, in days.
    types:
    - uid: integer
  - name: properties.state
    isReadyOnly: true
    description: 'The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.'
    types:
    - uid: ImmutabilityPolicyState
  - name: properties.allowProtectedAppendWrites
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
    types:
    - uid: boolean
  - name: properties.allowProtectedAppendWritesAll
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
    types:
    - uid: boolean
  - name: etag
    isReadyOnly: true
    description: Resource Etag.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: ImmutabilityPolicyState
  description: 'The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.'
  kind: enum
  properties:
  - name: Locked
    types:
    - uid: string
  - name: Unlocked
    types:
    - uid: string
examples:
- name: CreateOrUpdateImmutabilityPolicy
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default?api-version=2021-09-01
    body: >-
      {
        "properties": {
          "immutabilityPeriodSinceCreationInDays": 3,
          "allowProtectedAppendWrites": true
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default?api-version=2021-09-01

      {
        "properties": {
          "immutabilityPeriodSinceCreationInDays": 3,
          "allowProtectedAppendWrites": true
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.fluent.models.ImmutabilityPolicyInner;

      /** Samples for BlobContainers CreateOrUpdateImmutabilityPolicy. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersPutImmutabilityPolicy.json
           */
          /**
           * Sample code: CreateOrUpdateImmutabilityPolicy.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateImmutabilityPolicy(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getBlobContainers()
                  .createOrUpdateImmutabilityPolicyWithResponse(
                      "res1782",
                      "sto7069",
                      "container6397",
                      null,
                      new ImmutabilityPolicyInner()
                          .withImmutabilityPeriodSinceCreationInDays(3)
                          .withAllowProtectedAppendWrites(true),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstorage_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersPutImmutabilityPolicy.json
      func ExampleBlobContainersClient_CreateOrUpdateImmutabilityPolicy() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstorage.NewBlobContainersClient("{subscription-id}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdateImmutabilityPolicy(ctx,
      		"res1782",
      		"sto7069",
      		"container6397",
      		&armstorage.BlobContainersClientCreateOrUpdateImmutabilityPolicyOptions{IfMatch: nil,
      			Parameters: &armstorage.ImmutabilityPolicy{
      				Properties: &armstorage.ImmutabilityPolicyProperty{
      					AllowProtectedAppendWrites:            to.Ptr(true),
      					ImmutabilityPeriodSinceCreationInDays: to.Ptr[int32](3),
      				},
      			},
      		})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstorage%2Farmstorage%2Fv1.0.0/sdk/resourcemanager/storage/armstorage/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
       *
       * @summary Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersPutImmutabilityPolicy.json
       */
      async function createOrUpdateImmutabilityPolicy() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res1782";
        const accountName = "sto7069";
        const containerName = "container6397";
        const parameters = {
          allowProtectedAppendWrites: true,
          immutabilityPeriodSinceCreationInDays: 3,
        };
        const options = {
          parameters,
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.blobContainers.createOrUpdateImmutabilityPolicy(
          resourceGroupName,
          accountName,
          containerName,
          options
        );
        console.log(result);
      }

      createOrUpdateImmutabilityPolicy().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default",
        "name": "default",
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
        "etag": "\"8d59f830cb130e5\"",
        "properties": {
          "immutabilityPeriodSinceCreationInDays": 3,
          "allowProtectedAppendWrites": true,
          "state": "Unlocked"
        }
      }
- name: CreateOrUpdateImmutabilityPolicyWithAllowProtectedAppendWritesAll
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default?api-version=2021-09-01
    body: >-
      {
        "properties": {
          "immutabilityPeriodSinceCreationInDays": 3,
          "allowProtectedAppendWritesAll": true
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default?api-version=2021-09-01

      {
        "properties": {
          "immutabilityPeriodSinceCreationInDays": 3,
          "allowProtectedAppendWritesAll": true
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.fluent.models.ImmutabilityPolicyInner;

      /** Samples for BlobContainers CreateOrUpdateImmutabilityPolicy. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersPutImmutabilityPolicyAllowProtectedAppendWritesAll.json
           */
          /**
           * Sample code: CreateOrUpdateImmutabilityPolicyWithAllowProtectedAppendWritesAll.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void createOrUpdateImmutabilityPolicyWithAllowProtectedAppendWritesAll(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getBlobContainers()
                  .createOrUpdateImmutabilityPolicyWithResponse(
                      "res1782",
                      "sto7069",
                      "container6397",
                      null,
                      new ImmutabilityPolicyInner()
                          .withImmutabilityPeriodSinceCreationInDays(3)
                          .withAllowProtectedAppendWritesAll(true),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
       *
       * @summary Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersPutImmutabilityPolicyAllowProtectedAppendWritesAll.json
       */
      async function createOrUpdateImmutabilityPolicyWithAllowProtectedAppendWritesAll() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res1782";
        const accountName = "sto7069";
        const containerName = "container6397";
        const parameters = {
          allowProtectedAppendWritesAll: true,
          immutabilityPeriodSinceCreationInDays: 3,
        };
        const options = {
          parameters,
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.blobContainers.createOrUpdateImmutabilityPolicy(
          resourceGroupName,
          accountName,
          containerName,
          options
        );
        console.log(result);
      }

      createOrUpdateImmutabilityPolicyWithAllowProtectedAppendWritesAll().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res1782/providers/Microsoft.Storage/storageAccounts/sto7069/blobServices/default/containers/container6397/immutabilityPolicies/default",
        "name": "default",
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
        "etag": "\"8d59f830cb130e5\"",
        "properties": {
          "immutabilityPeriodSinceCreationInDays": 3,
          "allowProtectedAppendWritesAll": true,
          "state": "Unlocked"
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
errorCodes: []
