### YamlMime:RESTOperation
uid: management.azure.com.storagerp.blobcontainers.list
name: List
service: Storage Resource Provider
groupName: Blob Containers
apiVersion: 2021-09-01
summary: Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
consumes:
- application/json
produces:
- application/json
paths:
- content: GET https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers?api-version=2021-09-01
- content: GET https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers?api-version=2021-09-01&$maxpagesize={$maxpagesize}&$filter={$filter}&$include=deleted
  isOptional: true
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the user's subscription. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: accountName
  in: path
  isRequired: true
  description: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
- name: $maxpagesize
  in: query
  description: Optional. Specified maximum number of containers that can be included in the list.
  types:
  - uid: string
- name: $filter
  in: query
  description: Optional. When specified, only container names starting with the filter will be listed.
  types:
  - uid: string
- name: $include
  in: query
  description: Optional, used to include the properties for soft deleted blob containers.
  types:
  - uid: ListContainersInclude
responses:
- name: 200 OK
  description: OK -- List Container operation completed successfully.
  types:
  - uid: ListContainerItems
requestHeader: []
definitions:
- name: ListContainersInclude
  description: Optional, used to include the properties for soft deleted blob containers.
  kind: enum
  properties:
  - name: deleted
    types:
    - uid: string
- name: ListContainerItems
  description: Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers.
  kind: object
  properties:
  - name: value
    isReadyOnly: true
    description: List of blobs containers returned.
    types:
    - uid: ListContainerItem
      isArray: true
  - name: nextLink
    isReadyOnly: true
    description: Request URL that can be used to query next page of containers. Returned when total number of requested containers exceed maximum page size.
    types:
    - uid: string
- name: ListContainerItem
  description: The blob container properties be listed out.
  kind: object
  properties:
  - name: properties.version
    isReadyOnly: true
    description: The version of the deleted blob container.
    types:
    - uid: string
  - name: properties.deleted
    isReadyOnly: true
    description: Indicates whether the blob container was deleted.
    types:
    - uid: boolean
  - name: properties.deletedTime
    isReadyOnly: true
    description: Blob container deletion time.
    types:
    - uid: string
  - name: properties.remainingRetentionDays
    isReadyOnly: true
    description: Remaining retention days for soft deleted blob container.
    types:
    - uid: integer
  - name: properties.defaultEncryptionScope
    description: Default the container to use specified encryption scope for all writes.
    types:
    - uid: string
  - name: properties.denyEncryptionScopeOverride
    description: Block override of encryption scope from the container default.
    types:
    - uid: boolean
  - name: properties.publicAccess
    description: Specifies whether data in the container may be accessed publicly and the level of access.
    types:
    - uid: PublicAccess
  - name: properties.lastModifiedTime
    isReadyOnly: true
    description: Returns the date and time the container was last modified.
    types:
    - uid: string
  - name: properties.leaseStatus
    isReadyOnly: true
    description: The lease status of the container.
    types:
    - uid: LeaseStatus
  - name: properties.leaseState
    isReadyOnly: true
    description: Lease state of the container.
    types:
    - uid: LeaseState
  - name: properties.leaseDuration
    isReadyOnly: true
    description: Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
    types:
    - uid: LeaseDuration
  - name: properties.metadata
    description: A name-value pair to associate with the container as metadata.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: properties.immutabilityPolicy
    isReadyOnly: true
    description: The ImmutabilityPolicy property of the container.
    types:
    - uid: ImmutabilityPolicyProperties
  - name: properties.legalHold
    isReadyOnly: true
    description: The LegalHold property of the container.
    types:
    - uid: LegalHoldProperties
  - name: properties.hasLegalHold
    isReadyOnly: true
    description: The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
    types:
    - uid: boolean
  - name: properties.hasImmutabilityPolicy
    isReadyOnly: true
    description: The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
    types:
    - uid: boolean
  - name: properties.immutableStorageWithVersioning
    description: The object level immutability property of the container. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process.
    types:
    - uid: ImmutableStorageWithVersioning
  - name: properties.enableNfsV3RootSquash
    description: Enable NFSv3 root squash on blob container.
    types:
    - uid: boolean
  - name: properties.enableNfsV3AllSquash
    description: Enable NFSv3 all squash on blob container.
    types:
    - uid: boolean
  - name: etag
    isReadyOnly: true
    description: Resource Etag.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: PublicAccess
  description: Specifies whether data in the container may be accessed publicly and the level of access.
  kind: enum
  properties:
  - name: Container
    types:
    - uid: string
  - name: Blob
    types:
    - uid: string
  - name: None
    types:
    - uid: string
- name: LeaseStatus
  description: The lease status of the container.
  kind: enum
  properties:
  - name: Locked
    types:
    - uid: string
  - name: Unlocked
    types:
    - uid: string
- name: LeaseState
  description: Lease state of the container.
  kind: enum
  properties:
  - name: Available
    types:
    - uid: string
  - name: Leased
    types:
    - uid: string
  - name: Expired
    types:
    - uid: string
  - name: Breaking
    types:
    - uid: string
  - name: Broken
    types:
    - uid: string
- name: LeaseDuration
  description: Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
  kind: enum
  properties:
  - name: Infinite
    types:
    - uid: string
  - name: Fixed
    types:
    - uid: string
- name: ImmutabilityPolicyProperties
  description: The properties of an ImmutabilityPolicy of a blob container.
  kind: object
  properties:
  - name: etag
    isReadyOnly: true
    description: ImmutabilityPolicy Etag.
    types:
    - uid: string
  - name: updateHistory
    isReadyOnly: true
    description: The ImmutabilityPolicy update history of the blob container.
    types:
    - uid: UpdateHistoryProperty
      isArray: true
  - name: properties.immutabilityPeriodSinceCreationInDays
    description: The immutability period for the blobs in the container since the policy creation, in days.
    types:
    - uid: integer
  - name: properties.state
    isReadyOnly: true
    description: 'The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.'
    types:
    - uid: ImmutabilityPolicyState
  - name: properties.allowProtectedAppendWrites
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
    types:
    - uid: boolean
  - name: properties.allowProtectedAppendWritesAll
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
    types:
    - uid: boolean
- name: LegalHoldProperties
  description: The LegalHold property of a blob container.
  kind: object
  properties:
  - name: hasLegalHold
    isReadyOnly: true
    description: The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.
    types:
    - uid: boolean
  - name: tags
    description: The list of LegalHold tags of a blob container.
    types:
    - uid: TagProperty
      isArray: true
  - name: protectedAppendWritesHistory
    description: Protected append blob writes history.
    types:
    - uid: ProtectedAppendWritesHistory
- name: ImmutableStorageWithVersioning
  description: Object level immutability properties of the container.
  kind: object
  properties:
  - name: enabled
    description: This is an immutable property, when set to true it enables object level immutability at the container level.
    types:
    - uid: boolean
  - name: timeStamp
    isReadyOnly: true
    description: Returns the date and time the object level immutability was enabled.
    types:
    - uid: string
  - name: migrationState
    isReadyOnly: true
    description: This property denotes the container level immutability to object level immutability migration state.
    types:
    - uid: MigrationState
- name: UpdateHistoryProperty
  description: An update history of the ImmutabilityPolicy of a blob container.
  kind: object
  properties:
  - name: update
    isReadyOnly: true
    description: 'The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.'
    types:
    - uid: ImmutabilityPolicyUpdateType
  - name: immutabilityPeriodSinceCreationInDays
    isReadyOnly: true
    description: The immutability period for the blobs in the container since the policy creation, in days.
    types:
    - uid: integer
  - name: timestamp
    isReadyOnly: true
    description: Returns the date and time the ImmutabilityPolicy was updated.
    types:
    - uid: string
  - name: objectIdentifier
    isReadyOnly: true
    description: Returns the Object ID of the user who updated the ImmutabilityPolicy.
    types:
    - uid: string
  - name: tenantId
    isReadyOnly: true
    description: Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
    types:
    - uid: string
  - name: upn
    isReadyOnly: true
    description: Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
    types:
    - uid: string
  - name: allowProtectedAppendWrites
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API.
    types:
    - uid: boolean
  - name: allowProtectedAppendWritesAll
    description: This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The 'allowProtectedAppendWrites' and 'allowProtectedAppendWritesAll' properties are mutually exclusive.
    types:
    - uid: boolean
- name: ImmutabilityPolicyState
  description: 'The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.'
  kind: enum
  properties:
  - name: Locked
    types:
    - uid: string
  - name: Unlocked
    types:
    - uid: string
- name: TagProperty
  description: A tag of the LegalHold of a blob container.
  kind: object
  properties:
  - name: tag
    isReadyOnly: true
    description: The tag value.
    types:
    - uid: string
  - name: timestamp
    isReadyOnly: true
    description: Returns the date and time the tag was added.
    types:
    - uid: string
  - name: objectIdentifier
    isReadyOnly: true
    description: Returns the Object ID of the user who added the tag.
    types:
    - uid: string
  - name: tenantId
    isReadyOnly: true
    description: Returns the Tenant ID that issued the token for the user who added the tag.
    types:
    - uid: string
  - name: upn
    isReadyOnly: true
    description: Returns the User Principal Name of the user who added the tag.
    types:
    - uid: string
- name: ProtectedAppendWritesHistory
  description: Protected append writes history setting for the blob container with Legal holds.
  kind: object
  properties:
  - name: allowProtectedAppendWritesAll
    description: When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
    types:
    - uid: boolean
  - name: timestamp
    isReadyOnly: true
    description: Returns the date and time the tag was added.
    types:
    - uid: string
- name: MigrationState
  description: This property denotes the container level immutability to object level immutability migration state.
  kind: enum
  properties:
  - name: InProgress
    types:
    - uid: string
  - name: Completed
    types:
    - uid: string
- name: ImmutabilityPolicyUpdateType
  description: 'The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.'
  kind: enum
  properties:
  - name: put
    types:
    - uid: string
  - name: lock
    types:
    - uid: string
  - name: extend
    types:
    - uid: string
examples:
- name: ListContainers
  request:
    uri: GET https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2021-09-01&$include=deleted
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      GET https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2021-09-01&$include=deleted
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;

      /** Samples for BlobContainers List. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersList.json
           */
          /**
           * Sample code: ListContainers.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void listContainers(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getBlobContainers()
                  .list("res9290", "sto1590", null, null, null, Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstorage_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersList.json
      func ExampleBlobContainersClient_NewListPager() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstorage.NewBlobContainersClient("{subscription-id}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListPager("res9290",
      		"sto1590",
      		&armstorage.BlobContainersClientListOptions{Maxpagesize: nil,
      			Filter:  nil,
      			Include: nil,
      		})
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstorage%2Farmstorage%2Fv1.0.0/sdk/resourcemanager/storage/armstorage/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
       *
       * @summary Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersList.json
       */
      async function listContainers() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9290";
        const accountName = "sto1590";
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.blobContainers.list(resourceGroupName, accountName)) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      listContainers().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "value": [
          {
            "id": "/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container1644",
            "name": "container1644",
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "etag": "\"0x8D589847D51C7DE\"",
            "properties": {
              "publicAccess": "Container",
              "leaseStatus": "Unlocked",
              "leaseState": "Available",
              "lastModifiedTime": "2018-03-14T08:20:47Z",
              "hasImmutabilityPolicy": false,
              "hasLegalHold": false
            }
          },
          {
            "id": "/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container4052",
            "name": "container4052",
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "etag": "\"0x8D589847DAB5AF9\"",
            "properties": {
              "publicAccess": "None",
              "leaseStatus": "Unlocked",
              "leaseState": "Available",
              "lastModifiedTime": "2018-03-14T08:20:47Z",
              "hasImmutabilityPolicy": false,
              "hasLegalHold": false
            }
          }
        ],
        "nextLink": "https://sto1590endpoint/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2021-09-01&$maxpagesize=2&$skipToken=/sto1590/container5103"
      }
- name: ListDeletedContainers
  request:
    uri: GET https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2021-09-01&$include=deleted
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      GET https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers?api-version=2021-09-01&$include=deleted
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.ListContainersInclude;

      /** Samples for BlobContainers List. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/DeletedBlobContainersList.json
           */
          /**
           * Sample code: ListDeletedContainers.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void listDeletedContainers(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getBlobContainers()
                  .list("res9290", "sto1590", null, null, ListContainersInclude.DELETED, Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
       *
       * @summary Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/DeletedBlobContainersList.json
       */
      async function listDeletedContainers() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9290";
        const accountName = "sto1590";
        const include = "deleted";
        const options = { include };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.blobContainers.list(resourceGroupName, accountName, options)) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      listDeletedContainers().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "value": [
          {
            "id": "/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container1644",
            "name": "container1644",
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "etag": "\"0x8D589847D51C7DE\"",
            "properties": {
              "publicAccess": "Container",
              "leaseStatus": "Unlocked",
              "leaseState": "Available",
              "lastModifiedTime": "2018-03-14T08:20:47Z",
              "hasImmutabilityPolicy": false,
              "hasLegalHold": false
            }
          },
          {
            "id": "/subscriptions/{subscription-id}/resourceGroups/res9290/providers/Microsoft.Storage/storageAccounts/sto1590/blobServices/default/containers/container4052",
            "name": "container4052",
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "etag": "\"0x8D589847DAB5AF9\"",
            "properties": {
              "publicAccess": "None",
              "leaseStatus": "Unlocked",
              "leaseState": "Expired",
              "lastModifiedTime": "2018-03-14T08:20:47Z",
              "hasImmutabilityPolicy": false,
              "hasLegalHold": false,
              "version": "1234567890",
              "deleted": true,
              "deletedTime": "2019-12-14T08:20:47Z",
              "remainingRetentionDays": 30
            }
          }
        ]
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
errorCodes: []
