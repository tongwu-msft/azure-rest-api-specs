### YamlMime:RESTOperation
uid: management.azure.com.storagerp.blobcontainers.lease
name: Lease
service: Storage Resource Provider
groupName: Blob Containers
apiVersion: 2021-09-01
summary: The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease?api-version=2021-09-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the user's subscription. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: accountName
  in: path
  isRequired: true
  description: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  types:
  - uid: string
- name: containerName
  in: path
  isRequired: true
  description: The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK -- Lease Container operation completed successfully.
  types:
  - uid: LeaseContainerResponse
requestBody:
- name: default
  parameters:
  - name: action
    in: body
    isRequired: true
    description: Specifies the lease action. Can be one of the available actions.
    types:
    - uid: Acquire
    - uid: Renew
    - uid: Change
    - uid: Release
    - uid: Break
    typesTitle: enum
  - name: leaseId
    in: body
    description: Identifies the lease. Can be specified in any valid GUID string format.
    types:
    - uid: string
  - name: breakPeriod
    in: body
    description: Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.
    types:
    - uid: integer
  - name: leaseDuration
    in: body
    description: Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.
    types:
    - uid: integer
  - name: proposedLeaseId
    in: body
    description: Optional for acquire, required for change. Proposed lease ID, in a GUID string format.
    types:
    - uid: string
requestHeader: []
definitions:
- name: LeaseContainerResponse
  description: Lease Container response schema.
  kind: object
  properties:
  - name: leaseId
    description: Returned unique lease ID that must be included with any request to delete the container, or to renew, change, or release the lease.
    types:
    - uid: string
  - name: leaseTimeSeconds
    description: Approximate time remaining in the lease period, in seconds.
    types:
    - uid: string
- name: LeaseContainerRequest
  description: Lease Container request schema.
  kind: object
  properties:
  - name: action
    description: Specifies the lease action. Can be one of the available actions.
    types:
    - uid: Acquire
    - uid: Renew
    - uid: Change
    - uid: Release
    - uid: Break
    typesTitle: enum
  - name: leaseId
    description: Identifies the lease. Can be specified in any valid GUID string format.
    types:
    - uid: string
  - name: breakPeriod
    description: Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.
    types:
    - uid: integer
  - name: leaseDuration
    description: Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.
    types:
    - uid: integer
  - name: proposedLeaseId
    description: Optional for acquire, required for change. Proposed lease ID, in a GUID string format.
    types:
    - uid: string
examples:
- name: Acquire a lease on a container
  request:
    uri: POST https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185/lease?api-version=2021-09-01
    body: >-
      {
        "action": "Acquire",
        "leaseId": null,
        "breakPeriod": null,
        "leaseDuration": -1,
        "proposedLeaseId": null
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185/lease?api-version=2021-09-01

      {
        "action": "Acquire",
        "leaseId": null,
        "breakPeriod": null,
        "leaseDuration": -1,
        "proposedLeaseId": null
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.LeaseContainerRequest;
      import com.azure.resourcemanager.storage.models.LeaseContainerRequestAction;

      /** Samples for BlobContainers Lease. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersLease_Acquire.json
           */
          /**
           * Sample code: Acquire a lease on a container.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void acquireALeaseOnAContainer(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getBlobContainers()
                  .leaseWithResponse(
                      "res3376",
                      "sto328",
                      "container6185",
                      new LeaseContainerRequest().withAction(LeaseContainerRequestAction.ACQUIRE).withLeaseDuration(-1),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstorage_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersLease_Acquire.json
      func ExampleBlobContainersClient_Lease() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstorage.NewBlobContainersClient("{subscription-id}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.Lease(ctx,
      		"res3376",
      		"sto328",
      		"container6185",
      		&armstorage.BlobContainersClientLeaseOptions{Parameters: &armstorage.LeaseContainerRequest{
      			Action:        to.Ptr(armstorage.LeaseContainerRequestActionAcquire),
      			LeaseDuration: to.Ptr[int32](-1),
      		},
      		})
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstorage%2Farmstorage%2Fv1.0.0/sdk/resourcemanager/storage/armstorage/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
       *
       * @summary The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersLease_Acquire.json
       */
      async function acquireALeaseOnAContainer() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res3376";
        const accountName = "sto328";
        const containerName = "container6185";
        const parameters = {
          action: "Acquire",
          breakPeriod: undefined,
          leaseDuration: -1,
          leaseId: undefined,
          proposedLeaseId: undefined,
        };
        const options = { parameters };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.blobContainers.lease(
          resourceGroupName,
          accountName,
          containerName,
          options
        );
        console.log(result);
      }

      acquireALeaseOnAContainer().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "leaseId": "8698f513-fa75-44a1-b8eb-30ba336af27d"
      }
- name: Break a lease on a container
  request:
    uri: POST https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185/lease?api-version=2021-09-01
    body: >-
      {
        "action": "Break",
        "leaseId": "8698f513-fa75-44a1-b8eb-30ba336af27d",
        "breakPeriod": null,
        "leaseDuration": null,
        "proposedLeaseId": null
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/blobServices/default/containers/container6185/lease?api-version=2021-09-01

      {
        "action": "Break",
        "leaseId": "8698f513-fa75-44a1-b8eb-30ba336af27d",
        "breakPeriod": null,
        "leaseDuration": null,
        "proposedLeaseId": null
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.LeaseContainerRequest;
      import com.azure.resourcemanager.storage.models.LeaseContainerRequestAction;

      /** Samples for BlobContainers Lease. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersLease_Break.json
           */
          /**
           * Sample code: Break a lease on a container.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void breakALeaseOnAContainer(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getBlobContainers()
                  .leaseWithResponse(
                      "res3376",
                      "sto328",
                      "container6185",
                      new LeaseContainerRequest()
                          .withAction(LeaseContainerRequestAction.BREAK)
                          .withLeaseId("8698f513-fa75-44a1-b8eb-30ba336af27d"),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
       *
       * @summary The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/BlobContainersLease_Break.json
       */
      async function breakALeaseOnAContainer() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res3376";
        const accountName = "sto328";
        const containerName = "container6185";
        const parameters = {
          action: "Break",
          breakPeriod: undefined,
          leaseDuration: undefined,
          leaseId: "8698f513-fa75-44a1-b8eb-30ba336af27d",
          proposedLeaseId: undefined,
        };
        const options = { parameters };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.blobContainers.lease(
          resourceGroupName,
          accountName,
          containerName,
          options
        );
        console.log(result);
      }

      breakALeaseOnAContainer().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "leaseTimeSeconds": "0"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite
errorCodes: []
