### YamlMime:RESTOperation
uid: management.azure.com.storagerp.storageaccounts.create
name: Create
service: Storage Resource Provider
groupName: Storage Accounts
apiVersion: 2021-09-01
summary: Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2021-09-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the user's subscription. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: accountName
  in: path
  isRequired: true
  description: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK -- returned when the storage account was already created from a previous request with the same properties specified in the request body.
  types:
  - uid: StorageAccount
- name: 202 Accepted
  description: Accepted -- Create or update request accepted; operation will complete asynchronously.
requestBody:
- name: default
  parameters:
  - name: sku
    in: body
    isRequired: true
    description: Required. Gets or sets the SKU name.
    types:
    - uid: Sku
  - name: kind
    in: body
    isRequired: true
    description: Required. Indicates the type of storage account.
    types:
    - uid: Kind
  - name: location
    in: body
    isRequired: true
    description: Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
    types:
    - uid: string
  - name: extendedLocation
    in: body
    description: Optional. Set the extended location of the resource. If not set, the storage account will be created in Azure main region. Otherwise it will be created in the specified extended location
    types:
    - uid: ExtendedLocation
  - name: tags
    in: body
    description: Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: identity
    in: body
    description: The identity of the resource.
    types:
    - uid: Identity
  - name: properties.allowedCopyScope
    in: body
    description: Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
    types:
    - uid: AllowedCopyScope
  - name: properties.publicNetworkAccess
    in: body
    description: Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
    types:
    - uid: PublicNetworkAccess
  - name: properties.sasPolicy
    in: body
    description: SasPolicy assigned to the storage account.
    types:
    - uid: SasPolicy
  - name: properties.keyPolicy
    in: body
    description: KeyPolicy assigned to the storage account.
    types:
    - uid: KeyPolicy
  - name: properties.customDomain
    in: body
    description: User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
    types:
    - uid: CustomDomain
  - name: properties.encryption
    in: body
    description: Encryption settings to be used for server-side encryption for the storage account.
    types:
    - uid: Encryption
  - name: properties.networkAcls
    in: body
    description: Network rule set
    types:
    - uid: NetworkRuleSet
  - name: properties.accessTier
    in: body
    description: Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.
    types:
    - uid: AccessTier
  - name: properties.azureFilesIdentityBasedAuthentication
    in: body
    description: Provides the identity based authentication settings for Azure Files.
    types:
    - uid: AzureFilesIdentityBasedAuthentication
  - name: properties.supportsHttpsTrafficOnly
    in: body
    description: Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01.
    types:
    - uid: boolean
  - name: properties.isSftpEnabled
    in: body
    description: Enables Secure File Transfer Protocol, if set to true
    types:
    - uid: boolean
  - name: properties.isLocalUserEnabled
    in: body
    description: Enables local users feature, if set to true
    types:
    - uid: boolean
  - name: properties.isHnsEnabled
    in: body
    description: Account HierarchicalNamespace enabled if sets to true.
    types:
    - uid: boolean
  - name: properties.largeFileSharesState
    in: body
    description: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
    types:
    - uid: LargeFileSharesState
  - name: properties.routingPreference
    in: body
    description: Maintains information about the network routing choice opted by the user for data transfer
    types:
    - uid: RoutingPreference
  - name: properties.allowBlobPublicAccess
    in: body
    description: Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property.
    types:
    - uid: boolean
  - name: properties.minimumTlsVersion
    in: body
    description: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
    types:
    - uid: MinimumTlsVersion
  - name: properties.allowSharedKeyAccess
    in: body
    description: Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.
    types:
    - uid: boolean
  - name: properties.isNfsV3Enabled
    in: body
    description: NFS 3.0 protocol support enabled if set to true.
    types:
    - uid: boolean
  - name: properties.allowCrossTenantReplication
    in: body
    description: Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.
    types:
    - uid: boolean
  - name: properties.defaultToOAuthAuthentication
    in: body
    description: A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property.
    types:
    - uid: boolean
  - name: properties.immutableStorageWithVersioning
    in: body
    description: The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the new containers in the account by default.
    types:
    - uid: ImmutableStorageAccount
  - name: properties.dnsEndpointType
    in: body
    description: Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
    types:
    - uid: DnsEndpointType
requestHeader: []
definitions:
- name: Sku
  description: The SKU of the storage account.
  kind: object
  properties:
  - name: name
    description: The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
    types:
    - uid: SkuName
  - name: tier
    isReadyOnly: true
    description: The SKU tier. This is based on the SKU name.
    types:
    - uid: SkuTier
- name: ExtendedLocation
  description: The complex type of the extended location.
  kind: object
  properties:
  - name: name
    description: The name of the extended location.
    types:
    - uid: string
  - name: type
    description: The type of the extended location.
    types:
    - uid: ExtendedLocationTypes
- name: Identity
  description: Identity for the resource.
  kind: object
  properties:
  - name: principalId
    isReadyOnly: true
    description: The principal ID of resource identity.
    types:
    - uid: string
  - name: tenantId
    isReadyOnly: true
    description: The tenant ID of resource.
    types:
    - uid: string
  - name: type
    description: The identity type.
    types:
    - uid: IdentityType
  - name: userAssignedIdentities
    description: Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: UserAssignedIdentity
- name: SasPolicy
  description: SasPolicy assigned to the storage account.
  kind: object
  properties:
  - name: sasExpirationPeriod
    description: The SAS expiration period, DD.HH:MM:SS.
    types:
    - uid: string
  - name: expirationAction
    description: The SAS expiration action. Can only be Log.
    types:
    - uid: ExpirationAction
    defaultValue: Log
- name: KeyPolicy
  description: KeyPolicy assigned to the storage account.
  kind: object
  properties:
  - name: keyExpirationPeriodInDays
    description: The key expiration period in days.
    types:
    - uid: integer
- name: CustomDomain
  description: The custom domain assigned to this storage account. This can be set via Update.
  kind: object
  properties:
  - name: name
    description: Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
    types:
    - uid: string
  - name: useSubDomainName
    description: Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
    types:
    - uid: boolean
- name: Encryption
  description: The encryption settings on the storage account.
  kind: object
  properties:
  - name: services
    description: List of services which support encryption.
    types:
    - uid: EncryptionServices
  - name: keySource
    description: 'The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault'
    types:
    - uid: KeySource
    defaultValue: Microsoft.Storage
  - name: requireInfrastructureEncryption
    description: A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
    types:
    - uid: boolean
  - name: keyvaultproperties
    description: Properties provided by key vault.
    types:
    - uid: KeyVaultProperties
  - name: identity
    description: The identity to be used with service-side encryption at rest.
    types:
    - uid: EncryptionIdentity
- name: NetworkRuleSet
  description: Network rule set
  kind: object
  properties:
  - name: bypass
    description: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
    types:
    - uid: Bypass
    defaultValue: AzureServices
  - name: resourceAccessRules
    description: Sets the resource access rules
    types:
    - uid: ResourceAccessRule
      isArray: true
  - name: virtualNetworkRules
    description: Sets the virtual network rules
    types:
    - uid: VirtualNetworkRule
      isArray: true
  - name: ipRules
    description: Sets the IP ACL rules
    types:
    - uid: IPRule
      isArray: true
  - name: defaultAction
    description: Specifies the default action of allow or deny when no other rules match.
    types:
    - uid: DefaultAction
    defaultValue: Allow
- name: AzureFilesIdentityBasedAuthentication
  description: Settings for Azure Files identity based authentication.
  kind: object
  properties:
  - name: directoryServiceOptions
    description: Indicates the directory service used.
    types:
    - uid: DirectoryServiceOptions
  - name: activeDirectoryProperties
    description: Required if choose AD.
    types:
    - uid: ActiveDirectoryProperties
  - name: defaultSharePermission
    description: Default share permission for users using Kerberos authentication if RBAC role is not assigned.
    types:
    - uid: DefaultSharePermission
- name: RoutingPreference
  description: Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
  kind: object
  properties:
  - name: routingChoice
    description: Routing Choice defines the kind of network routing opted by the user.
    types:
    - uid: RoutingChoice
  - name: publishMicrosoftEndpoints
    description: A boolean flag which indicates whether microsoft routing storage endpoints are to be published
    types:
    - uid: boolean
  - name: publishInternetEndpoints
    description: A boolean flag which indicates whether internet routing storage endpoints are to be published
    types:
    - uid: boolean
- name: ImmutableStorageAccount
  description: This property enables and defines account-level immutability. Enabling the feature auto-enables Blob Versioning.
  kind: object
  properties:
  - name: enabled
    description: A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability enabled by default.
    types:
    - uid: boolean
  - name: immutabilityPolicy
    description: Specifies the default account-level immutability policy which is inherited and applied to objects that do not possess an explicit immutability policy at the object level. The object-level immutability policy has higher precedence than the container-level immutability policy, which has a higher precedence than the account-level immutability policy.
    types:
    - uid: AccountImmutabilityPolicyProperties
- name: StorageAccount
  description: The storage account.
  kind: object
  properties:
  - name: sku
    isReadyOnly: true
    description: Gets the SKU.
    types:
    - uid: Sku
  - name: kind
    isReadyOnly: true
    description: Gets the Kind.
    types:
    - uid: Kind
  - name: identity
    description: The identity of the resource.
    types:
    - uid: Identity
  - name: extendedLocation
    description: The extendedLocation of the resource.
    types:
    - uid: ExtendedLocation
  - name: properties.provisioningState
    isReadyOnly: true
    description: Gets the status of the storage account at the time the operation was called.
    types:
    - uid: ProvisioningState
  - name: properties.primaryEndpoints
    isReadyOnly: true
    description: Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob endpoint.
    types:
    - uid: Endpoints
  - name: properties.primaryLocation
    isReadyOnly: true
    description: Gets the location of the primary data center for the storage account.
    types:
    - uid: string
  - name: properties.statusOfPrimary
    isReadyOnly: true
    description: Gets the status indicating whether the primary location of the storage account is available or unavailable.
    types:
    - uid: AccountStatus
  - name: properties.lastGeoFailoverTime
    isReadyOnly: true
    description: Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
    types:
    - uid: string
  - name: properties.secondaryLocation
    isReadyOnly: true
    description: Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
    types:
    - uid: string
  - name: properties.statusOfSecondary
    isReadyOnly: true
    description: Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
    types:
    - uid: AccountStatus
  - name: properties.creationTime
    isReadyOnly: true
    description: Gets the creation date and time of the storage account in UTC.
    types:
    - uid: string
  - name: properties.customDomain
    isReadyOnly: true
    description: Gets the custom domain the user assigned to this storage account.
    types:
    - uid: CustomDomain
  - name: properties.sasPolicy
    isReadyOnly: true
    description: SasPolicy assigned to the storage account.
    types:
    - uid: SasPolicy
  - name: properties.keyPolicy
    isReadyOnly: true
    description: KeyPolicy assigned to the storage account.
    types:
    - uid: KeyPolicy
  - name: properties.keyCreationTime
    isReadyOnly: true
    description: Storage account keys creation time.
    types:
    - uid: KeyCreationTime
  - name: properties.secondaryEndpoints
    isReadyOnly: true
    description: Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location of the storage account. Only available if the SKU name is Standard_RAGRS.
    types:
    - uid: Endpoints
  - name: properties.encryption
    isReadyOnly: true
    description: Encryption settings to be used for server-side encryption for the storage account.
    types:
    - uid: Encryption
  - name: properties.accessTier
    isReadyOnly: true
    description: Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.
    types:
    - uid: AccessTier
  - name: properties.azureFilesIdentityBasedAuthentication
    description: Provides the identity based authentication settings for Azure Files.
    types:
    - uid: AzureFilesIdentityBasedAuthentication
  - name: properties.supportsHttpsTrafficOnly
    description: Allows https traffic only to storage service if sets to true.
    types:
    - uid: boolean
  - name: properties.networkAcls
    isReadyOnly: true
    description: Network rule set
    types:
    - uid: NetworkRuleSet
  - name: properties.isSftpEnabled
    description: Enables Secure File Transfer Protocol, if set to true
    types:
    - uid: boolean
  - name: properties.isLocalUserEnabled
    description: Enables local users feature, if set to true
    types:
    - uid: boolean
  - name: properties.isHnsEnabled
    description: Account HierarchicalNamespace enabled if sets to true.
    types:
    - uid: boolean
  - name: properties.geoReplicationStats
    isReadyOnly: true
    description: Geo Replication Stats
    types:
    - uid: GeoReplicationStats
  - name: properties.failoverInProgress
    isReadyOnly: true
    description: If the failover is in progress, the value will be true, otherwise, it will be null.
    types:
    - uid: boolean
  - name: properties.largeFileSharesState
    description: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
    types:
    - uid: LargeFileSharesState
  - name: properties.privateEndpointConnections
    isReadyOnly: true
    description: List of private endpoint connection associated with the specified storage account
    types:
    - uid: PrivateEndpointConnection
      isArray: true
  - name: properties.routingPreference
    description: Maintains information about the network routing choice opted by the user for data transfer
    types:
    - uid: RoutingPreference
  - name: properties.blobRestoreStatus
    isReadyOnly: true
    description: Blob restore status
    types:
    - uid: BlobRestoreStatus
  - name: properties.allowBlobPublicAccess
    description: Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property.
    types:
    - uid: boolean
  - name: properties.minimumTlsVersion
    description: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
    types:
    - uid: MinimumTlsVersion
  - name: properties.allowSharedKeyAccess
    description: Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.
    types:
    - uid: boolean
  - name: properties.isNfsV3Enabled
    description: NFS 3.0 protocol support enabled if set to true.
    types:
    - uid: boolean
  - name: properties.allowCrossTenantReplication
    description: Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.
    types:
    - uid: boolean
  - name: properties.defaultToOAuthAuthentication
    description: A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property.
    types:
    - uid: boolean
  - name: properties.publicNetworkAccess
    description: Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
    types:
    - uid: PublicNetworkAccess
  - name: properties.immutableStorageWithVersioning
    description: The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the containers in the account by default.
    types:
    - uid: ImmutableStorageAccount
  - name: properties.allowedCopyScope
    description: Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
    types:
    - uid: AllowedCopyScope
  - name: properties.storageAccountSkuConversionStatus
    description: This property is readOnly and is set by server during asynchronous storage account sku conversion operations.
    types:
    - uid: StorageAccountSkuConversionStatus
  - name: properties.dnsEndpointType
    description: Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
    types:
    - uid: DnsEndpointType
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: location
    description: The geo-location where the resource lives
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: StorageAccountCreateParameters
  description: The parameters used when creating a storage account.
  kind: object
  properties:
  - name: sku
    description: Required. Gets or sets the SKU name.
    types:
    - uid: Sku
  - name: kind
    description: Required. Indicates the type of storage account.
    types:
    - uid: Kind
  - name: location
    description: Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed.
    types:
    - uid: string
  - name: extendedLocation
    description: Optional. Set the extended location of the resource. If not set, the storage account will be created in Azure main region. Otherwise it will be created in the specified extended location
    types:
    - uid: ExtendedLocation
  - name: tags
    description: Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: identity
    description: The identity of the resource.
    types:
    - uid: Identity
  - name: properties.allowedCopyScope
    description: Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
    types:
    - uid: AllowedCopyScope
  - name: properties.publicNetworkAccess
    description: Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
    types:
    - uid: PublicNetworkAccess
  - name: properties.sasPolicy
    description: SasPolicy assigned to the storage account.
    types:
    - uid: SasPolicy
  - name: properties.keyPolicy
    description: KeyPolicy assigned to the storage account.
    types:
    - uid: KeyPolicy
  - name: properties.customDomain
    description: User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
    types:
    - uid: CustomDomain
  - name: properties.encryption
    description: Encryption settings to be used for server-side encryption for the storage account.
    types:
    - uid: Encryption
  - name: properties.networkAcls
    description: Network rule set
    types:
    - uid: NetworkRuleSet
  - name: properties.accessTier
    description: Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.
    types:
    - uid: AccessTier
  - name: properties.azureFilesIdentityBasedAuthentication
    description: Provides the identity based authentication settings for Azure Files.
    types:
    - uid: AzureFilesIdentityBasedAuthentication
  - name: properties.supportsHttpsTrafficOnly
    description: Allows https traffic only to storage service if sets to true. The default value is true since API version 2019-04-01.
    types:
    - uid: boolean
  - name: properties.isSftpEnabled
    description: Enables Secure File Transfer Protocol, if set to true
    types:
    - uid: boolean
  - name: properties.isLocalUserEnabled
    description: Enables local users feature, if set to true
    types:
    - uid: boolean
  - name: properties.isHnsEnabled
    description: Account HierarchicalNamespace enabled if sets to true.
    types:
    - uid: boolean
  - name: properties.largeFileSharesState
    description: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
    types:
    - uid: LargeFileSharesState
  - name: properties.routingPreference
    description: Maintains information about the network routing choice opted by the user for data transfer
    types:
    - uid: RoutingPreference
  - name: properties.allowBlobPublicAccess
    description: Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is true for this property.
    types:
    - uid: boolean
  - name: properties.minimumTlsVersion
    description: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
    types:
    - uid: MinimumTlsVersion
  - name: properties.allowSharedKeyAccess
    description: Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.
    types:
    - uid: boolean
  - name: properties.isNfsV3Enabled
    description: NFS 3.0 protocol support enabled if set to true.
    types:
    - uid: boolean
  - name: properties.allowCrossTenantReplication
    description: Allow or disallow cross AAD tenant object replication. The default interpretation is true for this property.
    types:
    - uid: boolean
  - name: properties.defaultToOAuthAuthentication
    description: A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property.
    types:
    - uid: boolean
  - name: properties.immutableStorageWithVersioning
    description: The property is immutable and can only be set to true at the account creation time. When set to true, it enables object level immutability for all the new containers in the account by default.
    types:
    - uid: ImmutableStorageAccount
  - name: properties.dnsEndpointType
    description: Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
    types:
    - uid: DnsEndpointType
- name: SkuName
  description: The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
  kind: enum
  properties:
  - name: Standard_LRS
    types:
    - uid: string
  - name: Standard_GRS
    types:
    - uid: string
  - name: Standard_RAGRS
    types:
    - uid: string
  - name: Standard_ZRS
    types:
    - uid: string
  - name: Premium_LRS
    types:
    - uid: string
  - name: Premium_ZRS
    types:
    - uid: string
  - name: Standard_GZRS
    types:
    - uid: string
  - name: Standard_RAGZRS
    types:
    - uid: string
- name: SkuTier
  description: The SKU tier. This is based on the SKU name.
  kind: enum
  properties:
  - name: Standard
    types:
    - uid: string
  - name: Premium
    types:
    - uid: string
- name: ExtendedLocationTypes
  description: The type of the extended location.
  kind: enum
  properties:
  - name: EdgeZone
    types:
    - uid: string
- name: IdentityType
  description: The identity type.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: SystemAssigned
    types:
    - uid: string
  - name: UserAssigned
    types:
    - uid: string
  - name: SystemAssigned,UserAssigned
    types:
    - uid: string
- name: UserAssignedIdentity
  description: UserAssignedIdentity for the resource.
  kind: object
  properties:
  - name: principalId
    isReadyOnly: true
    description: The principal ID of the identity.
    types:
    - uid: string
  - name: clientId
    isReadyOnly: true
    description: The client ID of the identity.
    types:
    - uid: string
- name: ExpirationAction
  description: The SAS expiration action. Can only be Log.
  kind: enum
  properties:
  - name: Log
    types:
    - uid: string
- name: EncryptionServices
  description: A list of services that support encryption.
  kind: object
  properties:
  - name: blob
    description: The encryption function of the blob storage service.
    types:
    - uid: EncryptionService
  - name: file
    description: The encryption function of the file storage service.
    types:
    - uid: EncryptionService
  - name: table
    description: The encryption function of the table storage service.
    types:
    - uid: EncryptionService
  - name: queue
    description: The encryption function of the queue storage service.
    types:
    - uid: EncryptionService
- name: KeySource
  description: 'The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault'
  kind: enum
  properties:
  - name: Microsoft.Storage
    types:
    - uid: string
  - name: Microsoft.Keyvault
    types:
    - uid: string
- name: KeyVaultProperties
  description: Properties of key vault.
  kind: object
  properties:
  - name: keyname
    description: The name of KeyVault key.
    types:
    - uid: string
  - name: keyversion
    description: The version of KeyVault key.
    types:
    - uid: string
  - name: keyvaulturi
    description: The Uri of KeyVault.
    types:
    - uid: string
  - name: currentVersionedKeyIdentifier
    isReadyOnly: true
    description: The object identifier of the current versioned Key Vault Key in use.
    types:
    - uid: string
  - name: lastKeyRotationTimestamp
    isReadyOnly: true
    description: Timestamp of last rotation of the Key Vault Key.
    types:
    - uid: string
  - name: currentVersionedKeyExpirationTimestamp
    isReadyOnly: true
    description: This is a read only property that represents the expiration time of the current version of the customer managed key used for encryption.
    types:
    - uid: string
- name: EncryptionIdentity
  description: Encryption identity for the storage account.
  kind: object
  properties:
  - name: userAssignedIdentity
    description: Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
    types:
    - uid: string
  - name: federatedIdentityClientId
    description: ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
    types:
    - uid: string
- name: Bypass
  description: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: Logging
    types:
    - uid: string
  - name: Metrics
    types:
    - uid: string
  - name: AzureServices
    types:
    - uid: string
- name: ResourceAccessRule
  description: Resource Access Rule.
  kind: object
  properties:
  - name: tenantId
    description: Tenant Id
    types:
    - uid: string
  - name: resourceId
    description: Resource Id
    types:
    - uid: string
- name: VirtualNetworkRule
  description: Virtual Network rule.
  kind: object
  properties:
  - name: id
    description: 'Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.'
    types:
    - uid: string
  - name: action
    description: The action of virtual network rule.
    types:
    - uid: Action
    defaultValue: Allow
  - name: state
    description: Gets the state of virtual network rule.
    types:
    - uid: State
- name: IPRule
  description: IP rule with specific IP or IP range in CIDR format.
  kind: object
  properties:
  - name: value
    description: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
    types:
    - uid: string
  - name: action
    description: The action of IP ACL rule.
    types:
    - uid: Action
    defaultValue: Allow
- name: DefaultAction
  description: Specifies the default action of allow or deny when no other rules match.
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
- name: DirectoryServiceOptions
  description: Indicates the directory service used.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: AADDS
    types:
    - uid: string
  - name: AD
    types:
    - uid: string
- name: ActiveDirectoryProperties
  description: Settings properties for Active Directory (AD).
  kind: object
  properties:
  - name: domainName
    description: Specifies the primary domain that the AD DNS server is authoritative for.
    types:
    - uid: string
  - name: netBiosDomainName
    description: Specifies the NetBIOS domain name.
    types:
    - uid: string
  - name: forestName
    description: Specifies the Active Directory forest to get.
    types:
    - uid: string
  - name: domainGuid
    description: Specifies the domain GUID.
    types:
    - uid: string
  - name: domainSid
    description: Specifies the security identifier (SID).
    types:
    - uid: string
  - name: azureStorageSid
    description: Specifies the security identifier (SID) for Azure Storage.
    types:
    - uid: string
  - name: samAccountName
    description: Specifies the Active Directory SAMAccountName for Azure Storage.
    types:
    - uid: string
  - name: accountType
    description: Specifies the Active Directory account type for Azure Storage.
    types:
    - uid: User
    - uid: Computer
    typesTitle: enum
- name: DefaultSharePermission
  description: Default share permission for users using Kerberos authentication if RBAC role is not assigned.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: StorageFileDataSmbShareReader
    types:
    - uid: string
  - name: StorageFileDataSmbShareContributor
    types:
    - uid: string
  - name: StorageFileDataSmbShareElevatedContributor
    types:
    - uid: string
- name: RoutingChoice
  description: Routing Choice defines the kind of network routing opted by the user.
  kind: enum
  properties:
  - name: MicrosoftRouting
    types:
    - uid: string
  - name: InternetRouting
    types:
    - uid: string
- name: AccountImmutabilityPolicyProperties
  description: This defines account-level immutability policy properties.
  kind: object
  properties:
  - name: immutabilityPeriodSinceCreationInDays
    description: The immutability period for the blobs in the container since the policy creation, in days.
    types:
    - uid: integer
  - name: state
    description: The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted.
    types:
    - uid: AccountImmutabilityPolicyState
  - name: allowProtectedAppendWrites
    description: This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
    types:
    - uid: boolean
- name: Kind
  description: Indicates the type of storage account.
  kind: enum
  properties:
  - name: Storage
    types:
    - uid: string
  - name: StorageV2
    types:
    - uid: string
  - name: BlobStorage
    types:
    - uid: string
  - name: FileStorage
    types:
    - uid: string
  - name: BlockBlobStorage
    types:
    - uid: string
- name: ProvisioningState
  description: Gets the status of the storage account at the time the operation was called.
  kind: enum
  properties:
  - name: Creating
    types:
    - uid: string
  - name: ResolvingDNS
    types:
    - uid: string
  - name: Succeeded
    types:
    - uid: string
- name: Endpoints
  description: The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
  kind: object
  properties:
  - name: blob
    isReadyOnly: true
    description: Gets the blob endpoint.
    types:
    - uid: string
  - name: queue
    isReadyOnly: true
    description: Gets the queue endpoint.
    types:
    - uid: string
  - name: table
    isReadyOnly: true
    description: Gets the table endpoint.
    types:
    - uid: string
  - name: file
    isReadyOnly: true
    description: Gets the file endpoint.
    types:
    - uid: string
  - name: web
    isReadyOnly: true
    description: Gets the web endpoint.
    types:
    - uid: string
  - name: dfs
    isReadyOnly: true
    description: Gets the dfs endpoint.
    types:
    - uid: string
  - name: microsoftEndpoints
    description: Gets the microsoft routing storage endpoints.
    types:
    - uid: StorageAccountMicrosoftEndpoints
  - name: internetEndpoints
    description: Gets the internet routing storage endpoints
    types:
    - uid: StorageAccountInternetEndpoints
- name: AccountStatus
  description: Gets the status indicating whether the primary location of the storage account is available or unavailable.
  kind: enum
  properties:
  - name: available
    types:
    - uid: string
  - name: unavailable
    types:
    - uid: string
- name: KeyCreationTime
  description: Storage account keys creation time.
  kind: object
  properties:
  - name: key1
    description: ''
    types:
    - uid: string
  - name: key2
    description: ''
    types:
    - uid: string
- name: AccessTier
  description: Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.
  kind: enum
  properties:
  - name: Hot
    types:
    - uid: string
  - name: Cool
    types:
    - uid: string
  - name: Premium
    types:
    - uid: string
- name: GeoReplicationStats
  description: Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.
  kind: object
  properties:
  - name: status
    isReadyOnly: true
    description: 'The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.'
    types:
    - uid: GeoReplicationStatus
  - name: lastSyncTime
    isReadyOnly: true
    description: All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.
    types:
    - uid: string
  - name: canFailover
    isReadyOnly: true
    description: A boolean flag which indicates whether or not account failover is supported for the account.
    types:
    - uid: boolean
- name: LargeFileSharesState
  description: Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
  kind: enum
  properties:
  - name: Disabled
    types:
    - uid: string
  - name: Enabled
    types:
    - uid: string
- name: PrivateEndpointConnection
  description: The Private Endpoint Connection resource.
  kind: object
  properties:
  - name: properties.privateEndpoint
    description: The resource of private end point.
    types:
    - uid: PrivateEndpoint
  - name: properties.privateLinkServiceConnectionState
    description: A collection of information about the state of the connection between service consumer and provider.
    types:
    - uid: PrivateLinkServiceConnectionState
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the private endpoint connection resource.
    types:
    - uid: PrivateEndpointConnectionProvisioningState
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: BlobRestoreStatus
  description: Blob restore status.
  kind: object
  properties:
  - name: status
    isReadyOnly: true
    description: 'The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.'
    types:
    - uid: BlobRestoreProgressStatus
  - name: failureReason
    isReadyOnly: true
    description: Failure reason when blob restore is failed.
    types:
    - uid: string
  - name: restoreId
    isReadyOnly: true
    description: Id for tracking blob restore request.
    types:
    - uid: string
  - name: parameters
    isReadyOnly: true
    description: Blob restore request parameters.
    types:
    - uid: BlobRestoreParameters
- name: MinimumTlsVersion
  description: Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
  kind: enum
  properties:
  - name: TLS1_0
    types:
    - uid: string
  - name: TLS1_1
    types:
    - uid: string
  - name: TLS1_2
    types:
    - uid: string
- name: PublicNetworkAccess
  description: Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: AllowedCopyScope
  description: Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
  kind: enum
  properties:
  - name: PrivateLink
    types:
    - uid: string
  - name: AAD
    types:
    - uid: string
- name: StorageAccountSkuConversionStatus
  description: This defines the sku conversion status object for asynchronous sku conversions.
  kind: object
  properties:
  - name: skuConversionStatus
    isReadyOnly: true
    description: This property indicates the current sku conversion status.
    types:
    - uid: SkuConversionStatus
  - name: targetSkuName
    description: This property represents the target sku name to which the account sku is being converted asynchronously.
    types:
    - uid: SkuName
  - name: startTime
    isReadyOnly: true
    description: This property represents the sku conversion start time.
    types:
    - uid: string
  - name: endTime
    isReadyOnly: true
    description: This property represents the sku conversion end time.
    types:
    - uid: string
- name: DnsEndpointType
  description: Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
  kind: enum
  properties:
  - name: Standard
    types:
    - uid: string
  - name: AzureDnsZone
    types:
    - uid: string
- name: EncryptionService
  description: A service that allows server-side encryption to be used.
  kind: object
  properties:
  - name: enabled
    description: A boolean indicating whether or not the service encrypts the data as it is stored. Encryption at rest is enabled by default today and cannot be disabled.
    types:
    - uid: boolean
  - name: lastEnabledTime
    isReadyOnly: true
    description: Gets a rough estimate of the date/time when the encryption was last enabled by the user. Data is encrypted at rest by default today and cannot be disabled.
    types:
    - uid: string
  - name: keyType
    description: Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
    types:
    - uid: KeyType
- name: Action
  description: The action of virtual network rule.
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
- name: State
  description: Gets the state of virtual network rule.
  kind: enum
  properties:
  - name: Provisioning
    types:
    - uid: string
  - name: Deprovisioning
    types:
    - uid: string
  - name: Succeeded
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
  - name: NetworkSourceDeleted
    types:
    - uid: string
- name: AccountImmutabilityPolicyState
  description: The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted.
  kind: enum
  properties:
  - name: Unlocked
    types:
    - uid: string
  - name: Locked
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: StorageAccountMicrosoftEndpoints
  description: The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint.
  kind: object
  properties:
  - name: blob
    isReadyOnly: true
    description: Gets the blob endpoint.
    types:
    - uid: string
  - name: queue
    isReadyOnly: true
    description: Gets the queue endpoint.
    types:
    - uid: string
  - name: table
    isReadyOnly: true
    description: Gets the table endpoint.
    types:
    - uid: string
  - name: file
    isReadyOnly: true
    description: Gets the file endpoint.
    types:
    - uid: string
  - name: web
    isReadyOnly: true
    description: Gets the web endpoint.
    types:
    - uid: string
  - name: dfs
    isReadyOnly: true
    description: Gets the dfs endpoint.
    types:
    - uid: string
- name: StorageAccountInternetEndpoints
  description: The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint.
  kind: object
  properties:
  - name: blob
    isReadyOnly: true
    description: Gets the blob endpoint.
    types:
    - uid: string
  - name: file
    isReadyOnly: true
    description: Gets the file endpoint.
    types:
    - uid: string
  - name: web
    isReadyOnly: true
    description: Gets the web endpoint.
    types:
    - uid: string
  - name: dfs
    isReadyOnly: true
    description: Gets the dfs endpoint.
    types:
    - uid: string
- name: GeoReplicationStatus
  description: 'The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.'
  kind: enum
  properties:
  - name: Live
    types:
    - uid: string
  - name: Bootstrap
    types:
    - uid: string
  - name: Unavailable
    types:
    - uid: string
- name: PrivateEndpoint
  description: The Private Endpoint resource.
  kind: object
  properties:
  - name: id
    isReadyOnly: true
    description: The ARM identifier for Private Endpoint
    types:
    - uid: string
- name: PrivateLinkServiceConnectionState
  description: A collection of information about the state of the connection between service consumer and provider.
  kind: object
  properties:
  - name: status
    description: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    types:
    - uid: PrivateEndpointServiceConnectionStatus
  - name: description
    description: The reason for approval/rejection of the connection.
    types:
    - uid: string
  - name: actionRequired
    description: A message indicating if changes on the service provider require any updates on the consumer.
    types:
    - uid: string
- name: PrivateEndpointConnectionProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Creating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: BlobRestoreProgressStatus
  description: 'The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.'
  kind: enum
  properties:
  - name: InProgress
    types:
    - uid: string
  - name: Complete
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: BlobRestoreParameters
  description: Blob restore parameters
  kind: object
  properties:
  - name: timeToRestore
    description: Restore blob to the specified time.
    types:
    - uid: string
  - name: blobRanges
    description: Blob ranges to restore.
    types:
    - uid: BlobRestoreRange
      isArray: true
- name: SkuConversionStatus
  description: This property indicates the current sku conversion status.
  kind: enum
  properties:
  - name: InProgress
    types:
    - uid: string
  - name: Succeeded
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: KeyType
  description: Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used.
  kind: enum
  properties:
  - name: Service
    types:
    - uid: string
  - name: Account
    types:
    - uid: string
- name: PrivateEndpointServiceConnectionStatus
  description: The private endpoint connection status.
  kind: enum
  properties:
  - name: Pending
    types:
    - uid: string
  - name: Approved
    types:
    - uid: string
  - name: Rejected
    types:
    - uid: string
- name: BlobRestoreRange
  description: Blob range
  kind: object
  properties:
  - name: startRange
    description: Blob start range. This is inclusive. Empty means account start.
    types:
    - uid: string
  - name: endRange
    description: Blob end range. This is exclusive. Empty means account end.
    types:
    - uid: string
examples:
- name: StorageAccountCreate
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "defaultToOAuthAuthentication": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "defaultToOAuthAuthentication": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.ExtendedLocation;
      import com.azure.resourcemanager.storage.models.ExtendedLocationTypes;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreate.json
           */
          /**
           * Sample code: StorageAccountCreate.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreate(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withExtendedLocation(
                              new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsSftpEnabled(true)
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true)
                          .withDefaultToOAuthAuthentication(false),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreate.json
       */
      async function storageAccountCreate() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          defaultToOAuthAuthentication: false,
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          extendedLocation: { name: "losangeles001", type: "EdgeZone" },
          isHnsEnabled: true,
          isSftpEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.web.core.windows.net/",
              "dfs": "https://sto4445-microsoftrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-microsoftrouting.blob.core.windows.net/",
              "file": "https://sto4445-microsoftrouting.file.core.windows.net/",
              "queue": "https://sto4445-microsoftrouting.queue.core.windows.net/",
              "table": "https://sto4445-microsoftrouting.table.core.windows.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.web.core.windows.net/",
              "dfs": "https://sto4445-internetrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-internetrouting.blob.core.windows.net/",
              "file": "https://sto4445-internetrouting.file.core.windows.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: NfsV3AccountCreate
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Premium_LRS"
        },
        "kind": "BlockBlobStorage",
        "location": "eastus",
        "properties": {
          "isHnsEnabled": true,
          "isNfsV3Enabled": true,
          "supportsHttpsTrafficOnly": false,
          "networkAcls": {
            "bypass": "AzureServices",
            "defaultAction": "Allow",
            "ipRules": [],
            "virtualNetworkRules": [
              {
                "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12"
              }
            ]
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Premium_LRS"
        },
        "kind": "BlockBlobStorage",
        "location": "eastus",
        "properties": {
          "isHnsEnabled": true,
          "isNfsV3Enabled": true,
          "supportsHttpsTrafficOnly": false,
          "networkAcls": {
            "bypass": "AzureServices",
            "defaultAction": "Allow",
            "ipRules": [],
            "virtualNetworkRules": [
              {
                "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12"
              }
            ]
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Bypass;
      import com.azure.resourcemanager.storage.models.DefaultAction;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.NetworkRuleSet;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import com.azure.resourcemanager.storage.models.VirtualNetworkRule;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/NfsV3AccountCreate.json
           */
          /**
           * Sample code: NfsV3AccountCreate.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void nfsV3AccountCreate(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.PREMIUM_LRS))
                          .withKind(Kind.BLOCK_BLOB_STORAGE)
                          .withLocation("eastus")
                          .withNetworkRuleSet(
                              new NetworkRuleSet()
                                  .withBypass(Bypass.AZURE_SERVICES)
                                  .withVirtualNetworkRules(
                                      Arrays
                                          .asList(
                                              new VirtualNetworkRule()
                                                  .withVirtualNetworkResourceId(
                                                      "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12")))
                                  .withIpRules(Arrays.asList())
                                  .withDefaultAction(DefaultAction.ALLOW))
                          .withEnableHttpsTrafficOnly(false)
                          .withIsHnsEnabled(true)
                          .withEnableNfsV3(true),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstorage_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/NfsV3AccountCreate.json
      func ExampleAccountsClient_BeginCreate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstorage.NewAccountsClient("{subscription-id}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreate(ctx,
      		"res9101",
      		"sto4445",
      		armstorage.AccountCreateParameters{
      			Kind:     to.Ptr(armstorage.KindBlockBlobStorage),
      			Location: to.Ptr("eastus"),
      			Properties: &armstorage.AccountPropertiesCreateParameters{
      				IsHnsEnabled: to.Ptr(true),
      				EnableNfsV3:  to.Ptr(true),
      				NetworkRuleSet: &armstorage.NetworkRuleSet{
      					Bypass:        to.Ptr(armstorage.BypassAzureServices),
      					DefaultAction: to.Ptr(armstorage.DefaultActionAllow),
      					IPRules:       []*armstorage.IPRule{},
      					VirtualNetworkRules: []*armstorage.VirtualNetworkRule{
      						{
      							VirtualNetworkResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12"),
      						}},
      				},
      				EnableHTTPSTrafficOnly: to.Ptr(false),
      			},
      			SKU: &armstorage.SKU{
      				Name: to.Ptr(armstorage.SKUNamePremiumLRS),
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstorage%2Farmstorage%2Fv1.0.0/sdk/resourcemanager/storage/armstorage/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/NfsV3AccountCreate.json
       */
      async function nfsV3AccountCreate() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          isHnsEnabled: true,
          enableNfsV3: true,
          kind: "BlockBlobStorage",
          location: "eastus",
          networkRuleSet: {
            bypass: "AzureServices",
            defaultAction: "Allow",
            ipRules: [],
            virtualNetworkRules: [
              {
                virtualNetworkResourceId:
                  "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12",
              },
            ],
          },
          sku: { name: "Premium_LRS" },
          enableHttpsTrafficOnly: false,
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      nfsV3AccountCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "BlockBlobStorage",
        "location": "eastus",
        "name": "sto4445",
        "properties": {
          "isHnsEnabled": true,
          "isNfsV3Enabled": true,
          "supportsHttpsTrafficOnly": false,
          "networkAcls": {
            "bypass": "AzureServices",
            "defaultAction": "Allow",
            "ipRules": [],
            "virtualNetworkRules": [
              {
                "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Network/virtualNetworks/net123/subnets/subnet12"
              }
            ]
          }
        },
        "sku": {
          "name": "Premium_LRS",
          "tier": "Premium"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateUserAssignedEncryptionIdentityWithCMK
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {}
          }
        },
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "keyvaultproperties": {
              "keyvaulturi": "https://myvault8569.vault.azure.net",
              "keyname": "wrappingKey",
              "keyversion": ""
            },
            "keySource": "Microsoft.Keyvault",
            "identity": {
              "userAssignedIdentity": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {}
          }
        },
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "keyvaultproperties": {
              "keyvaulturi": "https://myvault8569.vault.azure.net",
              "keyname": "wrappingKey",
              "keyversion": ""
            },
            "keySource": "Microsoft.Keyvault",
            "identity": {
              "userAssignedIdentity": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionIdentity;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.Identity;
      import com.azure.resourcemanager.storage.models.IdentityType;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.KeyVaultProperties;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import com.azure.resourcemanager.storage.models.UserAssignedIdentity;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json
           */
          /**
           * Sample code: StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateUserAssignedEncryptionIdentityWithCMK(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_LRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withIdentity(
                              new Identity()
                                  .withType(IdentityType.USER_ASSIGNED)
                                  .withUserAssignedIdentities(
                                      mapOf(
                                          "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
                                          new UserAssignedIdentity())))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_KEYVAULT)
                                  .withKeyVaultProperties(
                                      new KeyVaultProperties()
                                          .withKeyName("wrappingKey")
                                          .withKeyVersion("")
                                          .withKeyVaultUri("https://myvault8569.vault.azure.net"))
                                  .withEncryptionIdentity(
                                      new EncryptionIdentity()
                                          .withEncryptionUserAssignedIdentity(
                                              "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateUserAssignedEncryptionIdentityWithCMK.json
       */
      async function storageAccountCreateUserAssignedEncryptionIdentityWithCmk() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          encryption: {
            encryptionIdentity: {
              encryptionUserAssignedIdentity:
                "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
            },
            keySource: "Microsoft.Keyvault",
            keyVaultProperties: {
              keyName: "wrappingKey",
              keyVaultUri: "https://myvault8569.vault.azure.net",
              keyVersion: "",
            },
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          identity: {
            type: "UserAssigned",
            userAssignedIdentities: {
              "/subscriptions/{subscriptionId}/resourceGroups/res9101/providers/MicrosoftManagedIdentity/userAssignedIdentities/{managedIdentityName}":
                {},
            },
          },
          kind: "Storage",
          location: "eastus",
          sku: { name: "Standard_LRS" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateUserAssignedEncryptionIdentityWithCmk().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "identity": {
          "userAssignedIdentities": {
            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {
              "principalId": "8d823284-1060-42a5-9ec4-ed3d831e24d7",
              "clientId": "fbaa6278-1ecc-415c-819f-6e2058d3acb5"
            }
          },
          "type": "UserAssigned"
        },
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "kind": "StorageV2",
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "name": "sto4445",
        "type": "Microsoft.Storage/storageAccounts",
        "location": "eastus",
        "tags": {},
        "properties": {
          "privateEndpointConnections": [],
          "networkAcls": {
            "bypass": "AzureServices",
            "virtualNetworkRules": [],
            "ipRules": [],
            "defaultAction": "Allow"
          },
          "supportsHttpsTrafficOnly": true,
          "encryption": {
            "identity": {
              "userAssignedIdentity": "/subscriptions/{subscription-id}/resourcegroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}"
            },
            "keyvaultproperties": {
              "keyvaulturi": "https://myvault8569.vault.azure.net",
              "keyname": "wrappingKey",
              "keyversion": "",
              "currentVersionedKeyIdentifier": "https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad",
              "lastKeyRotationTimestamp": "2019-12-13T20:36:23.7023290Z"
            },
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2020-12-15T00:43:14.1739587Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2020-12-15T00:43:14.1739587Z"
              }
            },
            "keySource": "Microsoft.Keyvault"
          },
          "accessTier": "Hot",
          "provisioningState": "Succeeded",
          "creationTime": "2020-12-15T00:43:14.0839093Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/"
          },
          "primaryLocation": "eastus",
          "statusOfPrimary": "available"
        }
      }
  - statusCode: "202"
- name: StorageAccountCreateWithImmutabilityPolicy
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "immutableStorageWithVersioning": {
            "immutabilityPolicy": {
              "immutabilityPeriodSinceCreationInDays": 15,
              "allowProtectedAppendWrites": true,
              "state": "Unlocked"
            },
            "enabled": true
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "immutableStorageWithVersioning": {
            "immutabilityPolicy": {
              "immutabilityPeriodSinceCreationInDays": 15,
              "allowProtectedAppendWrites": true,
              "state": "Unlocked"
            },
            "enabled": true
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.AccountImmutabilityPolicyProperties;
      import com.azure.resourcemanager.storage.models.AccountImmutabilityPolicyState;
      import com.azure.resourcemanager.storage.models.ExtendedLocation;
      import com.azure.resourcemanager.storage.models.ExtendedLocationTypes;
      import com.azure.resourcemanager.storage.models.ImmutableStorageAccount;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateWithImmutabilityPolicy.json
           */
          /**
           * Sample code: StorageAccountCreateWithImmutabilityPolicy.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateWithImmutabilityPolicy(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withExtendedLocation(
                              new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
                          .withImmutableStorageWithVersioning(
                              new ImmutableStorageAccount()
                                  .withEnabled(true)
                                  .withImmutabilityPolicy(
                                      new AccountImmutabilityPolicyProperties()
                                          .withImmutabilityPeriodSinceCreationInDays(15)
                                          .withState(AccountImmutabilityPolicyState.UNLOCKED)
                                          .withAllowProtectedAppendWrites(true))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateWithImmutabilityPolicy.json
       */
      async function storageAccountCreateWithImmutabilityPolicy() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          extendedLocation: { name: "losangeles001", type: "EdgeZone" },
          immutableStorageWithVersioning: {
            enabled: true,
            immutabilityPolicy: {
              allowProtectedAppendWrites: true,
              immutabilityPeriodSinceCreationInDays: 15,
              state: "Unlocked",
            },
          },
          kind: "Storage",
          location: "eastus",
          sku: { name: "Standard_GRS" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateWithImmutabilityPolicy().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/"
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "immutableStorageWithVersioning": {
            "immutabilityPolicy": {
              "immutabilityPeriodSinceCreationInDays": 15,
              "allowProtectedAppendWrites": true,
              "state": "Unlocked"
            },
            "enabled": true
          }
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateDisallowPublicNetworkAccess
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "publicNetworkAccess": "Disabled",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "publicNetworkAccess": "Disabled",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.ExtendedLocation;
      import com.azure.resourcemanager.storage.models.ExtendedLocationTypes;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.PublicNetworkAccess;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json
           */
          /**
           * Sample code: StorageAccountCreateDisallowPublicNetworkAccess.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateDisallowPublicNetworkAccess(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withExtendedLocation(
                              new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDisallowPublicNetworkAccess.json
       */
      async function storageAccountCreateDisallowPublicNetworkAccess() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          extendedLocation: { name: "losangeles001", type: "EdgeZone" },
          isHnsEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          publicNetworkAccess: "Disabled",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateDisallowPublicNetworkAccess().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.web.core.windows.net/",
              "dfs": "https://sto4445-microsoftrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-microsoftrouting.blob.core.windows.net/",
              "file": "https://sto4445-microsoftrouting.file.core.windows.net/",
              "queue": "https://sto4445-microsoftrouting.queue.core.windows.net/",
              "table": "https://sto4445-microsoftrouting.table.core.windows.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.web.core.windows.net/",
              "dfs": "https://sto4445-internetrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-internetrouting.blob.core.windows.net/",
              "file": "https://sto4445-internetrouting.file.core.windows.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true,
          "publicNetworkAccess": "Disabled"
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateEnablePublicNetworkAccess
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "publicNetworkAccess": "Enabled",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "publicNetworkAccess": "Enabled",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.ExtendedLocation;
      import com.azure.resourcemanager.storage.models.ExtendedLocationTypes;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.PublicNetworkAccess;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json
           */
          /**
           * Sample code: StorageAccountCreateEnablePublicNetworkAccess.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateEnablePublicNetworkAccess(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withExtendedLocation(
                              new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateEnablePublicNetworkAccess.json
       */
      async function storageAccountCreateEnablePublicNetworkAccess() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          extendedLocation: { name: "losangeles001", type: "EdgeZone" },
          isHnsEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          publicNetworkAccess: "Enabled",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateEnablePublicNetworkAccess().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.web.core.windows.net/",
              "dfs": "https://sto4445-microsoftrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-microsoftrouting.blob.core.windows.net/",
              "file": "https://sto4445-microsoftrouting.file.core.windows.net/",
              "queue": "https://sto4445-microsoftrouting.queue.core.windows.net/",
              "table": "https://sto4445-microsoftrouting.table.core.windows.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.web.core.windows.net/",
              "dfs": "https://sto4445-internetrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-internetrouting.blob.core.windows.net/",
              "file": "https://sto4445-internetrouting.file.core.windows.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true,
          "publicNetworkAccess": "Enabled"
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res131918/providers/Microsoft.Storage/storageAccounts/sto131918?api-version=2021-09-01
    body: >-
      {
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {}
          }
        },
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "keyvaultproperties": {
              "keyvaulturi": "https://myvault8569.vault.azure.net",
              "keyname": "wrappingKey",
              "keyversion": ""
            },
            "keySource": "Microsoft.Keyvault",
            "identity": {
              "userAssignedIdentity": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
              "federatedIdentityClientId": "f83c6b1b-4d34-47e4-bb34-9d83df58b540"
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res131918/providers/Microsoft.Storage/storageAccounts/sto131918?api-version=2021-09-01

      {
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {}
          }
        },
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "keyvaultproperties": {
              "keyvaulturi": "https://myvault8569.vault.azure.net",
              "keyname": "wrappingKey",
              "keyversion": ""
            },
            "keySource": "Microsoft.Keyvault",
            "identity": {
              "userAssignedIdentity": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
              "federatedIdentityClientId": "f83c6b1b-4d34-47e4-bb34-9d83df58b540"
            }
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionIdentity;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.Identity;
      import com.azure.resourcemanager.storage.models.IdentityType;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.KeyVaultProperties;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import com.azure.resourcemanager.storage.models.UserAssignedIdentity;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json
           */
          /**
           * Sample code: StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res131918",
                      "sto131918",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_LRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withIdentity(
                              new Identity()
                                  .withType(IdentityType.USER_ASSIGNED)
                                  .withUserAssignedIdentities(
                                      mapOf(
                                          "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
                                          new UserAssignedIdentity())))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_KEYVAULT)
                                  .withKeyVaultProperties(
                                      new KeyVaultProperties()
                                          .withKeyName("wrappingKey")
                                          .withKeyVersion("")
                                          .withKeyVaultUri("https://myvault8569.vault.azure.net"))
                                  .withEncryptionIdentity(
                                      new EncryptionIdentity()
                                          .withEncryptionUserAssignedIdentity(
                                              "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}")
                                          .withEncryptionFederatedIdentityClientId("f83c6b1b-4d34-47e4-bb34-9d83df58b540"))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId.json
       */
      async function storageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res131918";
        const accountName = "sto131918";
        const parameters = {
          encryption: {
            encryptionIdentity: {
              encryptionFederatedIdentityClientId: "f83c6b1b-4d34-47e4-bb34-9d83df58b540",
              encryptionUserAssignedIdentity:
                "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
            },
            keySource: "Microsoft.Keyvault",
            keyVaultProperties: {
              keyName: "wrappingKey",
              keyVaultUri: "https://myvault8569.vault.azure.net",
              keyVersion: "",
            },
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          identity: {
            type: "UserAssigned",
            userAssignedIdentities: {
              "/subscriptions/{subscriptionId}/resourceGroups/res9101/providers/MicrosoftManagedIdentity/userAssignedIdentities/{managedIdentityName}":
                {},
            },
          },
          kind: "Storage",
          location: "eastus",
          sku: { name: "Standard_LRS" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateUserAssignedIdentityWithFederatedIdentityClientId().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "identity": {
          "userAssignedIdentities": {
            "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}": {
              "principalId": "8d823284-1060-42a5-9ec4-ed3d831e24d7",
              "clientId": "fbaa6278-1ecc-415c-819f-6e2058d3acb5"
            }
          },
          "type": "UserAssigned"
        },
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "kind": "StorageV2",
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "name": "sto4445",
        "type": "Microsoft.Storage/storageAccounts",
        "location": "eastus",
        "tags": {},
        "properties": {
          "privateEndpointConnections": [],
          "networkAcls": {
            "bypass": "AzureServices",
            "virtualNetworkRules": [],
            "ipRules": [],
            "defaultAction": "Allow"
          },
          "supportsHttpsTrafficOnly": true,
          "encryption": {
            "identity": {
              "userAssignedIdentity": "/subscriptions/{subscription-id}/resourcegroups/res9101/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{managed-identity-name}",
              "federatedIdentityClientId": "f83c6b1b-4d34-47e4-bb34-9d83df58b540"
            },
            "keyvaultproperties": {
              "keyvaulturi": "https://myvault8569.vault.azure.net",
              "keyname": "wrappingKey",
              "keyversion": "",
              "currentVersionedKeyIdentifier": "https://myvault8569.vault.azure.net/keys/wrappingKey/0682afdd9c104f4285df20107e956cad",
              "lastKeyRotationTimestamp": "2019-12-13T20:36:23.7023290Z"
            },
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2020-12-15T00:43:14.1739587Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2020-12-15T00:43:14.1739587Z"
              }
            },
            "keySource": "Microsoft.Keyvault"
          },
          "accessTier": "Hot",
          "provisioningState": "Succeeded",
          "creationTime": "2020-12-15T00:43:14.0839093Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/"
          },
          "primaryLocation": "eastus",
          "statusOfPrimary": "available"
        }
      }
  - statusCode: "202"
- name: StorageAccountCreateAllowedCopyScopeToPrivateLink
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "allowedCopyScope": "PrivateLink",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "allowedCopyScope": "PrivateLink",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.AllowedCopyScope;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json
           */
          /**
           * Sample code: StorageAccountCreateAllowedCopyScopeToPrivateLink.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateAllowedCopyScopeToPrivateLink(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withAllowedCopyScope(AllowedCopyScope.PRIVATE_LINK)
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateAllowedCopyScopeToPrivateLink.json
       */
      async function storageAccountCreateAllowedCopyScopeToPrivateLink() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          allowedCopyScope: "PrivateLink",
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          isHnsEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateAllowedCopyScopeToPrivateLink().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.web.core.windows.net/",
              "dfs": "https://sto4445-microsoftrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-microsoftrouting.blob.core.windows.net/",
              "file": "https://sto4445-microsoftrouting.file.core.windows.net/",
              "queue": "https://sto4445-microsoftrouting.queue.core.windows.net/",
              "table": "https://sto4445-microsoftrouting.table.core.windows.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.web.core.windows.net/",
              "dfs": "https://sto4445-internetrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-internetrouting.blob.core.windows.net/",
              "file": "https://sto4445-internetrouting.file.core.windows.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true,
          "allowedCopyScope": "PrivateLink"
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateAllowedCopyScopeToAAD
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "allowedCopyScope": "AAD",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "allowedCopyScope": "AAD",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.AllowedCopyScope;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json
           */
          /**
           * Sample code: StorageAccountCreateAllowedCopyScopeToAAD.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateAllowedCopyScopeToAAD(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withAllowedCopyScope(AllowedCopyScope.AAD)
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateAllowedCopyScopeToAAD.json
       */
      async function storageAccountCreateAllowedCopyScopeToAad() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          allowedCopyScope: "AAD",
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          isHnsEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateAllowedCopyScopeToAad().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "isHnsEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.web.core.windows.net/",
              "dfs": "https://sto4445-microsoftrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-microsoftrouting.blob.core.windows.net/",
              "file": "https://sto4445-microsoftrouting.file.core.windows.net/",
              "queue": "https://sto4445-microsoftrouting.queue.core.windows.net/",
              "table": "https://sto4445-microsoftrouting.table.core.windows.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.web.core.windows.net/",
              "dfs": "https://sto4445-internetrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-internetrouting.blob.core.windows.net/",
              "file": "https://sto4445-internetrouting.file.core.windows.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true,
          "allowedCopyScope": "AAD"
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreatePremiumBlockBlobStorage
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Premium_LRS"
        },
        "kind": "BlockBlobStorage",
        "location": "eastus",
        "properties": {
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Premium_LRS"
        },
        "kind": "BlockBlobStorage",
        "location": "eastus",
        "properties": {
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreatePremiumBlockBlobStorage.json
           */
          /**
           * Sample code: StorageAccountCreatePremiumBlockBlobStorage.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreatePremiumBlockBlobStorage(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.PREMIUM_LRS))
                          .withKind(Kind.BLOCK_BLOB_STORAGE)
                          .withLocation("eastus")
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreatePremiumBlockBlobStorage.json
       */
      async function storageAccountCreatePremiumBlockBlobStorage() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowSharedKeyAccess: true,
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          kind: "BlockBlobStorage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          sku: { name: "Premium_LRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreatePremiumBlockBlobStorage().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "properties": {
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "blob": "https://sto4445.blob.core.windows.net/",
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/"
          },
          "primaryLocation": "eastus2euap",
          "accessTier": "Premium",
          "provisioningState": "Succeeded",
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true
        },
        "sku": {
          "name": "Premium_LRS",
          "tier": "Premium"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateDnsEndpointTypeToAzureDnsZone
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "dnsEndpointType": "AzureDnsZone",
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "defaultToOAuthAuthentication": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "dnsEndpointType": "AzureDnsZone",
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "defaultToOAuthAuthentication": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.DnsEndpointType;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.ExtendedLocation;
      import com.azure.resourcemanager.storage.models.ExtendedLocationTypes;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDnsEndpointTypeToAzureDnsZone.json
           */
          /**
           * Sample code: StorageAccountCreateDnsEndpointTypeToAzureDnsZone.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateDnsEndpointTypeToAzureDnsZone(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withExtendedLocation(
                              new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsSftpEnabled(true)
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true)
                          .withDefaultToOAuthAuthentication(false)
                          .withDnsEndpointType(DnsEndpointType.AZURE_DNS_ZONE),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDnsEndpointTypeToAzureDnsZone.json
       */
      async function storageAccountCreateDnsEndpointTypeToAzureDnsZone() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          defaultToOAuthAuthentication: false,
          dnsEndpointType: "AzureDnsZone",
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          extendedLocation: { name: "losangeles001", type: "EdgeZone" },
          isHnsEnabled: true,
          isSftpEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateDnsEndpointTypeToAzureDnsZone().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "dnsEndpointType": "AzureDnsZone",
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.z24.web.storage.azure.net/",
            "dfs": "https://sto4445.z24.dfs.storage.azure.net/",
            "blob": "https://sto4445.z24.blob.storage.azure.net/",
            "file": "https://sto4445.z24.file.storage.azure.net/",
            "queue": "https://sto4445.z24.queue.storage.azure.net/",
            "table": "https://sto4445.z24.table.storage.azure.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.z24.web.storage.azure.net/",
              "dfs": "https://sto4445-microsoftrouting.z24.dfs.storage.azure.net/",
              "blob": "https://sto4445-microsoftrouting.z24.blob.storage.azure.net/",
              "file": "https://sto4445-microsoftrouting.z24.file.storage.azure.net/",
              "queue": "https://sto4445-microsoftrouting.z24.queue.storage.azure.net/",
              "table": "https://sto4445-microsoftrouting.z24.table.storage.azure.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.z24.web.storage.azure.net/",
              "dfs": "https://sto4445-internetrouting.z24.dfs.storage.azure.net/",
              "blob": "https://sto4445-internetrouting.z24.blob.storage.azure.net/",
              "file": "https://sto4445-internetrouting.z24.file.storage.azure.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
- name: StorageAccountCreateDnsEndpointTypeToStandard
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01
    body: >-
      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "dnsEndpointType": "Standard",
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "defaultToOAuthAuthentication": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445?api-version=2021-09-01

      {
        "sku": {
          "name": "Standard_GRS"
        },
        "kind": "Storage",
        "location": "eastus",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "dnsEndpointType": "Standard",
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "defaultToOAuthAuthentication": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true
              },
              "blob": {
                "keyType": "Account",
                "enabled": true
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          }
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.DnsEndpointType;
      import com.azure.resourcemanager.storage.models.Encryption;
      import com.azure.resourcemanager.storage.models.EncryptionService;
      import com.azure.resourcemanager.storage.models.EncryptionServices;
      import com.azure.resourcemanager.storage.models.ExpirationAction;
      import com.azure.resourcemanager.storage.models.ExtendedLocation;
      import com.azure.resourcemanager.storage.models.ExtendedLocationTypes;
      import com.azure.resourcemanager.storage.models.KeyPolicy;
      import com.azure.resourcemanager.storage.models.KeySource;
      import com.azure.resourcemanager.storage.models.KeyType;
      import com.azure.resourcemanager.storage.models.Kind;
      import com.azure.resourcemanager.storage.models.MinimumTlsVersion;
      import com.azure.resourcemanager.storage.models.RoutingChoice;
      import com.azure.resourcemanager.storage.models.RoutingPreference;
      import com.azure.resourcemanager.storage.models.SasPolicy;
      import com.azure.resourcemanager.storage.models.Sku;
      import com.azure.resourcemanager.storage.models.SkuName;
      import com.azure.resourcemanager.storage.models.StorageAccountCreateParameters;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for StorageAccounts Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDnsEndpointTypeToStandard.json
           */
          /**
           * Sample code: StorageAccountCreateDnsEndpointTypeToStandard.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountCreateDnsEndpointTypeToStandard(
              com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .create(
                      "res9101",
                      "sto4445",
                      new StorageAccountCreateParameters()
                          .withSku(new Sku().withName(SkuName.STANDARD_GRS))
                          .withKind(Kind.STORAGE)
                          .withLocation("eastus")
                          .withExtendedLocation(
                              new ExtendedLocation().withName("losangeles001").withType(ExtendedLocationTypes.EDGE_ZONE))
                          .withTags(mapOf("key1", "value1", "key2", "value2"))
                          .withSasPolicy(
                              new SasPolicy()
                                  .withSasExpirationPeriod("1.15:59:59")
                                  .withExpirationAction(ExpirationAction.LOG))
                          .withKeyPolicy(new KeyPolicy().withKeyExpirationPeriodInDays(20))
                          .withEncryption(
                              new Encryption()
                                  .withServices(
                                      new EncryptionServices()
                                          .withBlob(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT))
                                          .withFile(new EncryptionService().withEnabled(true).withKeyType(KeyType.ACCOUNT)))
                                  .withKeySource(KeySource.MICROSOFT_STORAGE)
                                  .withRequireInfrastructureEncryption(false))
                          .withIsSftpEnabled(true)
                          .withIsHnsEnabled(true)
                          .withRoutingPreference(
                              new RoutingPreference()
                                  .withRoutingChoice(RoutingChoice.MICROSOFT_ROUTING)
                                  .withPublishMicrosoftEndpoints(true)
                                  .withPublishInternetEndpoints(true))
                          .withAllowBlobPublicAccess(false)
                          .withMinimumTlsVersion(MinimumTlsVersion.TLS1_2)
                          .withAllowSharedKeyAccess(true)
                          .withDefaultToOAuthAuthentication(false)
                          .withDnsEndpointType(DnsEndpointType.STANDARD),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.17.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       *
       * @summary Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountCreateDnsEndpointTypeToStandard.json
       */
      async function storageAccountCreateDnsEndpointTypeToStandard() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res9101";
        const accountName = "sto4445";
        const parameters = {
          allowBlobPublicAccess: false,
          allowSharedKeyAccess: true,
          defaultToOAuthAuthentication: false,
          dnsEndpointType: "Standard",
          encryption: {
            keySource: "Microsoft.Storage",
            requireInfrastructureEncryption: false,
            services: {
              blob: { enabled: true, keyType: "Account" },
              file: { enabled: true, keyType: "Account" },
            },
          },
          extendedLocation: { name: "losangeles001", type: "EdgeZone" },
          isHnsEnabled: true,
          isSftpEnabled: true,
          keyPolicy: { keyExpirationPeriodInDays: 20 },
          kind: "Storage",
          location: "eastus",
          minimumTlsVersion: "TLS1_2",
          routingPreference: {
            publishInternetEndpoints: true,
            publishMicrosoftEndpoints: true,
            routingChoice: "MicrosoftRouting",
          },
          sasPolicy: { expirationAction: "Log", sasExpirationPeriod: "1.15:59:59" },
          sku: { name: "Standard_GRS" },
          tags: { key1: "value1", key2: "value2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.beginCreateAndWait(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountCreateDnsEndpointTypeToStandard().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res9101/providers/Microsoft.Storage/storageAccounts/sto4445",
        "kind": "Storage",
        "location": "eastus",
        "name": "sto4445",
        "extendedLocation": {
          "type": "EdgeZone",
          "name": "losangeles001"
        },
        "properties": {
          "keyPolicy": {
            "keyExpirationPeriodInDays": 20
          },
          "sasPolicy": {
            "sasExpirationPeriod": "1.15:59:59",
            "expirationAction": "Log"
          },
          "keyCreationTime": {
            "key1": "2021-03-18T04:42:22.4322836Z",
            "key2": "2021-03-18T04:42:22.4322836Z"
          },
          "dnsEndpointType": "Standard",
          "isHnsEnabled": true,
          "isSftpEnabled": true,
          "allowBlobPublicAccess": false,
          "minimumTlsVersion": "TLS1_2",
          "allowSharedKeyAccess": true,
          "creationTime": "2017-05-24T13:25:33.4863236Z",
          "primaryEndpoints": {
            "web": "https://sto4445.web.core.windows.net/",
            "dfs": "https://sto4445.dfs.core.windows.net/",
            "blob": "https://sto4445.blob.core.windows.net/",
            "file": "https://sto4445.file.core.windows.net/",
            "queue": "https://sto4445.queue.core.windows.net/",
            "table": "https://sto4445.table.core.windows.net/",
            "microsoftEndpoints": {
              "web": "https://sto4445-microsoftrouting.web.core.windows.net/",
              "dfs": "https://sto4445-microsoftrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-microsoftrouting.blob.core.windows.net/",
              "file": "https://sto4445-microsoftrouting.file.core.windows.net/",
              "queue": "https://sto4445-microsoftrouting.queue.core.windows.net/",
              "table": "https://sto4445-microsoftrouting.table.core.windows.net/"
            },
            "internetEndpoints": {
              "web": "https://sto4445-internetrouting.web.core.windows.net/",
              "dfs": "https://sto4445-internetrouting.dfs.core.windows.net/",
              "blob": "https://sto4445-internetrouting.blob.core.windows.net/",
              "file": "https://sto4445-internetrouting.file.core.windows.net/"
            }
          },
          "primaryLocation": "eastus2euap",
          "provisioningState": "Succeeded",
          "routingPreference": {
            "routingChoice": "MicrosoftRouting",
            "publishMicrosoftEndpoints": true,
            "publishInternetEndpoints": true
          },
          "encryption": {
            "services": {
              "file": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              },
              "blob": {
                "keyType": "Account",
                "enabled": true,
                "lastEnabledTime": "2019-12-11T20:49:31.7036140Z"
              }
            },
            "requireInfrastructureEncryption": false,
            "keySource": "Microsoft.Storage"
          },
          "secondaryLocation": "centraluseuap",
          "statusOfPrimary": "available",
          "statusOfSecondary": "available",
          "supportsHttpsTrafficOnly": true
        },
        "sku": {
          "name": "Standard_GRS",
          "tier": "Standard"
        },
        "tags": {
          "key1": "value1",
          "key2": "value2"
        },
        "type": "Microsoft.Storage/storageAccounts"
      }
  - statusCode: "202"
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with diff
errorCodes: []
