### YamlMime:RESTOperation
uid: management.azure.com.storagerp.storageaccounts.listaccountsas
name: List Account SAS
service: Storage Resource Provider
groupName: Storage Accounts
apiVersion: 2021-09-01
summary: List SAS credentials of a storage account.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas?api-version=2021-09-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the user's subscription. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: accountName
  in: path
  isRequired: true
  description: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK -- returned the account SAS created for the storage account requested.
  types:
  - uid: ListAccountSasResponse
requestBody:
- name: default
  parameters:
  - name: signedServices
    in: body
    isRequired: true
    description: 'The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).'
    types:
    - uid: Services
  - name: signedResourceTypes
    in: body
    isRequired: true
    description: 'The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.'
    types:
    - uid: SignedResourceTypes
  - name: signedPermission
    in: body
    isRequired: true
    description: 'The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).'
    types:
    - uid: Permissions
  - name: signedIp
    in: body
    description: An IP address or a range of IP addresses from which to accept requests.
    types:
    - uid: string
  - name: signedProtocol
    in: body
    description: The protocol permitted for a request made with the account SAS.
    types:
    - uid: HttpProtocol
  - name: signedStart
    in: body
    description: The time at which the SAS becomes valid.
    types:
    - uid: string
  - name: signedExpiry
    in: body
    isRequired: true
    description: The time at which the shared access signature becomes invalid.
    types:
    - uid: string
  - name: keyToSign
    in: body
    description: The key to sign the account SAS token with.
    types:
    - uid: string
requestHeader: []
definitions:
- name: ListAccountSasResponse
  description: The List SAS credentials operation response.
  kind: object
  properties:
  - name: accountSasToken
    isReadyOnly: true
    description: List SAS credentials of storage account.
    types:
    - uid: string
- name: AccountSasParameters
  description: The parameters to list SAS credentials of a storage account.
  kind: object
  properties:
  - name: signedServices
    description: 'The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).'
    types:
    - uid: Services
  - name: signedResourceTypes
    description: 'The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.'
    types:
    - uid: SignedResourceTypes
  - name: signedPermission
    description: 'The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).'
    types:
    - uid: Permissions
  - name: signedIp
    description: An IP address or a range of IP addresses from which to accept requests.
    types:
    - uid: string
  - name: signedProtocol
    description: The protocol permitted for a request made with the account SAS.
    types:
    - uid: HttpProtocol
  - name: signedStart
    description: The time at which the SAS becomes valid.
    types:
    - uid: string
  - name: signedExpiry
    description: The time at which the shared access signature becomes invalid.
    types:
    - uid: string
  - name: keyToSign
    description: The key to sign the account SAS token with.
    types:
    - uid: string
- name: Services
  description: 'The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).'
  kind: enum
  properties:
  - name: b
    types:
    - uid: string
  - name: q
    types:
    - uid: string
  - name: t
    types:
    - uid: string
  - name: f
    types:
    - uid: string
- name: SignedResourceTypes
  description: 'The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.'
  kind: enum
  properties:
  - name: s
    types:
    - uid: string
  - name: c
    types:
    - uid: string
  - name: o
    types:
    - uid: string
- name: Permissions
  description: 'The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).'
  kind: enum
  properties:
  - name: r
    types:
    - uid: string
  - name: d
    types:
    - uid: string
  - name: w
    types:
    - uid: string
  - name: l
    types:
    - uid: string
  - name: a
    types:
    - uid: string
  - name: c
    types:
    - uid: string
  - name: u
    types:
    - uid: string
  - name: p
    types:
    - uid: string
- name: HttpProtocol
  description: The protocol permitted for a request made with the account SAS.
  kind: enum
  properties:
  - name: https,http
    types:
    - uid: string
  - name: https
    types:
    - uid: string
examples:
- name: StorageAccountListAccountSAS
  request:
    uri: POST https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res7985/providers/Microsoft.Storage/storageAccounts/sto8588/ListAccountSas?api-version=2021-09-01
    body: >-
      {
        "signedServices": "b",
        "signedResourceTypes": "s",
        "signedPermission": "r",
        "signedProtocol": "https,http",
        "signedStart": "2017-05-24T10:42:03.1567373Z",
        "signedExpiry": "2017-05-24T11:42:03.1567373Z",
        "keyToSign": "key1"
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res7985/providers/Microsoft.Storage/storageAccounts/sto8588/ListAccountSas?api-version=2021-09-01

      {
        "signedServices": "b",
        "signedResourceTypes": "s",
        "signedPermission": "r",
        "signedProtocol": "https,http",
        "signedStart": "2017-05-24T10:42:03.1567373Z",
        "signedExpiry": "2017-05-24T11:42:03.1567373Z",
        "keyToSign": "key1"
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.models.AccountSasParameters;
      import com.azure.resourcemanager.storage.models.HttpProtocol;
      import com.azure.resourcemanager.storage.models.Permissions;
      import com.azure.resourcemanager.storage.models.Services;
      import com.azure.resourcemanager.storage.models.SignedResourceTypes;
      import java.time.OffsetDateTime;

      /** Samples for StorageAccounts ListAccountSas. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountListAccountSAS.json
           */
          /**
           * Sample code: StorageAccountListAccountSAS.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void storageAccountListAccountSAS(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getStorageAccounts()
                  .listAccountSasWithResponse(
                      "res7985",
                      "sto8588",
                      new AccountSasParameters()
                          .withServices(Services.B)
                          .withResourceTypes(SignedResourceTypes.S)
                          .withPermissions(Permissions.R)
                          .withProtocols(HttpProtocol.HTTPS_HTTP)
                          .withSharedAccessStartTime(OffsetDateTime.parse("2017-05-24T10:42:03.1567373Z"))
                          .withSharedAccessExpiryTime(OffsetDateTime.parse("2017-05-24T11:42:03.1567373Z"))
                          .withKeyToSign("key1"),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstorage_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountListAccountSAS.json
      func ExampleAccountsClient_ListAccountSAS() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstorage.NewAccountsClient("{subscription-id}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.ListAccountSAS(ctx,
      		"res7985",
      		"sto8588",
      		armstorage.AccountSasParameters{
      			KeyToSign:              to.Ptr("key1"),
      			SharedAccessExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T11:42:03.1567373Z"); return t }()),
      			Permissions:            to.Ptr(armstorage.PermissionsR),
      			Protocols:              to.Ptr(armstorage.HTTPProtocolHTTPSHTTP),
      			ResourceTypes:          to.Ptr(armstorage.SignedResourceTypesS),
      			Services:               to.Ptr(armstorage.ServicesB),
      			SharedAccessStartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T10:42:03.1567373Z"); return t }()),
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstorage%2Farmstorage%2Fv1.0.0/sdk/resourcemanager/storage/armstorage/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to List SAS credentials of a storage account.
       *
       * @summary List SAS credentials of a storage account.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/StorageAccountListAccountSAS.json
       */
      async function storageAccountListAccountSas() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res7985";
        const accountName = "sto8588";
        const parameters = {
          keyToSign: "key1",
          sharedAccessExpiryTime: new Date("2017-05-24T11:42:03.1567373Z"),
          permissions: "r",
          protocols: "https,http",
          resourceTypes: "s",
          services: "b",
          sharedAccessStartTime: new Date("2017-05-24T10:42:03.1567373Z"),
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.storageAccounts.listAccountSAS(
          resourceGroupName,
          accountName,
          parameters
        );
        console.log(result);
      }

      storageAccountListAccountSas().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "accountSasToken": "sv=2015-04-05&ss=b&srt=s&sp=r&st=2017-05-24T10%3A42%3A03Z&se=2017-05-24T11%3A42%3A03Z&spr=https,http&sig=Z0I%2BEpM%2BPPlTC8ApfUf%2BcffO2aahMgZim3U0iArqsS0%3D"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Storage Resource Provider service - List SAS credentials of a storage account.
errorCodes: []
