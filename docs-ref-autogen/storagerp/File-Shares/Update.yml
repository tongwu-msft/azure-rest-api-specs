### YamlMime:RESTOperation
uid: management.azure.com.storagerp.fileshares.update
name: Update
service: Storage Resource Provider
groupName: File Shares
apiVersion: 2021-09-01
summary: 'Updates share properties as specified in request body. Properties not mentioned in the request will not be changed. Update fails if the specified share does not already exist. '
consumes:
- application/json
produces:
- application/json
paths:
- content: PATCH https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}?api-version=2021-09-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group within the user's subscription. The name is case insensitive.
  types:
  - uid: string
  pattern: ^[-\w\._\(\)]+$
- name: accountName
  in: path
  isRequired: true
  description: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
  types:
  - uid: string
- name: shareName
  in: path
  isRequired: true
  description: The name of the file share within the specified storage account. File share names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK -- Update Share operation completed successfully.
  types:
  - uid: FileShare
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: properties.metadata
    in: body
    description: A name-value pair to associate with the share as metadata.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: properties.shareQuota
    in: body
    description: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
    types:
    - uid: integer
  - name: properties.enabledProtocols
    in: body
    description: The authentication protocol that is used for the file share. Can only be specified when creating a share.
    types:
    - uid: EnabledProtocols
  - name: properties.rootSquash
    in: body
    description: The property is for NFS share only. The default is NoRootSquash.
    types:
    - uid: RootSquashType
  - name: properties.accessTier
    in: body
    description: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
    types:
    - uid: ShareAccessTier
  - name: properties.signedIdentifiers
    in: body
    description: List of stored access policies specified on the share.
    types:
    - uid: SignedIdentifier
      isArray: true
requestHeader: []
definitions:
- name: SignedIdentifier
  kind: object
  properties:
  - name: id
    description: An unique identifier of the stored access policy.
    types:
    - uid: string
  - name: accessPolicy
    description: Access policy
    types:
    - uid: AccessPolicy
- name: FileShare
  description: Properties of the file share, including Id, resource name, resource type, Etag.
  kind: object
  properties:
  - name: properties.lastModifiedTime
    isReadyOnly: true
    description: Returns the date and time the share was last modified.
    types:
    - uid: string
  - name: properties.metadata
    description: A name-value pair to associate with the share as metadata.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: properties.shareQuota
    description: The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
    types:
    - uid: integer
  - name: properties.enabledProtocols
    description: The authentication protocol that is used for the file share. Can only be specified when creating a share.
    types:
    - uid: EnabledProtocols
  - name: properties.rootSquash
    description: The property is for NFS share only. The default is NoRootSquash.
    types:
    - uid: RootSquashType
  - name: properties.version
    isReadyOnly: true
    description: The version of the share.
    types:
    - uid: string
  - name: properties.deleted
    isReadyOnly: true
    description: Indicates whether the share was deleted.
    types:
    - uid: boolean
  - name: properties.deletedTime
    isReadyOnly: true
    description: The deleted time if the share was deleted.
    types:
    - uid: string
  - name: properties.remainingRetentionDays
    isReadyOnly: true
    description: Remaining retention days for share that was soft deleted.
    types:
    - uid: integer
  - name: properties.accessTier
    description: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
    types:
    - uid: ShareAccessTier
  - name: properties.accessTierChangeTime
    isReadyOnly: true
    description: Indicates the last modification time for share access tier.
    types:
    - uid: string
  - name: properties.accessTierStatus
    isReadyOnly: true
    description: Indicates if there is a pending transition for access tier.
    types:
    - uid: string
  - name: properties.shareUsageBytes
    isReadyOnly: true
    description: The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
    types:
    - uid: integer
  - name: properties.leaseStatus
    isReadyOnly: true
    description: The lease status of the share.
    types:
    - uid: LeaseStatus
  - name: properties.leaseState
    isReadyOnly: true
    description: Lease state of the share.
    types:
    - uid: LeaseState
  - name: properties.leaseDuration
    isReadyOnly: true
    description: Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
    types:
    - uid: LeaseDuration
  - name: properties.signedIdentifiers
    description: List of stored access policies specified on the share.
    types:
    - uid: SignedIdentifier
      isArray: true
  - name: properties.snapshotTime
    isReadyOnly: true
    description: Creation time of share snapshot returned in the response of list shares with expand param "snapshots".
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: Resource Etag.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
- name: CloudError
  description: An error response from the Storage service.
  kind: object
  properties:
  - name: error
    description: An error response from the Storage service.
    types:
    - uid: CloudErrorBody
- name: AccessPolicy
  kind: object
  properties:
  - name: startTime
    description: Start time of the access policy
    types:
    - uid: string
  - name: expiryTime
    description: Expiry time of the access policy
    types:
    - uid: string
  - name: permission
    description: List of abbreviated permissions.
    types:
    - uid: string
- name: EnabledProtocols
  description: The authentication protocol that is used for the file share. Can only be specified when creating a share.
  kind: enum
  properties:
  - name: SMB
    types:
    - uid: string
  - name: NFS
    types:
    - uid: string
- name: RootSquashType
  description: The property is for NFS share only. The default is NoRootSquash.
  kind: enum
  properties:
  - name: NoRootSquash
    types:
    - uid: string
  - name: RootSquash
    types:
    - uid: string
  - name: AllSquash
    types:
    - uid: string
- name: ShareAccessTier
  description: Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
  kind: enum
  properties:
  - name: TransactionOptimized
    types:
    - uid: string
  - name: Hot
    types:
    - uid: string
  - name: Cool
    types:
    - uid: string
  - name: Premium
    types:
    - uid: string
- name: LeaseStatus
  description: The lease status of the share.
  kind: enum
  properties:
  - name: Locked
    types:
    - uid: string
  - name: Unlocked
    types:
    - uid: string
- name: LeaseState
  description: Lease state of the share.
  kind: enum
  properties:
  - name: Available
    types:
    - uid: string
  - name: Leased
    types:
    - uid: string
  - name: Expired
    types:
    - uid: string
  - name: Breaking
    types:
    - uid: string
  - name: Broken
    types:
    - uid: string
- name: LeaseDuration
  description: Specifies whether the lease on a share is of infinite or fixed duration, only when the share is leased.
  kind: enum
  properties:
  - name: Infinite
    types:
    - uid: string
  - name: Fixed
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response from the Storage service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
examples:
- name: UpdateShares
  request:
    uri: PATCH https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185?api-version=2021-09-01
    body: >-
      {
        "properties": {
          "metadata": {
            "type": "image"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PATCH https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185?api-version=2021-09-01

      {
        "properties": {
          "metadata": {
            "type": "image"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.fluent.models.FileShareInner;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for FileShares Update. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/FileSharesPatch.json
           */
          /**
           * Sample code: UpdateShares.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void updateShares(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getFileShares()
                  .updateWithResponse(
                      "res3376",
                      "sto328",
                      "share6185",
                      new FileShareInner().withMetadata(mapOf("type", "image")),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Updates share properties as specified in request body. Properties not mentioned in the request will not be changed. Update fails if the specified share does not already exist.
       *
       * @summary Updates share properties as specified in request body. Properties not mentioned in the request will not be changed. Update fails if the specified share does not already exist.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/FileSharesPatch.json
       */
      async function updateShares() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res3376";
        const accountName = "sto328";
        const shareName = "share6185";
        const fileShare = { metadata: { type: "image" } };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.fileShares.update(
          resourceGroupName,
          accountName,
          shareName,
          fileShare
        );
        console.log(result);
      }

      updateShares().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185",
        "name": "share6185",
        "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
        "properties": {
          "metadata": {
            "type": "image"
          }
        }
      }
- name: UpdateShareAcls
  request:
    uri: PATCH https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185?api-version=2021-09-01
    body: >-
      {
        "properties": {
          "signedIdentifiers": [
            {
              "id": "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI",
              "accessPolicy": {
                "startTime": "2021-04-01T08:49:37.0000000Z",
                "expiryTime": "2021-05-01T08:49:37.0000000Z",
                "permission": "rwd"
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PATCH https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185?api-version=2021-09-01

      {
        "properties": {
          "signedIdentifiers": [
            {
              "id": "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI",
              "accessPolicy": {
                "startTime": "2021-04-01T08:49:37.0000000Z",
                "expiryTime": "2021-05-01T08:49:37.0000000Z",
                "permission": "rwd"
              }
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.storage.fluent.models.FileShareInner;
      import com.azure.resourcemanager.storage.models.AccessPolicy;
      import com.azure.resourcemanager.storage.models.SignedIdentifier;
      import java.time.OffsetDateTime;
      import java.util.Arrays;
      import java.util.HashMap;
      import java.util.Map;

      /** Samples for FileShares Update. */
      public final class Main {
          /*
           * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/FileShareAclsPatch.json
           */
          /**
           * Sample code: UpdateShareAcls.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void updateShareAcls(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .storageAccounts()
                  .manager()
                  .serviceClient()
                  .getFileShares()
                  .updateWithResponse(
                      "res3376",
                      "sto328",
                      "share6185",
                      new FileShareInner()
                          .withSignedIdentifiers(
                              Arrays
                                  .asList(
                                      new SignedIdentifier()
                                          .withId("MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI")
                                          .withAccessPolicy(
                                              new AccessPolicy()
                                                  .withStartTime(OffsetDateTime.parse("2021-04-01T08:49:37.0000000Z"))
                                                  .withExpiryTime(OffsetDateTime.parse("2021-05-01T08:49:37.0000000Z"))
                                                  .withPermission("rwd")))),
                      Context.NONE);
          }

          @SuppressWarnings("unchecked")
          private static <T> Map<String, T> mapOf(Object... inputs) {
              Map<String, T> map = new HashMap<>();
              for (int i = 0; i < inputs.length; i += 2) {
                  String key = (String) inputs[i];
                  T value = (T) inputs[i + 1];
                  map.put(key, value);
              }
              return map;
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armstorage_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/FileShareAclsPatch.json
      func ExampleFileSharesClient_Update() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armstorage.NewFileSharesClient("{subscription-id}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.Update(ctx,
      		"res3376",
      		"sto328",
      		"share6185",
      		armstorage.FileShare{
      			FileShareProperties: &armstorage.FileShareProperties{
      				SignedIdentifiers: []*armstorage.SignedIdentifier{
      					{
      						AccessPolicy: &armstorage.AccessPolicy{
      							ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-01T08:49:37.0000000Z"); return t }()),
      							Permission: to.Ptr("rwd"),
      							StartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T08:49:37.0000000Z"); return t }()),
      						},
      						ID: to.Ptr("MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI"),
      					}},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fstorage%2Farmstorage%2Fv1.0.0/sdk/resourcemanager/storage/armstorage/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { StorageManagementClient } = require("@azure/arm-storage");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Updates share properties as specified in request body. Properties not mentioned in the request will not be changed. Update fails if the specified share does not already exist.
       *
       * @summary Updates share properties as specified in request body. Properties not mentioned in the request will not be changed. Update fails if the specified share does not already exist.
       * x-ms-original-file: specification/storage/resource-manager/Microsoft.Storage/stable/2021-09-01/examples/FileShareAclsPatch.json
       */
      async function updateShareAcls() {
        const subscriptionId = "{subscription-id}";
        const resourceGroupName = "res3376";
        const accountName = "sto328";
        const shareName = "share6185";
        const fileShare = {
          signedIdentifiers: [
            {
              accessPolicy: {
                expiryTime: new Date("2021-05-01T08:49:37.0000000Z"),
                permission: "rwd",
                startTime: new Date("2021-04-01T08:49:37.0000000Z"),
              },
              id: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI",
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new StorageManagementClient(credential, subscriptionId);
        const result = await client.fileShares.update(
          resourceGroupName,
          accountName,
          shareName,
          fileShare
        );
        console.log(result);
      }

      updateShareAcls().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-storage_17.2.1/sdk/storage/arm-storage/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/{subscription-id}/resourceGroups/res3376/providers/Microsoft.Storage/storageAccounts/sto328/fileServices/default/shares/share6185",
        "name": "share6185",
        "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
        "properties": {
          "signedIdentifiers": [
            {
              "id": "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI",
              "accessPolicy": {
                "startTime": "2021-04-01T08:49:37.0000000Z",
                "expiryTime": "2021-05-01T08:49:37.0000000Z",
                "permission": "rwd"
              }
            }
          ]
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Updates share properties as specified in request body. Properties not mentioned in the request will not be changed. Update fails if the specified share does not
errorCodes: []
