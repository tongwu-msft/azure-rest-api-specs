{
  "swagger": "2.0",
  "info": {
    "version": "2015-04-08",
    "title": "Cosmos DB",
    "description": "Azure Cosmos DB Database Service Resource Provider REST API"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "Impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/apis/mongodb/databases": {
      "get": {
        "operationId": "DatabaseAccounts_ListMongoDBDatabases",
        "x-ms-examples": {
          "CosmosDBMongoDBDatabaseList": {
            "parameters": {
              "api-version": "2015-04-08",
              "subscriptionId": "subid",
              "resourceGroupName": "rgName",
              "accountName": "ddb1"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "id": "databaseName",
                      "name": "databaseName",
                      "type": "Microsoft.DocumentDB/databaseAccounts/apis/databases",
                      "properties": {
                        "id": "databaseName"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Lists the MongoDB databases under an existing Azure Cosmos DB database account.",
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/accountNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The MongoDB database properties were retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/MongoDBDatabaseListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "x-internal-toc-name": "List Mongo DB Databases"
      }
    }
  },
  "definitions": {
    "DatabaseAccountsListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatabaseAccount"
          },
          "description": "List of database account and their properties."
        }
      },
      "description": "The List operation response, that contains the database accounts and their properties."
    },
    "SqlDatabaseListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/SqlDatabase"
          },
          "description": "List of SQL databases and their properties."
        }
      },
      "description": "The List operation response, that contains the SQL databases and their properties."
    },
    "SqlContainerListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/SqlContainer"
          },
          "description": "List of containers and their properties."
        }
      },
      "description": "The List operation response, that contains the containers and their properties."
    },
    "MongoDBDatabaseListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MongoDBDatabase"
          },
          "description": "List of MongoDB databases and their properties."
        }
      },
      "description": "The List operation response, that contains the MongoDB databases and their properties."
    },
    "MongoDBCollectionListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MongoDBCollection"
          },
          "description": "List of MongoDB collections and their properties."
        }
      },
      "description": "The List operation response, that contains the MongoDB collections and their properties."
    },
    "TableListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table"
          },
          "description": "List of Table and their properties."
        }
      },
      "description": "The List operation response, that contains the Table and their properties."
    },
    "CassandraKeyspaceListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/CassandraKeyspace"
          },
          "description": "List of Cassandra keyspaces and their properties."
        }
      },
      "description": "The List operation response, that contains the Cassandra keyspaces and their properties."
    },
    "CassandraTableListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/CassandraTable"
          },
          "description": "List of Cassandra tables and their properties."
        }
      },
      "description": "The List operation response, that contains the Cassandra tables and their properties."
    },
    "GremlinDatabaseListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/GremlinDatabase"
          },
          "description": "List of Gremlin databases and their properties."
        }
      },
      "description": "The List operation response, that contains the Gremlin databases and their properties."
    },
    "GremlinGraphListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/GremlinGraph"
          },
          "description": "List of graphs and their properties."
        }
      },
      "description": "The List operation response, that contains the graphs and their properties."
    },
    "ErrorResponse": {
      "properties": {
        "code": {
          "description": "Error code.",
          "type": "string"
        },
        "message": {
          "description": "Error message indicating why the operation failed.",
          "type": "string"
        }
      },
      "description": "Error Response."
    },
    "FailoverPolicies": {
      "properties": {
        "failoverPolicies": {
          "type": "array",
          "description": "List of failover policies.",
          "items": {
            "$ref": "#/definitions/FailoverPolicy"
          }
        }
      },
      "required": [
        "failoverPolicies"
      ],
      "description": "The list of new failover policies for the failover priority change."
    },
    "FailoverPolicy": {
      "type": "object",
      "description": "The failover policy for a given region of a database account.",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;."
        },
        "locationName": {
          "type": "string",
          "description": "The name of the region in which the database account exists."
        },
        "failoverPriority": {
          "type": "integer",
          "minimum": 0,
          "format": "int32",
          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists."
        }
      }
    },
    "RegionForOnlineOffline": {
      "properties": {
        "region": {
          "type": "string",
          "description": "Cosmos DB region, with spaces between words and each word capitalized."
        }
      },
      "required": [
        "region"
      ],
      "description": "Cosmos DB region to online or offline."
    },
    "Location": {
      "description": "A region in which the Azure Cosmos DB database account is deployed.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;."
        },
        "locationName": {
          "type": "string",
          "description": "The name of the region."
        },
        "documentEndpoint": {
          "type": "string",
          "readOnly": true,
          "description": "The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/"
        },
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState"
        },
        "failoverPriority": {
          "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.",
          "format": "int32",
          "type": "integer",
          "minimum": 0
        },
        "isZoneRedundant": {
          "type": "boolean",
          "description": "Flag to indicate whether or not this region is an AvailabilityZone region"
        }
      }
    },
    "Resource": {
      "type": "object",
      "description": "The core properties of ARM resources.",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "The unique resource identifier of the database account."
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the database account."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of Azure resource."
        },
        "location": {
          "type": "string",
          "description": "The location of the resource group to which the resource belongs."
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        }
      },
      "x-ms-azure-resource": true
    },
    "DatabaseAccount": {
      "description": "An Azure Cosmos DB database account.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Indicates the type of database account. This can only be set at database account creation.",
          "type": "string",
          "default": "GlobalDocumentDB",
          "enum": [
            "GlobalDocumentDB",
            "MongoDB",
            "Parse"
          ],
          "x-ms-enum": {
            "name": "DatabaseAccountKind",
            "modelAsString": true
          }
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/DatabaseAccountProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ExtendedResourceProperties": {
      "description": "The system generated resource properties associated with SQL databases and SQL containers.",
      "type": "object",
      "properties": {
        "_rid": {
          "type": "string",
          "description": "A system generated property. A unique identifier."
        },
        "_ts": {
          "description": "A system generated property that denotes the last updated timestamp of the resource."
        },
        "_etag": {
          "type": "string",
          "description": "A system generated property representing the resource etag required for optimistic concurrency control."
        }
      }
    },
    "Throughput": {
      "description": "An Azure Cosmos DB resource throughput.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB resource throughput",
          "$ref": "#/definitions/ThroughputProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ThroughputProperties": {
      "description": "The properties of an Azure Cosmos DB resource throughput",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ThroughputResource"
        }
      ]
    },
    "SqlDatabase": {
      "description": "An Azure Cosmos DB SQL database.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB SQL database",
          "$ref": "#/definitions/SqlDatabaseProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "SqlDatabaseProperties": {
      "description": "The properties of an Azure Cosmos DB SQL database",
      "type": "object",
      "properties": {
        "_colls": {
          "type": "string",
          "description": "A system generated property that specified the addressable path of the collections resource."
        },
        "_users": {
          "type": "string",
          "description": "A system generated property that specifies the addressable path of the users resource."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/SqlDatabaseResource"
        },
        {
          "$ref": "#/definitions/ExtendedResourceProperties"
        }
      ]
    },
    "SqlContainer": {
      "description": "An Azure Cosmos DB container.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB container",
          "$ref": "#/definitions/SqlContainerProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "SqlContainerProperties": {
      "description": "The properties of an Azure Cosmos DB container",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SqlContainerResource"
        },
        {
          "$ref": "#/definitions/ExtendedResourceProperties"
        }
      ]
    },
    "MongoDBDatabase": {
      "description": "An Azure Cosmos DB MongoDB database.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB MongoDB database",
          "$ref": "#/definitions/MongoDBDatabaseProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "MongoDBDatabaseProperties": {
      "description": "The properties of an Azure Cosmos DB MongoDB database",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MongoDBDatabaseResource"
        }
      ]
    },
    "MongoDBCollection": {
      "description": "An Azure Cosmos DB MongoDB collection.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB MongoDB collection",
          "$ref": "#/definitions/MongoDBCollectionProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "MongoDBCollectionProperties": {
      "description": "The properties of an Azure Cosmos DB MongoDB collection",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/MongoDBCollectionResource"
        }
      ]
    },
    "Table": {
      "description": "An Azure Cosmos DB Table.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB Table",
          "$ref": "#/definitions/TableProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "TableProperties": {
      "description": "The properties of an Azure Cosmos Table",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TableResource"
        }
      ]
    },
    "CassandraKeyspace": {
      "description": "An Azure Cosmos DB Cassandra keyspace.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
          "$ref": "#/definitions/CassandraKeyspaceProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "CassandraKeyspaceProperties": {
      "description": "The properties of an Azure Cosmos DB Cassandra keyspace",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CassandraKeyspaceResource"
        }
      ]
    },
    "CassandraTable": {
      "description": "An Azure Cosmos DB Cassandra table.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB Cassandra table",
          "$ref": "#/definitions/CassandraTableProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "CassandraTableProperties": {
      "description": "The properties of an Azure Cosmos DB Cassandra table",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CassandraTableResource"
        }
      ]
    },
    "GremlinDatabase": {
      "description": "An Azure Cosmos DB Gremlin database.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB SQL database",
          "$ref": "#/definitions/GremlinDatabaseProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "GremlinDatabaseProperties": {
      "description": "The properties of an Azure Cosmos DB SQL database",
      "type": "object",
      "properties": {
        "_rid": {
          "type": "string",
          "description": "A system generated property. A unique identifier."
        },
        "_ts": {
          "description": "A system generated property that denotes the last updated timestamp of the resource."
        },
        "_etag": {
          "type": "string",
          "description": "A system generated property representing the resource etag required for optimistic concurrency control."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/GremlinDatabaseResource"
        }
      ]
    },
    "GremlinGraph": {
      "description": "An Azure Cosmos DB Gremlin graph.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "The properties of an Azure Cosmos DB Gremlin graph",
          "$ref": "#/definitions/GremlinGraphProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "GremlinGraphProperties": {
      "description": "The properties of an Azure Cosmos DB Gremlin graph",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GremlinGraphResource"
        },
        {
          "$ref": "#/definitions/ExtendedResourceProperties"
        }
      ]
    },
    "ConsistencyPolicy": {
      "type": "object",
      "description": "The consistency policy for the Cosmos DB database account.",
      "properties": {
        "defaultConsistencyLevel": {
          "description": "The default consistency level and configuration settings of the Cosmos DB account.",
          "type": "string",
          "enum": [
            "Eventual",
            "Session",
            "BoundedStaleness",
            "Strong",
            "ConsistentPrefix"
          ],
          "x-ms-enum": {
            "name": "DefaultConsistencyLevel",
            "modelAsString": false
          }
        },
        "maxStalenessPrefix": {
          "description": "When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
          "type": "integer",
          "minimum": 1,
          "maximum": 2147483647,
          "format": "int64"
        },
        "maxIntervalInSeconds": {
          "description": "When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.",
          "type": "integer",
          "minimum": 5,
          "maximum": 86400,
          "format": "int32"
        }
      },
      "required": [
        "defaultConsistencyLevel"
      ]
    },
    "DatabaseAccountProperties": {
      "description": "Properties for the database account.",
      "type": "object",
      "properties": {
        "provisioningState": {
          "$ref": "#/definitions/ProvisioningState"
        },
        "documentEndpoint": {
          "description": "The connection endpoint for the Cosmos DB database account.",
          "type": "string",
          "readOnly": true
        },
        "databaseAccountOfferType": {
          "description": "The offer type for the Cosmos DB database account. Default value: Standard.",
          "readOnly": true,
          "$ref": "#/definitions/DatabaseAccountOfferType"
        },
        "ipRangeFilter": {
          "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
          "$ref": "#/definitions/IPRangeFilter"
        },
        "isVirtualNetworkFilterEnabled": {
          "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
          "type": "boolean"
        },
        "enableAutomaticFailover": {
          "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
          "type": "boolean"
        },
        "consistencyPolicy": {
          "description": "The consistency policy for the Cosmos DB database account.",
          "$ref": "#/definitions/ConsistencyPolicy"
        },
        "capabilities": {
          "type": "array",
          "description": "List of Cosmos DB capabilities for the account",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        },
        "writeLocations": {
          "type": "array",
          "readOnly": true,
          "description": "An array that contains the write location for the Cosmos DB account.",
          "items": {
            "$ref": "#/definitions/Location"
          }
        },
        "readLocations": {
          "type": "array",
          "readOnly": true,
          "description": "An array that contains of the read locations enabled for the Cosmos DB account.",
          "items": {
            "$ref": "#/definitions/Location"
          }
        },
        "failoverPolicies": {
          "type": "array",
          "readOnly": true,
          "description": "An array that contains the regions ordered by their failover priorities.",
          "items": {
            "$ref": "#/definitions/FailoverPolicy"
          }
        },
        "virtualNetworkRules": {
          "type": "array",
          "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkRule"
          }
        },
        "enableMultipleWriteLocations": {
          "description": "Enables the account to write in multiple locations",
          "type": "boolean"
        },
        "enableCassandraConnector": {
          "description": "Enables the cassandra connector on the Cosmos DB C* account",
          "type": "boolean"
        },
        "connectorOffer": {
          "description": "The cassandra connector offer type for the Cosmos DB database C* account.",
          "$ref": "#/definitions/ConnectorOffer"
        }
      }
    },
    "DatabaseAccountPatchProperties": {
      "description": "Properties to update Azure Cosmos DB database accounts.",
      "type": "object",
      "properties": {
        "capabilities": {
          "type": "array",
          "description": "List of Cosmos DB capabilities for the account",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    },
    "DatabaseAccountCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB database accounts.",
      "type": "object",
      "properties": {
        "consistencyPolicy": {
          "description": "The consistency policy for the Cosmos DB account.",
          "$ref": "#/definitions/ConsistencyPolicy"
        },
        "locations": {
          "type": "array",
          "description": "An array that contains the georeplication locations enabled for the Cosmos DB account.",
          "items": {
            "$ref": "#/definitions/Location"
          }
        },
        "databaseAccountOfferType": {
          "description": "The offer type for the database",
          "$ref": "#/definitions/DatabaseAccountOfferType"
        },
        "ipRangeFilter": {
          "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.",
          "$ref": "#/definitions/IPRangeFilter"
        },
        "isVirtualNetworkFilterEnabled": {
          "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules.",
          "type": "boolean"
        },
        "enableAutomaticFailover": {
          "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.",
          "type": "boolean"
        },
        "capabilities": {
          "type": "array",
          "description": "List of Cosmos DB capabilities for the account",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        },
        "virtualNetworkRules": {
          "type": "array",
          "description": "List of Virtual Network ACL rules configured for the Cosmos DB account.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkRule"
          }
        },
        "enableMultipleWriteLocations": {
          "description": "Enables the account to write in multiple locations",
          "type": "boolean"
        },
        "enableCassandraConnector": {
          "description": "Enables the cassandra connector on the Cosmos DB C* account",
          "type": "boolean"
        },
        "connectorOffer": {
          "description": "The cassandra connector offer type for the Cosmos DB database C* account.",
          "$ref": "#/definitions/ConnectorOffer"
        }
      },
      "required": [
        "locations",
        "databaseAccountOfferType"
      ]
    },
    "DatabaseAccountCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB database accounts.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Indicates the type of database account. This can only be set at database account creation.",
          "type": "string",
          "default": "GlobalDocumentDB",
          "enum": [
            "GlobalDocumentDB",
            "MongoDB",
            "Parse"
          ],
          "x-ms-enum": {
            "name": "DatabaseAccountKind",
            "modelAsString": true
          }
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/DatabaseAccountCreateUpdateProperties"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "required": [
        "properties"
      ]
    },
    "DatabaseAccountPatchParameters": {
      "description": "Parameters for patching Azure Cosmos DB database account properties.",
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "properties": {
          "x-ms-client-flatten": true,
          "$ref": "#/definitions/DatabaseAccountPatchProperties"
        }
      }
    },
    "DatabaseAccountListReadOnlyKeysResult": {
      "description": "The read-only access keys for the given database account.",
      "properties": {
        "primaryReadonlyMasterKey": {
          "readOnly": true,
          "type": "string",
          "description": "Base 64 encoded value of the primary read-only key."
        },
        "secondaryReadonlyMasterKey": {
          "readOnly": true,
          "type": "string",
          "description": "Base 64 encoded value of the secondary read-only key."
        }
      }
    },
    "DatabaseAccountListKeysResult": {
      "description": "The access keys for the given database account.",
      "properties": {
        "primaryMasterKey": {
          "readOnly": true,
          "type": "string",
          "description": "Base 64 encoded value of the primary read-write key."
        },
        "secondaryMasterKey": {
          "readOnly": true,
          "type": "string",
          "description": "Base 64 encoded value of the secondary read-write key."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DatabaseAccountListReadOnlyKeysResult"
        }
      ]
    },
    "DatabaseAccountConnectionString": {
      "description": "Connection string for the Cosmos DB account",
      "properties": {
        "connectionString": {
          "readOnly": true,
          "type": "string",
          "description": "Value of the connection string"
        },
        "description": {
          "readOnly": true,
          "type": "string",
          "description": "Description of the connection string"
        }
      }
    },
    "DatabaseAccountListConnectionStringsResult": {
      "description": "The connection strings for the given database account.",
      "properties": {
        "connectionStrings": {
          "type": "array",
          "description": "An array that contains the connection strings for the Cosmos DB account.",
          "items": {
            "$ref": "#/definitions/DatabaseAccountConnectionString"
          }
        }
      }
    },
    "DatabaseAccountRegenerateKeyParameters": {
      "type": "object",
      "description": "Parameters to regenerate the keys within the database account.",
      "properties": {
        "keyKind": {
          "type": "string",
          "description": "The access key to regenerate.",
          "enum": [
            "primary",
            "secondary",
            "primaryReadonly",
            "secondaryReadonly"
          ],
          "x-ms-enum": {
            "name": "KeyKind",
            "modelAsString": true
          }
        }
      },
      "required": [
        "keyKind"
      ]
    },
    "DatabaseAccountOfferType": {
      "description": "The offer type for the Cosmos DB database account.",
      "type": "string",
      "enum": [
        "Standard"
      ],
      "x-ms-enum": {
        "name": "DatabaseAccountOfferType",
        "modelAsString": false
      }
    },
    "ThroughputUpdateParameters": {
      "description": "Parameters to update Cosmos DB resource throughput.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to update Azure Cosmos DB resource throughput.",
          "$ref": "#/definitions/ThroughputUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "ThroughputUpdateProperties": {
      "description": "Properties to update Azure Cosmos DB resource throughput.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a resource throughput",
          "$ref": "#/definitions/ThroughputResource"
        }
      },
      "required": [
        "resource"
      ]
    },
    "SqlDatabaseCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB SQL database.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB SQL database.",
          "$ref": "#/definitions/SqlDatabaseCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "SqlDatabaseCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB SQL database.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a SQL database",
          "$ref": "#/definitions/SqlDatabaseResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "SqlContainerCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB container.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB container.",
          "$ref": "#/definitions/SqlContainerCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "SqlContainerCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB container.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a container",
          "$ref": "#/definitions/SqlContainerResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "MongoDBDatabaseCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB MongoDB database.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB MongoDB database.",
          "$ref": "#/definitions/MongoDBDatabaseCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "MongoDBDatabaseCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB MongoDB database.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a MongoDB database",
          "$ref": "#/definitions/MongoDBDatabaseResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "MongoDBCollectionCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB MongoDB collection.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB MongoDB collection.",
          "$ref": "#/definitions/MongoDBCollectionCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "MongoDBCollectionCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB MongoDB collection.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a MongoDB collection",
          "$ref": "#/definitions/MongoDBCollectionResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "TableCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB Table.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB Table.",
          "$ref": "#/definitions/TableCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "TableCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB Table.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a Table",
          "$ref": "#/definitions/TableResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "CassandraKeyspaceCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB Cassandra keyspace.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB Cassandra keyspace.",
          "$ref": "#/definitions/CassandraKeyspaceCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "CassandraKeyspaceCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB Cassandra keyspace.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a Cassandra keyspace",
          "$ref": "#/definitions/CassandraKeyspaceResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "CassandraTableCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB Cassandra table.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB Cassandra table.",
          "$ref": "#/definitions/CassandraTableCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "CassandraTableCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB Cassandra table.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a Cassandra table",
          "$ref": "#/definitions/CassandraTableResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "GremlinDatabaseCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB Gremlin database.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB Gremlin database.",
          "$ref": "#/definitions/GremlinDatabaseCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "GremlinDatabaseCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB Gremlin database.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a Gremlin database",
          "$ref": "#/definitions/GremlinDatabaseResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "GremlinGraphCreateUpdateParameters": {
      "description": "Parameters to create and update Cosmos DB Gremlin graph.",
      "type": "object",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties to create and update Azure Cosmos DB Gremlin graph.",
          "$ref": "#/definitions/GremlinGraphCreateUpdateProperties"
        }
      },
      "required": [
        "properties"
      ]
    },
    "GremlinGraphCreateUpdateProperties": {
      "description": "Properties to create and update Azure Cosmos DB Gremlin graph.",
      "type": "object",
      "properties": {
        "resource": {
          "description": "The standard JSON format of a Gremlin graph",
          "$ref": "#/definitions/GremlinGraphResource"
        },
        "options": {
          "description": "A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.",
          "$ref": "#/definitions/CreateUpdateOptions"
        }
      },
      "required": [
        "resource",
        "options"
      ]
    },
    "ThroughputResource": {
      "type": "object",
      "description": "Cosmos DB resource throughput object",
      "properties": {
        "throughput": {
          "type": "integer",
          "description": "Value of the Cosmos DB resource throughput"
        }
      },
      "required": [
        "throughput"
      ]
    },
    "SqlDatabaseResource": {
      "type": "object",
      "description": "Cosmos DB SQL database id object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB SQL database"
        }
      },
      "required": [
        "id"
      ]
    },
    "SqlContainerResource": {
      "type": "object",
      "description": "Cosmos DB SQL container resource object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB SQL container"
        },
        "indexingPolicy": {
          "$ref": "#/definitions/IndexingPolicy",
          "description": "The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container"
        },
        "partitionKey": {
          "$ref": "#/definitions/ContainerPartitionKey",
          "description": "The configuration of the partition key to be used for partitioning data into multiple partitions"
        },
        "defaultTtl": {
          "type": "integer",
          "description": "Default time to live"
        },
        "uniqueKeyPolicy": {
          "$ref": "#/definitions/UniqueKeyPolicy",
          "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
        },
        "conflictResolutionPolicy": {
          "$ref": "#/definitions/ConflictResolutionPolicy",
          "description": "The conflict resolution policy for the container."
        }
      },
      "required": [
        "id"
      ]
    },
    "GremlinGraphResource": {
      "type": "object",
      "description": "Cosmos DB Gremlin graph resource object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB Gremlin graph"
        },
        "indexingPolicy": {
          "$ref": "#/definitions/IndexingPolicy",
          "description": "The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph"
        },
        "partitionKey": {
          "$ref": "#/definitions/ContainerPartitionKey",
          "description": "The configuration of the partition key to be used for partitioning data into multiple partitions"
        },
        "defaultTtl": {
          "type": "integer",
          "description": "Default time to live"
        },
        "uniqueKeyPolicy": {
          "$ref": "#/definitions/UniqueKeyPolicy",
          "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
        },
        "conflictResolutionPolicy": {
          "$ref": "#/definitions/ConflictResolutionPolicy",
          "description": "The conflict resolution policy for the graph."
        }
      },
      "required": [
        "id"
      ]
    },
    "IndexingPolicy": {
      "type": "object",
      "description": "Cosmos DB indexing policy",
      "properties": {
        "automatic": {
          "type": "boolean",
          "description": "Indicates if the indexing policy is automatic"
        },
        "indexingMode": {
          "description": "Indicates the indexing mode.",
          "type": "string",
          "default": "Consistent",
          "enum": [
            "Consistent",
            "Lazy",
            "None"
          ],
          "x-ms-enum": {
            "name": "IndexingMode",
            "modelAsString": true
          }
        },
        "includedPaths": {
          "description": "List of paths to include in the indexing",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncludedPath"
          }
        },
        "excludedPaths": {
          "description": "List of paths to exclude from indexing",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExcludedPath"
          }
        }
      }
    },
    "ExcludedPath": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)"
        }
      }
    },
    "IncludedPath": {
      "type": "object",
      "description": "The paths that are included in indexing",
      "properties": {
        "path": {
          "type": "string",
          "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)"
        },
        "indexes": {
          "description": "List of indexes for this path",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Indexes"
          }
        }
      }
    },
    "Indexes": {
      "type": "object",
      "description": "The indexes for the path.",
      "properties": {
        "dataType": {
          "description": "The datatype for which the indexing behavior is applied to.",
          "type": "string",
          "default": "String",
          "enum": [
            "String",
            "Number",
            "Point",
            "Polygon",
            "LineString",
            "MultiPolygon"
          ],
          "x-ms-enum": {
            "name": "DataType",
            "modelAsString": true
          }
        },
        "precision": {
          "description": "The precision of the index. -1 is maximum precision.",
          "type": "integer"
        },
        "kind": {
          "description": "Indicates the type of index.",
          "type": "string",
          "default": "Hash",
          "enum": [
            "Hash",
            "Range",
            "Spatial"
          ],
          "x-ms-enum": {
            "name": "IndexKind",
            "modelAsString": true
          }
        }
      }
    },
    "ContainerPartitionKey": {
      "type": "object",
      "description": "The configuration of the partition key to be used for partitioning data into multiple partitions",
      "properties": {
        "paths": {
          "description": "List of paths using which data within the container can be partitioned",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Path"
          }
        },
        "kind": {
          "description": "Indicates the kind of algorithm used for partitioning",
          "type": "string",
          "default": "Hash",
          "enum": [
            "Hash",
            "Range"
          ],
          "x-ms-enum": {
            "name": "PartitionKind",
            "modelAsString": true
          }
        }
      }
    },
    "Path": {
      "type": "string",
      "description": "A path. These typically start with root (/path)"
    },
    "UniqueKeyPolicy": {
      "type": "object",
      "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.",
      "properties": {
        "uniqueKeys": {
          "description": "List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UniqueKey"
          }
        }
      }
    },
    "UniqueKey": {
      "type": "object",
      "description": "The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.",
      "properties": {
        "paths": {
          "description": "List of paths must be unique for each document in the Azure Cosmos DB service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Path"
          }
        }
      }
    },
    "ConflictResolutionPolicy": {
      "type": "object",
      "description": "The conflict resolution policy for the container.",
      "properties": {
        "mode": {
          "description": "Indicates the conflict resolution mode.",
          "type": "string",
          "default": "LastWriterWins",
          "enum": [
            "LastWriterWins",
            "Custom"
          ],
          "x-ms-enum": {
            "name": "ConflictResolutionMode",
            "modelAsString": true
          }
        },
        "conflictResolutionPath": {
          "type": "string",
          "description": "The conflict resolution path in the case of LastWriterWins mode."
        },
        "conflictResolutionProcedure": {
          "type": "string",
          "description": "The procedure to resolve conflicts in the case of custom mode."
        }
      }
    },
    "MongoDBDatabaseResource": {
      "type": "object",
      "description": "Cosmos DB MongoDB database id object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB MongoDB database"
        }
      },
      "required": [
        "id"
      ]
    },
    "MongoDBCollectionResource": {
      "type": "object",
      "description": "Cosmos DB MongoDB collection resource object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB MongoDB collection"
        },
        "shardKey": {
          "description": "A key-value pair of shard keys to be applied for the request.",
          "$ref": "#/definitions/ShardKeys"
        },
        "indexes": {
          "description": "List of index keys",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MongoIndex"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "ShardKeys": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "The shard key and partition kind pair, only support \"Hash\" partition kind"
    },
    "MongoIndex": {
      "type": "object",
      "description": "Cosmos DB MongoDB collection index key",
      "properties": {
        "key": {
          "description": "Cosmos DB MongoDB collection index keys",
          "$ref": "#/definitions/MongoIndexKeys"
        },
        "options": {
          "description": "Cosmos DB MongoDB collection index key options",
          "$ref": "#/definitions/MongoIndexOptions"
        }
      }
    },
    "MongoIndexKeys": {
      "type": "object",
      "description": "Cosmos DB MongoDB collection resource object",
      "properties": {
        "keys": {
          "description": "List of keys for each MongoDB collection in the Azure Cosmos DB service",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key"
          }
        }
      }
    },
    "Key": {
      "type": "string",
      "description": "A Key."
    },
    "MongoIndexOptions": {
      "type": "object",
      "description": "Cosmos DB MongoDB collection index options",
      "properties": {
        "expireAfterSeconds": {
          "description": "Expire after seconds",
          "type": "integer"
        },
        "unique": {
          "description": "Is unique or not",
          "type": "boolean"
        }
      }
    },
    "TableResource": {
      "type": "object",
      "description": "Cosmos DB table id object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB table"
        }
      },
      "required": [
        "id"
      ]
    },
    "CassandraKeyspaceResource": {
      "type": "object",
      "description": "Cosmos DB Cassandra keyspace id object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB Cassandra keyspace"
        }
      },
      "required": [
        "id"
      ]
    },
    "CassandraTableResource": {
      "type": "object",
      "description": "Cosmos DB Cassandra table id object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB Cassandra table"
        },
        "defaultTtl": {
          "type": "integer",
          "description": "Time to live of the Cosmos DB Cassandra table"
        },
        "schema": {
          "description": "Schema of the Cosmos DB Cassandra table",
          "$ref": "#/definitions/CassandraSchema"
        }
      },
      "required": [
        "id"
      ]
    },
    "CassandraSchema": {
      "type": "object",
      "description": "Cosmos DB Cassandra table schema",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          },
          "description": "List of Cassandra table columns."
        },
        "partitionKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CassandraPartitionKey"
          },
          "description": "List of partition key."
        },
        "clusterKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterKey"
          },
          "description": "List of cluster key."
        }
      }
    },
    "Column": {
      "type": "object",
      "description": "Cosmos DB Cassandra table column",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Cosmos DB Cassandra table column"
        },
        "type": {
          "type": "string",
          "description": "Type of the Cosmos DB Cassandra table column"
        }
      }
    },
    "CassandraPartitionKey": {
      "type": "object",
      "description": "Cosmos DB Cassandra table partition key",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Cosmos DB Cassandra table partition key"
        }
      }
    },
    "ClusterKey": {
      "type": "object",
      "description": "Cosmos DB Cassandra table cluster key",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Cosmos DB Cassandra table cluster key"
        },
        "orderBy": {
          "type": "string",
          "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\""
        }
      }
    },
    "GremlinDatabaseResource": {
      "type": "object",
      "description": "Cosmos DB Gremlin database id object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Name of the Cosmos DB Gremlin database"
        }
      },
      "required": [
        "id"
      ]
    },
    "CreateUpdateOptions": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are \"If-Match\", \"If-None-Match\", \"Session-Token\" and \"Throughput\""
    },
    "Capability": {
      "type": "object",
      "description": "Cosmos DB capability object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\"."
        }
      }
    },
    "Tags": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\"."
    },
    "ProvisioningState": {
      "type": "string",
      "readOnly": true,
      "description": "The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation."
    },
    "IPRangeFilter": {
      "type": "string",
      "description": "Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces."
    },
    "VirtualNetworkRule": {
      "type": "object",
      "description": "Virtual Network ACL Rule object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}."
        },
        "ignoreMissingVNetServiceEndpoint": {
          "type": "boolean",
          "description": "Create firewall rule before the virtual network has vnet service endpoint enabled."
        }
      }
    },
    "Operation": {
      "description": "REST API operation",
      "type": "object",
      "properties": {
        "name": {
          "description": "Operation name: {provider}/{resource}/{operation}",
          "type": "string"
        },
        "display": {
          "description": "The object that represents the operation.",
          "properties": {
            "Provider": {
              "description": "Service provider: Microsoft.ResourceProvider",
              "type": "string"
            },
            "Resource": {
              "description": "Resource on which the operation is performed: Profile, endpoint, etc.",
              "type": "string"
            },
            "Operation": {
              "description": "Operation type: Read, write, delete, etc.",
              "type": "string"
            },
            "Description": {
              "description": "Description of operation",
              "type": "string"
            }
          }
        }
      }
    },
    "OperationListResult": {
      "description": "Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "description": "List of operations supported by the Resource Provider."
        },
        "nextLink": {
          "type": "string",
          "description": "URL to get the next set of operation list results if there are any."
        }
      }
    },
    "UsagesResult": {
      "properties": {
        "value": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Usage"
          },
          "description": "The list of usages for the database. A usage is a point in time metric"
        }
      },
      "description": "The response to a list usage request."
    },
    "Usage": {
      "properties": {
        "unit": {
          "description": "The unit of the metric.",
          "$ref": "#/definitions/UnitType"
        },
        "name": {
          "$ref": "#/definitions/MetricName",
          "readOnly": true,
          "description": "The name information for the metric."
        },
        "quotaPeriod": {
          "type": "string",
          "readOnly": true,
          "description": "The quota period used to summarize the usage values."
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "Maximum value for this metric"
        },
        "currentValue": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "Current value for this metric"
        }
      },
      "description": "The usage data for a usage request."
    },
    "PartitionUsagesResult": {
      "properties": {
        "value": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PartitionUsage"
          },
          "description": "The list of partition-level usages for the database. A usage is a point in time metric"
        }
      },
      "description": "The response to a list partition level usage request."
    },
    "PartitionUsage": {
      "allOf": [
        {
          "$ref": "#/definitions/Usage"
        }
      ],
      "properties": {
        "partitionId": {
          "readOnly": true,
          "type": "string",
          "description": "The partition id (GUID identifier) of the usages."
        },
        "partitionKeyRangeId": {
          "readOnly": true,
          "type": "string",
          "description": "The partition key range id (integer identifier) of the usages."
        }
      },
      "description": "The partition level usage data for a usage request."
    },
    "MetricDefinitionsListResult": {
      "properties": {
        "value": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/MetricDefinition"
          },
          "description": "The list of metric definitions for the account."
        }
      },
      "description": "The response to a list metric definitions request."
    },
    "MetricDefinition": {
      "properties": {
        "metricAvailabilities": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/MetricAvailability"
          },
          "description": "The list of metric availabilities for the account."
        },
        "primaryAggregationType": {
          "readOnly": true,
          "type": "string",
          "description": "The primary aggregation type of the metric.",
          "enum": [
            "None",
            "Average",
            "Total",
            "Minimum",
            "Maximum",
            "Last"
          ],
          "x-ms-enum": {
            "modelAsString": true,
            "name": "PrimaryAggregationType"
          }
        },
        "unit": {
          "description": "The unit of the metric.",
          "$ref": "#/definitions/UnitType"
        },
        "resourceUri": {
          "readOnly": true,
          "type": "string",
          "description": "The resource uri of the database."
        },
        "name": {
          "readOnly": true,
          "$ref": "#/definitions/MetricName",
          "description": "The name information for the metric."
        }
      },
      "description": "The definition of a metric."
    },
    "MetricAvailability": {
      "properties": {
        "timeGrain": {
          "readOnly": true,
          "type": "string",
          "description": "The time grain to be used to summarize the metric values."
        },
        "retention": {
          "readOnly": true,
          "type": "string",
          "description": "The retention for the metric values."
        }
      },
      "description": "The availability of the metric."
    },
    "MetricListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "description": "The list of metrics for the account."
        }
      },
      "description": "The response to a list metrics request."
    },
    "Metric": {
      "properties": {
        "startTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "The start time for the metric (ISO-8601 format)."
        },
        "endTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "The end time for the metric (ISO-8601 format)."
        },
        "timeGrain": {
          "readOnly": true,
          "type": "string",
          "description": "The time grain to be used to summarize the metric values."
        },
        "unit": {
          "$ref": "#/definitions/UnitType",
          "description": "The unit of the metric."
        },
        "name": {
          "readOnly": true,
          "$ref": "#/definitions/MetricName",
          "description": "The name information for the metric."
        },
        "metricValues": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricValue"
          },
          "description": "The metric values for the specified time window and timestep."
        }
      },
      "description": "Metric data"
    },
    "MetricName": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the metric."
        },
        "localizedValue": {
          "readOnly": true,
          "type": "string",
          "description": "The friendly name of the metric."
        }
      },
      "description": "A metric name."
    },
    "MetricValue": {
      "properties": {
        "_count": {
          "readOnly": true,
          "type": "number",
          "format": "int32",
          "description": "The number of values for the metric."
        },
        "average": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The average value of the metric."
        },
        "maximum": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The max value of the metric."
        },
        "minimum": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The min value of the metric."
        },
        "timestamp": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "The metric timestamp (ISO-8601 format)."
        },
        "total": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The total value of the metric."
        }
      },
      "description": "Represents metrics values."
    },
    "PercentileMetricListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PercentileMetric"
          },
          "description": "The list of percentile metrics for the account."
        }
      },
      "description": "The response to a list percentile metrics request."
    },
    "PercentileMetric": {
      "properties": {
        "startTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "The start time for the metric (ISO-8601 format)."
        },
        "endTime": {
          "readOnly": true,
          "type": "string",
          "format": "date-time",
          "description": "The end time for the metric (ISO-8601 format)."
        },
        "timeGrain": {
          "readOnly": true,
          "type": "string",
          "description": "The time grain to be used to summarize the metric values."
        },
        "unit": {
          "$ref": "#/definitions/UnitType",
          "description": "The unit of the metric."
        },
        "name": {
          "readOnly": true,
          "$ref": "#/definitions/MetricName",
          "description": "The name information for the metric."
        },
        "metricValues": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PercentileMetricValue"
          },
          "description": "The percentile metric values for the specified time window and timestep."
        }
      },
      "description": "Percentile Metric data"
    },
    "PercentileMetricValue": {
      "allOf": [
        {
          "$ref": "#/definitions/MetricValue"
        }
      ],
      "properties": {
        "P10": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 10th percentile value for the metric."
        },
        "P25": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 25th percentile value for the metric."
        },
        "P50": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 50th percentile value for the metric."
        },
        "P75": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 75th percentile value for the metric."
        },
        "P90": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 90th percentile value for the metric."
        },
        "P95": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 95th percentile value for the metric."
        },
        "P99": {
          "readOnly": true,
          "type": "number",
          "format": "double",
          "description": "The 99th percentile value for the metric."
        }
      },
      "description": "Represents percentile metrics values."
    },
    "PartitionMetricListResult": {
      "properties": {
        "value": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartitionMetric"
          },
          "description": "The list of partition-level metrics for the account."
        }
      },
      "description": "The response to a list partition metrics request."
    },
    "PartitionMetric": {
      "allOf": [
        {
          "$ref": "#/definitions/Metric"
        }
      ],
      "properties": {
        "partitionId": {
          "readOnly": true,
          "type": "string",
          "description": "The partition id (GUID identifier) of the metric values."
        },
        "partitionKeyRangeId": {
          "readOnly": true,
          "type": "string",
          "description": "The partition key range id (integer identifier) of the metric values."
        }
      },
      "description": "The metric values for a single partition."
    },
    "UnitType": {
      "type": "string",
      "readOnly": true,
      "description": "The unit of the metric.",
      "enum": [
        "Count",
        "Bytes",
        "Seconds",
        "Percent",
        "CountPerSecond",
        "BytesPerSecond",
        "Milliseconds"
      ],
      "x-ms-enum": {
        "modelAsString": true,
        "name": "UnitType"
      }
    },
    "ConnectorOffer": {
      "description": "The cassandra connector offer type for the Cosmos DB C* database account.",
      "type": "string",
      "enum": [
        "Small"
      ],
      "x-ms-enum": {
        "name": "ConnectorOffer",
        "modelAsString": true
      }
    }
  },
  "parameters": {
    "subscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Azure subscription ID.",
      "required": true,
      "type": "string"
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Version of the API to be used with the client request. The current version is 2015-04-08."
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "pattern": "^[-\\w\\._\\(\\)]+$",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method",
      "description": "Name of an Azure resource group."
    },
    "accountNameParameter": {
      "name": "accountName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB database account name.",
      "minLength": 3,
      "maxLength": 50,
      "pattern": "^[a-z0-9]+(-[a-z0-9]+)*"
    },
    "filterParameter": {
      "name": "$filter",
      "in": "query",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "An OData filter expression that describes a subset of metrics to return. The parameters that can be filtered are name.value (name of the metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported operator is eq."
    },
    "usageFilterParameter": {
      "name": "$filter",
      "in": "query",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names)."
    },
    "databaseRidParameter": {
      "name": "databaseRid",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB database rid."
    },
    "collectionRidParameter": {
      "name": "collectionRid",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB collection rid."
    },
    "databaseNameParameter": {
      "name": "databaseName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB database name."
    },
    "containerNameParameter": {
      "name": "containerName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB container name."
    },
    "tableNameParameter": {
      "name": "tableName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB table name."
    },
    "collectionNameParameter": {
      "name": "collectionName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB collection name."
    },
    "keyspaceNameParameter": {
      "name": "keyspaceName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB keyspace name."
    },
    "graphNameParameter": {
      "name": "graphName",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB graph name."
    },
    "regionParameter": {
      "name": "region",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Cosmos DB region, with spaces between words and each word capitalized."
    },
    "sourceRegionParameter": {
      "name": "sourceRegion",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Source region from which data is written. Cosmos DB region, with spaces between words and each word capitalized."
    },
    "targetRegionParameter": {
      "name": "targetRegion",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Target region to which data is written. Cosmos DB region, with spaces between words and each word capitalized."
    },
    "partitionKeyRangeIdParameter": {
      "name": "partitionKeyRangeId",
      "in": "path",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method",
      "description": "Partition Key Range Id for which to get data."
    }
  },
  "x-internal-service-id": "cosmos-db-resource-provider",
  "x-internal-service-name": "Cosmos DB Resource Provider",
  "x-internal-toc-name": "Database Accounts",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "ListMongoDBDatabases",
  "x-internal-operation-name": "List Mongo DB Databases"
}