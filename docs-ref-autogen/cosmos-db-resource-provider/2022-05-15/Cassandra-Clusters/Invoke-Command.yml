### YamlMime:RESTOperation
uid: management.azure.com.cosmos-db-resource-provider.2022-05-15.cassandraclusters.invokecommand
name: Invoke Command
service: Cosmos DB Resource Provider
groupName: Cassandra Clusters
apiVersion: 2022-05-15
summary: 'Invoke a command like nodetool for cassandra maintenance '
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}/invokeCommand?api-version=2022-05-15
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group. The name is case insensitive.
  types:
  - uid: string
- name: clusterName
  in: path
  isRequired: true
  description: Managed Cassandra cluster name.
  types:
  - uid: string
  pattern: ^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 202 Accepted
  description: Success. The command operation will begin as soon as possible.
  types:
  - uid: CommandOutput
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: command
    in: body
    isRequired: true
    description: The command which should be run
    types:
    - uid: string
  - name: arguments
    in: body
    description: The arguments for the command to be run
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: host
    in: body
    isRequired: true
    description: IP address of the cassandra host to run the command on
    types:
    - uid: string
  - name: cassandra-stop-start
    in: body
    description: If true, stops cassandra before executing the command and then start it again
    types:
    - uid: boolean
  - name: readwrite
    in: body
    description: If true, allows the command to *write* to the cassandra directory, otherwise read-only.
    types:
    - uid: boolean
requestHeader: []
definitions:
- name: CommandOutput
  description: Response of /command api
  kind: object
  properties:
  - name: commandOutput
    description: Output of the command.
    types:
    - uid: string
- name: CloudError
  description: An error response from the service.
  kind: object
  properties:
  - name: error
    description: Error Response.
    types:
    - uid: ErrorResponse
- name: CommandPostBody
  description: Specification of which command to run where
  kind: object
  properties:
  - name: command
    description: The command which should be run
    types:
    - uid: string
  - name: arguments
    description: The arguments for the command to be run
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: host
    description: IP address of the cassandra host to run the command on
    types:
    - uid: string
  - name: cassandra-stop-start
    description: If true, stops cassandra before executing the command and then start it again
    types:
    - uid: boolean
  - name: readwrite
    description: If true, allows the command to *write* to the cassandra directory, otherwise read-only.
    types:
    - uid: boolean
- name: ErrorResponse
  description: Error Response.
  kind: object
  properties:
  - name: code
    description: Error code.
    types:
    - uid: string
  - name: message
    description: Error message indicating why the operation failed.
    types:
    - uid: string
examples:
- name: CosmosDBManagedCassandraCommand
  request:
    uri: POST https://management.azure.com/subscriptions/subid/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod/invokeCommand?api-version=2022-05-15
    body: >-
      {
        "command": "nodetool status",
        "host": "10.0.1.12"
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/subid/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod/invokeCommand?api-version=2022-05-15

      {
        "command": "nodetool status",
        "host": "10.0.1.12"
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.cosmos.models.CommandPostBody;

      /** Samples for CassandraClusters InvokeCommand. */
      public final class Main {
          /*
           * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2022-05-15/examples/CosmosDBManagedCassandraCommand.json
           */
          /**
           * Sample code: CosmosDBManagedCassandraCommand.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void cosmosDBManagedCassandraCommand(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .cosmosDBAccounts()
                  .manager()
                  .serviceClient()
                  .getCassandraClusters()
                  .invokeCommand(
                      "cassandra-prod-rg",
                      "cassandra-prod",
                      new CommandPostBody().withCommand("nodetool status").withHost("10.0.1.12"),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.18.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armcosmos_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2022-05-15/examples/CosmosDBManagedCassandraCommand.json
      func ExampleCassandraClustersClient_BeginInvokeCommand() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armcosmos.NewCassandraClustersClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginInvokeCommand(ctx,
      		"cassandra-prod-rg",
      		"cassandra-prod",
      		armcosmos.CommandPostBody{
      			Command: to.Ptr("nodetool status"),
      			Host:    to.Ptr("10.0.1.12"),
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	_, err = poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fcosmos%2Farmcosmos%2Fv2.0.0/sdk/resourcemanager/cosmos/armcosmos/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { CosmosDBManagementClient } = require("@azure/arm-cosmosdb");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Invoke a command like nodetool for cassandra maintenance
       *
       * @summary Invoke a command like nodetool for cassandra maintenance
       * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2022-05-15/examples/CosmosDBManagedCassandraCommand.json
       */
      async function cosmosDbManagedCassandraCommand() {
        const subscriptionId = "subid";
        const resourceGroupName = "cassandra-prod-rg";
        const clusterName = "cassandra-prod";
        const body = {
          command: "nodetool status",
          host: "10.0.1.12",
        };
        const credential = new DefaultAzureCredential();
        const client = new CosmosDBManagementClient(credential, subscriptionId);
        const result = await client.cassandraClusters.beginInvokeCommandAndWait(
          resourceGroupName,
          clusterName,
          body
        );
        console.log(result);
      }

      cosmosDbManagedCassandraCommand().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-cosmosdb_15.1.0/sdk/cosmosdb/arm-cosmosdb/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "202"
    headers:
    - name: Azure-AsyncOperation
      value: https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.DocumentDB/locations/westus/operationsStatus/318653d0-3da5-4814-b8f6-429f2af0b2a4?api-version=2022-05-15
    body: >-
      {
        "commandOutput": "Datacenter: datacenter1\n=======================\n"
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: Impersonate your user account
metadata:
  description: >
    Learn more about Cosmos DB Resource Provider service - Invoke a command like nodetool for cassandra maintenance
errorCodes: []
