### YamlMime:RESTOperation
uid: management.azure.com.sql.2020-11-01-preview.serversecurityalertpolicies.createorupdate
name: Create Or Update
service: SQL Database
groupName: Server Security Alert Policies
apiVersion: 2020-11-01-preview
summary: Creates or updates a threat detection policy.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/Default?api-version=2020-11-01-preview
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription ID that identifies an Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  types:
  - uid: string
- name: serverName
  in: path
  isRequired: true
  description: The name of the server.
  types:
  - uid: string
- name: securityAlertPolicyName
  in: path
  isRequired: true
  description: The name of the threat detection policy.
  types:
  - uid: SecurityAlertPolicyName
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for the request.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully updated the threat detection policy.
  types:
  - uid: ServerSecurityAlertPolicy
- name: Other Status Codes
  description: >-
    *** Error Responses: ***

     * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

     * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

     * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

     * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

     * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

     * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

     * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

     * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

     * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

     * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

     * 404 SubscriptionDoesNotHaveServer - The requested server was not found

     * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

     * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

     * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

     * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

     * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

     * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later
- name: 202 Accepted
  description: Created request to set the server threat detection policy.
requestBody:
- name: default
  parameters:
  - name: properties.state
    in: body
    isRequired: true
    description: Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
    types:
    - uid: SecurityAlertsPolicyState
  - name: properties.disabledAlerts
    in: body
    description: 'Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force'
    types:
    - uid: string
      isArray: true
  - name: properties.emailAddresses
    in: body
    description: Specifies an array of e-mail addresses to which the alert is sent.
    types:
    - uid: string
      isArray: true
  - name: properties.emailAccountAdmins
    in: body
    description: Specifies that the alert is sent to the account administrators.
    types:
    - uid: boolean
  - name: properties.storageEndpoint
    in: body
    description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
    types:
    - uid: string
  - name: properties.storageAccountAccessKey
    in: body
    description: Specifies the identifier key of the Threat Detection audit storage account.
    types:
    - uid: string
  - name: properties.retentionDays
    in: body
    description: Specifies the number of days to keep in the Threat Detection audit logs.
    types:
    - uid: integer
requestHeader: []
definitions:
- name: SecurityAlertPolicyName
  description: The name of the threat detection policy.
  kind: enum
  properties:
  - name: Default
    types:
    - uid: string
- name: systemData
  description: Metadata pertaining to creation and last modification of the resource.
  kind: object
  properties:
  - name: createdBy
    description: The identity that created the resource.
    types:
    - uid: string
  - name: createdByType
    description: The type of identity that created the resource.
    types:
    - uid: createdByType
  - name: createdAt
    description: The timestamp of resource creation (UTC).
    types:
    - uid: string
  - name: lastModifiedBy
    description: The identity that last modified the resource.
    types:
    - uid: string
  - name: lastModifiedByType
    description: The type of identity that last modified the resource.
    types:
    - uid: createdByType
  - name: lastModifiedAt
    description: The timestamp of resource last modification (UTC)
    types:
    - uid: string
- name: ServerSecurityAlertPolicy
  description: A server security alert policy.
  kind: object
  properties:
  - name: systemData
    isReadyOnly: true
    description: SystemData of SecurityAlertPolicyResource.
    types:
    - uid: systemData
  - name: properties.state
    description: Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
    types:
    - uid: SecurityAlertsPolicyState
  - name: properties.disabledAlerts
    description: 'Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force'
    types:
    - uid: string
      isArray: true
  - name: properties.emailAddresses
    description: Specifies an array of e-mail addresses to which the alert is sent.
    types:
    - uid: string
      isArray: true
  - name: properties.emailAccountAdmins
    description: Specifies that the alert is sent to the account administrators.
    types:
    - uid: boolean
  - name: properties.storageEndpoint
    description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
    types:
    - uid: string
  - name: properties.storageAccountAccessKey
    description: Specifies the identifier key of the Threat Detection audit storage account.
    types:
    - uid: string
  - name: properties.retentionDays
    description: Specifies the number of days to keep in the Threat Detection audit logs.
    types:
    - uid: integer
  - name: properties.creationTime
    isReadyOnly: true
    description: Specifies the UTC creation time of the policy.
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
- name: createdByType
  description: The type of identity that created the resource.
  kind: enum
  properties:
  - name: User
    types:
    - uid: string
  - name: Application
    types:
    - uid: string
  - name: ManagedIdentity
    types:
    - uid: string
  - name: Key
    types:
    - uid: string
- name: SecurityAlertsPolicyState
  description: Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
examples:
- name: Update a server's threat detection policy with minimal parameters
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2020-11-01-preview
    body: >-
      {
        "properties": {
          "state": "Enabled"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2020-11-01-preview

      {
        "properties": {
          "state": "Enabled"
        }
      }

      ```

      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { SqlManagementClient } = require("@azure/arm-sql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a threat detection policy.
       *
       * @summary Creates or updates a threat detection policy.
       * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMin.json
       */
      async function updateAServerThreatDetectionPolicyWithMinimalParameters() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "securityalert-4799";
        const serverName = "securityalert-6440";
        const securityAlertPolicyName = "Default";
        const parameters = { state: "Enabled" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = await client.serverSecurityAlertPolicies.beginCreateOrUpdateAndWait(
          resourceGroupName,
          serverName,
          securityAlertPolicyName,
          parameters
        );
        console.log(result);
      }

      updateAServerThreatDetectionPolicyWithMinimalParameters().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-sql_9.0.1/sdk/sql/arm-sql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/default",
        "name": "Default",
        "type": "Microsoft.Sql/servers/securityAlertPolicies",
        "systemData": {
          "createdBy": "string",
          "createdByType": "User",
          "createdAt": "2020-04-03T04:41:33.937Z",
          "lastModifiedBy": "string",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-04-03T04:41:33.937Z"
        },
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": false,
          "emailAddresses": [
            ""
          ],
          "disabledAlerts": [
            ""
          ],
          "retentionDays": 0,
          "storageAccountAccessKey": "",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }
  - statusCode: "202"
- name: Update a server's threat detection policy with all parameters
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2020-11-01-preview
    body: >-
      {
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [
            "testSecurityAlert@microsoft.com"
          ],
          "disabledAlerts": [
            "Access_Anomaly",
            "Usage_Anomaly"
          ],
          "retentionDays": 5,
          "storageAccountAccessKey": "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/Default?api-version=2020-11-01-preview

      {
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [
            "testSecurityAlert@microsoft.com"
          ],
          "disabledAlerts": [
            "Access_Anomaly",
            "Usage_Anomaly"
          ],
          "retentionDays": 5,
          "storageAccountAccessKey": "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armsql_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMax.json
      func ExampleServerSecurityAlertPoliciesClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armsql.NewServerSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"securityalert-4799",
      		"securityalert-6440",
      		armsql.SecurityAlertPolicyNameDefault,
      		armsql.ServerSecurityAlertPolicy{
      			Properties: &armsql.SecurityAlertsPolicyProperties{
      				DisabledAlerts: []*string{
      					to.Ptr("Access_Anomaly"),
      					to.Ptr("Usage_Anomaly")},
      				EmailAccountAdmins: to.Ptr(true),
      				EmailAddresses: []*string{
      					to.Ptr("testSecurityAlert@microsoft.com")},
      				RetentionDays:           to.Ptr[int32](5),
      				State:                   to.Ptr(armsql.SecurityAlertsPolicyStateEnabled),
      				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
      				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fsql%2Farmsql%2Fv1.0.0/sdk/resourcemanager/sql/armsql/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { SqlManagementClient } = require("@azure/arm-sql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates a threat detection policy.
       *
       * @summary Creates or updates a threat detection policy.
       * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerSecurityAlertsCreateMax.json
       */
      async function updateAServerThreatDetectionPolicyWithAllParameters() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "securityalert-4799";
        const serverName = "securityalert-6440";
        const securityAlertPolicyName = "Default";
        const parameters = {
          disabledAlerts: ["Access_Anomaly", "Usage_Anomaly"],
          emailAccountAdmins: true,
          emailAddresses: ["testSecurityAlert@microsoft.com"],
          retentionDays: 5,
          state: "Enabled",
          storageAccountAccessKey:
            "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
          storageEndpoint: "https://mystorage.blob.core.windows.net",
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = await client.serverSecurityAlertPolicies.beginCreateOrUpdateAndWait(
          resourceGroupName,
          serverName,
          securityAlertPolicyName,
          parameters
        );
        console.log(result);
      }

      updateAServerThreatDetectionPolicyWithAllParameters().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-sql_9.0.1/sdk/sql/arm-sql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Sql/servers/securityalert-6440/securityAlertPolicies/default",
        "name": "Default",
        "type": "Microsoft.Sql/servers/securityAlertPolicies",
        "systemData": {
          "createdBy": "string",
          "createdByType": "User",
          "createdAt": "2020-04-03T04:41:33.937Z",
          "lastModifiedBy": "string",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2020-04-03T04:41:33.937Z"
        },
        "properties": {
          "state": "Enabled",
          "emailAccountAdmins": true,
          "emailAddresses": [
            "testSecurityAlert@microsoft.com"
          ],
          "disabledAlerts": [
            "Access_Anomaly",
            "Usage_Anomaly"
          ],
          "retentionDays": 5,
          "storageAccountAccessKey": "",
          "storageEndpoint": "https://mystorage.blob.core.windows.net"
        }
      }
  - statusCode: "202"
security: []
metadata:
  description: Learn more about SQL Database service - Creates or updates a threat detection policy.
errorCodes: []
