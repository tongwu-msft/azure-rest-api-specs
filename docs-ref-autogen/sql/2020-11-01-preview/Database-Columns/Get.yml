### YamlMime:RESTOperation
uid: management.azure.com.sql.2020-11-01-preview.databasecolumns.get
name: Get
service: SQL Database
groupName: Database Columns
apiVersion: 2020-11-01-preview
summary: Get database column
consumes:
- application/json
produces:
- application/json
paths:
- content: GET https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}?api-version=2020-11-01-preview
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription ID that identifies an Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  types:
  - uid: string
- name: serverName
  in: path
  isRequired: true
  description: The name of the server.
  types:
  - uid: string
- name: databaseName
  in: path
  isRequired: true
  description: The name of the database.
  types:
  - uid: string
- name: schemaName
  in: path
  isRequired: true
  description: The name of the schema.
  types:
  - uid: string
- name: tableName
  in: path
  isRequired: true
  description: The name of the table.
  types:
  - uid: string
- name: columnName
  in: path
  isRequired: true
  description: The name of the column.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for the request.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully retrieved database column.
  types:
  - uid: DatabaseColumn
- name: Other Status Codes
  description: >-
    *** Error Responses: ***

     * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

     * 404 SubscriptionDoesNotHaveServer - The requested server was not found

     * 404 SourceDatabaseNotFound - The source database does not exist.

     * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

     * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

     * 404 InvalidDatabaseSchema - Schema is missing in database.

     * 404 InvalidDatabaseTable - Table is missing in database.

     * 404 InvalidDatabaseColumn - Column is missing in table.

     * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
requestHeader: []
definitions:
- name: DatabaseColumn
  description: A database column resource.
  kind: object
  properties:
  - name: properties.columnType
    description: The column data type.
    types:
    - uid: ColumnDataType
  - name: properties.temporalType
    description: The table temporal type.
    types:
    - uid: TableTemporalType
  - name: properties.memoryOptimized
    description: Whether or not the column belongs to a memory optimized table.
    types:
    - uid: boolean
  - name: properties.isComputed
    description: Whether or not the column is computed.
    types:
    - uid: boolean
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
- name: ColumnDataType
  description: The column data type.
  kind: enum
  properties:
  - name: image
    types:
    - uid: string
  - name: text
    types:
    - uid: string
  - name: uniqueidentifier
    types:
    - uid: string
  - name: date
    types:
    - uid: string
  - name: time
    types:
    - uid: string
  - name: datetime2
    types:
    - uid: string
  - name: datetimeoffset
    types:
    - uid: string
  - name: tinyint
    types:
    - uid: string
  - name: smallint
    types:
    - uid: string
  - name: int
    types:
    - uid: string
  - name: smalldatetime
    types:
    - uid: string
  - name: real
    types:
    - uid: string
  - name: money
    types:
    - uid: string
  - name: datetime
    types:
    - uid: string
  - name: float
    types:
    - uid: string
  - name: sql_variant
    types:
    - uid: string
  - name: ntext
    types:
    - uid: string
  - name: bit
    types:
    - uid: string
  - name: decimal
    types:
    - uid: string
  - name: numeric
    types:
    - uid: string
  - name: smallmoney
    types:
    - uid: string
  - name: bigint
    types:
    - uid: string
  - name: hierarchyid
    types:
    - uid: string
  - name: geometry
    types:
    - uid: string
  - name: geography
    types:
    - uid: string
  - name: varbinary
    types:
    - uid: string
  - name: varchar
    types:
    - uid: string
  - name: binary
    types:
    - uid: string
  - name: char
    types:
    - uid: string
  - name: timestamp
    types:
    - uid: string
  - name: nvarchar
    types:
    - uid: string
  - name: nchar
    types:
    - uid: string
  - name: xml
    types:
    - uid: string
  - name: sysname
    types:
    - uid: string
- name: TableTemporalType
  description: The table temporal type.
  kind: enum
  properties:
  - name: NonTemporalTable
    types:
    - uid: string
  - name: HistoryTable
    types:
    - uid: string
  - name: SystemVersionedTemporalTable
    types:
    - uid: string
examples:
- name: Get database column
  request:
    uri: GET https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/column1?api-version=2020-11-01-preview
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      GET https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/column1?api-version=2020-11-01-preview
      ```

      # [Go](#tab/Go)
      ``` go
      package armsql_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnGet.json
      func ExampleDatabaseColumnsClient_Get() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armsql.NewDatabaseColumnsClient("00000000-1111-2222-3333-444444444444", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.Get(ctx,
      		"myRG",
      		"serverName",
      		"myDatabase",
      		"dbo",
      		"table1",
      		"column1",
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fsql%2Farmsql%2Fv1.0.0/sdk/resourcemanager/sql/armsql/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { SqlManagementClient } = require("@azure/arm-sql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Get database column
       *
       * @summary Get database column
       * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseColumnGet.json
       */
      async function getDatabaseColumn() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "myRG";
        const serverName = "serverName";
        const databaseName = "myDatabase";
        const schemaName = "dbo";
        const tableName = "table1";
        const columnName = "column1";
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = await client.databaseColumns.get(
          resourceGroupName,
          serverName,
          databaseName,
          schemaName,
          tableName,
          columnName
        );
        console.log(result);
      }

      getDatabaseColumn().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-sql_9.0.1/sdk/sql/arm-sql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Sql/servers/serverName/databases/myDatabase/schemas/dbo/tables/table1/columns/column1",
        "name": "column1",
        "type": "Microsoft.Sql/servers/databases/schemas/tables/columns",
        "properties": {
          "columnType": "bit",
          "temporalType": "SystemVersionedTemporalTable",
          "memoryOptimized": false,
          "isComputed": false
        }
      }
security: []
metadata:
  description: >
    Learn more about SQL Database service - Get database column
errorCodes: []
