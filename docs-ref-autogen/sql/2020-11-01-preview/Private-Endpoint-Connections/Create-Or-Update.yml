### YamlMime:RESTOperation
uid: management.azure.com.sql.2020-11-01-preview.privateendpointconnections.createorupdate
name: Create Or Update
service: SQL Database
groupName: Private Endpoint Connections
apiVersion: 2020-11-01-preview
summary: Approve or reject a private endpoint connection with a given name.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections/{privateEndpointConnectionName}?api-version=2020-11-01-preview
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription ID that identifies an Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  types:
  - uid: string
- name: serverName
  in: path
  isRequired: true
  description: The name of the server.
  types:
  - uid: string
- name: privateEndpointConnectionName
  in: path
  isRequired: true
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for the request.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully approved or rejected private endpoint connection.
  types:
  - uid: PrivateEndpointConnection
- name: Other Status Codes
  description: >-
    *** Error Responses: ***

     * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

     * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

     * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

     * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

     * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

     * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

     * 400 NetworkingSubscriptionNotRegisteredWithSqlRp - Subscription used for network-side Private Endpoint is not registered with SQL resource provider

     * 404 PrivateEndpointConnectionDroppedByOtherWorkflow - {0}

     * 404 SubscriptionDoesNotHaveServer - The requested server was not found

     * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

     * 404 OperationIdNotFound - The operation with Id does not exist.

     * 409 OperationCancelled - The operation has been cancelled by user.

     * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

     * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
- name: 202 Accepted
  description: Accepted
requestBody:
- name: default
  parameters:
  - name: properties.privateEndpoint
    in: body
    description: Private endpoint which the connection belongs to.
    types:
    - uid: PrivateEndpointProperty
  - name: properties.privateLinkServiceConnectionState
    in: body
    description: Connection state of the private endpoint connection.
    types:
    - uid: PrivateLinkServiceConnectionStateProperty
requestHeader: []
definitions:
- name: PrivateEndpointProperty
  kind: object
  properties:
  - name: id
    description: Resource id of the private endpoint.
    types:
    - uid: string
- name: PrivateLinkServiceConnectionStateProperty
  kind: object
  properties:
  - name: status
    description: The private link service connection status.
    types:
    - uid: PrivateLinkServiceConnectionStateStatus
  - name: description
    description: The private link service connection description.
    types:
    - uid: string
  - name: actionsRequired
    isReadyOnly: true
    description: The actions required for private link service connection.
    types:
    - uid: PrivateLinkServiceConnectionStateActionsRequire
- name: PrivateEndpointConnection
  description: A private endpoint connection
  kind: object
  properties:
  - name: properties.privateEndpoint
    description: Private endpoint which the connection belongs to.
    types:
    - uid: PrivateEndpointProperty
  - name: properties.privateLinkServiceConnectionState
    description: Connection state of the private endpoint connection.
    types:
    - uid: PrivateLinkServiceConnectionStateProperty
  - name: properties.provisioningState
    isReadyOnly: true
    description: State of the private endpoint connection.
    types:
    - uid: PrivateEndpointProvisioningState
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
- name: PrivateLinkServiceConnectionStateStatus
  description: The private link service connection status.
  kind: enum
  properties:
  - name: Approved
    types:
    - uid: string
  - name: Pending
    types:
    - uid: string
  - name: Rejected
    types:
    - uid: string
  - name: Disconnected
    types:
    - uid: string
- name: PrivateLinkServiceConnectionStateActionsRequire
  description: The actions required for private link service connection.
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
- name: PrivateEndpointProvisioningState
  description: State of the private endpoint connection.
  kind: enum
  properties:
  - name: Approving
    types:
    - uid: string
  - name: Ready
    types:
    - uid: string
  - name: Dropping
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
  - name: Rejecting
    types:
    - uid: string
examples:
- name: Approve or reject a private endpoint connection with a given name.
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name?api-version=2020-11-01-preview
    body: >-
      {
        "properties": {
          "privateLinkServiceConnectionState": {
            "status": "Approved",
            "description": "Approved by johndoe@contoso.com"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name?api-version=2020-11-01-preview

      {
        "properties": {
          "privateLinkServiceConnectionState": {
            "status": "Approved",
            "description": "Approved by johndoe@contoso.com"
          }
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armsql_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionUpdate.json
      func ExamplePrivateEndpointConnectionsClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armsql.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"Default",
      		"test-svr",
      		"private-endpoint-connection-name",
      		armsql.PrivateEndpointConnection{
      			Properties: &armsql.PrivateEndpointConnectionProperties{
      				PrivateLinkServiceConnectionState: &armsql.PrivateLinkServiceConnectionStateProperty{
      					Description: to.Ptr("Approved by johndoe@contoso.com"),
      					Status:      to.Ptr(armsql.PrivateLinkServiceConnectionStateStatusApproved),
      				},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fsql%2Farmsql%2Fv1.0.0/sdk/resourcemanager/sql/armsql/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { SqlManagementClient } = require("@azure/arm-sql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Approve or reject a private endpoint connection with a given name.
       *
       * @summary Approve or reject a private endpoint connection with a given name.
       * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PrivateEndpointConnectionUpdate.json
       */
      async function approveOrRejectAPrivateEndpointConnectionWithAGivenName() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "Default";
        const serverName = "test-svr";
        const privateEndpointConnectionName = "private-endpoint-connection-name";
        const parameters = {
          privateLinkServiceConnectionState: {
            description: "Approved by johndoe@contoso.com",
            status: "Approved",
          },
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = await client.privateEndpointConnections.beginCreateOrUpdateAndWait(
          resourceGroupName,
          serverName,
          privateEndpointConnectionName,
          parameters
        );
        console.log(result);
      }

      approveOrRejectAPrivateEndpointConnectionWithAGivenName().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-sql_9.0.1/sdk/sql/arm-sql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/test-svr/privateEndpointConnections/private-endpoint-connection-name",
        "name": "private-endpoint-connection-name",
        "type": "Microsoft.Sql/servers/privateEndpointConnections",
        "properties": {
          "provisioningState": "Ready",
          "privateEndpoint": {
            "id": "/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"
          },
          "privateLinkServiceConnectionState": {
            "status": "Approved",
            "description": "Approved by johndoe@contoso.com",
            "actionsRequired": "None"
          }
        }
      }
  - statusCode: "202"
security: []
metadata:
  description: >
    Learn more about SQL Database service - Approve or reject a private endpoint connection with a given name.
errorCodes: []
