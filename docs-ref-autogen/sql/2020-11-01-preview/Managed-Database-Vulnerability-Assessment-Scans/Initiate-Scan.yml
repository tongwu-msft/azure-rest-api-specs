### YamlMime:RESTOperation
uid: management.azure.com.sql.2020-11-01-preview.manageddatabasevulnerabilityassessmentscans.initiatescan
name: Initiate Scan
service: SQL Database
groupName: Managed Database Vulnerability Assessment Scans
apiVersion: 2020-11-01-preview
summary: Executes a Vulnerability Assessment database scan.
consumes:
- application/json
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/default/scans/{scanId}/initiateScan?api-version=2020-11-01-preview
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription ID that identifies an Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  types:
  - uid: string
- name: managedInstanceName
  in: path
  isRequired: true
  description: The name of the managed instance.
  types:
  - uid: string
- name: databaseName
  in: path
  isRequired: true
  description: The name of the database.
  types:
  - uid: string
- name: vulnerabilityAssessmentName
  in: path
  isRequired: true
  description: The name of the vulnerability assessment.
  types:
  - uid: VulnerabilityAssessmentName
- name: scanId
  in: path
  isRequired: true
  description: The vulnerability assessment scan Id of the scan to retrieve.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for the request.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully executed a Vulnerability Assessment database scan.
- name: Other Status Codes
  description: "*** Error Responses: ***\n\n * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.\n\n * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.\n\n * 400 InvalidVulnerabilityAssessmentScanIdLength - The vulnerability assessment scan ID length must be below {0} characters.\n\n * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.\n\n * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.\n\n * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. \n\n * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.\n\n * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy\n\n * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.\n\n * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.\n\n * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.\n\n * 500 DatabaseIsUnavailable - Loading failed. Please try again later."
- name: 202 Accepted
  description: Successfully started a Vulnerability Assessment database scan.
requestHeader: []
definitions:
- name: VulnerabilityAssessmentName
  description: The name of the vulnerability assessment.
  kind: enum
  properties:
  - name: default
    types:
    - uid: string
examples:
- name: Executes a database's vulnerability assessment scan.
  request:
    uri: POST https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4711/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6411/databases/testdb/vulnerabilityAssessments/default/scans/scan01/initiateScan?api-version=2020-11-01-preview
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4711/providers/Microsoft.Sql/managedInstances/vulnerabilityassessmenttest-6411/databases/testdb/vulnerabilityAssessments/default/scans/scan01/initiateScan?api-version=2020-11-01-preview
      ```

      # [Go](#tab/Go)
      ``` go
      package armsql_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScansExecute.json
      func ExampleManagedDatabaseVulnerabilityAssessmentScansClient_BeginInitiateScan() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armsql.NewManagedDatabaseVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginInitiateScan(ctx,
      		"vulnerabilityassessmenttest-4711",
      		"vulnerabilityassessmenttest-6411",
      		"testdb",
      		armsql.VulnerabilityAssessmentNameDefault,
      		"scan01",
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	_, err = poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fsql%2Farmsql%2Fv1.0.0/sdk/resourcemanager/sql/armsql/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { SqlManagementClient } = require("@azure/arm-sql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Executes a Vulnerability Assessment database scan.
       *
       * @summary Executes a Vulnerability Assessment database scan.
       * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ManagedDatabaseVulnerabilityAssessmentScansExecute.json
       */
      async function executesADatabaseVulnerabilityAssessmentScan() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "vulnerabilityassessmenttest-4711";
        const managedInstanceName = "vulnerabilityassessmenttest-6411";
        const databaseName = "testdb";
        const vulnerabilityAssessmentName = "default";
        const scanId = "scan01";
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = await client.managedDatabaseVulnerabilityAssessmentScans.beginInitiateScanAndWait(
          resourceGroupName,
          managedInstanceName,
          databaseName,
          vulnerabilityAssessmentName,
          scanId
        );
        console.log(result);
      }

      executesADatabaseVulnerabilityAssessmentScan().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-sql_9.0.1/sdk/sql/arm-sql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
  - statusCode: "202"
security: []
metadata:
  description: Learn more about SQL Database service - Executes a Vulnerability Assessment database scan.
errorCodes: []
