### YamlMime:RESTOperation
uid: management.azure.com.sql.2020-11-01-preview.instancepools.update
name: Update
service: SQL Database
groupName: Instance Pools
apiVersion: 2020-11-01-preview
summary: Updates an instance pool.
consumes:
- application/json
produces:
- application/json
paths:
- content: PATCH https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}?api-version=2020-11-01-preview
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription ID that identifies an Azure subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
  types:
  - uid: string
- name: instancePoolName
  in: path
  isRequired: true
  description: The name of the instance pool to be updated.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for the request.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Successfully updated the instance pool.
  types:
  - uid: InstancePool
- name: Other Status Codes
  description: >-
    *** Error Responses: ***

     * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.
- name: 202 Accepted
  description: Accepted
requestBody:
- name: default
  parameters:
  - name: tags
    in: body
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: InstancePool
  description: An Azure SQL instance pool.
  kind: object
  properties:
  - name: sku
    description: The name and tier of the SKU.
    types:
    - uid: Sku
  - name: properties.subnetId
    description: Resource ID of the subnet to place this instance pool in.
    types:
    - uid: string
  - name: properties.vCores
    description: Count of vCores belonging to this instance pool.
    types:
    - uid: integer
  - name: properties.licenseType
    description: The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
    types:
    - uid: InstancePoolLicenseType
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
- name: InstancePoolUpdate
  description: An update to an Instance pool.
  kind: object
  properties:
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: Sku
  description: An ARM Resource SKU.
  kind: object
  properties:
  - name: name
    description: The name of the SKU, typically, a letter + Number code, e.g. P3.
    types:
    - uid: string
  - name: tier
    description: The tier or edition of the particular SKU, e.g. Basic, Premium.
    types:
    - uid: string
  - name: size
    description: Size of the particular SKU
    types:
    - uid: string
  - name: family
    description: If the service has different generations of hardware, for the same SKU, then that can be captured here.
    types:
    - uid: string
  - name: capacity
    description: Capacity of the particular SKU.
    types:
    - uid: integer
- name: InstancePoolLicenseType
  description: The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
  kind: enum
  properties:
  - name: LicenseIncluded
    types:
    - uid: string
  - name: BasePrice
    types:
    - uid: string
examples:
- name: Patch an instance pool
  request:
    uri: PATCH https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP?api-version=2020-11-01-preview
    body: >-
      {
        "tags": {
          "x": "y"
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PATCH https://management.azure.com/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP?api-version=2020-11-01-preview

      {
        "tags": {
          "x": "y"
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armsql_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sql/armsql"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PatchInstancePool.json
      func ExampleInstancePoolsClient_BeginUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armsql.NewInstancePoolsClient("00000000-1111-2222-3333-444444444444", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginUpdate(ctx,
      		"group1",
      		"testIP",
      		armsql.InstancePoolUpdate{
      			Tags: map[string]*string{
      				"x": to.Ptr("y"),
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fsql%2Farmsql%2Fv1.0.0/sdk/resourcemanager/sql/armsql/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { SqlManagementClient } = require("@azure/arm-sql");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Updates an instance pool.
       *
       * @summary Updates an instance pool.
       * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/PatchInstancePool.json
       */
      async function patchAnInstancePool() {
        const subscriptionId = "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = "group1";
        const instancePoolName = "testIP";
        const parameters = { tags: { x: "y" } };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = await client.instancePools.beginUpdateAndWait(
          resourceGroupName,
          instancePoolName,
          parameters
        );
        console.log(result);
      }

      patchAnInstancePool().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-sql_9.0.1/sdk/sql/arm-sql/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "sku": {
          "name": "GP_Gen5",
          "tier": "GeneralPurpose",
          "family": "Gen5"
        },
        "properties": {
          "subnetId": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Network/virtualNetwork/myvnet/subnets/mysubnet1",
          "vCores": 8,
          "licenseType": "LicenseIncluded"
        },
        "location": "japaneast",
        "tags": {
          "x": "y"
        },
        "id": "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/group1/providers/Microsoft.Sql/instancePools/testIP",
        "name": "testIP",
        "type": "Microsoft.Sql/instancePools"
      }
  - statusCode: "202"
security: []
metadata:
  description: Learn more about SQL Database service - Updates an instance pool.
errorCodes: []
