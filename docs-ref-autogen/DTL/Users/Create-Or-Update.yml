### YamlMime:RESTOperation
uid: management.azure.com.dtl.users.createorupdate
name: Create Or Update
service: Dev Test Labs
groupName: Users
apiVersion: 2018-09-15
summary: Create or replace an existing user profile. This operation can take a while to complete.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/users/{name}?api-version=2018-09-15
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription ID.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: labName
  in: path
  isRequired: true
  description: The name of the lab.
  types:
  - uid: string
- name: name
  in: path
  isRequired: true
  description: The name of the user profile.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: OK
  types:
  - uid: User
- name: 201 Created
  description: Created
  types:
  - uid: User
- name: Other Status Codes
  description: BadRequest
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: properties.identity
    in: body
    description: The identity of the user.
    types:
    - uid: UserIdentity
  - name: properties.secretStore
    in: body
    description: The secret store of the user.
    types:
    - uid: UserSecretStore
  - name: location
    in: body
    description: The location of the resource.
    types:
    - uid: string
  - name: tags
    in: body
    description: The tags of the resource.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: UserIdentity
  description: Identity attributes of a lab user.
  kind: object
  properties:
  - name: principalName
    description: Set to the principal name / UPN of the client JWT making the request.
    types:
    - uid: string
  - name: principalId
    description: Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id.
    types:
    - uid: string
  - name: tenantId
    description: Set to the tenant ID of the client JWT making the request.
    types:
    - uid: string
  - name: objectId
    description: Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available.
    types:
    - uid: string
  - name: appId
    description: Set to the app Id of the client JWT making the request.
    types:
    - uid: string
- name: UserSecretStore
  description: Properties of a user's secret store.
  kind: object
  properties:
  - name: keyVaultUri
    description: The URI of the user's Key vault.
    types:
    - uid: string
  - name: keyVaultId
    description: The ID of the user's Key vault.
    types:
    - uid: string
- name: User
  description: Profile of a lab user.
  kind: object
  properties:
  - name: properties.identity
    description: The identity of the user.
    types:
    - uid: UserIdentity
  - name: properties.secretStore
    description: The secret store of the user.
    types:
    - uid: UserSecretStore
  - name: properties.createdDate
    isReadyOnly: true
    description: The creation date of the user profile.
    types:
    - uid: string
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning status of the resource.
    types:
    - uid: string
  - name: properties.uniqueIdentifier
    isReadyOnly: true
    description: The unique immutable identifier of a resource (Guid).
    types:
    - uid: string
  - name: id
    isReadyOnly: true
    description: The identifier of the resource.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource.
    types:
    - uid: string
  - name: location
    description: The location of the resource.
    types:
    - uid: string
  - name: tags
    description: The tags of the resource.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: CloudError
  description: Error from a REST request.
  kind: object
  properties:
  - name: error
    description: The cloud error that occurred
    types:
    - uid: CloudErrorBody
- name: CloudErrorBody
  description: Body of an error from a REST request.
  kind: object
  properties:
  - name: code
    description: The error code.
    types:
    - uid: string
  - name: message
    description: The error message.
    types:
    - uid: string
  - name: target
    description: The error target.
    types:
    - uid: string
  - name: details
    description: Inner errors.
    types:
    - uid: CloudErrorBody
      isArray: true
examples:
- name: Users_CreateOrUpdate
  request:
    uri: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{devtestlabName}/users/{userName}?api-version=2018-09-15
    body: >-
      {
        "location": "{location}",
        "tags": {
          "tagName1": "tagValue1"
        },
        "properties": {
          "identity": {
            "principalName": "{principalName}",
            "principalId": "{principalId}",
            "tenantId": "{tenantId}",
            "objectId": "{objectId}",
            "appId": "{appId}"
          },
          "secretStore": {
            "keyVaultUri": "{keyVaultUri}",
            "keyVaultId": "{keyVaultId}"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{devtestlabName}/users/{userName}?api-version=2018-09-15

      {
        "location": "{location}",
        "tags": {
          "tagName1": "tagValue1"
        },
        "properties": {
          "identity": {
            "principalName": "{principalName}",
            "principalId": "{principalId}",
            "tenantId": "{tenantId}",
            "objectId": "{objectId}",
            "appId": "{appId}"
          },
          "secretStore": {
            "keyVaultUri": "{keyVaultUri}",
            "keyVaultId": "{keyVaultId}"
          }
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armdevtestlabs_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devtestlabs/armdevtestlabs"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_CreateOrUpdate.json
      func ExampleUsersClient_BeginCreateOrUpdate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armdevtestlabs.NewUsersClient("{subscriptionId}", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx,
      		"resourceGroupName",
      		"{devtestlabName}",
      		"{userName}",
      		armdevtestlabs.User{
      			Location: to.Ptr("{location}"),
      			Tags: map[string]*string{
      				"tagName1": to.Ptr("tagValue1"),
      			},
      			Properties: &armdevtestlabs.UserProperties{
      				Identity: &armdevtestlabs.UserIdentity{
      					AppID:         to.Ptr("{appId}"),
      					ObjectID:      to.Ptr("{objectId}"),
      					PrincipalID:   to.Ptr("{principalId}"),
      					PrincipalName: to.Ptr("{principalName}"),
      					TenantID:      to.Ptr("{tenantId}"),
      				},
      				SecretStore: &armdevtestlabs.UserSecretStore{
      					KeyVaultID:  to.Ptr("{keyVaultId}"),
      					KeyVaultURI: to.Ptr("{keyVaultUri}"),
      				},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fdevtestlabs%2Farmdevtestlabs%2Fv1.0.0/sdk/resourcemanager/devtestlabs/armdevtestlabs/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { DevTestLabsClient } = require("@azure/arm-devtestlabs");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or replace an existing user profile. This operation can take a while to complete.
       *
       * @summary Create or replace an existing user profile. This operation can take a while to complete.
       * x-ms-original-file: specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/Users_CreateOrUpdate.json
       */
      async function usersCreateOrUpdate() {
        const subscriptionId = "{subscriptionId}";
        const resourceGroupName = "resourceGroupName";
        const labName = "{devtestlabName}";
        const name = "{userName}";
        const user = {
          identity: {
            appId: "{appId}",
            objectId: "{objectId}",
            principalId: "{principalId}",
            principalName: "{principalName}",
            tenantId: "{tenantId}",
          },
          location: "{location}",
          secretStore: { keyVaultId: "{keyVaultId}", keyVaultUri: "{keyVaultUri}" },
          tags: { tagName1: "tagValue1" },
        };
        const credential = new DefaultAzureCredential();
        const client = new DevTestLabsClient(credential, subscriptionId);
        const result = await client.users.beginCreateOrUpdateAndWait(
          resourceGroupName,
          labName,
          name,
          user
        );
        console.log(result);
      }

      usersCreateOrUpdate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-devtestlabs_4.0.1/sdk/devtestlabs/arm-devtestlabs/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "properties": {
          "identity": {
            "principalName": "{principalName}",
            "principalId": "{principalId}",
            "tenantId": "{tenantId}",
            "objectId": "{objectId}",
            "appId": "{appId}"
          },
          "secretStore": {
            "keyVaultUri": "{keyVaultUri}",
            "keyVaultId": "{keyVaultId}"
          },
          "createdDate": "2018-10-01T18:40:48.1739018-07:00",
          "provisioningState": "Succeeded",
          "uniqueIdentifier": "{uniqueIdentifier}"
        }
      }
  - statusCode: "201"
    body: >-
      {
        "properties": {
          "identity": {
            "principalName": "{principalName}",
            "principalId": "{principalId}",
            "tenantId": "{tenantId}",
            "objectId": "{objectId}",
            "appId": "{appId}"
          },
          "secretStore": {
            "keyVaultUri": "{keyVaultUri}",
            "keyVaultId": "{keyVaultId}"
          },
          "createdDate": "2018-10-01T18:40:48.1739018-07:00",
          "provisioningState": "Succeeded",
          "uniqueIdentifier": "{uniqueIdentifier}"
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: OAuth2 Implicit Grant
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: Access Microsoft Azure
metadata:
  description: Learn more about Dev Test Labs service - Create or replace an existing user profile. This operation can take a while to complete.
errorCodes: []
