### YamlMime:RESTOperation
uid: management.azure.com.policy.policyevents.listqueryresultsforsubscription
name: List Query Results For Subscription
service: Policy
groupName: Policy Events
apiVersion: 2019-10-01
summary: Queries policy events for the resources under the subscription.
produces:
- application/json
paths:
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01
- content: POST https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top={$top}&$orderby={$orderby}&$select={$select}&$from={$from}&$to={$to}&$filter={$filter}&$apply={$apply}&$skiptoken={$skiptoken}
  isOptional: true
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Microsoft Azure subscription ID.
  types:
  - uid: string
- name: policyEventsResource
  in: path
  isRequired: true
  description: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  types:
  - uid: PolicyEventsResourceType
- name: api-version
  in: query
  isRequired: true
  description: Client Api Version.
  types:
  - uid: string
- name: $top
  in: query
  description: Maximum number of records to return.
  types:
  - uid: integer
  format: int32
- name: $orderby
  in: query
  description: Ordering expression using OData notation. One or more comma-separated column names with an optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
  types:
  - uid: string
- name: $select
  in: query
  description: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
  types:
  - uid: string
- name: $from
  in: query
  description: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
  types:
  - uid: string
  format: date-time
- name: $to
  in: query
  description: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
  types:
  - uid: string
  format: date-time
- name: $filter
  in: query
  description: OData filter expression.
  types:
  - uid: string
- name: $apply
  in: query
  description: OData apply expression for aggregations.
  types:
  - uid: string
- name: $skiptoken
  in: query
  description: Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Query results.
  types:
  - uid: PolicyEventsQueryResults
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: QueryFailure
requestHeader: []
definitions:
- name: PolicyEventsResourceType
  description: The name of the virtual resource under PolicyEvents resource type; only "default" is allowed.
  kind: enum
  properties:
  - name: default
    types:
    - uid: string
- name: PolicyEventsQueryResults
  description: Query results.
  kind: object
  properties:
  - name: '@odata.context'
    description: OData context string; used by OData clients to resolve type information based on metadata.
    types:
    - uid: string
  - name: '@odata.count'
    description: OData entity count; represents the number of policy event records returned.
    types:
    - uid: integer
  - name: '@odata.nextLink'
    description: Odata next link; URL to get the next set of results.
    types:
    - uid: string
  - name: value
    description: Query results.
    types:
    - uid: PolicyEvent
      isArray: true
- name: QueryFailure
  description: Error response.
  kind: object
  properties:
  - name: error
    description: Error definition.
    types:
    - uid: Error
- name: PolicyEvent
  description: Policy event record.
  kind: object
  properties:
  - name: '@odata.id'
    description: OData entity ID; always set to null since policy event records do not have an entity ID.
    types:
    - uid: string
  - name: '@odata.context'
    description: OData context string; used by OData clients to resolve type information based on metadata.
    types:
    - uid: string
  - name: timestamp
    description: Timestamp for the policy event record.
    types:
    - uid: string
  - name: resourceId
    description: Resource ID.
    types:
    - uid: string
  - name: policyAssignmentId
    description: Policy assignment ID.
    types:
    - uid: string
  - name: policyDefinitionId
    description: Policy definition ID.
    types:
    - uid: string
  - name: effectiveParameters
    description: Effective parameters for the policy assignment.
    types:
    - uid: string
  - name: isCompliant
    description: Flag which states whether the resource is compliant against the policy assignment it was evaluated against.
    types:
    - uid: boolean
  - name: subscriptionId
    description: Subscription ID.
    types:
    - uid: string
  - name: resourceType
    description: Resource type.
    types:
    - uid: string
  - name: resourceLocation
    description: Resource location.
    types:
    - uid: string
  - name: resourceGroup
    description: Resource group name.
    types:
    - uid: string
  - name: resourceTags
    description: List of resource tags.
    types:
    - uid: string
  - name: policyAssignmentName
    description: Policy assignment name.
    types:
    - uid: string
  - name: policyAssignmentOwner
    description: Policy assignment owner.
    types:
    - uid: string
  - name: policyAssignmentParameters
    description: Policy assignment parameters.
    types:
    - uid: string
  - name: policyAssignmentScope
    description: Policy assignment scope.
    types:
    - uid: string
  - name: policyDefinitionName
    description: Policy definition name.
    types:
    - uid: string
  - name: policyDefinitionAction
    description: Policy definition action, i.e. effect.
    types:
    - uid: string
  - name: policyDefinitionCategory
    description: Policy definition category.
    types:
    - uid: string
  - name: policySetDefinitionId
    description: Policy set definition ID, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionName
    description: Policy set definition name, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionOwner
    description: Policy set definition owner, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionCategory
    description: Policy set definition category, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionParameters
    description: Policy set definition parameters, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: managementGroupIds
    description: Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
    types:
    - uid: string
  - name: policyDefinitionReferenceId
    description: Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: complianceState
    description: Compliance state of the resource.
    types:
    - uid: string
  - name: tenantId
    description: Tenant ID for the policy event record.
    types:
    - uid: string
  - name: principalOid
    description: Principal object ID for the user who initiated the resource operation that triggered the policy event.
    types:
    - uid: string
  - name: components
    description: Components events records populated only when URL contains $expand=components clause.
    types:
    - uid: ComponentEventDetails
      isArray: true
- name: Error
  description: Error definition.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: Service specific error code which serves as the substatus for the HTTP error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: Description of the error.
    types:
    - uid: string
- name: ComponentEventDetails
  description: Component event details.
  kind: object
  properties:
  - name: id
    description: Component Id.
    types:
    - uid: string
  - name: type
    description: Component type.
    types:
    - uid: string
  - name: name
    description: Component name.
    types:
    - uid: string
  - name: timestamp
    description: Timestamp for component policy event record.
    types:
    - uid: string
  - name: tenantId
    description: Tenant ID for the policy event record.
    types:
    - uid: string
  - name: principalOid
    description: Principal object ID for the user who initiated the resource component operation that triggered the policy event.
    types:
    - uid: string
  - name: policyDefinitionAction
    description: Policy definition action, i.e. effect.
    types:
    - uid: string
examples:
- name: Query at subscription scope
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_QuerySubscriptionScope.json
           */
          /**
           * Sample code: Query at subscription scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAtSubscriptionScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_QuerySubscriptionScope.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_queryAtSubscriptionScope() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_QuerySubscriptionScope.json
       */
      async function queryAtSubscriptionScope() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAtSubscriptionScope().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "timestamp": "2018-02-07T20:43:04.6971328Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/ec62f9b2a454487296f2ccd4",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyDefinitions/72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ServiceFabric/clusters/applications",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "ec62f9b2a454487296f2ccd4",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"ALLOWEDRESOURCEGROUPS_1\":{\"value\":[\"rg1\",\"rg2\"]},\"ALLOWEDRESOURCEGROUPS_2\":{\"value\":[\"myrg3\",\"myrg4\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/myManagementGroup",
            "policyDefinitionName": "72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policySetDefinitions/00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionName": "00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "myManagementGroup,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": "181565554491747128",
            "tenantId": "fff988bf-fff1-ffff-fffb-fffcd011db47",
            "principalOid": "fffdfc0f-fff5-fff0-fff3-fff1a968dcc6",
            "complianceState": "NonCompliant"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "timestamp": "2018-02-07T20:43:04.6971328Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/ec62f9b2a454487296f2ccd4",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyDefinitions/72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ServiceFabric/clusters/applications",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "ec62f9b2a454487296f2ccd4",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"ALLOWEDRESOURCEGROUPS_1\":{\"value\":[\"rg1\",\"rg2\"]},\"ALLOWEDRESOURCEGROUPS_2\":{\"value\":[\"myrg3\",\"myrg4\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/myManagementGroup",
            "policyDefinitionName": "72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policySetDefinitions/00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionName": "00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "myManagementGroup,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": "624540685646900425",
            "tenantId": "fff988bf-fff1-ffff-fffb-fffcd011db47",
            "principalOid": "fffdfc0f-fff5-fff0-fff3-fff1a968dcc6",
            "complianceState": "NonCompliant"
          }
        ]
      }
- name: Query at subscription scope with next link
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$skiptoken=WpmWfBSvPhkAK6QD
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$skiptoken=WpmWfBSvPhkAK6QD
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_QuerySubscriptionScopeNextLink.json
           */
          /**
           * Sample code: Query at subscription scope with next link.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAtSubscriptionScopeWithNextLink(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      "WpmWfBSvPhkAK6QD",
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_QuerySubscriptionScopeNextLink.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_queryAtSubscriptionScopeWithNextLink() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: to.Ptr("WpmWfBSvPhkAK6QD"),
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_QuerySubscriptionScopeNextLink.json
       */
      async function queryAtSubscriptionScopeWithNextLink() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const skipToken = "WpmWfBSvPhkAK6QD";
        const options = {
          queryOptions: { skipToken: skipToken },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAtSubscriptionScopeWithNextLink().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "timestamp": "2018-02-07T20:43:04.6971328Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/ec62f9b2a454487296f2ccd4",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyDefinitions/72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ServiceFabric/clusters/applications",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "ec62f9b2a454487296f2ccd4",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"ALLOWEDRESOURCEGROUPS_1\":{\"value\":[\"rg1\",\"rg2\"]},\"ALLOWEDRESOURCEGROUPS_2\":{\"value\":[\"myrg3\",\"myrg4\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/myManagementGroup",
            "policyDefinitionName": "72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policySetDefinitions/00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionName": "00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "myManagementGroup,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": "181565554491747128",
            "tenantId": "fff988bf-fff1-ffff-fffb-fffcd011db47",
            "principalOid": "fffdfc0f-fff5-fff0-fff3-fff1a968dcc6",
            "complianceState": "NonCompliant"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "timestamp": "2018-02-07T20:43:04.6971328Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/ec62f9b2a454487296f2ccd4",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyDefinitions/72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ServiceFabric/clusters/applications",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "ec62f9b2a454487296f2ccd4",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"ALLOWEDRESOURCEGROUPS_1\":{\"value\":[\"rg1\",\"rg2\"]},\"ALLOWEDRESOURCEGROUPS_2\":{\"value\":[\"myrg3\",\"myrg4\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/myManagementGroup",
            "policyDefinitionName": "72c0c41a-c752-4bc0-9c61-0d6adc567066",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policySetDefinitions/00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionName": "00b36c66-612b-44e2-9f8e-b758296d40fe",
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "myManagementGroup,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": "624540685646900425",
            "tenantId": "fff988bf-fff1-ffff-fffb-fffcd011db47",
            "principalOid": "fffdfc0f-fff5-fff0-fff3-fff1a968dcc6",
            "complianceState": "NonCompliant"
          }
        ]
      }
- name: Time range; sort, select and limit
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=2&$orderby=Timestamp desc, PolicyAssignmentId asc, SubscriptionId asc, ResourceGroup asc, ResourceId&$select=Timestamp, PolicyAssignmentId, PolicyDefinitionId, SubscriptionId, ResourceGroup, ResourceId&$from=2018-02-05T18:00:00Z&$to=2018-02-06T18:00:00Z
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=2&$orderby=Timestamp desc, PolicyAssignmentId asc, SubscriptionId asc, ResourceGroup asc, ResourceId&$select=Timestamp, PolicyAssignmentId, PolicyDefinitionId, SubscriptionId, ResourceGroup, ResourceId&$from=2018-02-05T18:00:00Z&$to=2018-02-06T18:00:00Z
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;
      import java.time.OffsetDateTime;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_TimeRangeSortSelectTop.json
           */
          /**
           * Sample code: Time range; sort, select and limit.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void timeRangeSortSelectAndLimit(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      2,
                      "Timestamp desc, PolicyAssignmentId asc, SubscriptionId asc, ResourceGroup asc, ResourceId",
                      "Timestamp, PolicyAssignmentId, PolicyDefinitionId, SubscriptionId, ResourceGroup, ResourceId",
                      OffsetDateTime.parse("2018-02-05T18:00:00Z"),
                      OffsetDateTime.parse("2018-02-06T18:00:00Z"),
                      null,
                      null,
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_TimeRangeSortSelectTop.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_timeRangeSortSelectAndLimit() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: to.Ptr[int32](2),
      		Filter:    nil,
      		OrderBy:   to.Ptr("Timestamp desc, PolicyAssignmentId asc, SubscriptionId asc, ResourceGroup asc, ResourceId"),
      		Select:    to.Ptr("Timestamp, PolicyAssignmentId, PolicyDefinitionId, SubscriptionId, ResourceGroup, ResourceId"),
      		From:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-05T18:00:00Z"); return t }()),
      		To:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-06T18:00:00Z"); return t }()),
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_TimeRangeSortSelectTop.json
       */
      async function timeRangeSortSelectAndLimit() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const top = 2;
        const orderBy =
          "Timestamp desc, PolicyAssignmentId asc, SubscriptionId asc, ResourceGroup asc, ResourceId";
        const select =
          "Timestamp, PolicyAssignmentId, PolicyDefinitionId, SubscriptionId, ResourceGroup, ResourceId";
        const fromParam = new Date("2018-02-05T18:00:00Z");
        const to = new Date("2018-02-06T18:00:00Z");
        const options = {
          queryOptions: { top: top, from: fromParam, to: to, select: select },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      timeRangeSortSelectAndLimit().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "timestamp": "2018-02-05T22:34:02.3475017Z",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.Authorization/policyAssignments/89b27f38-e9e4-4468-ab81-801c84b8c017",
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/201ea587-7c90-41c3-910f-c280ae01cfd6",
            "subscriptionId": "fffedd8f-ffff-fffd-fffd-fffed2f84852",
            "resourceGroup": "myResourceGroup",
            "resourceId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomain"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "timestamp": "2018-02-05T22:34:01.6135357Z",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.Authorization/policyAssignments/Enable Monitoring in Azure Security Center",
            "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/201ea587-7c90-41c3-910f-c280ae01cfd6",
            "subscriptionId": "fffedd8f-ffff-fffd-fffd-fffed2f84852",
            "resourceGroup": "myResourceGroup",
            "resourceId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomain"
          }
        ]
      }
- name: Filter and group with aggregate
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=2&$from=2018-02-05T18:00:00Z&$filter=PolicyDefinitionAction eq 'audit' or PolicyDefinitionAction eq 'deny'&$apply=groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId), aggregate($count as NumEvents))
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=2&$from=2018-02-05T18:00:00Z&$filter=PolicyDefinitionAction eq 'audit' or PolicyDefinitionAction eq 'deny'&$apply=groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId), aggregate($count as NumEvents))
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;
      import java.time.OffsetDateTime;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndGroupByWithAggregate.json
           */
          /**
           * Sample code: Filter and group with aggregate.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void filterAndGroupWithAggregate(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      2,
                      null,
                      null,
                      OffsetDateTime.parse("2018-02-05T18:00:00Z"),
                      null,
                      "PolicyDefinitionAction eq 'audit' or PolicyDefinitionAction eq 'deny'",
                      "groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId), aggregate($count"
                          + " as NumEvents))",
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndGroupByWithAggregate.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_filterAndGroupWithAggregate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: to.Ptr[int32](2),
      		Filter:    to.Ptr("PolicyDefinitionAction eq 'audit' or PolicyDefinitionAction eq 'deny'"),
      		OrderBy:   nil,
      		Select:    nil,
      		From:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-05T18:00:00Z"); return t }()),
      		To:        nil,
      		Apply:     to.Ptr("groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId), aggregate($count as NumEvents))"),
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndGroupByWithAggregate.json
       */
      async function filterAndGroupWithAggregate() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const top = 2;
        const fromParam = new Date("2018-02-05T18:00:00Z");
        const filter = "PolicyDefinitionAction eq 'audit' or PolicyDefinitionAction eq 'deny'";
        const apply =
          "groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId), aggregate($count as NumEvents))";
        const options = {
          queryOptions: { top: top, from: fromParam, filter: filter, apply: apply },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      filterAndGroupWithAggregate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policyassignments/3f3c4330183b4e218fe6fd29",
            "policyDefinitionId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policydefinitions/24813039-7534-408a-9842-eb99f45721b1",
            "policyDefinitionAction": "audit",
            "resourceId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup/providers/microsoft.servicefabric/clusters/myCluster/applications/resourcescachemonitor/services/myService",
            "NumEvents": 1
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policyassignments/d6be6bb37e5f4333baa95c2a",
            "policyDefinitionId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policydefinitions/5948d091-78b7-4d3b-a404-cc6a0329b0c6",
            "policyDefinitionAction": "audit",
            "resourceId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup/providers/microsoft.servicefabric/clusters/myCluster/applications/resourcescachemonitor/services/myService",
            "NumEvents": 1
          }
        ]
      }
- name: Filter and group without aggregate
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=2&$from=2018-01-05T18:00:00Z&$filter=PolicyDefinitionAction ne 'audit' and PolicyDefinitionAction ne 'append'&$apply=groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId))
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=2&$from=2018-01-05T18:00:00Z&$filter=PolicyDefinitionAction ne 'audit' and PolicyDefinitionAction ne 'append'&$apply=groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId))
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;
      import java.time.OffsetDateTime;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndGroupByWithoutAggregate.json
           */
          /**
           * Sample code: Filter and group without aggregate.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void filterAndGroupWithoutAggregate(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      2,
                      null,
                      null,
                      OffsetDateTime.parse("2018-01-05T18:00:00Z"),
                      null,
                      "PolicyDefinitionAction ne 'audit' and PolicyDefinitionAction ne 'append'",
                      "groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId))",
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndGroupByWithoutAggregate.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_filterAndGroupWithoutAggregate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: to.Ptr[int32](2),
      		Filter:    to.Ptr("PolicyDefinitionAction ne 'audit' and PolicyDefinitionAction ne 'append'"),
      		OrderBy:   nil,
      		Select:    nil,
      		From:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-05T18:00:00Z"); return t }()),
      		To:        nil,
      		Apply:     to.Ptr("groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId))"),
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndGroupByWithoutAggregate.json
       */
      async function filterAndGroupWithoutAggregate() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const top = 2;
        const fromParam = new Date("2018-01-05T18:00:00Z");
        const filter = "PolicyDefinitionAction ne 'audit' and PolicyDefinitionAction ne 'append'";
        const apply =
          "groupby((PolicyAssignmentId, PolicyDefinitionId, PolicyDefinitionAction, ResourceId))";
        const options = {
          queryOptions: { top: top, from: fromParam, filter: filter, apply: apply },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      filterAndGroupWithoutAggregate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/5bc427ca-0089-4d0d-85bd-e98d1e40b3bf/providers/microsoft.authorization/policyassignments/storageaccountsku",
            "policyDefinitionId": "/providers/microsoft.authorization/policydefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
            "policyDefinitionAction": "deny",
            "resourceId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/5bc427ca-0089-4d0d-85bd-e98d1e40b3bf/providers/microsoft.storage/storageaccounts/7d528d3a"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup/providers/microsoft.authorization/policyassignments/da43b50031bf4bce84584faa",
            "policyDefinitionId": "/providers/microsoft.authorization/policydefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
            "policyDefinitionAction": "deny",
            "resourceId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup/providers/microsoft.storage/storageaccounts/mysa1"
          }
        ]
      }
- name: Filter and aggregate only
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$from=2018-02-05T18:00:00Z&$filter=PolicyDefinitionAction eq 'deny'&$apply=aggregate($count as NumDenyEvents)
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$from=2018-02-05T18:00:00Z&$filter=PolicyDefinitionAction eq 'deny'&$apply=aggregate($count as NumDenyEvents)
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;
      import java.time.OffsetDateTime;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndAggregateOnly.json
           */
          /**
           * Sample code: Filter and aggregate only.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void filterAndAggregateOnly(com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      null,
                      null,
                      null,
                      OffsetDateTime.parse("2018-02-05T18:00:00Z"),
                      null,
                      "PolicyDefinitionAction eq 'deny'",
                      "aggregate($count as NumDenyEvents)",
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndAggregateOnly.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_filterAndAggregateOnly() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    to.Ptr("PolicyDefinitionAction eq 'deny'"),
      		OrderBy:   nil,
      		Select:    nil,
      		From:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-02-05T18:00:00Z"); return t }()),
      		To:        nil,
      		Apply:     to.Ptr("aggregate($count as NumDenyEvents)"),
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndAggregateOnly.json
       */
      async function filterAndAggregateOnly() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const fromParam = new Date("2018-02-05T18:00:00Z");
        const filter = "PolicyDefinitionAction eq 'deny'";
        const apply = "aggregate($count as NumDenyEvents)";
        const options = {
          queryOptions: { from: fromParam, filter: filter, apply: apply },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      filterAndAggregateOnly().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 1,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "NumDenyEvents": 40
          }
        ]
      }
- name: Filter and multiple groups
  request:
    uri: POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=10&$orderby=NumDeniedResources desc&$from=2018-01-01T00:00:00Z&$filter=PolicyDefinitionAction eq 'deny'&$apply=groupby((PolicyAssignmentId, PolicyDefinitionId, ResourceId))/groupby((PolicyAssignmentId, PolicyDefinitionId), aggregate($count as NumDeniedResources))
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/default/queryResults?api-version=2019-10-01&$top=10&$orderby=NumDeniedResources desc&$from=2018-01-01T00:00:00Z&$filter=PolicyDefinitionAction eq 'deny'&$apply=groupby((PolicyAssignmentId, PolicyDefinitionId, ResourceId))/groupby((PolicyAssignmentId, PolicyDefinitionId), aggregate($count as NumDeniedResources))
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyEventsResourceType;
      import java.time.OffsetDateTime;

      /** Samples for PolicyEvents ListQueryResultsForSubscription. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndMultipleGroups.json
           */
          /**
           * Sample code: Filter and multiple groups.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void filterAndMultipleGroups(com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyEvents()
                  .listQueryResultsForSubscription(
                      PolicyEventsResourceType.DEFAULT,
                      "fffedd8f-ffff-fffd-fffd-fffed2f84852",
                      10,
                      "NumDeniedResources desc",
                      null,
                      OffsetDateTime.parse("2018-01-01T00:00:00Z"),
                      null,
                      "PolicyDefinitionAction eq 'deny'",
                      "groupby((PolicyAssignmentId, PolicyDefinitionId, ResourceId))/groupby((PolicyAssignmentId,"
                          + " PolicyDefinitionId), aggregate($count as NumDeniedResources))",
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"time"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndMultipleGroups.json
      func ExamplePolicyEventsClient_NewListQueryResultsForSubscriptionPager_filterAndMultipleGroups() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyEventsClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForSubscriptionPager(armpolicyinsights.PolicyEventsResourceTypeDefault, "fffedd8f-ffff-fffd-fffd-fffed2f84852", &armpolicyinsights.QueryOptions{Top: to.Ptr[int32](10),
      		Filter:    to.Ptr("PolicyDefinitionAction eq 'deny'"),
      		OrderBy:   to.Ptr("NumDeniedResources desc"),
      		Select:    nil,
      		From:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
      		To:        nil,
      		Apply:     to.Ptr("groupby((PolicyAssignmentId, PolicyDefinitionId, ResourceId))/groupby((PolicyAssignmentId, PolicyDefinitionId), aggregate($count as NumDeniedResources))"),
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy events for the resources under the subscription.
       *
       * @summary Queries policy events for the resources under the subscription.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyEvents_FilterAndMultipleGroups.json
       */
      async function filterAndMultipleGroups() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyEventsResource = "default";
        const top = 10;
        const orderBy = "NumDeniedResources desc";
        const fromParam = new Date("2018-01-01T00:00:00Z");
        const filter = "PolicyDefinitionAction eq 'deny'";
        const apply =
          "groupby((PolicyAssignmentId, PolicyDefinitionId, ResourceId))/groupby((PolicyAssignmentId, PolicyDefinitionId), aggregate($count as NumDeniedResources))";
        const options = {
          queryOptions: { top: top, orderBy: orderBy, from: fromParam, filter: filter, apply: apply },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyEvents.listQueryResultsForSubscription(
          policyEventsResource,
          subscriptionId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      filterAndMultipleGroups().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default",
        "@odata.count": 6,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup1/providers/microsoft.authorization/policyassignments/0591f497c35344fcbaf7a393",
            "policyDefinitionId": "/providers/microsoft.authorization/policydefinitions/e56962a6-4747-49cd-b67b-bf8b01975c4c",
            "NumDeniedResources": 3
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup1/providers/microsoft.authorization/policyassignments/myassignment1",
            "policyDefinitionId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policydefinitions/mydefinition1",
            "NumDeniedResources": 2
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup1/providers/microsoft.authorization/policyassignments/myassignment1",
            "policyDefinitionId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policydefinitions/mydefinition2",
            "NumDeniedResources": 2
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/5bc427ca-0089-4d0d-85bd-e98d1e40b3bf/providers/microsoft.authorization/policyassignments/storageaccountsku",
            "policyDefinitionId": "/providers/microsoft.authorization/policydefinitions/7433c107-6db4-4ad1-b57a-a76dce0154a1",
            "NumDeniedResources": 1
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup2/providers/microsoft.authorization/policyassignments/da43b50031bf4bce84584faa",
            "policyDefinitionId": "/providers/microsoft.authorization/policydefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
            "NumDeniedResources": 1
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/Microsoft.PolicyInsights/policyEvents/$metadata#default/$entity",
            "policyAssignmentId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/resourcegroups/myResourceGroup2/providers/microsoft.authorization/policyassignments/myassignment2",
            "policyDefinitionId": "/subscriptions/fffedd8f-ffff-fffd-fffd-fffed2f84852/providers/microsoft.authorization/policydefinitions/mydefinition3",
            "NumDeniedResources": 1
          }
        ]
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Policy service - Queries policy events for the resources under the subscription.
errorCodes: []
