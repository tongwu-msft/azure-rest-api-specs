### YamlMime:RESTOperation
uid: management.azure.com.policy.policystates.listqueryresultsforresource
name: List Query Results For Resource
service: Policy
groupName: Policy States
apiVersion: 2019-10-01
summary: Queries policy states for the resource.
produces:
- application/json
paths:
- content: POST https://management.azure.com/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults?api-version=2019-10-01
- content: POST https://management.azure.com/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults?api-version=2019-10-01&$top={$top}&$orderby={$orderby}&$select={$select}&$from={$from}&$to={$to}&$filter={$filter}&$apply={$apply}&$expand={$expand}&$skiptoken={$skiptoken}
  isOptional: true
uriParameters:
- name: resourceId
  in: path
  isRequired: true
  skipUrlEncoding: true
  description: Resource ID.
  types:
  - uid: string
- name: policyStatesResource
  in: path
  isRequired: true
  description: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  types:
  - uid: PolicyStatesResource
- name: api-version
  in: query
  isRequired: true
  description: Client Api Version.
  types:
  - uid: string
- name: $top
  in: query
  description: Maximum number of records to return.
  types:
  - uid: integer
  format: int32
- name: $orderby
  in: query
  description: Ordering expression using OData notation. One or more comma-separated column names with an optional "desc" (the default) or "asc", e.g. "$orderby=PolicyAssignmentId, ResourceId asc".
  types:
  - uid: string
- name: $select
  in: query
  description: Select expression using OData notation. Limits the columns on each record to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
  types:
  - uid: string
- name: $from
  in: query
  description: ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
  types:
  - uid: string
  format: date-time
- name: $to
  in: query
  description: ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
  types:
  - uid: string
  format: date-time
- name: $filter
  in: query
  description: OData filter expression.
  types:
  - uid: string
- name: $apply
  in: query
  description: OData apply expression for aggregations.
  types:
  - uid: string
- name: $expand
  in: query
  description: The $expand query parameter. For example, to expand components use $expand=components
  types:
  - uid: string
- name: $skiptoken
  in: query
  description: Skiptoken is only provided if a previous response returned a partial result as a part of nextLink element.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Query results.
  types:
  - uid: PolicyStatesQueryResults
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: QueryFailure
requestHeader: []
definitions:
- name: PolicyStatesResource
  description: The virtual resource under PolicyStates resource type. In a given time range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy state(s).
  kind: enum
  properties:
  - name: default
    types:
    - uid: string
  - name: latest
    types:
    - uid: string
- name: PolicyStatesQueryResults
  description: Query results.
  kind: object
  properties:
  - name: '@odata.context'
    description: OData context string; used by OData clients to resolve type information based on metadata.
    types:
    - uid: string
  - name: '@odata.count'
    description: OData entity count; represents the number of policy state records returned.
    types:
    - uid: integer
  - name: '@odata.nextLink'
    description: Odata next link; URL to get the next set of results.
    types:
    - uid: string
  - name: value
    description: Query results.
    types:
    - uid: PolicyState
      isArray: true
- name: QueryFailure
  description: Error response.
  kind: object
  properties:
  - name: error
    description: Error definition.
    types:
    - uid: Error
- name: PolicyState
  description: Policy state record.
  kind: object
  properties:
  - name: '@odata.id'
    description: OData entity ID; always set to null since policy state records do not have an entity ID.
    types:
    - uid: string
  - name: '@odata.context'
    description: OData context string; used by OData clients to resolve type information based on metadata.
    types:
    - uid: string
  - name: timestamp
    description: Timestamp for the policy state record.
    types:
    - uid: string
  - name: resourceId
    description: Resource ID.
    types:
    - uid: string
  - name: policyAssignmentId
    description: Policy assignment ID.
    types:
    - uid: string
  - name: policyDefinitionId
    description: Policy definition ID.
    types:
    - uid: string
  - name: effectiveParameters
    description: Effective parameters for the policy assignment.
    types:
    - uid: string
  - name: isCompliant
    description: Flag which states whether the resource is compliant against the policy assignment it was evaluated against. This property is deprecated; please use ComplianceState instead.
    types:
    - uid: boolean
  - name: subscriptionId
    description: Subscription ID.
    types:
    - uid: string
  - name: resourceType
    description: Resource type.
    types:
    - uid: string
  - name: resourceLocation
    description: Resource location.
    types:
    - uid: string
  - name: resourceGroup
    description: Resource group name.
    types:
    - uid: string
  - name: resourceTags
    description: List of resource tags.
    types:
    - uid: string
  - name: policyAssignmentName
    description: Policy assignment name.
    types:
    - uid: string
  - name: policyAssignmentOwner
    description: Policy assignment owner.
    types:
    - uid: string
  - name: policyAssignmentParameters
    description: Policy assignment parameters.
    types:
    - uid: string
  - name: policyAssignmentScope
    description: Policy assignment scope.
    types:
    - uid: string
  - name: policyDefinitionName
    description: Policy definition name.
    types:
    - uid: string
  - name: policyDefinitionAction
    description: Policy definition action, i.e. effect.
    types:
    - uid: string
  - name: policyDefinitionCategory
    description: Policy definition category.
    types:
    - uid: string
  - name: policySetDefinitionId
    description: Policy set definition ID, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionName
    description: Policy set definition name, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionOwner
    description: Policy set definition owner, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionCategory
    description: Policy set definition category, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: policySetDefinitionParameters
    description: Policy set definition parameters, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: managementGroupIds
    description: Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
    types:
    - uid: string
  - name: policyDefinitionReferenceId
    description: Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
    types:
    - uid: string
  - name: complianceState
    description: Compliance state of the resource.
    types:
    - uid: string
  - name: policyEvaluationDetails
    description: Policy evaluation details.
    types:
    - uid: PolicyEvaluationDetails
  - name: policyDefinitionGroupNames
    description: Policy definition group names.
    types:
    - uid: string
      isArray: true
  - name: components
    description: Components state compliance records populated only when URL contains $expand=components clause.
    types:
    - uid: ComponentStateDetails
      isArray: true
  - name: policyDefinitionVersion
    isReadyOnly: true
    description: Evaluated policy definition version.
    types:
    - uid: string
  - name: policySetDefinitionVersion
    isReadyOnly: true
    description: Evaluated policy set definition version.
    types:
    - uid: string
  - name: policyAssignmentVersion
    isReadyOnly: true
    description: Evaluated policy assignment version.
    types:
    - uid: string
- name: Error
  description: Error definition.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: Service specific error code which serves as the substatus for the HTTP error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: Description of the error.
    types:
    - uid: string
- name: PolicyEvaluationDetails
  description: Policy evaluation details.
  kind: object
  properties:
  - name: evaluatedExpressions
    description: Details of the evaluated expressions.
    types:
    - uid: ExpressionEvaluationDetails
      isArray: true
  - name: ifNotExistsDetails
    description: Evaluation details of IfNotExists effect.
    types:
    - uid: IfNotExistsEvaluationDetails
- name: ComponentStateDetails
  description: Component state details.
  kind: object
  properties:
  - name: id
    description: Component Id.
    types:
    - uid: string
  - name: type
    description: Component type.
    types:
    - uid: string
  - name: name
    description: Component name.
    types:
    - uid: string
  - name: timestamp
    description: Component compliance evaluation timestamp.
    types:
    - uid: string
  - name: complianceState
    description: Component compliance state.
    types:
    - uid: string
- name: ExpressionEvaluationDetails
  description: Evaluation details of policy language expressions.
  kind: object
  properties:
  - name: result
    description: Evaluation result.
    types:
    - uid: string
  - name: expression
    description: Expression evaluated.
    types:
    - uid: string
  - name: expressionKind
    isReadyOnly: true
    description: The kind of expression that was evaluated.
    types:
    - uid: string
  - name: path
    description: Property path if the expression is a field or an alias.
    types:
    - uid: string
  - name: expressionValue
    description: Value of the expression.
    types:
    - uid: object
  - name: targetValue
    description: Target value to be compared with the expression value.
    types:
    - uid: object
  - name: operator
    description: Operator to compare the expression value and the target value.
    types:
    - uid: string
- name: IfNotExistsEvaluationDetails
  description: Evaluation details of IfNotExists effect.
  kind: object
  properties:
  - name: resourceId
    description: ID of the last evaluated resource for IfNotExists effect.
    types:
    - uid: string
  - name: totalResources
    description: Total number of resources to which the existence condition is applicable.
    types:
    - uid: integer
examples:
- name: Query all policy states at resource scope
  request:
    uri: POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
      ```

      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScope.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryAllPolicyStatesAtResourceScope() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceDefault, "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScope.json
       */
      async function queryAllPolicyStatesAtResourceScope() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "default";
        const resourceId =
          "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName";
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAllPolicyStatesAtResourceScope().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ClassicCompute/domainNames",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ClassicCompute/domainNames",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          }
        ]
      }
- name: Query all policy states at resource scope with next link
  request:
    uri: POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01&$skiptoken=WpmWfBSvPhkAK6QD
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01&$skiptoken=WpmWfBSvPhkAK6QD
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;

      /** Samples for PolicyStates ListQueryResultsForResource. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeNextLink.json
           */
          /**
           * Sample code: Query all policy states at resource scope with next link.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtResourceScopeWithNextLink(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      "WpmWfBSvPhkAK6QD",
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json
           */
          /**
           * Sample code: Query component policy compliance state count grouped by state type at resource scope filtered by
           * given assignment.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void
              queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment(
                  com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.LATEST,
                      "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      "policyAssignmentId eq"
                          + " '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'",
                      null,
                      "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq"
                          + " 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))",
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelResourceScope.json
           */
          /**
           * Sample code: Query all policy states at subscription level resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtSubscriptionLevelResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScope.json
           */
          /**
           * Sample code: Query all policy states at resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryNestedResourceScope.json
           */
          /**
           * Sample code: Query all policy states at nested resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtNestedResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeNextLink.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryAllPolicyStatesAtResourceScopeWithNextLink() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceDefault, "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: to.Ptr("WpmWfBSvPhkAK6QD"),
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeNextLink.json
       */
      async function queryAllPolicyStatesAtResourceScopeWithNextLink() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "default";
        const resourceId =
          "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName";
        const skipToken = "WpmWfBSvPhkAK6QD";
        const options = {
          queryOptions: { skipToken: skipToken },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAllPolicyStatesAtResourceScopeWithNextLink().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ClassicCompute/domainNames",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ]
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ClassicCompute/domainNames",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ]
          }
        ]
      }
- name: Query all policy states at subscription level resource scope
  request:
    uri: POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
      ```

      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelResourceScope.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryAllPolicyStatesAtSubscriptionLevelResourceScope() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceDefault, "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelResourceScope.json
       */
      async function queryAllPolicyStatesAtSubscriptionLevelResourceScope() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "default";
        const resourceId =
          "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName";
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAllPolicyStatesAtSubscriptionLevelResourceScope().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.SomeNamespace/someResourceType",
            "resourceLocation": "eastus",
            "resourceGroup": "",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": true,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.SomeNamespace/someResourceType",
            "resourceLocation": "eastus",
            "resourceGroup": "",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "Compliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          }
        ]
      }
- name: Query all policy states at nested resource scope
  request:
    uri: POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
      ```

      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryNestedResourceScope.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryAllPolicyStatesAtNestedResourceScope() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceDefault, "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryNestedResourceScope.json
       */
      async function queryAllPolicyStatesAtNestedResourceScope() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "default";
        const resourceId =
          "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication";
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAllPolicyStatesAtNestedResourceScope().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication/providers/Microsoft.PolicyInsights/policyStates/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyAssignments/186044306c044a1d8c0ff76c",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyDefinitions/022d9357-5a90-46f7-9554-21d30ce4c32d",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ServiceFabric/clusters/applications",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "186044306c044a1d8c0ff76c",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"allowedLocations\":{\"value\":[\"centralus\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/mymg",
            "policyDefinitionName": "022d9357-5a90-46f7-9554-21d30ce4c32d",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyAssignments/186044306c044a1d8c0ff76c",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyDefinitions/022d9357-5a90-46f7-9554-21d30ce4c32d",
            "effectiveParameters": null,
            "isCompliant": true,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ServiceFabric/clusters/applications",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "186044306c044a1d8c0ff76c",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"allowedLocations\":{\"value\":[\"centralus\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/mymg",
            "policyDefinitionName": "022d9357-5a90-46f7-9554-21d30ce4c32d",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "Compliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          }
        ]
      }
- name: Query all policy states at subscription level nested resource scope
  request:
    uri: POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource/providers/Microsoft.PolicyInsights/policyStates/default/queryResults?api-version=2019-10-01
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;

      /** Samples for PolicyStates ListQueryResultsForResource. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelNestedResourceScope.json
           */
          /**
           * Sample code: Query all policy states at subscription level nested resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtSubscriptionLevelNestedResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json
           */
          /**
           * Sample code: Query component policy compliance state count grouped by state type at resource scope filtered by
           * given assignment.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void
              queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment(
                  com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.LATEST,
                      "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      "policyAssignmentId eq"
                          + " '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'",
                      null,
                      "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq"
                          + " 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))",
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelResourceScope.json
           */
          /**
           * Sample code: Query all policy states at subscription level resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtSubscriptionLevelResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScope.json
           */
          /**
           * Sample code: Query all policy states at resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryNestedResourceScope.json
           */
          /**
           * Sample code: Query all policy states at nested resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtNestedResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelNestedResourceScope.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryAllPolicyStatesAtSubscriptionLevelNestedResourceScope() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceDefault, "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    nil,
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelNestedResourceScope.json
       */
      async function queryAllPolicyStatesAtSubscriptionLevelNestedResourceScope() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "default";
        const resourceId =
          "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource";
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAllPolicyStatesAtSubscriptionLevelNestedResourceScope().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource/providers/Microsoft.PolicyInsights/policyStates/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyAssignments/186044306c044a1d8c0ff76c",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyDefinitions/022d9357-5a90-46f7-9554-21d30ce4c32d",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.SomeNamespace/someResourceType/someNestedResourceType",
            "resourceLocation": "eastus",
            "resourceGroup": "",
            "resourceTags": "tbd",
            "policyAssignmentName": "186044306c044a1d8c0ff76c",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"allowedLocations\":{\"value\":[\"centralus\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/mymg",
            "policyDefinitionName": "022d9357-5a90-46f7-9554-21d30ce4c32d",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResource/someNestedResourceType/someNestedResource",
            "policyAssignmentId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyAssignments/186044306c044a1d8c0ff76c",
            "policyDefinitionId": "/providers/Microsoft.Management/managementGroups/mymg/providers/Microsoft.Authorization/policyDefinitions/022d9357-5a90-46f7-9554-21d30ce4c32d",
            "effectiveParameters": null,
            "isCompliant": true,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.SomeNamespace/someResourceType/someNestedResourceType",
            "resourceLocation": "eastus",
            "resourceGroup": "",
            "resourceTags": "tbd",
            "policyAssignmentName": "186044306c044a1d8c0ff76c",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"allowedLocations\":{\"value\":[\"centralus\"]}}",
            "policyAssignmentScope": "/providers/Microsoft.Management/managementGroups/mymg",
            "policyDefinitionName": "022d9357-5a90-46f7-9554-21d30ce4c32d",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "Compliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0"
          }
        ]
      }
- name: Query all policy states at resource scope and expand policyEvaluationDetails
  request:
    uri: POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&$expand=PolicyEvaluationDetails
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&$expand=PolicyEvaluationDetails
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;

      /** Samples for PolicyStates ListQueryResultsForResource. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandPolicyEvaluationDetails.json
           */
          /**
           * Sample code: Query all policy states at resource scope and expand policyEvaluationDetails.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtResourceScopeAndExpandPolicyEvaluationDetails(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.LATEST,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      "PolicyEvaluationDetails",
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json
           */
          /**
           * Sample code: Query component policy compliance state count grouped by state type at resource scope filtered by
           * given assignment.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void
              queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment(
                  com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.LATEST,
                      "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      "policyAssignmentId eq"
                          + " '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'",
                      null,
                      "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq"
                          + " 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))",
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelResourceScope.json
           */
          /**
           * Sample code: Query all policy states at subscription level resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtSubscriptionLevelResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScope.json
           */
          /**
           * Sample code: Query all policy states at resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryNestedResourceScope.json
           */
          /**
           * Sample code: Query all policy states at nested resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtNestedResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandPolicyEvaluationDetails.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryAllPolicyStatesAtResourceScopeAndExpandPolicyEvaluationDetails() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceLatest, "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    nil,
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    to.Ptr("PolicyEvaluationDetails"),
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandPolicyEvaluationDetails.json
       */
      async function queryAllPolicyStatesAtResourceScopeAndExpandPolicyEvaluationDetails() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "latest";
        const resourceId =
          "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName";
        const expand = "PolicyEvaluationDetails";
        const options = {
          queryOptions: { expand: expand },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryAllPolicyStatesAtResourceScopeAndExpandPolicyEvaluationDetails().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.nextLink": null,
        "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default",
        "@odata.count": 2,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/Audit a tag and it's value",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ClassicCompute/domainNames",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{\"tagName\":{\"value\":\"no\"},\"tagValue\":{\"value\":\"no\"}}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "Audit a tag and it's value",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0",
            "policyEvaluationDetails": {
              "evaluatedExpressions": [
                {
                  "result": "True",
                  "expression": "type",
                  "path": "type",
                  "expressionValue": "Microsoft.ClassicCompute/domainNames",
                  "targetValue": "Microsoft.ClassicCompute/domainNames",
                  "operator": "Equals"
                },
                {
                  "result": "False",
                  "expression": "name",
                  "path": "name",
                  "expressionValue": "myDomainName",
                  "targetValue": "someName",
                  "operator": "Equals"
                }
              ]
            }
          },
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName/providers/Microsoft.PolicyInsights/policyStates/$metadata#default/$entity",
            "timestamp": "2019-10-09T16:04:31Z",
            "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
            "policyAssignmentId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyAssignments/test2",
            "policyDefinitionId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.Authorization/policyDefinitions/AuditIfNotExistsTest",
            "effectiveParameters": null,
            "isCompliant": false,
            "subscriptionId": "fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "resourceType": "/Microsoft.ClassicCompute/domainNames",
            "resourceLocation": "eastus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "test",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "{}",
            "policyAssignmentScope": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5",
            "policyDefinitionName": "AuditIfNotExists test",
            "policyDefinitionAction": "auditifnotexists",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": null,
            "policySetDefinitionName": null,
            "policySetDefinitionOwner": null,
            "policySetDefinitionCategory": null,
            "policySetDefinitionParameters": null,
            "managementGroupIds": "mymg,fff988bf-fff1-ffff-fffb-fffcd011db47",
            "policyDefinitionReferenceId": null,
            "complianceState": "NonCompliant",
            "policyDefinitionGroupNames": [
              "myGroup"
            ],
            "policyDefinitionVersion": "1.0.0-preview",
            "policySetDefinitionVersion": null,
            "policyAssignmentVersion": "1.0.0",
            "policyEvaluationDetails": {
              "evaluatedExpressions": [
                {
                  "result": "True",
                  "expression": "tags",
                  "path": "tags",
                  "expressionValue": {},
                  "targetValue": "global-opco",
                  "operator": "NotContainsKey"
                }
              ],
              "ifNotExistsDetails": {
                "resourceId": "/subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourcegroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                "totalResources": 1
              }
            }
          }
        ]
      }
- name: Query component policy compliance state at resource scope filtered by given assignment.
  request:
    uri: POST https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&$filter=policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'&$expand=components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant')
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&$filter=policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'&$expand=components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant')
      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.policyinsights.models.PolicyStatesResource;

      /** Samples for PolicyStates ListQueryResultsForResource. */
      public final class Main {
          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponents.json
           */
          /**
           * Sample code: Query component policy compliance state at resource scope filtered by given assignment.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryComponentPolicyComplianceStateAtResourceScopeFilteredByGivenAssignment(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.LATEST,
                      "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      "policyAssignmentId eq"
                          + " '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'",
                      null,
                      "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant')",
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json
           */
          /**
           * Sample code: Query component policy compliance state count grouped by state type at resource scope filtered by
           * given assignment.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void
              queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment(
                  com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.LATEST,
                      "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      "policyAssignmentId eq"
                          + " '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'",
                      null,
                      "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq"
                          + " 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))",
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QuerySubscriptionLevelResourceScope.json
           */
          /**
           * Sample code: Query all policy states at subscription level resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtSubscriptionLevelResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/providers/Microsoft.SomeNamespace/someResourceType/someResourceName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScope.json
           */
          /**
           * Sample code: Query all policy states at resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ClassicCompute/domainNames/myDomainName",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }

          /*
           * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryNestedResourceScope.json
           */
          /**
           * Sample code: Query all policy states at nested resource scope.
           *
           * @param manager Entry point to PolicyInsightsManager.
           */
          public static void queryAllPolicyStatesAtNestedResourceScope(
              com.azure.resourcemanager.policyinsights.PolicyInsightsManager manager) {
              manager
                  .policyStates()
                  .listQueryResultsForResource(
                      PolicyStatesResource.DEFAULT,
                      "subscriptions/fff10b27-fff3-fff5-fff8-fffbe01e86a5/resourceGroups/myResourceGroup/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApplication",
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      null,
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-policyinsights_1.0.0-beta.3/sdk/policyinsights/azure-resourcemanager-policyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponents.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryComponentPolicyComplianceStateAtResourceScopeFilteredByGivenAssignment() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceLatest, "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    to.Ptr("policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'"),
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    to.Ptr("components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant')"),
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponents.json
       */
      async function queryComponentPolicyComplianceStateAtResourceScopeFilteredByGivenAssignment() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "latest";
        const resourceId =
          "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName";
        const filter =
          "policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'";
        const expand =
          "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant')";
        const options = {
          queryOptions: { filter: filter, expand: expand },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryComponentPolicyComplianceStateAtResourceScopeFilteredByGivenAssignment().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourcegroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/$metadata#latest",
        "@odata.count": 1,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourcegroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/$metadata#latest/$entity",
            "timestamp": "2020-02-21T19:42:08.3252921Z",
            "resourceId": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourcegroups/myResourceGroup/providers/microsoft.keyvault/vaults/myKVName",
            "policyAssignmentId": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8",
            "policyDefinitionId": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policydefinitions/ab108bc4-32df-4677-8b38-fa8b2905df59",
            "effectiveParameters": "",
            "isCompliant": false,
            "subscriptionId": "e78961ba-36fe-4739-9212-e3031b4c8db7",
            "resourceType": "Microsoft.KeyVault/vaults",
            "resourceLocation": "westcentralus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "560050f83dbb4a24974323f8",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "",
            "policyAssignmentScope": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7",
            "policyDefinitionName": "ab108bc4-32df-4677-8b38-fa8b2905df59",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": "",
            "policySetDefinitionName": "",
            "policySetDefinitionOwner": "",
            "policySetDefinitionCategory": "",
            "policySetDefinitionParameters": "",
            "managementGroupIds": "PolicyUIMG,AzGovTest5,72f988bf-86f1-41af-91ab-2d7cd011db47",
            "policyDefinitionReferenceId": "",
            "complianceState": "NonCompliant",
            "components": [
              {
                "id": "cert-RSA-cert-3",
                "type": "Certificate",
                "name": "cert-RSA-cert-3",
                "timestamp": "2020-02-21T17:45:23.0367Z",
                "complianceState": "NonCompliant"
              },
              {
                "id": "cert-RSA-cert-2",
                "type": "Certificate",
                "name": "cert-RSA-cert-2",
                "timestamp": "2020-02-21T17:45:22.7682778Z",
                "complianceState": "NonCompliant"
              },
              {
                "id": "cert-rsa-cert-expires-2months",
                "type": "Certificate",
                "name": "cert-rsa-cert-expires-2months",
                "timestamp": "2020-02-21T17:45:22.6849056Z",
                "complianceState": "NonCompliant"
              },
              {
                "id": "cert-RSA-cert-1",
                "type": "Certificate",
                "name": "cert-RSA-cert-1",
                "timestamp": "2020-02-21T17:45:22.6504951Z",
                "complianceState": "Compliant"
              },
              {
                "id": "cert-rsa-cert-expires-1month",
                "type": "Certificate",
                "name": "cert-rsa-cert-expires-1month",
                "timestamp": "2020-02-21T17:45:22.5523666Z",
                "complianceState": "NonCompliant"
              }
            ]
          }
        ]
      }
- name: Query component policy compliance state count grouped by state type at resource scope filtered by given assignment.
  request:
    uri: POST https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&$filter=policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'&$expand=components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      POST https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&$filter=policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'&$expand=components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))
      ```

      # [Go](#tab/Go)
      ``` go
      package armpolicyinsights_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/policyinsights/armpolicyinsights"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json
      func ExamplePolicyStatesClient_NewListQueryResultsForResourcePager_queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armpolicyinsights.NewPolicyStatesClient(cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	pager := client.NewListQueryResultsForResourcePager(armpolicyinsights.PolicyStatesResourceLatest, "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName", &armpolicyinsights.QueryOptions{Top: nil,
      		Filter:    to.Ptr("policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'"),
      		OrderBy:   nil,
      		Select:    nil,
      		From:      nil,
      		To:        nil,
      		Apply:     nil,
      		SkipToken: nil,
      		Expand:    to.Ptr("components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))"),
      	}, nil)
      	for pager.More() {
      		nextResult, err := pager.NextPage(ctx)
      		if err != nil {
      			log.Fatalf("failed to advance page: %v", err)
      		}
      		for _, v := range nextResult.Value {
      			// TODO: use page item
      			_ = v
      		}
      	}
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fpolicyinsights%2Farmpolicyinsights%2Fv0.6.0/sdk/resourcemanager/policyinsights/armpolicyinsights/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { PolicyInsightsClient } = require("@azure/arm-policyinsights");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Queries policy states for the resource.
       *
       * @summary Queries policy states for the resource.
       * x-ms-original-file: specification/policyinsights/resource-manager/Microsoft.PolicyInsights/stable/2019-10-01/examples/PolicyStates_QueryResourceScopeExpandComponentsGroupByWithAggregate.json
       */
      async function queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment() {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const policyStatesResource = "latest";
        const resourceId =
          "subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName";
        const filter =
          "policyAssignmentId eq '/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8'";
        const expand =
          "components($filter=ComplianceState eq 'NonCompliant' or ComplianceState eq 'Compliant';$apply=groupby((complianceState),aggregate($count as count)))";
        const options = {
          queryOptions: { filter: filter, expand: expand },
        };
        const credential = new DefaultAzureCredential();
        const client = new PolicyInsightsClient(credential, subscriptionId);
        const resArray = new Array();
        for await (let item of client.policyStates.listQueryResultsForResource(
          policyStatesResource,
          resourceId,
          options
        )) {
          resArray.push(item);
        }
        console.log(resArray);
      }

      queryComponentPolicyComplianceStateCountGroupedByStateTypeAtResourceScopeFilteredByGivenAssignment().catch(
        console.error
      );

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-policyinsights_6.0.0-beta.2/sdk/policyinsights/arm-policyinsights/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "@odata.context": "https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourcegroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/$metadata#latest",
        "@odata.count": 1,
        "value": [
          {
            "@odata.id": null,
            "@odata.context": "https://management.azure.com/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourcegroups/myResourceGroup/providers/Microsoft.KeyVault/Vaults/myKVName/providers/Microsoft.PolicyInsights/policyStates/$metadata#latest/$entity",
            "timestamp": "2020-02-21T19:42:08.3252921Z",
            "resourceId": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/resourcegroups/myResourceGroup/providers/microsoft.keyvault/vaults/myKVName",
            "policyAssignmentId": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policyassignments/560050f83dbb4a24974323f8",
            "policyDefinitionId": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7/providers/microsoft.authorization/policydefinitions/ab108bc4-32df-4677-8b38-fa8b2905df59",
            "effectiveParameters": "",
            "isCompliant": false,
            "subscriptionId": "e78961ba-36fe-4739-9212-e3031b4c8db7",
            "resourceType": "Microsoft.KeyVault/vaults",
            "resourceLocation": "westcentralus",
            "resourceGroup": "myResourceGroup",
            "resourceTags": "tbd",
            "policyAssignmentName": "560050f83dbb4a24974323f8",
            "policyAssignmentOwner": "tbd",
            "policyAssignmentParameters": "",
            "policyAssignmentScope": "/subscriptions/e78961ba-36fe-4739-9212-e3031b4c8db7",
            "policyDefinitionName": "ab108bc4-32df-4677-8b38-fa8b2905df59",
            "policyDefinitionAction": "audit",
            "policyDefinitionCategory": "tbd",
            "policySetDefinitionId": "",
            "policySetDefinitionName": "",
            "policySetDefinitionOwner": "",
            "policySetDefinitionCategory": "",
            "policySetDefinitionParameters": "",
            "managementGroupIds": "PolicyUIMG,AzGovTest5,72f988bf-86f1-41af-91ab-2d7cd011db47",
            "policyDefinitionReferenceId": "",
            "complianceState": "NonCompliant",
            "components": [
              {
                "complianceState": "NonCompliant",
                "count": 5
              },
              {
                "complianceState": "Compliant",
                "count": 14
              }
            ]
          }
        ]
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Policy service - Queries policy states for the resource.
errorCodes: []
