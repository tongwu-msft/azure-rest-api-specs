### YamlMime:RESTOperation
uid: management.azure.com.firewall.azurefirewalls.createorupdate
name: Create Or Update
service: Firewall
groupName: Azure Firewalls
apiVersion: 2022-05-01
summary: Creates or updates the specified Azure Firewall.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}?api-version=2022-05-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group.
  types:
  - uid: string
- name: azureFirewallName
  in: path
  isRequired: true
  description: The name of the Azure Firewall.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API version.
  types:
  - uid: string
responses:
- name: 201 Created
  description: Create successful. The operation returns the resulting AzureFirewall resource.
  types:
  - uid: AzureFirewall
- name: 200 OK
  description: Update successful. The operation returns the resulting AzureFirewall resource.
  types:
  - uid: AzureFirewall
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: CloudError
requestBody:
- name: default
  parameters:
  - name: zones
    in: body
    description: A list of availability zones denoting where the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: properties.applicationRuleCollections
    in: body
    description: Collection of application rule collections used by Azure Firewall.
    types:
    - uid: AzureFirewallApplicationRuleCollection
      isArray: true
  - name: properties.natRuleCollections
    in: body
    description: Collection of NAT rule collections used by Azure Firewall.
    types:
    - uid: AzureFirewallNatRuleCollection
      isArray: true
  - name: properties.networkRuleCollections
    in: body
    description: Collection of network rule collections used by Azure Firewall.
    types:
    - uid: AzureFirewallNetworkRuleCollection
      isArray: true
  - name: properties.ipConfigurations
    in: body
    description: IP configuration of the Azure Firewall resource.
    types:
    - uid: AzureFirewallIPConfiguration
      isArray: true
  - name: properties.managementIpConfiguration
    in: body
    description: IP configuration of the Azure Firewall used for management traffic.
    types:
    - uid: AzureFirewallIPConfiguration
  - name: properties.threatIntelMode
    in: body
    description: The operation mode for Threat Intelligence.
    types:
    - uid: AzureFirewallThreatIntelMode
  - name: properties.virtualHub
    in: body
    description: The virtualHub to which the firewall belongs.
    types:
    - uid: SubResource
  - name: properties.firewallPolicy
    in: body
    description: The firewallPolicy associated with this azure firewall.
    types:
    - uid: SubResource
  - name: properties.hubIPAddresses
    in: body
    description: IP addresses associated with AzureFirewall.
    types:
    - uid: HubIPAddresses
  - name: properties.sku
    in: body
    description: The Azure Firewall Resource SKU.
    types:
    - uid: AzureFirewallSku
  - name: properties.additionalProperties
    in: body
    description: The additional properties used to further config this azure firewall.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: id
    in: body
    description: Resource ID.
    types:
    - uid: string
  - name: location
    in: body
    description: Resource location.
    types:
    - uid: string
  - name: tags
    in: body
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
requestHeader: []
definitions:
- name: AzureFirewallApplicationRuleCollection
  description: Application rule collection resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.priority
    description: Priority of the application rule collection resource.
    types:
    - uid: integer
  - name: properties.action
    description: The action type of a rule collection.
    types:
    - uid: AzureFirewallRCAction
  - name: properties.rules
    description: Collection of rules used by a application rule collection.
    types:
    - uid: AzureFirewallApplicationRule
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the application rule collection resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: AzureFirewallNatRuleCollection
  description: NAT rule collection resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.priority
    description: Priority of the NAT rule collection resource.
    types:
    - uid: integer
  - name: properties.action
    description: The action type of a NAT rule collection.
    types:
    - uid: AzureFirewallNatRCAction
  - name: properties.rules
    description: Collection of rules used by a NAT rule collection.
    types:
    - uid: AzureFirewallNatRule
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the NAT rule collection resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: AzureFirewallNetworkRuleCollection
  description: Network rule collection resource.
  kind: object
  properties:
  - name: name
    description: The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.priority
    description: Priority of the network rule collection resource.
    types:
    - uid: integer
  - name: properties.action
    description: The action type of a rule collection.
    types:
    - uid: AzureFirewallRCAction
  - name: properties.rules
    description: Collection of rules used by a network rule collection.
    types:
    - uid: AzureFirewallNetworkRule
      isArray: true
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the network rule collection resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: AzureFirewallIPConfiguration
  description: IP configuration of an Azure Firewall.
  kind: object
  properties:
  - name: name
    description: Name of the resource that is unique within a resource group. This name can be used to access the resource.
    types:
    - uid: string
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Type of the resource.
    types:
    - uid: string
  - name: properties.privateIPAddress
    isReadyOnly: true
    description: The Firewall Internal Load Balancer IP to be used as the next hop in User Defined Routes.
    types:
    - uid: string
  - name: properties.subnet
    description: Reference to the subnet resource. This resource must be named 'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
    types:
    - uid: SubResource
  - name: properties.publicIPAddress
    description: Reference to the PublicIP resource. This field is a mandatory input if subnet is not null.
    types:
    - uid: SubResource
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the Azure firewall IP configuration resource.
    types:
    - uid: ProvisioningState
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: SubResource
  description: Reference to another subresource.
  kind: object
  properties:
  - name: id
    description: Resource ID.
    types:
    - uid: string
- name: HubIPAddresses
  description: IP addresses associated with azure firewall.
  kind: object
  properties:
  - name: publicIPs
    description: Public IP addresses associated with azure firewall.
    types:
    - uid: HubPublicIPAddresses
  - name: privateIPAddress
    description: Private IP Address associated with azure firewall.
    types:
    - uid: string
- name: AzureFirewallIpGroups
  description: IpGroups associated with azure firewall.
  kind: object
  properties:
  - name: id
    isReadyOnly: true
    description: Resource ID.
    types:
    - uid: string
  - name: changeNumber
    isReadyOnly: true
    description: The iteration number.
    types:
    - uid: string
- name: AzureFirewallSku
  description: SKU of an Azure Firewall.
  kind: object
  properties:
  - name: name
    description: Name of an Azure Firewall SKU.
    types:
    - uid: AzureFirewallSkuName
  - name: tier
    description: Tier of an Azure Firewall.
    types:
    - uid: AzureFirewallSkuTier
- name: AzureFirewall
  description: Azure Firewall resource.
  kind: object
  properties:
  - name: zones
    description: A list of availability zones denoting where the resource needs to come from.
    types:
    - uid: string
      isArray: true
  - name: etag
    isReadyOnly: true
    description: A unique read-only string that changes whenever the resource is updated.
    types:
    - uid: string
  - name: properties.applicationRuleCollections
    description: Collection of application rule collections used by Azure Firewall.
    types:
    - uid: AzureFirewallApplicationRuleCollection
      isArray: true
  - name: properties.natRuleCollections
    description: Collection of NAT rule collections used by Azure Firewall.
    types:
    - uid: AzureFirewallNatRuleCollection
      isArray: true
  - name: properties.networkRuleCollections
    description: Collection of network rule collections used by Azure Firewall.
    types:
    - uid: AzureFirewallNetworkRuleCollection
      isArray: true
  - name: properties.ipConfigurations
    description: IP configuration of the Azure Firewall resource.
    types:
    - uid: AzureFirewallIPConfiguration
      isArray: true
  - name: properties.managementIpConfiguration
    description: IP configuration of the Azure Firewall used for management traffic.
    types:
    - uid: AzureFirewallIPConfiguration
  - name: properties.provisioningState
    isReadyOnly: true
    description: The provisioning state of the Azure firewall resource.
    types:
    - uid: ProvisioningState
  - name: properties.threatIntelMode
    description: The operation mode for Threat Intelligence.
    types:
    - uid: AzureFirewallThreatIntelMode
  - name: properties.virtualHub
    description: The virtualHub to which the firewall belongs.
    types:
    - uid: SubResource
  - name: properties.firewallPolicy
    description: The firewallPolicy associated with this azure firewall.
    types:
    - uid: SubResource
  - name: properties.hubIPAddresses
    description: IP addresses associated with AzureFirewall.
    types:
    - uid: HubIPAddresses
  - name: properties.ipGroups
    isReadyOnly: true
    description: IpGroups associated with AzureFirewall.
    types:
    - uid: AzureFirewallIpGroups
      isArray: true
  - name: properties.sku
    description: The Azure Firewall Resource SKU.
    types:
    - uid: AzureFirewallSku
  - name: properties.additionalProperties
    description: The additional properties used to further config this azure firewall.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
  - name: id
    description: Resource ID.
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: Resource name.
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: Resource type.
    types:
    - uid: string
  - name: location
    description: Resource location.
    types:
    - uid: string
  - name: tags
    description: Resource tags.
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: string
- name: CloudError
  description: An error response from the service.
  kind: object
  properties:
  - name: error
    description: Cloud error body.
    types:
    - uid: CloudErrorBody
- name: AzureFirewallRCAction
  description: Properties of the AzureFirewallRCAction.
  kind: object
  properties:
  - name: type
    description: The type of action.
    types:
    - uid: AzureFirewallRCActionType
- name: AzureFirewallApplicationRule
  description: Properties of an application rule.
  kind: object
  properties:
  - name: name
    description: Name of the application rule.
    types:
    - uid: string
  - name: description
    description: Description of the rule.
    types:
    - uid: string
  - name: sourceAddresses
    description: List of source IP addresses for this rule.
    types:
    - uid: string
      isArray: true
  - name: protocols
    description: Array of ApplicationRuleProtocols.
    types:
    - uid: AzureFirewallApplicationRuleProtocol
      isArray: true
  - name: targetFqdns
    description: List of FQDNs for this rule.
    types:
    - uid: string
      isArray: true
  - name: fqdnTags
    description: List of FQDN Tags for this rule.
    types:
    - uid: string
      isArray: true
  - name: sourceIpGroups
    description: List of source IpGroups for this rule.
    types:
    - uid: string
      isArray: true
- name: ProvisioningState
  description: The current provisioning state.
  kind: enum
  properties:
  - name: Succeeded
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
- name: AzureFirewallNatRCAction
  description: AzureFirewall NAT Rule Collection Action.
  kind: object
  properties:
  - name: type
    description: The type of action.
    types:
    - uid: AzureFirewallNatRCActionType
- name: AzureFirewallNatRule
  description: Properties of a NAT rule.
  kind: object
  properties:
  - name: name
    description: Name of the NAT rule.
    types:
    - uid: string
  - name: description
    description: Description of the rule.
    types:
    - uid: string
  - name: sourceAddresses
    description: List of source IP addresses for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationAddresses
    description: List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags.
    types:
    - uid: string
      isArray: true
  - name: destinationPorts
    description: List of destination ports.
    types:
    - uid: string
      isArray: true
  - name: protocols
    description: Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
    types:
    - uid: string
      isArray: true
  - name: translatedAddress
    description: The translated address for this NAT rule.
    types:
    - uid: string
  - name: translatedPort
    description: The translated port for this NAT rule.
    types:
    - uid: string
  - name: translatedFqdn
    description: The translated FQDN for this NAT rule.
    types:
    - uid: string
  - name: sourceIpGroups
    description: List of source IpGroups for this rule.
    types:
    - uid: string
      isArray: true
- name: AzureFirewallNetworkRule
  description: Properties of the network rule.
  kind: object
  properties:
  - name: name
    description: Name of the network rule.
    types:
    - uid: string
  - name: description
    description: Description of the rule.
    types:
    - uid: string
  - name: protocols
    description: Array of AzureFirewallNetworkRuleProtocols.
    types:
    - uid: string
      isArray: true
  - name: sourceAddresses
    description: List of source IP addresses for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationAddresses
    description: List of destination IP addresses.
    types:
    - uid: string
      isArray: true
  - name: destinationPorts
    description: List of destination ports.
    types:
    - uid: string
      isArray: true
  - name: destinationFqdns
    description: List of destination FQDNs.
    types:
    - uid: string
      isArray: true
  - name: sourceIpGroups
    description: List of source IpGroups for this rule.
    types:
    - uid: string
      isArray: true
  - name: destinationIpGroups
    description: List of destination IpGroups for this rule.
    types:
    - uid: string
      isArray: true
- name: HubPublicIPAddresses
  description: Public IP addresses associated with azure firewall.
  kind: object
  properties:
  - name: addresses
    description: The list of Public IP addresses associated with azure firewall or IP addresses to be retained.
    types:
    - uid: AzureFirewallPublicIPAddress
      isArray: true
  - name: count
    description: The number of Public IP addresses associated with azure firewall.
    types:
    - uid: integer
- name: AzureFirewallSkuName
  description: Name of an Azure Firewall SKU.
  kind: enum
  properties:
  - name: AZFW_VNet
    types:
    - uid: string
  - name: AZFW_Hub
    types:
    - uid: string
- name: AzureFirewallSkuTier
  description: Tier of an Azure Firewall.
  kind: enum
  properties:
  - name: Standard
    types:
    - uid: string
  - name: Premium
    types:
    - uid: string
  - name: Basic
    types:
    - uid: string
- name: AzureFirewallThreatIntelMode
  description: The operation mode for Threat Intel.
  kind: enum
  properties:
  - name: Alert
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
  - name: Off
    types:
    - uid: string
- name: CloudErrorBody
  description: An error response from the service.
  kind: object
  properties:
  - name: code
    description: An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
    types:
    - uid: string
  - name: message
    description: A message describing the error, intended to be suitable for display in a user interface.
    types:
    - uid: string
  - name: target
    description: The target of the particular error. For example, the name of the property in error.
    types:
    - uid: string
  - name: details
    description: A list of additional details about the error.
    types:
    - uid: CloudErrorBody
      isArray: true
- name: AzureFirewallRCActionType
  description: The action type of a rule collection.
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
- name: AzureFirewallApplicationRuleProtocol
  description: Properties of the application rule protocol.
  kind: object
  properties:
  - name: protocolType
    description: Protocol type.
    types:
    - uid: AzureFirewallApplicationRuleProtocolType
  - name: port
    description: Port number for the protocol, cannot be greater than 64000. This field is optional.
    types:
    - uid: integer
- name: AzureFirewallNatRCActionType
  description: The action type of a NAT rule collection.
  kind: enum
  properties:
  - name: Snat
    types:
    - uid: string
  - name: Dnat
    types:
    - uid: string
- name: AzureFirewallPublicIPAddress
  description: Public IP Address associated with azure firewall.
  kind: object
  properties:
  - name: address
    description: Public IP Address value.
    types:
    - uid: string
- name: AzureFirewallApplicationRuleProtocolType
  description: The protocol type of a Application Rule resource.
  kind: enum
  properties:
  - name: Http
    types:
    - uid: string
  - name: Https
    types:
    - uid: string
  - name: Mssql
    types:
    - uid: string
examples:
- name: Create Azure Firewall
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01
    body: >-
      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01

      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPut.json
      func ExampleAzureFirewallsClient_BeginCreateOrUpdate_createAzureFirewall() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewAzureFirewallsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "azurefirewall", armnetwork.AzureFirewall{
      		Location: to.Ptr("West US"),
      		Tags: map[string]*string{
      			"key1": to.Ptr("value1"),
      		},
      		Properties: &armnetwork.AzureFirewallPropertiesFormat{
      			ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
      				{
      					Name: to.Ptr("apprulecoll"),
      					Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](110),
      						Rules: []*armnetwork.AzureFirewallApplicationRule{
      							{
      								Name:        to.Ptr("rule1"),
      								Description: to.Ptr("Deny inbound rule"),
      								Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
      									{
      										Port:         to.Ptr[int32](443),
      										ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
      									}},
      								SourceAddresses: []*string{
      									to.Ptr("216.58.216.164"),
      									to.Ptr("10.0.0.0/24")},
      								TargetFqdns: []*string{
      									to.Ptr("www.test.com")},
      							}},
      					},
      				}},
      			IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
      				{
      					Name: to.Ptr("azureFirewallIpConfiguration"),
      					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
      						PublicIPAddress: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
      						},
      						Subnet: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
      						},
      					},
      				}},
      			NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
      				{
      					Name: to.Ptr("natrulecoll"),
      					Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
      						Action: &armnetwork.AzureFirewallNatRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNatRule{
      							{
      								Name:        to.Ptr("DNAT-HTTPS-traffic"),
      								Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedAddress: to.Ptr("1.2.3.5"),
      								TranslatedPort:    to.Ptr("8443"),
      							},
      							{
      								Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
      								Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("80")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedFqdn: to.Ptr("internalhttpserver"),
      								TranslatedPort: to.Ptr("880"),
      							}},
      					},
      				}},
      			NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
      				{
      					Name: to.Ptr("netrulecoll"),
      					Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNetworkRule{
      							{
      								Name:        to.Ptr("L4-traffic"),
      								Description: to.Ptr("Block traffic based on source IPs and ports"),
      								DestinationAddresses: []*string{
      									to.Ptr("*")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("192.168.1.1-192.168.1.12"),
      									to.Ptr("10.1.4.12-10.1.4.255")},
      							},
      							{
      								Name:        to.Ptr("L4-traffic-with-FQDN"),
      								Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
      								DestinationFqdns: []*string{
      									to.Ptr("www.amazon.com")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("10.2.4.12-10.2.4.255")},
      							}},
      					},
      				}},
      			SKU: &armnetwork.AzureFirewallSKU{
      				Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
      				Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
      			},
      			ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
      		},
      		Zones: []*string{},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified Azure Firewall.
       *
       * @summary Creates or updates the specified Azure Firewall.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPut.json
       */
      async function createAzureFirewall() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const azureFirewallName = "azurefirewall";
        const parameters = {
          applicationRuleCollections: [
            {
              name: "apprulecoll",
              action: { type: "Deny" },
              priority: 110,
              rules: [
                {
                  name: "rule1",
                  description: "Deny inbound rule",
                  protocols: [{ port: 443, protocolType: "Https" }],
                  sourceAddresses: ["216.58.216.164", "10.0.0.0/24"],
                  targetFqdns: ["www.test.com"],
                },
              ],
            },
          ],
          ipConfigurations: [
            {
              name: "azureFirewallIpConfiguration",
              publicIPAddress: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
              },
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
              },
            },
          ],
          location: "West US",
          natRuleCollections: [
            {
              name: "natrulecoll",
              action: { type: "Dnat" },
              priority: 112,
              rules: [
                {
                  name: "DNAT-HTTPS-traffic",
                  description: "D-NAT all outbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedAddress: "1.2.3.5",
                  translatedPort: "8443",
                },
                {
                  name: "DNAT-HTTP-traffic-With-FQDN",
                  description: "D-NAT all inbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["80"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedFqdn: "internalhttpserver",
                  translatedPort: "880",
                },
              ],
            },
          ],
          networkRuleCollections: [
            {
              name: "netrulecoll",
              action: { type: "Deny" },
              priority: 112,
              rules: [
                {
                  name: "L4-traffic",
                  description: "Block traffic based on source IPs and ports",
                  destinationAddresses: ["*"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["192.168.1.1-192.168.1.12", "10.1.4.12-10.1.4.255"],
                },
                {
                  name: "L4-traffic-with-FQDN",
                  description: "Block traffic based on source IPs and ports to amazon",
                  destinationFqdns: ["www.amazon.com"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["10.2.4.12-10.2.4.255"],
                },
              ],
            },
          ],
          sku: { name: "AZFW_VNet", tier: "Standard" },
          tags: { key1: "value1" },
          threatIntelMode: "Alert",
          zones: [],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.azureFirewalls.beginCreateOrUpdateAndWait(
          resourceGroupName,
          azureFirewallName,
          parameters
        );
        console.log(result);
      }

      createAzureFirewall().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedPort": "880",
                    "translatedFqdn": "internalhttpserver"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ]
                  }
                ]
              }
            }
          ],
          "ipGroups": [],
          "additionalProperties": {}
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {}
        }
      }
- name: Create Azure Firewall With Zones
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01
    body: >-
      {
        "location": "West US 2",
        "tags": {
          "key1": "value1"
        },
        "zones": [
          "1",
          "2",
          "3"
        ],
        "properties": {
          "threatIntelMode": "Alert",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01

      {
        "location": "West US 2",
        "tags": {
          "key1": "value1"
        },
        "zones": [
          "1",
          "2",
          "3"
        ],
        "properties": {
          "threatIntelMode": "Alert",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithZones.json
      func ExampleAzureFirewallsClient_BeginCreateOrUpdate_createAzureFirewallWithZones() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewAzureFirewallsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "azurefirewall", armnetwork.AzureFirewall{
      		Location: to.Ptr("West US 2"),
      		Tags: map[string]*string{
      			"key1": to.Ptr("value1"),
      		},
      		Properties: &armnetwork.AzureFirewallPropertiesFormat{
      			ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
      				{
      					Name: to.Ptr("apprulecoll"),
      					Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](110),
      						Rules: []*armnetwork.AzureFirewallApplicationRule{
      							{
      								Name:        to.Ptr("rule1"),
      								Description: to.Ptr("Deny inbound rule"),
      								Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
      									{
      										Port:         to.Ptr[int32](443),
      										ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
      									}},
      								SourceAddresses: []*string{
      									to.Ptr("216.58.216.164"),
      									to.Ptr("10.0.0.0/24")},
      								TargetFqdns: []*string{
      									to.Ptr("www.test.com")},
      							}},
      					},
      				}},
      			IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
      				{
      					Name: to.Ptr("azureFirewallIpConfiguration"),
      					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
      						PublicIPAddress: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
      						},
      						Subnet: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
      						},
      					},
      				}},
      			NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
      				{
      					Name: to.Ptr("natrulecoll"),
      					Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
      						Action: &armnetwork.AzureFirewallNatRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNatRule{
      							{
      								Name:        to.Ptr("DNAT-HTTPS-traffic"),
      								Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedAddress: to.Ptr("1.2.3.5"),
      								TranslatedPort:    to.Ptr("8443"),
      							},
      							{
      								Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
      								Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("80")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedFqdn: to.Ptr("internalhttpserver"),
      								TranslatedPort: to.Ptr("880"),
      							}},
      					},
      				}},
      			NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
      				{
      					Name: to.Ptr("netrulecoll"),
      					Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNetworkRule{
      							{
      								Name:        to.Ptr("L4-traffic"),
      								Description: to.Ptr("Block traffic based on source IPs and ports"),
      								DestinationAddresses: []*string{
      									to.Ptr("*")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("192.168.1.1-192.168.1.12"),
      									to.Ptr("10.1.4.12-10.1.4.255")},
      							},
      							{
      								Name:        to.Ptr("L4-traffic-with-FQDN"),
      								Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
      								DestinationFqdns: []*string{
      									to.Ptr("www.amazon.com")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("10.2.4.12-10.2.4.255")},
      							}},
      					},
      				}},
      			SKU: &armnetwork.AzureFirewallSKU{
      				Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
      				Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
      			},
      			ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
      		},
      		Zones: []*string{
      			to.Ptr("1"),
      			to.Ptr("2"),
      			to.Ptr("3")},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified Azure Firewall.
       *
       * @summary Creates or updates the specified Azure Firewall.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithZones.json
       */
      async function createAzureFirewallWithZones() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const azureFirewallName = "azurefirewall";
        const parameters = {
          applicationRuleCollections: [
            {
              name: "apprulecoll",
              action: { type: "Deny" },
              priority: 110,
              rules: [
                {
                  name: "rule1",
                  description: "Deny inbound rule",
                  protocols: [{ port: 443, protocolType: "Https" }],
                  sourceAddresses: ["216.58.216.164", "10.0.0.0/24"],
                  targetFqdns: ["www.test.com"],
                },
              ],
            },
          ],
          ipConfigurations: [
            {
              name: "azureFirewallIpConfiguration",
              publicIPAddress: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
              },
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
              },
            },
          ],
          location: "West US 2",
          natRuleCollections: [
            {
              name: "natrulecoll",
              action: { type: "Dnat" },
              priority: 112,
              rules: [
                {
                  name: "DNAT-HTTPS-traffic",
                  description: "D-NAT all outbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedAddress: "1.2.3.5",
                  translatedPort: "8443",
                },
                {
                  name: "DNAT-HTTP-traffic-With-FQDN",
                  description: "D-NAT all inbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["80"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedFqdn: "internalhttpserver",
                  translatedPort: "880",
                },
              ],
            },
          ],
          networkRuleCollections: [
            {
              name: "netrulecoll",
              action: { type: "Deny" },
              priority: 112,
              rules: [
                {
                  name: "L4-traffic",
                  description: "Block traffic based on source IPs and ports",
                  destinationAddresses: ["*"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["192.168.1.1-192.168.1.12", "10.1.4.12-10.1.4.255"],
                },
                {
                  name: "L4-traffic-with-FQDN",
                  description: "Block traffic based on source IPs and ports to amazon",
                  destinationFqdns: ["www.amazon.com"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["10.2.4.12-10.2.4.255"],
                },
              ],
            },
          ],
          sku: { name: "AZFW_VNet", tier: "Standard" },
          tags: { key1: "value1" },
          threatIntelMode: "Alert",
          zones: ["1", "2", "3"],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.azureFirewalls.beginCreateOrUpdateAndWait(
          resourceGroupName,
          azureFirewallName,
          parameters
        );
        console.log(result);
      }

      createAzureFirewallWithZones().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US 2",
        "zones": [
          "1",
          "2",
          "3"
        ],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "ipGroups": [],
          "additionalProperties": {}
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US 2",
        "zones": [
          "1",
          "2",
          "3"
        ],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {}
        }
      }
- name: Create Azure Firewall With management subnet
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01
    body: >-
      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "managementIpConfiguration": {
            "name": "azureFirewallMgmtIpConfiguration",
            "properties": {
              "subnet": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"
              },
              "publicIPAddress": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"
              }
            }
          },
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01

      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "managementIpConfiguration": {
            "name": "azureFirewallMgmtIpConfiguration",
            "properties": {
              "subnet": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"
              },
              "publicIPAddress": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"
              }
            }
          },
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithMgmtSubnet.json
      func ExampleAzureFirewallsClient_BeginCreateOrUpdate_createAzureFirewallWithManagementSubnet() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewAzureFirewallsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "azurefirewall", armnetwork.AzureFirewall{
      		Location: to.Ptr("West US"),
      		Tags: map[string]*string{
      			"key1": to.Ptr("value1"),
      		},
      		Properties: &armnetwork.AzureFirewallPropertiesFormat{
      			ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
      				{
      					Name: to.Ptr("apprulecoll"),
      					Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](110),
      						Rules: []*armnetwork.AzureFirewallApplicationRule{
      							{
      								Name:        to.Ptr("rule1"),
      								Description: to.Ptr("Deny inbound rule"),
      								Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
      									{
      										Port:         to.Ptr[int32](443),
      										ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
      									}},
      								SourceAddresses: []*string{
      									to.Ptr("216.58.216.164"),
      									to.Ptr("10.0.0.0/24")},
      								TargetFqdns: []*string{
      									to.Ptr("www.test.com")},
      							}},
      					},
      				}},
      			IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
      				{
      					Name: to.Ptr("azureFirewallIpConfiguration"),
      					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
      						PublicIPAddress: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
      						},
      						Subnet: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
      						},
      					},
      				}},
      			ManagementIPConfiguration: &armnetwork.AzureFirewallIPConfiguration{
      				Name: to.Ptr("azureFirewallMgmtIpConfiguration"),
      				Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
      					PublicIPAddress: &armnetwork.SubResource{
      						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName"),
      					},
      					Subnet: &armnetwork.SubResource{
      						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet"),
      					},
      				},
      			},
      			NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
      				{
      					Name: to.Ptr("natrulecoll"),
      					Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
      						Action: &armnetwork.AzureFirewallNatRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNatRule{
      							{
      								Name:        to.Ptr("DNAT-HTTPS-traffic"),
      								Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedAddress: to.Ptr("1.2.3.5"),
      								TranslatedPort:    to.Ptr("8443"),
      							},
      							{
      								Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
      								Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("80")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedFqdn: to.Ptr("internalhttpserver"),
      								TranslatedPort: to.Ptr("880"),
      							}},
      					},
      				}},
      			NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
      				{
      					Name: to.Ptr("netrulecoll"),
      					Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNetworkRule{
      							{
      								Name:        to.Ptr("L4-traffic"),
      								Description: to.Ptr("Block traffic based on source IPs and ports"),
      								DestinationAddresses: []*string{
      									to.Ptr("*")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("192.168.1.1-192.168.1.12"),
      									to.Ptr("10.1.4.12-10.1.4.255")},
      							},
      							{
      								Name:        to.Ptr("L4-traffic-with-FQDN"),
      								Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
      								DestinationFqdns: []*string{
      									to.Ptr("www.amazon.com")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("10.2.4.12-10.2.4.255")},
      							}},
      					},
      				}},
      			SKU: &armnetwork.AzureFirewallSKU{
      				Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
      				Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
      			},
      			ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
      		},
      		Zones: []*string{},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified Azure Firewall.
       *
       * @summary Creates or updates the specified Azure Firewall.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithMgmtSubnet.json
       */
      async function createAzureFirewallWithManagementSubnet() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const azureFirewallName = "azurefirewall";
        const parameters = {
          applicationRuleCollections: [
            {
              name: "apprulecoll",
              action: { type: "Deny" },
              priority: 110,
              rules: [
                {
                  name: "rule1",
                  description: "Deny inbound rule",
                  protocols: [{ port: 443, protocolType: "Https" }],
                  sourceAddresses: ["216.58.216.164", "10.0.0.0/24"],
                  targetFqdns: ["www.test.com"],
                },
              ],
            },
          ],
          ipConfigurations: [
            {
              name: "azureFirewallIpConfiguration",
              publicIPAddress: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
              },
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
              },
            },
          ],
          location: "West US",
          managementIpConfiguration: {
            name: "azureFirewallMgmtIpConfiguration",
            publicIPAddress: {
              id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/managementPipName",
            },
            subnet: {
              id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallManagementSubnet",
            },
          },
          natRuleCollections: [
            {
              name: "natrulecoll",
              action: { type: "Dnat" },
              priority: 112,
              rules: [
                {
                  name: "DNAT-HTTPS-traffic",
                  description: "D-NAT all outbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedAddress: "1.2.3.5",
                  translatedPort: "8443",
                },
                {
                  name: "DNAT-HTTP-traffic-With-FQDN",
                  description: "D-NAT all inbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["80"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedFqdn: "internalhttpserver",
                  translatedPort: "880",
                },
              ],
            },
          ],
          networkRuleCollections: [
            {
              name: "netrulecoll",
              action: { type: "Deny" },
              priority: 112,
              rules: [
                {
                  name: "L4-traffic",
                  description: "Block traffic based on source IPs and ports",
                  destinationAddresses: ["*"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["192.168.1.1-192.168.1.12", "10.1.4.12-10.1.4.255"],
                },
                {
                  name: "L4-traffic-with-FQDN",
                  description: "Block traffic based on source IPs and ports to amazon",
                  destinationFqdns: ["www.amazon.com"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["10.2.4.12-10.2.4.255"],
                },
              ],
            },
          ],
          sku: { name: "AZFW_VNet", tier: "Standard" },
          tags: { key1: "value1" },
          threatIntelMode: "Alert",
          zones: [],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.azureFirewalls.beginCreateOrUpdateAndWait(
          resourceGroupName,
          azureFirewallName,
          parameters
        );
        console.log(result);
      }

      createAzureFirewallWithManagementSubnet().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedPort": "880",
                    "translatedFqdn": "internalhttpserver"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {}
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {}
        }
      }
- name: Create Azure Firewall in virtual Hub
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01
    body: >-
      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_Hub",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "virtualHub": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
          },
          "firewallPolicy": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"
          },
          "hubIPAddresses": {
            "publicIPs": {
              "addresses": [],
              "count": 1
            }
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01

      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_Hub",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "virtualHub": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
          },
          "firewallPolicy": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"
          },
          "hubIPAddresses": {
            "publicIPs": {
              "addresses": [],
              "count": 1
            }
          }
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutInHub.json
      func ExampleAzureFirewallsClient_BeginCreateOrUpdate_createAzureFirewallInVirtualHub() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewAzureFirewallsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "azurefirewall", armnetwork.AzureFirewall{
      		Location: to.Ptr("West US"),
      		Tags: map[string]*string{
      			"key1": to.Ptr("value1"),
      		},
      		Properties: &armnetwork.AzureFirewallPropertiesFormat{
      			FirewallPolicy: &armnetwork.SubResource{
      				ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"),
      			},
      			HubIPAddresses: &armnetwork.HubIPAddresses{
      				PublicIPs: &armnetwork.HubPublicIPAddresses{
      					Addresses: []*armnetwork.AzureFirewallPublicIPAddress{},
      					Count:     to.Ptr[int32](1),
      				},
      			},
      			SKU: &armnetwork.AzureFirewallSKU{
      				Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWHub),
      				Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
      			},
      			ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
      			VirtualHub: &armnetwork.SubResource{
      				ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"),
      			},
      		},
      		Zones: []*string{},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified Azure Firewall.
       *
       * @summary Creates or updates the specified Azure Firewall.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutInHub.json
       */
      async function createAzureFirewallInVirtualHub() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const azureFirewallName = "azurefirewall";
        const parameters = {
          firewallPolicy: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1",
          },
          hubIPAddresses: { publicIPs: { addresses: [], count: 1 } },
          location: "West US",
          sku: { name: "AZFW_Hub", tier: "Standard" },
          tags: { key1: "value1" },
          threatIntelMode: "Alert",
          virtualHub: {
            id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1",
          },
          zones: [],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.azureFirewalls.beginCreateOrUpdateAndWait(
          resourceGroupName,
          azureFirewallName,
          parameters
        );
        console.log(result);
      }

      createAzureFirewallInVirtualHub().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_Hub",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "virtualHub": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
          },
          "firewallPolicy": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"
          },
          "hubIPAddresses": {
            "publicIPs": {
              "addresses": [
                {
                  "address": "13.73.240.12"
                }
              ],
              "count": 1
            },
            "privateIPAddress": "10.0.0.0"
          },
          "additionalProperties": {}
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_Hub",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "virtualHub": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
          },
          "firewallPolicy": {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/policy1"
          },
          "hubIPAddresses": {
            "publicIPs": {
              "addresses": [
                {
                  "address": "13.73.240.12"
                }
              ],
              "count": 1
            },
            "privateIPAddress": "10.0.0.0"
          },
          "ipGroups": [],
          "additionalProperties": {}
        }
      }
- name: Create Azure Firewall With Additional Properties
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01
    body: >-
      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "ipGroups": [],
          "additionalProperties": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01

      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "ipGroups": [],
          "additionalProperties": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithAdditionalProperties.json
      func ExampleAzureFirewallsClient_BeginCreateOrUpdate_createAzureFirewallWithAdditionalProperties() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewAzureFirewallsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "azurefirewall", armnetwork.AzureFirewall{
      		Location: to.Ptr("West US"),
      		Tags: map[string]*string{
      			"key1": to.Ptr("value1"),
      		},
      		Properties: &armnetwork.AzureFirewallPropertiesFormat{
      			AdditionalProperties: map[string]*string{
      				"key1": to.Ptr("value1"),
      				"key2": to.Ptr("value2"),
      			},
      			ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
      				{
      					Name: to.Ptr("apprulecoll"),
      					Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](110),
      						Rules: []*armnetwork.AzureFirewallApplicationRule{
      							{
      								Name:        to.Ptr("rule1"),
      								Description: to.Ptr("Deny inbound rule"),
      								Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
      									{
      										Port:         to.Ptr[int32](443),
      										ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
      									}},
      								SourceAddresses: []*string{
      									to.Ptr("216.58.216.164"),
      									to.Ptr("10.0.0.0/24")},
      								TargetFqdns: []*string{
      									to.Ptr("www.test.com")},
      							}},
      					},
      				}},
      			IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
      				{
      					Name: to.Ptr("azureFirewallIpConfiguration"),
      					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
      						PublicIPAddress: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
      						},
      						Subnet: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
      						},
      					},
      				}},
      			IPGroups: []*armnetwork.AzureFirewallIPGroups{},
      			NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
      				{
      					Name: to.Ptr("natrulecoll"),
      					Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
      						Action: &armnetwork.AzureFirewallNatRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNatRule{
      							{
      								Name:        to.Ptr("DNAT-HTTPS-traffic"),
      								Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedAddress: to.Ptr("1.2.3.5"),
      								TranslatedPort:    to.Ptr("8443"),
      							},
      							{
      								Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
      								Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("80")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedFqdn: to.Ptr("internalhttpserver"),
      								TranslatedPort: to.Ptr("880"),
      							}},
      					},
      				}},
      			NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
      				{
      					Name: to.Ptr("netrulecoll"),
      					Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNetworkRule{
      							{
      								Name:        to.Ptr("L4-traffic"),
      								Description: to.Ptr("Block traffic based on source IPs and ports"),
      								DestinationAddresses: []*string{
      									to.Ptr("*")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("192.168.1.1-192.168.1.12"),
      									to.Ptr("10.1.4.12-10.1.4.255")},
      							},
      							{
      								Name:        to.Ptr("L4-traffic-with-FQDN"),
      								Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
      								DestinationFqdns: []*string{
      									to.Ptr("www.amazon.com")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("10.2.4.12-10.2.4.255")},
      							}},
      					},
      				}},
      			SKU: &armnetwork.AzureFirewallSKU{
      				Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
      				Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
      			},
      			ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
      		},
      		Zones: []*string{},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified Azure Firewall.
       *
       * @summary Creates or updates the specified Azure Firewall.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithAdditionalProperties.json
       */
      async function createAzureFirewallWithAdditionalProperties() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const azureFirewallName = "azurefirewall";
        const parameters = {
          additionalProperties: { key1: "value1", key2: "value2" },
          applicationRuleCollections: [
            {
              name: "apprulecoll",
              action: { type: "Deny" },
              priority: 110,
              rules: [
                {
                  name: "rule1",
                  description: "Deny inbound rule",
                  protocols: [{ port: 443, protocolType: "Https" }],
                  sourceAddresses: ["216.58.216.164", "10.0.0.0/24"],
                  targetFqdns: ["www.test.com"],
                },
              ],
            },
          ],
          ipConfigurations: [
            {
              name: "azureFirewallIpConfiguration",
              publicIPAddress: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
              },
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
              },
            },
          ],
          ipGroups: [],
          location: "West US",
          natRuleCollections: [
            {
              name: "natrulecoll",
              action: { type: "Dnat" },
              priority: 112,
              rules: [
                {
                  name: "DNAT-HTTPS-traffic",
                  description: "D-NAT all outbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedAddress: "1.2.3.5",
                  translatedPort: "8443",
                },
                {
                  name: "DNAT-HTTP-traffic-With-FQDN",
                  description: "D-NAT all inbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["80"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedFqdn: "internalhttpserver",
                  translatedPort: "880",
                },
              ],
            },
          ],
          networkRuleCollections: [
            {
              name: "netrulecoll",
              action: { type: "Deny" },
              priority: 112,
              rules: [
                {
                  name: "L4-traffic",
                  description: "Block traffic based on source IPs and ports",
                  destinationAddresses: ["*"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["192.168.1.1-192.168.1.12", "10.1.4.12-10.1.4.255"],
                },
                {
                  name: "L4-traffic-with-FQDN",
                  description: "Block traffic based on source IPs and ports to amazon",
                  destinationFqdns: ["www.amazon.com"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["10.2.4.12-10.2.4.255"],
                },
              ],
            },
          ],
          sku: { name: "AZFW_VNet", tier: "Standard" },
          tags: { key1: "value1" },
          threatIntelMode: "Alert",
          zones: [],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.azureFirewalls.beginCreateOrUpdateAndWait(
          resourceGroupName,
          azureFirewallName,
          parameters
        );
        console.log(result);
      }

      createAzureFirewallWithAdditionalProperties().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedPort": "880",
                    "translatedFqdn": "internalhttpserver"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      }
- name: Create Azure Firewall With IpGroups
  request:
    uri: PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01
    body: >-
      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall?api-version=2022-05-01

      {
        "tags": {
          "key1": "value1"
        },
        "location": "West US",
        "zones": [],
        "properties": {
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ]
        }
      }

      ```

      # [Go](#tab/Go)
      ``` go
      package armnetwork_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithIpGroups.json
      func ExampleAzureFirewallsClient_BeginCreateOrUpdate_createAzureFirewallWithIpGroups() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armnetwork.NewAzureFirewallsClient("subid", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreateOrUpdate(ctx, "rg1", "azurefirewall", armnetwork.AzureFirewall{
      		Location: to.Ptr("West US"),
      		Tags: map[string]*string{
      			"key1": to.Ptr("value1"),
      		},
      		Properties: &armnetwork.AzureFirewallPropertiesFormat{
      			ApplicationRuleCollections: []*armnetwork.AzureFirewallApplicationRuleCollection{
      				{
      					Name: to.Ptr("apprulecoll"),
      					Properties: &armnetwork.AzureFirewallApplicationRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](110),
      						Rules: []*armnetwork.AzureFirewallApplicationRule{
      							{
      								Name:        to.Ptr("rule1"),
      								Description: to.Ptr("Deny inbound rule"),
      								Protocols: []*armnetwork.AzureFirewallApplicationRuleProtocol{
      									{
      										Port:         to.Ptr[int32](443),
      										ProtocolType: to.Ptr(armnetwork.AzureFirewallApplicationRuleProtocolTypeHTTPS),
      									}},
      								SourceAddresses: []*string{
      									to.Ptr("216.58.216.164"),
      									to.Ptr("10.0.0.0/24")},
      								TargetFqdns: []*string{
      									to.Ptr("www.test.com")},
      							}},
      					},
      				}},
      			IPConfigurations: []*armnetwork.AzureFirewallIPConfiguration{
      				{
      					Name: to.Ptr("azureFirewallIpConfiguration"),
      					Properties: &armnetwork.AzureFirewallIPConfigurationPropertiesFormat{
      						PublicIPAddress: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"),
      						},
      						Subnet: &armnetwork.SubResource{
      							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"),
      						},
      					},
      				}},
      			NatRuleCollections: []*armnetwork.AzureFirewallNatRuleCollection{
      				{
      					Name: to.Ptr("natrulecoll"),
      					Properties: &armnetwork.AzureFirewallNatRuleCollectionProperties{
      						Action: &armnetwork.AzureFirewallNatRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallNatRCActionTypeDnat),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNatRule{
      							{
      								Name:        to.Ptr("DNAT-HTTPS-traffic"),
      								Description: to.Ptr("D-NAT all outbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedAddress: to.Ptr("1.2.3.5"),
      								TranslatedPort:    to.Ptr("8443"),
      							},
      							{
      								Name:        to.Ptr("DNAT-HTTP-traffic-With-FQDN"),
      								Description: to.Ptr("D-NAT all inbound web traffic for inspection"),
      								DestinationAddresses: []*string{
      									to.Ptr("1.2.3.4")},
      								DestinationPorts: []*string{
      									to.Ptr("80")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("*")},
      								TranslatedFqdn: to.Ptr("internalhttpserver"),
      								TranslatedPort: to.Ptr("880"),
      							}},
      					},
      				}},
      			NetworkRuleCollections: []*armnetwork.AzureFirewallNetworkRuleCollection{
      				{
      					Name: to.Ptr("netrulecoll"),
      					Properties: &armnetwork.AzureFirewallNetworkRuleCollectionPropertiesFormat{
      						Action: &armnetwork.AzureFirewallRCAction{
      							Type: to.Ptr(armnetwork.AzureFirewallRCActionTypeDeny),
      						},
      						Priority: to.Ptr[int32](112),
      						Rules: []*armnetwork.AzureFirewallNetworkRule{
      							{
      								Name:        to.Ptr("L4-traffic"),
      								Description: to.Ptr("Block traffic based on source IPs and ports"),
      								DestinationAddresses: []*string{
      									to.Ptr("*")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("192.168.1.1-192.168.1.12"),
      									to.Ptr("10.1.4.12-10.1.4.255")},
      							},
      							{
      								Name:        to.Ptr("L4-traffic-with-FQDN"),
      								Description: to.Ptr("Block traffic based on source IPs and ports to amazon"),
      								DestinationFqdns: []*string{
      									to.Ptr("www.amazon.com")},
      								DestinationPorts: []*string{
      									to.Ptr("443-444"),
      									to.Ptr("8443")},
      								Protocols: []*armnetwork.AzureFirewallNetworkRuleProtocol{
      									to.Ptr(armnetwork.AzureFirewallNetworkRuleProtocolTCP)},
      								SourceAddresses: []*string{
      									to.Ptr("10.2.4.12-10.2.4.255")},
      							}},
      					},
      				}},
      			SKU: &armnetwork.AzureFirewallSKU{
      				Name: to.Ptr(armnetwork.AzureFirewallSKUNameAZFWVnet),
      				Tier: to.Ptr(armnetwork.AzureFirewallSKUTierStandard),
      			},
      			ThreatIntelMode: to.Ptr(armnetwork.AzureFirewallThreatIntelModeAlert),
      		},
      		Zones: []*string{},
      	}, nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fnetwork%2Farmnetwork%2Fv2.0.0/sdk/resourcemanager/network/armnetwork/README.md) on how to add the SDK to your project and authenticate.
      # [JavaScript](#tab/JavaScript)
      ``` js
      const { NetworkManagementClient } = require("@azure/arm-network");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Creates or updates the specified Azure Firewall.
       *
       * @summary Creates or updates the specified Azure Firewall.
       * x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2022-05-01/examples/AzureFirewallPutWithIpGroups.json
       */
      async function createAzureFirewallWithIPGroups() {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const azureFirewallName = "azurefirewall";
        const parameters = {
          applicationRuleCollections: [
            {
              name: "apprulecoll",
              action: { type: "Deny" },
              priority: 110,
              rules: [
                {
                  name: "rule1",
                  description: "Deny inbound rule",
                  protocols: [{ port: 443, protocolType: "Https" }],
                  sourceAddresses: ["216.58.216.164", "10.0.0.0/24"],
                  targetFqdns: ["www.test.com"],
                },
              ],
            },
          ],
          ipConfigurations: [
            {
              name: "azureFirewallIpConfiguration",
              publicIPAddress: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName",
              },
              subnet: {
                id: "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet",
              },
            },
          ],
          location: "West US",
          natRuleCollections: [
            {
              name: "natrulecoll",
              action: { type: "Dnat" },
              priority: 112,
              rules: [
                {
                  name: "DNAT-HTTPS-traffic",
                  description: "D-NAT all outbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedAddress: "1.2.3.5",
                  translatedPort: "8443",
                },
                {
                  name: "DNAT-HTTP-traffic-With-FQDN",
                  description: "D-NAT all inbound web traffic for inspection",
                  destinationAddresses: ["1.2.3.4"],
                  destinationPorts: ["80"],
                  protocols: ["TCP"],
                  sourceAddresses: ["*"],
                  translatedFqdn: "internalhttpserver",
                  translatedPort: "880",
                },
              ],
            },
          ],
          networkRuleCollections: [
            {
              name: "netrulecoll",
              action: { type: "Deny" },
              priority: 112,
              rules: [
                {
                  name: "L4-traffic",
                  description: "Block traffic based on source IPs and ports",
                  destinationAddresses: ["*"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["192.168.1.1-192.168.1.12", "10.1.4.12-10.1.4.255"],
                },
                {
                  name: "L4-traffic-with-FQDN",
                  description: "Block traffic based on source IPs and ports to amazon",
                  destinationFqdns: ["www.amazon.com"],
                  destinationPorts: ["443-444", "8443"],
                  protocols: ["TCP"],
                  sourceAddresses: ["10.2.4.12-10.2.4.255"],
                },
              ],
            },
          ],
          sku: { name: "AZFW_VNet", tier: "Standard" },
          tags: { key1: "value1" },
          threatIntelMode: "Alert",
          zones: [],
        };
        const credential = new DefaultAzureCredential();
        const client = new NetworkManagementClient(credential, subscriptionId);
        const result = await client.azureFirewalls.beginCreateOrUpdateAndWait(
          resourceGroupName,
          azureFirewallName,
          parameters
        );
        console.log(result);
      }

      createAzureFirewallWithIPGroups().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-network_30.0.0/sdk/network/arm-network/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceAddresses": [
                      "216.58.216.164",
                      "10.0.0.0/24"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedPort": "880",
                    "translatedFqdn": "internalhttpserver"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "destinationFqdns": [
                      "www.amazon.com"
                    ]
                  }
                ]
              }
            }
          ],
          "additionalProperties": {}
        }
      }
  - statusCode: "201"
    body: >-
      {
        "name": "azurefirewall",
        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall",
        "type": "Microsoft.Network/azureFirewalls",
        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
        "location": "West US",
        "zones": [],
        "tags": {
          "key1": "value1"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "sku": {
            "name": "AZFW_VNet",
            "tier": "Standard"
          },
          "threatIntelMode": "Alert",
          "ipConfigurations": [
            {
              "name": "azureFirewallIpConfiguration",
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azfirewallgw/ipConfigurations/azureFirewallIpConfiguration",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "properties": {
                "provisioningState": "Succeeded",
                "privateIPAddress": "10.0.0.0",
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/AzureFirewallSubnet"
                },
                "publicIPAddress": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                }
              }
            }
          ],
          "applicationRuleCollections": [
            {
              "name": "apprulecoll",
              "properties": {
                "priority": 110,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "rule1",
                    "description": "Deny inbound rule",
                    "protocols": [
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "targetFqdns": [
                      "www.test.com"
                    ],
                    "sourceIpGroups": [
                      "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1"
                    ]
                  }
                ]
              }
            }
          ],
          "natRuleCollections": [
            {
              "name": "natrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Dnat"
                },
                "rules": [
                  {
                    "name": "DNAT-HTTPS-traffic",
                    "description": "D-NAT all outbound web traffic for inspection",
                    "sourceIpGroups": [
                      "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "443"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedAddress": "1.2.3.5",
                    "translatedPort": "8443"
                  },
                  {
                    "name": "DNAT-HTTP-traffic-With-FQDN",
                    "description": "D-NAT all inbound web traffic for inspection",
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "protocols": [
                      "TCP"
                    ],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "880"
                  }
                ]
              }
            }
          ],
          "networkRuleCollections": [
            {
              "name": "netrulecoll",
              "properties": {
                "priority": 112,
                "action": {
                  "type": "Deny"
                },
                "rules": [
                  {
                    "name": "L4-traffic",
                    "description": "Block traffic based on source IPs and ports",
                    "sourceAddresses": [
                      "192.168.1.1-192.168.1.12",
                      "10.1.4.12-10.1.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  },
                  {
                    "name": "L4-traffic-with-FQDN",
                    "description": "Block traffic based on source IPs and ports to amazon",
                    "sourceAddresses": [
                      "10.2.4.12-10.2.4.255"
                    ],
                    "destinationPorts": [
                      "443-444",
                      "8443"
                    ],
                    "destinationIpGroups": [
                      "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups2"
                    ],
                    "protocols": [
                      "TCP"
                    ]
                  }
                ]
              }
            }
          ],
          "ipGroups": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1",
              "changeNumber": "5"
            },
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups2",
              "changeNumber": "4"
            }
          ],
          "additionalProperties": {}
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow.
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: >
    Learn more about Firewall service - Creates or updates the specified Azure Firewall.
errorCodes: []
