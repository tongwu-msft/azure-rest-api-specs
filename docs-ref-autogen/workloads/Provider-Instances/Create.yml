### YamlMime:RESTOperation
uid: management.azure.com.workloads.providerinstances.create
name: Create
service: Workloads
groupName: Provider Instances
apiVersion: 2021-12-01-preview
summary: Creates a provider instance for the specified subscription, resource group, SAP monitor name, and resource name.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/providerInstances/{providerInstanceName}?api-version=2021-12-01-preview
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: The ID of the target subscription.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: The name of the resource group. The name is case insensitive.
  types:
  - uid: string
- name: monitorName
  in: path
  isRequired: true
  description: Name of the SAP monitor resource.
  types:
  - uid: string
- name: providerInstanceName
  in: path
  isRequired: true
  description: Name of the provider instance.
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: The API version to use for this operation.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Created provider instance
  types:
  - uid: ProviderInstance
- name: 201 Created
  description: Creating provider instance
  types:
  - uid: ProviderInstance
- name: Other Status Codes
  description: Error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: identity
    in: body
    description: Managed service identity (user assigned identities)
    types:
    - uid: UserAssignedServiceIdentity
  - name: properties.providerSettings
    in: body
    description: Defines the provider instance errors.
    types:
    - uid: HanaDbProviderInstanceProperties
    - uid: SapNetWeaverProviderInstanceProperties
    - uid: PrometheusOSProviderInstanceProperties
    - uid: DB2ProviderInstanceProperties
    - uid: PrometheusHaClusterProviderInstanceProperties
    - uid: MsSqlServerProviderInstanceProperties
    typesTitle: ProviderSpecificProperties
requestHeader: []
definitions:
- name: UserAssignedServiceIdentity
  description: Managed service identity (user assigned identities)
  kind: object
  properties:
  - name: type
    description: Type of manage identity
    types:
    - uid: ManagedServiceIdentityType
  - name: userAssignedIdentities
    description: "User-Assigned Identities  \nUser assigned identities dictionary"
    types:
    - uid: object
      isDictionary: true
      additionalTypes:
      - uid: string
      - uid: UserAssignedIdentity
- name: Errors
  description: Defines the provider instance errors.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: Server-defined set of error codes.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: Human-readable representation of the error.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: Target of the error.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: Array of details about specific errors that led to this reported error.
    types:
    - uid: Error
      isArray: true
  - name: innerError
    isReadyOnly: true
    description: Object containing more specific information than  the current object about the error.
    types:
    - uid: InnerError
- name: systemData
  description: Metadata pertaining to creation and last modification of the resource.
  kind: object
  properties:
  - name: createdBy
    description: The identity that created the resource.
    types:
    - uid: string
  - name: createdByType
    description: The type of identity that created the resource.
    types:
    - uid: createdByType
  - name: createdAt
    description: The timestamp of resource creation (UTC).
    types:
    - uid: string
  - name: lastModifiedBy
    description: The identity that last modified the resource.
    types:
    - uid: string
  - name: lastModifiedByType
    description: The type of identity that last modified the resource.
    types:
    - uid: createdByType
  - name: lastModifiedAt
    description: The timestamp of resource last modification (UTC)
    types:
    - uid: string
- name: ProviderInstance
  description: A provider instance associated with SAP monitor.
  kind: object
  properties:
  - name: identity
    description: Managed service identity (user assigned identities)
    types:
    - uid: UserAssignedServiceIdentity
  - name: properties.provisioningState
    isReadyOnly: true
    description: State of provisioning of the provider instance
    types:
    - uid: WorkloadMonitorProvisioningState
  - name: properties.errors
    isReadyOnly: true
    description: Defines the provider instance errors.
    types:
    - uid: Errors
  - name: properties.providerSettings
    description: Defines the provider instance errors.
    types:
    - uid: HanaDbProviderInstanceProperties
    - uid: SapNetWeaverProviderInstanceProperties
    - uid: PrometheusOSProviderInstanceProperties
    - uid: DB2ProviderInstanceProperties
    - uid: PrometheusHaClusterProviderInstanceProperties
    - uid: MsSqlServerProviderInstanceProperties
    typesTitle: ProviderSpecificProperties
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    types:
    - uid: string
  - name: systemData
    isReadyOnly: true
    description: Azure Resource Manager metadata containing createdBy and modifiedBy information.
    types:
    - uid: systemData
- name: ErrorResponse
  description: Error response
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: ManagedServiceIdentityType
  description: Type of managed service identity (only None, UserAssigned types are allowed).
  kind: enum
  properties:
  - name: None
    types:
    - uid: string
  - name: UserAssigned
    types:
    - uid: string
- name: UserAssignedIdentity
  description: User assigned identity properties
  kind: object
  properties:
  - name: principalId
    isReadyOnly: true
    description: The principal ID of the assigned identity.
    types:
    - uid: string
  - name: clientId
    isReadyOnly: true
    description: The client ID of the assigned identity.
    types:
    - uid: string
- name: Error
  description: Standard error object.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: Server-defined set of error codes.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: Human-readable representation of the error.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: Target of the error.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: Array of details about specific errors that led to this reported error.
    types:
    - uid: Error
      isArray: true
  - name: innerError
    isReadyOnly: true
    description: Object containing more specific information than  the current object about the error.
    types:
    - uid: InnerError
- name: InnerError
  description: Object containing more specific information than  the current object about the error.
  kind: object
  properties:
  - name: innerError
    description: Standard error object.
    types:
    - uid: Error
- name: HanaDbProviderInstanceProperties
  description: Gets or sets the provider properties.
  kind: object
  properties:
  - name: hostname
    description: Gets or sets the target virtual machine size.
    types:
    - uid: string
  - name: dbName
    description: Gets or sets the hana database name.
    types:
    - uid: string
  - name: sqlPort
    description: Gets or sets the database sql port.
    types:
    - uid: string
  - name: instanceNumber
    description: Gets or sets the database instance number.
    types:
    - uid: string
  - name: dbUsername
    description: Gets or sets the database user name.
    types:
    - uid: string
  - name: dbPassword
    description: Gets or sets the database password.
    types:
    - uid: string
  - name: dbPasswordUri
    description: Gets or sets the key vault URI to secret with the database password.
    types:
    - uid: string
  - name: dbSslCertificateUri
    description: Gets or sets the blob URI to SSL certificate for the DB.
    types:
    - uid: string
  - name: sslHostNameInCertificate
    description: Gets or sets the hostname(s) in the SSL certificate.
    types:
    - uid: string
  - name: providerType
    description: The provider type. For example, the value can be SapHana.
    types:
    - uid: SapHana
    typesTitle: string
- name: SapNetWeaverProviderInstanceProperties
  description: Gets or sets the provider properties.
  kind: object
  properties:
  - name: sapSid
    description: Gets or sets the SAP System Identifier
    types:
    - uid: string
  - name: sapHostname
    description: Gets or sets the target virtual machine IP Address/FQDN.
    types:
    - uid: string
  - name: sapInstanceNr
    description: Gets or sets the instance number of SAP NetWeaver.
    types:
    - uid: string
  - name: sapHostFileEntries
    description: Gets or sets the list of HostFile Entries
    types:
    - uid: string
      isArray: true
  - name: sapUsername
    description: Gets or sets the SAP user name.
    types:
    - uid: string
  - name: sapPassword
    description: Sets the SAP password.
    types:
    - uid: string
  - name: sapPasswordUri
    description: Gets or sets the key vault URI to secret with the SAP password.
    types:
    - uid: string
  - name: sapClientId
    description: Gets or sets the SAP Client ID.
    types:
    - uid: string
  - name: sapPortNumber
    description: Gets or sets the SAP HTTP port number.
    types:
    - uid: string
  - name: sapSslCertificateUri
    description: Gets or sets the blob URI to SSL certificate for the SAP system.
    types:
    - uid: string
  - name: providerType
    description: The provider type. For example, the value can be SapHana.
    types:
    - uid: SapNetWeaver
    typesTitle: string
- name: PrometheusOSProviderInstanceProperties
  description: Gets or sets the PrometheusOS provider properties.
  kind: object
  properties:
  - name: prometheusUrl
    description: URL of the Node Exporter endpoint
    types:
    - uid: string
  - name: providerType
    description: The provider type. For example, the value can be SapHana.
    types:
    - uid: PrometheusOS
    typesTitle: string
- name: DB2ProviderInstanceProperties
  description: Gets or sets the DB2 provider properties.
  kind: object
  properties:
  - name: hostname
    description: Gets or sets the target virtual machine name.
    types:
    - uid: string
  - name: dbName
    description: Gets or sets the db2 database name.
    types:
    - uid: string
  - name: dbPort
    description: Gets or sets the db2 database sql port.
    types:
    - uid: string
  - name: dbUsername
    description: Gets or sets the db2 database user name.
    types:
    - uid: string
  - name: dbPassword
    description: Gets or sets the db2 database password.
    types:
    - uid: string
  - name: dbPasswordUri
    description: Gets or sets the key vault URI to secret with the database password.
    types:
    - uid: string
  - name: sapSid
    description: Gets or sets the SAP System Identifier
    types:
    - uid: string
  - name: providerType
    description: The provider type. For example, the value can be SapHana.
    types:
    - uid: Db2
    typesTitle: string
- name: PrometheusHaClusterProviderInstanceProperties
  description: Gets or sets the PrometheusHaCluster provider properties.
  kind: object
  properties:
  - name: prometheusUrl
    description: URL of the Node Exporter endpoint.
    types:
    - uid: string
  - name: hostname
    description: Gets or sets the target machine name.
    types:
    - uid: string
  - name: sid
    description: Gets or sets the cluster sid.
    types:
    - uid: string
  - name: clusterName
    description: Gets or sets the clusterName.
    types:
    - uid: string
  - name: providerType
    description: The provider type. For example, the value can be SapHana.
    types:
    - uid: PrometheusHaCluster
    typesTitle: string
- name: MsSqlServerProviderInstanceProperties
  description: Gets or sets the SQL server provider properties.
  kind: object
  properties:
  - name: hostname
    description: Gets or sets the SQL server host name.
    types:
    - uid: string
  - name: dbPort
    description: Gets or sets the database sql port.
    types:
    - uid: string
  - name: dbUsername
    description: Gets or sets the database user name.
    types:
    - uid: string
  - name: dbPassword
    description: Gets or sets the database password.
    types:
    - uid: string
  - name: dbPasswordUri
    description: Gets or sets the key vault URI to secret with the database password.
    types:
    - uid: string
  - name: sapSid
    description: Gets or sets the SAP System Identifier
    types:
    - uid: string
  - name: providerType
    description: The provider type. For example, the value can be SapHana.
    types:
    - uid: MsSqlServer
    typesTitle: string
- name: createdByType
  description: The type of identity that created the resource.
  kind: enum
  properties:
  - name: User
    types:
    - uid: string
  - name: Application
    types:
    - uid: string
  - name: ManagedIdentity
    types:
    - uid: string
  - name: Key
    types:
    - uid: string
- name: WorkloadMonitorProvisioningState
  description: State of provisioning of the SAP monitor.
  kind: enum
  properties:
  - name: Accepted
    types:
    - uid: string
  - name: Creating
    types:
    - uid: string
  - name: Updating
    types:
    - uid: string
  - name: Failed
    types:
    - uid: string
  - name: Succeeded
    types:
    - uid: string
  - name: Deleting
    types:
    - uid: string
  - name: Migrating
    types:
    - uid: string
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: Create a SAP monitor Hana provider
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview
    body: >-
      {
        "properties": {
          "providerSettings": {
            "providerType": "SapHana",
            "hostname": "name",
            "dbName": "db",
            "sqlPort": "0000",
            "instanceNumber": "00",
            "dbUsername": "user",
            "dbPassword": "****",
            "dbPasswordUri": "",
            "dbSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename",
            "sslHostNameInCertificate": "xyz.domain.com"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview

      {
        "properties": {
          "providerSettings": {
            "providerType": "SapHana",
            "hostname": "name",
            "dbName": "db",
            "sqlPort": "0000",
            "instanceNumber": "00",
            "dbUsername": "user",
            "dbPassword": "****",
            "dbPasswordUri": "",
            "dbSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename",
            "sslHostNameInCertificate": "xyz.domain.com"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.workloads.models.HanaDbProviderInstanceProperties;

      /** Samples for ProviderInstances Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/ProviderInstances_Create.json
           */
          /**
           * Sample code: Create a SAP monitor Hana provider.
           *
           * @param manager Entry point to WorkloadsManager.
           */
          public static void createASAPMonitorHanaProvider(com.azure.resourcemanager.workloads.WorkloadsManager manager) {
              manager
                  .providerInstances()
                  .define("myProviderInstance")
                  .withExistingMonitor("myResourceGroup", "mySapMonitor")
                  .withProviderSettings(
                      new HanaDbProviderInstanceProperties()
                          .withHostname("name")
                          .withDbName("db")
                          .withSqlPort("0000")
                          .withInstanceNumber("00")
                          .withDbUsername("user")
                          .withDbPassword("****")
                          .withDbPasswordUri("")
                          .withDbSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename")
                          .withSslHostnameInCertificate("xyz.domain.com"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-workloads_1.0.0-beta.1/sdk/workloads/azure-resourcemanager-workloads/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "systemData": {
          "createdBy": "user@xyz.com",
          "createdByType": "User",
          "createdAt": "2021-08-19T15:10:46.196Z",
          "lastModifiedBy": "user@xyz.com",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2021-08-19T15:10:46.196Z"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "SapHana",
            "hostname": "name",
            "dbName": "db",
            "sqlPort": "0000",
            "instanceNumber": "00",
            "dbUsername": "user",
            "dbPasswordUri": "",
            "sslHostNameInCertificate": "xyz.domain.com",
            "dbSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "SapHana",
            "hostname": "name",
            "dbName": "db",
            "sqlPort": "0000",
            "instanceNumber": "00",
            "dbUsername": "user",
            "dbPasswordUri": "",
            "sslHostNameInCertificate": "xyz.domain.com",
            "dbSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename"
          }
        }
      }
- name: Create a SAP monitor NetWeaver provider
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview
    body: >-
      {
        "properties": {
          "providerSettings": {
            "providerType": "SapNetWeaver",
            "sapSid": "SID",
            "sapHostname": "name",
            "sapInstanceNr": "00",
            "sapHostFileEntries": [
              "127.0.0.1 name fqdn"
            ],
            "sapUsername": "username",
            "sapPassword": "****",
            "sapPasswordUri": "",
            "sapPortNumber": "1234",
            "sapClientId": "111",
            "sapSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview

      {
        "properties": {
          "providerSettings": {
            "providerType": "SapNetWeaver",
            "sapSid": "SID",
            "sapHostname": "name",
            "sapInstanceNr": "00",
            "sapHostFileEntries": [
              "127.0.0.1 name fqdn"
            ],
            "sapUsername": "username",
            "sapPassword": "****",
            "sapPasswordUri": "",
            "sapPortNumber": "1234",
            "sapClientId": "111",
            "sapSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.workloads.models.SapNetWeaverProviderInstanceProperties;
      import java.util.Arrays;

      /** Samples for ProviderInstances Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/NetWeaverProviderInstances_Create.json
           */
          /**
           * Sample code: Create a SAP monitor NetWeaver provider.
           *
           * @param manager Entry point to WorkloadsManager.
           */
          public static void createASAPMonitorNetWeaverProvider(
              com.azure.resourcemanager.workloads.WorkloadsManager manager) {
              manager
                  .providerInstances()
                  .define("myProviderInstance")
                  .withExistingMonitor("myResourceGroup", "mySapMonitor")
                  .withProviderSettings(
                      new SapNetWeaverProviderInstanceProperties()
                          .withSapSid("SID")
                          .withSapHostname("name")
                          .withSapInstanceNr("00")
                          .withSapHostFileEntries(Arrays.asList("127.0.0.1 name fqdn"))
                          .withSapUsername("username")
                          .withSapPassword("****")
                          .withSapPasswordUri("")
                          .withSapClientId("111")
                          .withSapPortNumber("1234")
                          .withSapSslCertificateUri("https://storageaccount.blob.core.windows.net/containername/filename"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-workloads_1.0.0-beta.1/sdk/workloads/azure-resourcemanager-workloads/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "systemData": {
          "createdBy": "user@xyz.com",
          "createdByType": "User",
          "createdAt": "2021-08-19T15:10:46.196Z",
          "lastModifiedBy": "user@xyz.com",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2021-08-19T15:10:46.196Z"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "SapNetWeaver",
            "sapSid": "SID",
            "sapHostname": "name",
            "sapInstanceNr": "00",
            "sapHostFileEntries": [
              "127.0.0.1 name fqdn"
            ],
            "sapUsername": "username",
            "sapPasswordUri": "",
            "sapPortNumber": "1234",
            "sapClientId": "111",
            "sapSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "SapNetWeaver",
            "sapSid": "SID",
            "sapHostname": "name",
            "sapInstanceNr": "00",
            "sapHostFileEntries": [
              "127.0.0.1 name fqdn"
            ],
            "sapUsername": "username",
            "sapPasswordUri": "",
            "sapPortNumber": "1234",
            "sapClientId": "111",
            "sapSslCertificateUri": "https://storageaccount.blob.core.windows.net/containername/filename"
          }
        }
      }
- name: Create a OS provider
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview
    body: >-
      {
        "properties": {
          "providerSettings": {
            "providerType": "PrometheusOS",
            "prometheusUrl": "http://192.168.0.0:9090/metrics"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview

      {
        "properties": {
          "providerSettings": {
            "providerType": "PrometheusOS",
            "prometheusUrl": "http://192.168.0.0:9090/metrics"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.workloads.models.PrometheusOSProviderInstanceProperties;

      /** Samples for ProviderInstances Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusOSProviderInstances_Create.json
           */
          /**
           * Sample code: Create a OS provider.
           *
           * @param manager Entry point to WorkloadsManager.
           */
          public static void createAOSProvider(com.azure.resourcemanager.workloads.WorkloadsManager manager) {
              manager
                  .providerInstances()
                  .define("myProviderInstance")
                  .withExistingMonitor("myResourceGroup", "mySapMonitor")
                  .withProviderSettings(
                      new PrometheusOSProviderInstanceProperties().withPrometheusUrl("http://192.168.0.0:9090/metrics"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-workloads_1.0.0-beta.1/sdk/workloads/azure-resourcemanager-workloads/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "systemData": {
          "createdBy": "user@xyz.com",
          "createdByType": "User",
          "createdAt": "2021-08-19T15:10:46.196Z",
          "lastModifiedBy": "user@xyz.com",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2021-08-19T15:10:46.196Z"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "PrometheusOS",
            "prometheusUrl": "http://192.168.0.0:9090/metrics"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "PrometheusOS",
            "prometheusUrl": "http://192.168.0.0:9090/metrics"
          }
        }
      }
- name: Create a Db2 provider
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview
    body: >-
      {
        "properties": {
          "providerSettings": {
            "providerType": "Db2",
            "sapSid": "SID",
            "hostname": "hostname",
            "dbUsername": "username",
            "dbName": "dbName",
            "dbPassword": "password",
            "dbPasswordUri": "",
            "dbPort": "dbPort"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview

      {
        "properties": {
          "providerSettings": {
            "providerType": "Db2",
            "sapSid": "SID",
            "hostname": "hostname",
            "dbUsername": "username",
            "dbName": "dbName",
            "dbPassword": "password",
            "dbPasswordUri": "",
            "dbPort": "dbPort"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.workloads.models.DB2ProviderInstanceProperties;

      /** Samples for ProviderInstances Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/Db2ProviderInstances_Create.json
           */
          /**
           * Sample code: Create a Db2 provider.
           *
           * @param manager Entry point to WorkloadsManager.
           */
          public static void createADb2Provider(com.azure.resourcemanager.workloads.WorkloadsManager manager) {
              manager
                  .providerInstances()
                  .define("myProviderInstance")
                  .withExistingMonitor("myResourceGroup", "mySapMonitor")
                  .withProviderSettings(
                      new DB2ProviderInstanceProperties()
                          .withHostname("hostname")
                          .withDbName("dbName")
                          .withDbPort("dbPort")
                          .withDbUsername("username")
                          .withDbPassword("password")
                          .withDbPasswordUri("")
                          .withSapSid("SID"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-workloads_1.0.0-beta.1/sdk/workloads/azure-resourcemanager-workloads/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armworkloads_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloads/armworkloads"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/Db2ProviderInstances_Create.json
      func ExampleProviderInstancesClient_BeginCreate() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armworkloads.NewProviderInstancesClient("00000000-0000-0000-0000-000000000000", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	poller, err := client.BeginCreate(ctx,
      		"myResourceGroup",
      		"mySapMonitor",
      		"myProviderInstance",
      		armworkloads.ProviderInstance{
      			Properties: &armworkloads.ProviderInstanceProperties{
      				ProviderSettings: &armworkloads.DB2ProviderInstanceProperties{
      					ProviderType:  to.Ptr("Db2"),
      					DbName:        to.Ptr("dbName"),
      					DbPassword:    to.Ptr("password"),
      					DbPasswordURI: to.Ptr(""),
      					DbPort:        to.Ptr("dbPort"),
      					DbUsername:    to.Ptr("username"),
      					Hostname:      to.Ptr("hostname"),
      					SapSid:        to.Ptr("SID"),
      				},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	res, err := poller.PollUntilDone(ctx, nil)
      	if err != nil {
      		log.Fatalf("failed to pull the result: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Fworkloads%2Farmworkloads%2Fv0.2.0/sdk/resourcemanager/workloads/armworkloads/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "systemData": {
          "createdBy": "user@xyz.com",
          "createdByType": "User",
          "createdAt": "2021-08-19T15:10:46.196Z",
          "lastModifiedBy": "user@xyz.com",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2021-08-19T15:10:46.196Z"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "Db2",
            "sapSid": "SID",
            "hostname": "vmname.azure.com",
            "dbUsername": "Db2OPA",
            "dbName": "OPA",
            "dbPort": "5912",
            "dbPasswordUri": ""
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "Db2",
            "sapSid": "SID",
            "hostname": "vmname.azure.com",
            "dbUsername": "Db2OPA",
            "dbName": "OPA",
            "dbPort": "5912",
            "dbPasswordUri": ""
          }
        }
      }
- name: Create a MsSqlServer provider
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview
    body: >-
      {
        "properties": {
          "providerSettings": {
            "providerType": "MsSqlServer",
            "dbUsername": "user",
            "dbPassword": "****",
            "dbPasswordUri": "",
            "dbPort": "5912",
            "hostname": "hostname",
            "sapSid": "sid"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview

      {
        "properties": {
          "providerSettings": {
            "providerType": "MsSqlServer",
            "dbUsername": "user",
            "dbPassword": "****",
            "dbPasswordUri": "",
            "dbPort": "5912",
            "hostname": "hostname",
            "sapSid": "sid"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.workloads.models.MsSqlServerProviderInstanceProperties;

      /** Samples for ProviderInstances Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/MsSqlServerProviderInstance_Create.json
           */
          /**
           * Sample code: Create a MsSqlServer provider.
           *
           * @param manager Entry point to WorkloadsManager.
           */
          public static void createAMsSqlServerProvider(com.azure.resourcemanager.workloads.WorkloadsManager manager) {
              manager
                  .providerInstances()
                  .define("myProviderInstance")
                  .withExistingMonitor("myResourceGroup", "mySapMonitor")
                  .withProviderSettings(
                      new MsSqlServerProviderInstanceProperties()
                          .withHostname("hostname")
                          .withDbPort("5912")
                          .withDbUsername("user")
                          .withDbPassword("****")
                          .withDbPasswordUri("")
                          .withSapSid("sid"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-workloads_1.0.0-beta.1/sdk/workloads/azure-resourcemanager-workloads/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "systemData": {
          "createdBy": "user@xyz.com",
          "createdByType": "User",
          "createdAt": "2021-08-19T15:10:46.196Z",
          "lastModifiedBy": "user@xyz.com",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2021-08-19T15:10:46.196Z"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "MsSqlServer",
            "dbUsername": "user",
            "dbPort": "5912",
            "hostname": "hostname",
            "sapSid": "sid"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "MsSqlServer",
            "dbUsername": "user",
            "dbPort": "5912",
            "hostname": "hostname",
            "sapSid": "sid"
          }
        }
      }
- name: Create a PrometheusHaCluster provider
  request:
    uri: PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview
    body: >-
      {
        "properties": {
          "providerSettings": {
            "providerType": "PrometheusHaCluster",
            "prometheusUrl": "http://192.168.0.0:9090/metrics",
            "hostname": "hostname",
            "sid": "sid",
            "clusterName": "clusterName"
          }
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/monitors/mySapMonitor/providerInstances/myProviderInstance?api-version=2021-12-01-preview

      {
        "properties": {
          "providerSettings": {
            "providerType": "PrometheusHaCluster",
            "prometheusUrl": "http://192.168.0.0:9090/metrics",
            "hostname": "hostname",
            "sid": "sid",
            "clusterName": "clusterName"
          }
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.resourcemanager.workloads.models.PrometheusHaClusterProviderInstanceProperties;

      /** Samples for ProviderInstances Create. */
      public final class Main {
          /*
           * x-ms-original-file: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Create.json
           */
          /**
           * Sample code: Create a PrometheusHaCluster provider.
           *
           * @param manager Entry point to WorkloadsManager.
           */
          public static void createAPrometheusHaClusterProvider(
              com.azure.resourcemanager.workloads.WorkloadsManager manager) {
              manager
                  .providerInstances()
                  .define("myProviderInstance")
                  .withExistingMonitor("myResourceGroup", "mySapMonitor")
                  .withProviderSettings(
                      new PrometheusHaClusterProviderInstanceProperties()
                          .withPrometheusUrl("http://192.168.0.0:9090/metrics")
                          .withHostname("hostname")
                          .withSid("sid")
                          .withClusterName("clusterName"))
                  .create();
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager-workloads_1.0.0-beta.1/sdk/workloads/azure-resourcemanager-workloads/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "systemData": {
          "createdBy": "user@xyz.com",
          "createdByType": "User",
          "createdAt": "2021-08-19T15:10:46.196Z",
          "lastModifiedBy": "user@xyz.com",
          "lastModifiedByType": "User",
          "lastModifiedAt": "2021-08-19T15:10:46.196Z"
        },
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "PrometheusHaCluster",
            "prometheusUrl": "http://192.168.0.0:9090/metrics",
            "hostname": "hostname",
            "sid": "sid",
            "clusterName": "clusterName"
          }
        }
      }
  - statusCode: "201"
    body: >-
      {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Workloads/workloads/mySapMonitor/providerInstances/myProviderInstance",
        "name": "myProviderInstance",
        "type": "Microsoft.Workloads/workloads/providerInstances",
        "properties": {
          "provisioningState": "Succeeded",
          "providerSettings": {
            "providerType": "PrometheusHaCluster",
            "prometheusUrl": "http://192.168.0.0:9090/metrics",
            "hostname": "hostname",
            "sid": "sid",
            "clusterName": "clusterName"
          }
        }
      }
security: []
metadata:
  description: Creates a provider instance for the specified subscription, resource group, SAP monitor name, and resource name.
errorCodes: []
