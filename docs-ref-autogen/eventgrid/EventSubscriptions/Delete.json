{
  "swagger": "2.0",
  "info": {
    "version": "2019-02-01-preview",
    "title": "EventGridManagementClient",
    "description": "Azure EventGrid Management Client"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}": {
      "delete": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Delete an event subscription",
        "description": "Delete an existing event subscription",
        "operationId": "EventSubscriptions_Delete",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.",
            "required": true,
            "type": "string",
            "x-ms-skip-url-encoding": true
          },
          {
            "name": "eventSubscriptionName",
            "in": "path",
            "description": "Name of the event subscription",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted"
          },
          "204": {
            "description": "NoContent"
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 Bad Request.\n\n * 404 Not Found.\n\n * 500 Internal Server Error."
          }
        },
        "x-ms-examples": {
          "EventSubscriptions_DeleteForSubscription": {
            "parameters": {
              "scope": "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
              "eventSubscriptionName": "examplesubscription3",
              "api-version": "2019-02-01-preview"
            },
            "responses": {
              "202": {},
              "204": {},
              "200": {}
            }
          },
          "EventSubscriptions_DeleteForResourceGroup": {
            "parameters": {
              "scope": "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
              "eventSubscriptionName": "examplesubscription2",
              "api-version": "2019-02-01-preview"
            },
            "responses": {
              "202": {},
              "204": {},
              "200": {}
            }
          },
          "EventSubscriptions_DeleteForResource": {
            "parameters": {
              "scope": "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
              "eventSubscriptionName": "examplesubscription10",
              "api-version": "2019-02-01-preview"
            },
            "responses": {
              "202": {},
              "204": {},
              "200": {}
            }
          },
          "EventSubscriptions_DeleteForCustomTopic": {
            "parameters": {
              "scope": "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
              "eventSubscriptionName": "examplesubscription1",
              "api-version": "2019-02-01-preview"
            },
            "responses": {
              "202": {},
              "204": {},
              "200": {}
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-internal-toc-name": "Delete"
      }
    }
  },
  "definitions": {
    "DomainProperties": {
      "description": "Properties of the Domain",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the domain.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "DomainProvisioningState",
            "modelAsString": true
          }
        },
        "endpoint": {
          "description": "Endpoint for the domain.",
          "type": "string",
          "readOnly": true
        },
        "inputSchema": {
          "description": "This determines the format that Event Grid should expect for incoming events published to the domain.",
          "enum": [
            "EventGridSchema",
            "CustomEventSchema",
            "CloudEventV01Schema"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "InputSchema",
            "modelAsString": true
          },
          "default": "EventGridSchema"
        },
        "inputSchemaMapping": {
          "$ref": "#/definitions/InputSchemaMapping",
          "description": "Information about the InputSchemaMapping which specified the info about mapping event payload."
        }
      }
    },
    "Resource": {
      "description": "Definition of a Resource",
      "type": "object",
      "properties": {
        "id": {
          "description": "Fully qualified identifier of the resource",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name of the resource",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Type of the resource",
          "type": "string",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "JsonInputSchemaMappingProperties": {
      "description": "This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/JsonField",
          "description": "The mapping information for the Id property of the Event Grid Event."
        },
        "topic": {
          "$ref": "#/definitions/JsonField",
          "description": "The mapping information for the Topic property of the Event Grid Event."
        },
        "eventTime": {
          "$ref": "#/definitions/JsonField",
          "description": "The mapping information for the EventTime property of the Event Grid Event."
        },
        "eventType": {
          "$ref": "#/definitions/JsonFieldWithDefault",
          "description": "The mapping information for the EventType property of the Event Grid Event."
        },
        "subject": {
          "$ref": "#/definitions/JsonFieldWithDefault",
          "description": "The mapping information for the Subject property of the Event Grid Event."
        },
        "dataVersion": {
          "$ref": "#/definitions/JsonFieldWithDefault",
          "description": "The mapping information for the DataVersion property of the Event Grid Event."
        }
      }
    },
    "JsonField": {
      "description": "This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.",
      "type": "object",
      "properties": {
        "sourceField": {
          "description": "Name of a field in the input event schema that's to be used as the source of a mapping.",
          "type": "string"
        }
      }
    },
    "JsonFieldWithDefault": {
      "description": "This is used to express the source of an input schema mapping for a single target field\r\nin the Event Grid Event schema. This is currently used in the mappings for the 'subject',\r\n'eventtype' and 'dataversion' properties. This represents a field in the input event schema\r\nalong with a default value to be used, and at least one of these two properties should be provided.",
      "type": "object",
      "properties": {
        "sourceField": {
          "description": "Name of a field in the input event schema that's to be used as the source of a mapping.",
          "type": "string"
        },
        "defaultValue": {
          "description": "The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.",
          "type": "string"
        }
      }
    },
    "JsonInputSchemaMapping": {
      "description": "This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InputSchemaMapping"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/JsonInputSchemaMappingProperties",
          "description": "JSON Properties of the input schema mapping",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "Json"
    },
    "InputSchemaMapping": {
      "description": "By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.",
      "type": "object",
      "properties": {
        "inputSchemaMappingType": {
          "description": "Type of the custom mapping",
          "enum": [
            "Json"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "InputSchemaMappingType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "inputSchemaMappingType"
    },
    "TrackedResource": {
      "description": "Definition of a Tracked Resource",
      "required": [
        "location"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "location": {
          "description": "Location of the resource",
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "tags": {
          "description": "Tags of the resource",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Domain": {
      "description": "EventGrid Domain",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/DomainProperties",
          "description": "Properties of the domain",
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainUpdateParameters": {
      "description": "Properties of the Domain update",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Tags of the domains resource",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DomainsListResult": {
      "description": "Result of the List Domains operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of Domains",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "nextLink": {
          "description": "A link for the next page of domains",
          "type": "string"
        }
      }
    },
    "DomainSharedAccessKeys": {
      "description": "Shared access keys of the Domain",
      "type": "object",
      "properties": {
        "key1": {
          "description": "Shared access key1 for the domain.",
          "type": "string"
        },
        "key2": {
          "description": "Shared access key2 for the domain.",
          "type": "string"
        }
      }
    },
    "DomainRegenerateKeyRequest": {
      "description": "Domain regenerate share access key request",
      "required": [
        "keyName"
      ],
      "type": "object",
      "properties": {
        "keyName": {
          "description": "Key name to regenerate key1 or key2",
          "type": "string"
        }
      }
    },
    "DomainTopicProperties": {
      "description": "Properties of the Domain Topic",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the domain topic.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DomainTopicProvisioningState",
            "modelAsString": true
          }
        }
      }
    },
    "DomainTopic": {
      "description": "Domain Topic",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/DomainTopicProperties",
          "description": "Properties of the Domain Topic",
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainTopicsListResult": {
      "description": "Result of the List Domain Topics operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of Domain Topics",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainTopic"
          }
        },
        "nextLink": {
          "description": "A link for the next page of domain topics",
          "type": "string"
        }
      }
    },
    "EventSubscriptionProperties": {
      "description": "Properties of the Event Subscription",
      "type": "object",
      "properties": {
        "topic": {
          "description": "Name of the topic of the event subscription.",
          "type": "string",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the event subscription.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed",
            "AwaitingManualAction"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "EventSubscriptionProvisioningState",
            "modelAsString": true
          }
        },
        "destination": {
          "$ref": "#/definitions/EventSubscriptionDestination",
          "description": "Information about the destination where events have to be delivered for the event subscription."
        },
        "filter": {
          "$ref": "#/definitions/EventSubscriptionFilter",
          "description": "Information about the filter for the event subscription."
        },
        "labels": {
          "description": "List of user defined labels.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expirationTimeUtc": {
          "format": "date-time",
          "description": "Expiration time of the event subscription.",
          "type": "string"
        },
        "eventDeliverySchema": {
          "description": "The event delivery schema for the event subscription.",
          "enum": [
            "EventGridSchema",
            "CloudEventV01Schema",
            "CustomInputSchema"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EventDeliverySchema",
            "modelAsString": true
          }
        },
        "retryPolicy": {
          "$ref": "#/definitions/RetryPolicy",
          "description": "The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events."
        },
        "deadLetterDestination": {
          "$ref": "#/definitions/DeadLetterDestination",
          "description": "The DeadLetter destination of the event subscription."
        }
      }
    },
    "EventSubscriptionFilter": {
      "description": "Filter for the Event Subscription",
      "type": "object",
      "properties": {
        "subjectBeginsWith": {
          "description": "An optional string to filter events for an event subscription based on a resource path prefix.\r\nThe format of this depends on the publisher of the events. \r\nWildcard characters are not supported in this path.",
          "type": "string"
        },
        "subjectEndsWith": {
          "description": "An optional string to filter events for an event subscription based on a resource path suffix.\r\nWildcard characters are not supported in this path.",
          "type": "string"
        },
        "includedEventTypes": {
          "description": "A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isSubjectCaseSensitive": {
          "description": "Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter \r\nshould be compared in a case sensitive manner.",
          "default": false,
          "type": "boolean"
        },
        "advancedFilters": {
          "description": "An array of advanced filters that are used for filtering event subscriptions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvancedFilter"
          }
        }
      }
    },
    "RetryPolicy": {
      "description": "Information about the retry policy for an event subscription",
      "type": "object",
      "properties": {
        "maxDeliveryAttempts": {
          "format": "int32",
          "description": "Maximum number of delivery retry attempts for events.",
          "type": "integer"
        },
        "eventTimeToLiveInMinutes": {
          "format": "int32",
          "description": "Time To Live (in minutes) for events.",
          "type": "integer"
        }
      }
    },
    "WebHookEventSubscriptionDestinationProperties": {
      "description": "Information about the webhook destination properties for an event subscription.",
      "type": "object",
      "properties": {
        "endpointUrl": {
          "description": "The URL that represents the endpoint of the destination of an event subscription.",
          "type": "string"
        },
        "endpointBaseUrl": {
          "description": "The base URL that represents the endpoint of the destination of an event subscription.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StorageBlobDeadLetterDestinationProperties": {
      "description": "Properties of the storage blob based dead letter destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource ID of the storage account that is the destination of the deadletter events",
          "type": "string"
        },
        "blobContainerName": {
          "description": "The name of the Storage blob container that is the destination of the deadletter events",
          "type": "string"
        }
      }
    },
    "NumberInAdvancedFilter": {
      "description": "NumberIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "x-ms-discriminator-value": "NumberIn"
    },
    "StorageBlobDeadLetterDestination": {
      "description": "Information about the storage blob based dead letter destination.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeadLetterDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/StorageBlobDeadLetterDestinationProperties",
          "description": "The properties of the Storage Blob based deadletter destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "StorageBlob"
    },
    "NumberNotInAdvancedFilter": {
      "description": "NumberNotIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        }
      },
      "x-ms-discriminator-value": "NumberNotIn"
    },
    "NumberLessThanAdvancedFilter": {
      "description": "NumberLessThan Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberLessThan"
    },
    "NumberGreaterThanAdvancedFilter": {
      "description": "NumberGreaterThan Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberGreaterThan"
    },
    "NumberLessThanOrEqualsAdvancedFilter": {
      "description": "NumberLessThanOrEquals Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberLessThanOrEquals"
    },
    "NumberGreaterThanOrEqualsAdvancedFilter": {
      "description": "NumberGreaterThanOrEquals Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "format": "double",
          "description": "The filter value.",
          "type": "number"
        }
      },
      "x-ms-discriminator-value": "NumberGreaterThanOrEquals"
    },
    "BoolEqualsAdvancedFilter": {
      "description": "BoolEquals Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "value": {
          "description": "The boolean filter value.",
          "type": "boolean"
        }
      },
      "x-ms-discriminator-value": "BoolEquals"
    },
    "StringInAdvancedFilter": {
      "description": "StringIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringIn"
    },
    "StringNotInAdvancedFilter": {
      "description": "StringNotIn Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringNotIn"
    },
    "StringBeginsWithAdvancedFilter": {
      "description": "StringBeginsWith Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringBeginsWith"
    },
    "StringEndsWithAdvancedFilter": {
      "description": "StringEndsWith Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringEndsWith"
    },
    "StringContainsAdvancedFilter": {
      "description": "StringContains Advanced Filter.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AdvancedFilter"
        }
      ],
      "properties": {
        "values": {
          "description": "The set of filter values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-ms-discriminator-value": "StringContains"
    },
    "AdvancedFilter": {
      "description": "This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.",
      "required": [
        "operatorType"
      ],
      "type": "object",
      "properties": {
        "operatorType": {
          "description": "The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.",
          "enum": [
            "NumberIn",
            "NumberNotIn",
            "NumberLessThan",
            "NumberGreaterThan",
            "NumberLessThanOrEquals",
            "NumberGreaterThanOrEquals",
            "BoolEquals",
            "StringIn",
            "StringNotIn",
            "StringBeginsWith",
            "StringEndsWith",
            "StringContains"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AdvancedFilterOperatorType",
            "modelAsString": true
          }
        },
        "key": {
          "description": "The field/property in the event based on which you want to filter.",
          "type": "string"
        }
      },
      "discriminator": "operatorType"
    },
    "WebHookEventSubscriptionDestination": {
      "description": "Information about the webhook destination for an event subscription",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/WebHookEventSubscriptionDestinationProperties",
          "description": "WebHook Properties of the event subscription destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "WebHook"
    },
    "DeadLetterDestination": {
      "description": "Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.",
      "required": [
        "endpointType"
      ],
      "type": "object",
      "properties": {
        "endpointType": {
          "description": "Type of the endpoint for the dead letter destination",
          "enum": [
            "StorageBlob"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DeadLetterEndPointType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "endpointType"
    },
    "EventHubEventSubscriptionDestinationProperties": {
      "description": "The properties for a event hub destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "EventHubEventSubscriptionDestination": {
      "description": "Information about the event hub destination for an event subscription",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventHubEventSubscriptionDestinationProperties",
          "description": "Event Hub Properties of the event subscription destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "EventHub"
    },
    "StorageQueueEventSubscriptionDestinationProperties": {
      "description": "The properties for a storage queue destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.",
          "type": "string"
        },
        "queueName": {
          "description": "The name of the Storage queue under a storage account that is the destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "StorageQueueEventSubscriptionDestination": {
      "description": "Information about the storage queue destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/StorageQueueEventSubscriptionDestinationProperties",
          "description": "Storage Queue Properties of the event subscription destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "StorageQueue"
    },
    "HybridConnectionEventSubscriptionDestinationProperties": {
      "description": "The properties for a hybrid connection destination.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource ID of an hybrid connection that is the destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "HybridConnectionEventSubscriptionDestination": {
      "description": "Information about the HybridConnection destination for an event subscription.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/HybridConnectionEventSubscriptionDestinationProperties",
          "description": "Hybrid connection Properties of the event subscription destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "HybridConnection"
    },
    "ServiceBusQueueEventSubscriptionDestinationProperties": {
      "description": "The properties that represent the Service Bus destination of an event subscription.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "ServiceBusQueueEventSubscriptionDestination": {
      "description": "Information about the service bus destination for an event subscription",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventSubscriptionDestination"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ServiceBusQueueEventSubscriptionDestinationProperties",
          "description": "Service Bus Properties of the event subscription destination",
          "x-ms-client-flatten": true
        }
      },
      "x-ms-discriminator-value": "ServiceBusQueue"
    },
    "EventSubscriptionDestination": {
      "description": "Information about the destination for an event subscription",
      "required": [
        "endpointType"
      ],
      "type": "object",
      "properties": {
        "endpointType": {
          "description": "Type of the endpoint for the event subscription destination",
          "enum": [
            "WebHook",
            "EventHub",
            "StorageQueue",
            "HybridConnection",
            "ServiceBusQueue"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EndpointType",
            "modelAsString": true
          }
        }
      },
      "discriminator": "endpointType"
    },
    "EventSubscription": {
      "description": "Event Subscription",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventSubscriptionProperties",
          "description": "Properties of the event subscription",
          "x-ms-client-flatten": true
        }
      }
    },
    "EventSubscriptionUpdateParameters": {
      "description": "Properties of the Event Subscription update",
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/EventSubscriptionDestination",
          "description": "Information about the destination where events have to be delivered for the event subscription."
        },
        "filter": {
          "$ref": "#/definitions/EventSubscriptionFilter",
          "description": "Information about the filter for the event subscription."
        },
        "labels": {
          "description": "List of user defined labels.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expirationTimeUtc": {
          "format": "date-time",
          "description": "Information about the expiration time for the event subscription.",
          "type": "string"
        },
        "eventDeliverySchema": {
          "description": "The event delivery schema for the event subscription.",
          "enum": [
            "EventGridSchema",
            "CloudEventV01Schema",
            "CustomInputSchema"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EventDeliverySchema",
            "modelAsString": true
          }
        },
        "retryPolicy": {
          "$ref": "#/definitions/RetryPolicy",
          "description": "The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events."
        },
        "deadLetterDestination": {
          "$ref": "#/definitions/DeadLetterDestination",
          "description": "The DeadLetter destination of the event subscription."
        }
      }
    },
    "EventSubscriptionFullUrl": {
      "description": "Full endpoint url of an event subscription",
      "type": "object",
      "properties": {
        "endpointUrl": {
          "description": "The URL that represents the endpoint of the destination of an event subscription.",
          "type": "string"
        }
      }
    },
    "EventSubscriptionsListResult": {
      "description": "Result of the List EventSubscriptions operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of EventSubscriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventSubscription"
          }
        },
        "nextLink": {
          "description": "A link for the next page of event subscriptions",
          "type": "string"
        }
      }
    },
    "OperationsListResult": {
      "description": "Result of the List Operations operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of operations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          }
        }
      }
    },
    "Operation": {
      "description": "Represents an operation returned by the GetOperations request",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the operation",
          "type": "string"
        },
        "display": {
          "$ref": "#/definitions/OperationInfo",
          "description": "Display name of the operation"
        },
        "origin": {
          "description": "Origin of the operation",
          "type": "string"
        },
        "properties": {
          "description": "Properties of the operation",
          "type": "object",
          "x-ms-client-flatten": true
        }
      }
    },
    "OperationInfo": {
      "description": "Information about an operation",
      "type": "object",
      "properties": {
        "provider": {
          "description": "Name of the provider",
          "type": "string"
        },
        "resource": {
          "description": "Name of the resource type",
          "type": "string"
        },
        "operation": {
          "description": "Name of the operation",
          "type": "string"
        },
        "description": {
          "description": "Description of the operation",
          "type": "string"
        }
      }
    },
    "TopicProperties": {
      "description": "Properties of the Topic",
      "type": "object",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the topic.",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TopicProvisioningState",
            "modelAsString": true
          }
        },
        "endpoint": {
          "description": "Endpoint for the topic.",
          "type": "string",
          "readOnly": true
        },
        "inputSchema": {
          "description": "This determines the format that Event Grid should expect for incoming events published to the topic.",
          "enum": [
            "EventGridSchema",
            "CustomEventSchema",
            "CloudEventV01Schema"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "InputSchema",
            "modelAsString": true
          },
          "default": "EventGridSchema"
        },
        "inputSchemaMapping": {
          "$ref": "#/definitions/InputSchemaMapping",
          "description": "This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema."
        }
      }
    },
    "Topic": {
      "description": "EventGrid Topic",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/TopicProperties",
          "description": "Properties of the topic",
          "x-ms-client-flatten": true
        }
      }
    },
    "TopicUpdateParameters": {
      "description": "Properties of the Topic update",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Tags of the resource",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TopicsListResult": {
      "description": "Result of the List Topics operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of Topics",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topic"
          }
        },
        "nextLink": {
          "description": "A link for the next page of topics",
          "type": "string"
        }
      }
    },
    "TopicSharedAccessKeys": {
      "description": "Shared access keys of the Topic",
      "type": "object",
      "properties": {
        "key1": {
          "description": "Shared access key1 for the topic.",
          "type": "string"
        },
        "key2": {
          "description": "Shared access key2 for the topic.",
          "type": "string"
        }
      }
    },
    "TopicRegenerateKeyRequest": {
      "description": "Topic regenerate share access key request",
      "required": [
        "keyName"
      ],
      "type": "object",
      "properties": {
        "keyName": {
          "description": "Key name to regenerate key1 or key2",
          "type": "string"
        }
      }
    },
    "EventTypesListResult": {
      "description": "Result of the List Event Types operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of event types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventType"
          }
        }
      }
    },
    "EventTypeProperties": {
      "description": "Properties of the event type",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name of the event type.",
          "type": "string"
        },
        "description": {
          "description": "Description of the event type.",
          "type": "string"
        },
        "schemaUrl": {
          "description": "Url of the schema for this event type.",
          "type": "string"
        },
        "isInDefaultSet": {
          "description": "IsInDefaultSet flag of the event type.",
          "type": "boolean"
        }
      }
    },
    "EventType": {
      "description": "Event Type for a subject under a topic",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/EventTypeProperties",
          "description": "Properties of the event type.",
          "x-ms-client-flatten": true
        }
      }
    },
    "TopicTypesListResult": {
      "description": "Result of the List Topic Types operation",
      "type": "object",
      "properties": {
        "value": {
          "description": "A collection of topic types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopicTypeInfo"
          }
        }
      }
    },
    "TopicTypeProperties": {
      "description": "Properties of a topic type.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "Namespace of the provider of the topic type.",
          "type": "string"
        },
        "displayName": {
          "description": "Display Name for the topic type.",
          "type": "string"
        },
        "description": {
          "description": "Description of the topic type.",
          "type": "string"
        },
        "resourceRegionType": {
          "description": "Region type of the resource.",
          "enum": [
            "RegionalResource",
            "GlobalResource"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ResourceRegionType",
            "modelAsString": true
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the topic type",
          "enum": [
            "Creating",
            "Updating",
            "Deleting",
            "Succeeded",
            "Canceled",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TopicTypeProvisioningState",
            "modelAsString": true
          }
        },
        "supportedLocations": {
          "description": "List of locations supported by this topic type.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TopicTypeInfo": {
      "description": "Properties of a topic type info.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/TopicTypeProperties",
          "description": "Properties of the topic type info",
          "x-ms-client-flatten": true
        }
      }
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
      "required": true,
      "type": "string"
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to be used with the client request.",
      "required": true,
      "type": "string"
    },
    "FilterParameter": {
      "name": "$filter",
      "in": "query",
      "description": "Filter the results using OData syntax.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "TopParameter": {
      "name": "$top",
      "in": "query",
      "description": "The number of results to return.",
      "required": false,
      "type": "integer",
      "x-ms-parameter-location": "method"
    },
    "LabelFilterParameter": {
      "name": "label",
      "in": "query",
      "description": "The label used to filter the results for event subscriptions list.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "x-internal-service-id": "eventgrid",
  "x-internal-service-name": "Event Grid",
  "x-internal-toc-name": "Event Subscriptions",
  "x-internal-product-uid": null,
  "x-internal-split-type": "Operation",
  "x-internal-operation-id": "Delete",
  "x-internal-operation-name": "Delete"
}