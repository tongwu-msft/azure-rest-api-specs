### YamlMime:RESTOperation
uid: management.azure.com.eventhub.stable.networkrulesets.createorupdatenetworkruleset
name: Create Or Update Network Rule Set
service: Event Hubs
groupName: Network Rule Sets
apiVersion: 2021-11-01
summary: Create or update NetworkRuleSet for a Namespace.
consumes:
- application/json
produces:
- application/json
paths:
- content: PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default?api-version=2021-11-01
uriParameters:
- name: subscriptionId
  in: path
  isRequired: true
  description: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  types:
  - uid: string
- name: resourceGroupName
  in: path
  isRequired: true
  description: Name of the resource group within the azure subscription.
  types:
  - uid: string
- name: namespaceName
  in: path
  isRequired: true
  description: The Namespace name
  types:
  - uid: string
- name: api-version
  in: query
  isRequired: true
  description: Client API Version.
  types:
  - uid: string
responses:
- name: 200 OK
  description: Namespace NetworkRuleSet successfully returned.
  types:
  - uid: NetworkRuleSet
- name: Other Status Codes
  description: ServiceBus error response describing why the operation failed.
  types:
  - uid: ErrorResponse
requestBody:
- name: default
  parameters:
  - name: properties.trustedServiceAccessEnabled
    in: body
    description: Value that indicates whether Trusted Service Access is Enabled or not.
    types:
    - uid: boolean
  - name: properties.defaultAction
    in: body
    description: Default Action for Network Rule Set
    types:
    - uid: DefaultAction
  - name: properties.virtualNetworkRules
    in: body
    description: List VirtualNetwork Rules
    types:
    - uid: NWRuleSetVirtualNetworkRules
      isArray: true
  - name: properties.ipRules
    in: body
    description: List of IpRules
    types:
    - uid: NWRuleSetIpRules
      isArray: true
  - name: properties.publicNetworkAccess
    in: body
    description: This determines if traffic is allowed over public network. By default it is enabled.
    types:
    - uid: PublicNetworkAccessFlag
requestHeader: []
definitions:
- name: systemData
  description: Metadata pertaining to creation and last modification of the resource.
  kind: object
  properties:
  - name: createdBy
    description: The identity that created the resource.
    types:
    - uid: string
  - name: createdByType
    description: The type of identity that created the resource.
    types:
    - uid: createdByType
  - name: createdAt
    description: The timestamp of resource creation (UTC).
    types:
    - uid: string
  - name: lastModifiedBy
    description: The identity that last modified the resource.
    types:
    - uid: string
  - name: lastModifiedByType
    description: The type of identity that last modified the resource.
    types:
    - uid: createdByType
  - name: lastModifiedAt
    description: The type of identity that last modified the resource.
    types:
    - uid: string
- name: NWRuleSetVirtualNetworkRules
  description: The response from the List namespace operation.
  kind: object
  properties:
  - name: subnet
    description: Subnet properties
    types:
    - uid: Subnet
  - name: ignoreMissingVnetServiceEndpoint
    description: Value that indicates whether to ignore missing Vnet Service Endpoint
    types:
    - uid: boolean
- name: NWRuleSetIpRules
  description: The response from the List namespace operation.
  kind: object
  properties:
  - name: ipMask
    description: IP Mask
    types:
    - uid: string
  - name: action
    description: The IP Filter Action
    types:
    - uid: NetworkRuleIPAction
- name: NetworkRuleSet
  description: Description of topic resource.
  kind: object
  properties:
  - name: systemData
    isReadyOnly: true
    description: The system meta data relating to this resource.
    types:
    - uid: systemData
  - name: properties.trustedServiceAccessEnabled
    description: Value that indicates whether Trusted Service Access is Enabled or not.
    types:
    - uid: boolean
  - name: properties.defaultAction
    description: Default Action for Network Rule Set
    types:
    - uid: DefaultAction
  - name: properties.virtualNetworkRules
    description: List VirtualNetwork Rules
    types:
    - uid: NWRuleSetVirtualNetworkRules
      isArray: true
  - name: properties.ipRules
    description: List of IpRules
    types:
    - uid: NWRuleSetIpRules
      isArray: true
  - name: properties.publicNetworkAccess
    description: This determines if traffic is allowed over public network. By default it is enabled.
    types:
    - uid: PublicNetworkAccessFlag
    defaultValue: Enabled
  - name: id
    isReadyOnly: true
    description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    types:
    - uid: string
  - name: name
    isReadyOnly: true
    description: The name of the resource
    types:
    - uid: string
  - name: type
    isReadyOnly: true
    description: The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
    types:
    - uid: string
  - name: location
    isReadyOnly: true
    description: The geo-location where the resource lives
    types:
    - uid: string
- name: ErrorResponse
  description: Error response indicates Event Hub service is not able to process the incoming request. The reason is provided in the error message.
  kind: object
  properties:
  - name: error
    description: The error object.
    types:
    - uid: ErrorDetail
- name: createdByType
  description: The type of identity that created the resource.
  kind: enum
  properties:
  - name: User
    types:
    - uid: string
  - name: Application
    types:
    - uid: string
  - name: ManagedIdentity
    types:
    - uid: string
  - name: Key
    types:
    - uid: string
- name: Subnet
  description: Properties supplied for Subnet
  kind: object
  properties:
  - name: id
    description: Resource ID of Virtual Network Subnet
    types:
    - uid: string
- name: NetworkRuleIPAction
  description: The IP Filter Action
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
- name: DefaultAction
  description: Default Action for Network Rule Set
  kind: enum
  properties:
  - name: Allow
    types:
    - uid: string
  - name: Deny
    types:
    - uid: string
- name: PublicNetworkAccessFlag
  description: This determines if traffic is allowed over public network. By default it is enabled.
  kind: enum
  properties:
  - name: Enabled
    types:
    - uid: string
  - name: Disabled
    types:
    - uid: string
- name: ErrorDetail
  description: The error detail.
  kind: object
  properties:
  - name: code
    isReadyOnly: true
    description: The error code.
    types:
    - uid: string
  - name: message
    isReadyOnly: true
    description: The error message.
    types:
    - uid: string
  - name: target
    isReadyOnly: true
    description: The error target.
    types:
    - uid: string
  - name: details
    isReadyOnly: true
    description: The error details.
    types:
    - uid: ErrorDetail
      isArray: true
  - name: additionalInfo
    isReadyOnly: true
    description: The error additional info.
    types:
    - uid: ErrorAdditionalInfo
      isArray: true
- name: ErrorAdditionalInfo
  description: The resource management error additional info.
  kind: object
  properties:
  - name: type
    isReadyOnly: true
    description: The additional info type.
    types:
    - uid: string
  - name: info
    isReadyOnly: true
    description: The additional info.
    types:
    - uid: object
examples:
- name: NameSpaceNetworkRuleSetCreate
  request:
    uri: PUT https://management.azure.com/subscriptions/Subscription/resourceGroups/ResourceGroup/providers/Microsoft.EventHub/namespaces/sdk-Namespace-6019/networkRuleSets/default?api-version=2021-11-01
    body: >-
      {
        "properties": {
          "defaultAction": "Deny",
          "virtualNetworkRules": [
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"
              },
              "ignoreMissingVnetServiceEndpoint": true
            },
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"
              },
              "ignoreMissingVnetServiceEndpoint": false
            },
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"
              },
              "ignoreMissingVnetServiceEndpoint": false
            }
          ],
          "ipRules": [
            {
              "ipMask": "1.1.1.1",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.2",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.3",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.4",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.5",
              "action": "Allow"
            }
          ]
        }
      }
    codeTab: |+
      # [HTTP](#tab/HTTP)
      ``` http
      PUT https://management.azure.com/subscriptions/Subscription/resourceGroups/ResourceGroup/providers/Microsoft.EventHub/namespaces/sdk-Namespace-6019/networkRuleSets/default?api-version=2021-11-01

      {
        "properties": {
          "defaultAction": "Deny",
          "virtualNetworkRules": [
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"
              },
              "ignoreMissingVnetServiceEndpoint": true
            },
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"
              },
              "ignoreMissingVnetServiceEndpoint": false
            },
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"
              },
              "ignoreMissingVnetServiceEndpoint": false
            }
          ],
          "ipRules": [
            {
              "ipMask": "1.1.1.1",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.2",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.3",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.4",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.5",
              "action": "Allow"
            }
          ]
        }
      }

      ```

      # [Java](#tab/Java)
      ``` java
      import com.azure.core.util.Context;
      import com.azure.resourcemanager.eventhubs.fluent.models.NetworkRuleSetInner;
      import com.azure.resourcemanager.eventhubs.models.DefaultAction;
      import com.azure.resourcemanager.eventhubs.models.NWRuleSetIpRules;
      import com.azure.resourcemanager.eventhubs.models.NWRuleSetVirtualNetworkRules;
      import com.azure.resourcemanager.eventhubs.models.NetworkRuleIpAction;
      import com.azure.resourcemanager.eventhubs.models.Subnet;
      import java.util.Arrays;

      /** Samples for Namespaces CreateOrUpdateNetworkRuleSet. */
      public final class Main {
          /*
           * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/examples/NameSpaces/VirtualNetworkRule/EHNetworkRuleSetCreate.json
           */
          /**
           * Sample code: NameSpaceNetworkRuleSetCreate.
           *
           * @param azure The entry point for accessing resource management APIs in Azure.
           */
          public static void nameSpaceNetworkRuleSetCreate(com.azure.resourcemanager.AzureResourceManager azure) {
              azure
                  .eventHubs()
                  .manager()
                  .serviceClient()
                  .getNamespaces()
                  .createOrUpdateNetworkRuleSetWithResponse(
                      "ResourceGroup",
                      "sdk-Namespace-6019",
                      new NetworkRuleSetInner()
                          .withDefaultAction(DefaultAction.DENY)
                          .withVirtualNetworkRules(
                              Arrays
                                  .asList(
                                      new NWRuleSetVirtualNetworkRules()
                                          .withSubnet(
                                              new Subnet()
                                                  .withId(
                                                      "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"))
                                          .withIgnoreMissingVnetServiceEndpoint(true),
                                      new NWRuleSetVirtualNetworkRules()
                                          .withSubnet(
                                              new Subnet()
                                                  .withId(
                                                      "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"))
                                          .withIgnoreMissingVnetServiceEndpoint(false),
                                      new NWRuleSetVirtualNetworkRules()
                                          .withSubnet(
                                              new Subnet()
                                                  .withId(
                                                      "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"))
                                          .withIgnoreMissingVnetServiceEndpoint(false)))
                          .withIpRules(
                              Arrays
                                  .asList(
                                      new NWRuleSetIpRules().withIpMask("1.1.1.1").withAction(NetworkRuleIpAction.ALLOW),
                                      new NWRuleSetIpRules().withIpMask("1.1.1.2").withAction(NetworkRuleIpAction.ALLOW),
                                      new NWRuleSetIpRules().withIpMask("1.1.1.3").withAction(NetworkRuleIpAction.ALLOW),
                                      new NWRuleSetIpRules().withIpMask("1.1.1.4").withAction(NetworkRuleIpAction.ALLOW),
                                      new NWRuleSetIpRules().withIpMask("1.1.1.5").withAction(NetworkRuleIpAction.ALLOW))),
                      Context.NONE);
          }
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-java/blob/azure-resourcemanager_2.16.0/sdk/resourcemanager/azure-resourcemanager/README.md) on how to add the SDK to your project and authenticate.
      # [Go](#tab/Go)
      ``` go
      package armeventhub_test

      import (
      	"context"
      	"log"

      	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
      	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
      	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/eventhub/armeventhub"
      )

      // Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/examples/NameSpaces/VirtualNetworkRule/EHNetworkRuleSetCreate.json
      func ExampleNamespacesClient_CreateOrUpdateNetworkRuleSet() {
      	cred, err := azidentity.NewDefaultAzureCredential(nil)
      	if err != nil {
      		log.Fatalf("failed to obtain a credential: %v", err)
      	}
      	ctx := context.Background()
      	client, err := armeventhub.NewNamespacesClient("Subscription", cred, nil)
      	if err != nil {
      		log.Fatalf("failed to create client: %v", err)
      	}
      	res, err := client.CreateOrUpdateNetworkRuleSet(ctx,
      		"ResourceGroup",
      		"sdk-Namespace-6019",
      		armeventhub.NetworkRuleSet{
      			Properties: &armeventhub.NetworkRuleSetProperties{
      				DefaultAction: to.Ptr(armeventhub.DefaultActionDeny),
      				IPRules: []*armeventhub.NWRuleSetIPRules{
      					{
      						Action: to.Ptr(armeventhub.NetworkRuleIPActionAllow),
      						IPMask: to.Ptr("1.1.1.1"),
      					},
      					{
      						Action: to.Ptr(armeventhub.NetworkRuleIPActionAllow),
      						IPMask: to.Ptr("1.1.1.2"),
      					},
      					{
      						Action: to.Ptr(armeventhub.NetworkRuleIPActionAllow),
      						IPMask: to.Ptr("1.1.1.3"),
      					},
      					{
      						Action: to.Ptr(armeventhub.NetworkRuleIPActionAllow),
      						IPMask: to.Ptr("1.1.1.4"),
      					},
      					{
      						Action: to.Ptr(armeventhub.NetworkRuleIPActionAllow),
      						IPMask: to.Ptr("1.1.1.5"),
      					}},
      				VirtualNetworkRules: []*armeventhub.NWRuleSetVirtualNetworkRules{
      					{
      						IgnoreMissingVnetServiceEndpoint: to.Ptr(true),
      						Subnet: &armeventhub.Subnet{
      							ID: to.Ptr("/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"),
      						},
      					},
      					{
      						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
      						Subnet: &armeventhub.Subnet{
      							ID: to.Ptr("/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"),
      						},
      					},
      					{
      						IgnoreMissingVnetServiceEndpoint: to.Ptr(false),
      						Subnet: &armeventhub.Subnet{
      							ID: to.Ptr("/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"),
      						},
      					}},
      			},
      		},
      		nil)
      	if err != nil {
      		log.Fatalf("failed to finish the request: %v", err)
      	}
      	// TODO: use response item
      	_ = res
      }

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-go/blob/sdk%2Fresourcemanager%2Feventhub%2Farmeventhub%2Fv1.0.0/sdk/resourcemanager/eventhub/armeventhub/README.md) on how to add the SDK to your project and authenticate.
      # [JavsScirpt](#tab/JavsScirpt)
      ``` js
      const { EventHubManagementClient } = require("@azure/arm-eventhub");
      const { DefaultAzureCredential } = require("@azure/identity");

      /**
       * This sample demonstrates how to Create or update NetworkRuleSet for a Namespace.
       *
       * @summary Create or update NetworkRuleSet for a Namespace.
       * x-ms-original-file: specification/eventhub/resource-manager/Microsoft.EventHub/stable/2021-11-01/examples/NameSpaces/VirtualNetworkRule/EHNetworkRuleSetCreate.json
       */
      async function nameSpaceNetworkRuleSetCreate() {
        const subscriptionId = "Subscription";
        const resourceGroupName = "ResourceGroup";
        const namespaceName = "sdk-Namespace-6019";
        const parameters = {
          defaultAction: "Deny",
          ipRules: [
            { action: "Allow", ipMask: "1.1.1.1" },
            { action: "Allow", ipMask: "1.1.1.2" },
            { action: "Allow", ipMask: "1.1.1.3" },
            { action: "Allow", ipMask: "1.1.1.4" },
            { action: "Allow", ipMask: "1.1.1.5" },
          ],
          virtualNetworkRules: [
            {
              ignoreMissingVnetServiceEndpoint: true,
              subnet: {
                id: "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2",
              },
            },
            {
              ignoreMissingVnetServiceEndpoint: false,
              subnet: {
                id: "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3",
              },
            },
            {
              ignoreMissingVnetServiceEndpoint: false,
              subnet: {
                id: "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6",
              },
            },
          ],
        };
        const credential = new DefaultAzureCredential();
        const client = new EventHubManagementClient(credential, subscriptionId);
        const result = await client.namespaces.createOrUpdateNetworkRuleSet(
          resourceGroupName,
          namespaceName,
          parameters
        );
        console.log(result);
      }

      nameSpaceNetworkRuleSetCreate().catch(console.error);

      ```
      Read this [SDK documentation](https://github.com/Azure/azure-sdk-for-js/blob/%40azure%2Farm-eventhub_5.0.1/sdk/eventhub/arm-eventhub/README.md) on how to add the SDK to your project and authenticate.
  responses:
  - statusCode: "200"
    body: >-
      {
        "id": "/subscriptions/854d368f-1828-428f-8f3c-f2affa9b2f7d/resourceGroups/resourcegroupid/providers/Microsoft.EventHub/namespaces/sdk-Namespace-9659/networkruleset/default",
        "name": "default",
        "type": "Microsoft.EventHub/Namespaces/NetworkRuleSet",
        "properties": {
          "defaultAction": "Deny",
          "publicNetworkAccess": "Enabled",
          "virtualNetworkRules": [
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet2"
              },
              "ignoreMissingVnetServiceEndpoint": true
            },
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet3"
              },
              "ignoreMissingVnetServiceEndpoint": false
            },
            {
              "subnet": {
                "id": "/subscriptions/subscriptionid/resourcegroups/resourcegroupid/providers/Microsoft.Network/virtualNetworks/myvn/subnets/subnet6"
              },
              "ignoreMissingVnetServiceEndpoint": false
            }
          ],
          "ipRules": [
            {
              "ipMask": "1.1.1.1",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.2",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.3",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.4",
              "action": "Allow"
            },
            {
              "ipMask": "1.1.1.5",
              "action": "Allow"
            }
          ]
        }
      }
security:
- name: azure_auth
  type: oauth2
  description: Azure Active Directory OAuth2 Flow
  flow: implicit
  authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
  scopes:
  - name: user_impersonation
    description: impersonate your user account
metadata:
  description: Learn more about Event Hubs service - Create or update NetworkRuleSet for a Namespace.
errorCodes: []
